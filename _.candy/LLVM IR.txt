; ModuleID = 'module'
source_filename = "module"

@"Builtins::equals:6" = global ptr null
@"Builtins::fitsInRustU128:10" = global ptr null
@"Builtins::fitsInRustU128:16" = global ptr null
@"Builtins::fitsInRustU128:5" = global ptr null
@"Builtins::fitsInRustU128:8" = global ptr null
@"Builtins::functionRun:11" = global ptr null
@"Builtins::functionRun:16" = global ptr null
@"Builtins::functionRun:22" = global ptr null
@"Builtins::functionRun:5" = global ptr null
@"Builtins::getArgumentCount:11" = global ptr null
@"Builtins::getArgumentCount:5" = global ptr null
@"Builtins::ifElse:1" = global ptr null
@"Builtins::ifElse:11" = global ptr null
@"Builtins::ifElse:14" = global ptr null
@"Builtins::ifElse:19" = global ptr null
@"Builtins::ifElse:25" = global ptr null
@"Builtins::ifElse:28" = global ptr null
@"Builtins::ifElse:33" = global ptr null
@"Builtins::ifElse:41" = global ptr null
@"Builtins::ifElse:5" = global ptr null
@"Builtins::intAdd:11" = global ptr null
@"Builtins::intAdd:18" = global ptr null
@"Builtins::intAdd:5" = global ptr null
@"Builtins::intBitLength:11" = global ptr null
@"Builtins::intBitLength:5" = global ptr null
@"Builtins::intBitwiseAnd:11" = global ptr null
@"Builtins::intBitwiseAnd:18" = global ptr null
@"Builtins::intBitwiseAnd:5" = global ptr null
@"Builtins::intBitwiseOr:11" = global ptr null
@"Builtins::intBitwiseOr:18" = global ptr null
@"Builtins::intBitwiseOr:5" = global ptr null
@"Builtins::intBitwiseXor:11" = global ptr null
@"Builtins::intBitwiseXor:18" = global ptr null
@"Builtins::intBitwiseXor:5" = global ptr null
@"Builtins::intCompareTo:11" = global ptr null
@"Builtins::intCompareTo:18" = global ptr null
@"Builtins::intCompareTo:5" = global ptr null
@"Builtins::intDivideTruncating:11" = global ptr null
@"Builtins::intDivideTruncating:17" = global ptr null
@"Builtins::intDivideTruncating:25" = global ptr null
@"Builtins::intDivideTruncating:32" = global ptr null
@"Builtins::intDivideTruncating:5" = global ptr null
@"Builtins::intModulo:11" = global ptr null
@"Builtins::intModulo:17" = global ptr null
@"Builtins::intModulo:25" = global ptr null
@"Builtins::intModulo:32" = global ptr null
@"Builtins::intModulo:5" = global ptr null
@"Builtins::intMultiply:11" = global ptr null
@"Builtins::intMultiply:18" = global ptr null
@"Builtins::intMultiply:5" = global ptr null
@"Builtins::intParse:11" = global ptr null
@"Builtins::intParse:5" = global ptr null
@"Builtins::intRemainder:11" = global ptr null
@"Builtins::intRemainder:17" = global ptr null
@"Builtins::intRemainder:25" = global ptr null
@"Builtins::intRemainder:32" = global ptr null
@"Builtins::intRemainder:5" = global ptr null
@"Builtins::intShiftLeft:11" = global ptr null
@"Builtins::intShiftLeft:14" = global ptr null
@"Builtins::intShiftLeft:23" = global ptr null
@"Builtins::intShiftLeft:24" = global ptr null
@"Builtins::intShiftLeft:26:0" = global ptr null
@"Builtins::intShiftLeft:27" = global ptr null
@"Builtins::intShiftLeft:29" = global ptr null
@"Builtins::intShiftLeft:30" = global ptr null
@"Builtins::intShiftLeft:31" = global ptr null
@"Builtins::intShiftLeft:34" = global ptr null
@"Builtins::intShiftLeft:42" = global ptr null
@"Builtins::intShiftLeft:49" = global ptr null
@"Builtins::intShiftLeft:5" = global ptr null
@"Builtins::intShiftRight:11" = global ptr null
@"Builtins::intShiftRight:14" = global ptr null
@"Builtins::intShiftRight:23" = global ptr null
@"Builtins::intShiftRight:24" = global ptr null
@"Builtins::intShiftRight:26:0" = global ptr null
@"Builtins::intShiftRight:27" = global ptr null
@"Builtins::intShiftRight:29" = global ptr null
@"Builtins::intShiftRight:30" = global ptr null
@"Builtins::intShiftRight:31" = global ptr null
@"Builtins::intShiftRight:34" = global ptr null
@"Builtins::intShiftRight:42" = global ptr null
@"Builtins::intShiftRight:49" = global ptr null
@"Builtins::intShiftRight:5" = global ptr null
@"Builtins::intSubtract:11" = global ptr null
@"Builtins::intSubtract:18" = global ptr null
@"Builtins::intSubtract:5" = global ptr null
@"Builtins::isLessThanOrEqualTo:11" = global ptr null
@"Builtins::isLessThanOrEqualTo:18" = global ptr null
@"Builtins::isLessThanOrEqualTo:19" = global ptr null
@"Builtins::isLessThanOrEqualTo:5" = global ptr null
@"Builtins::isNonNegative:12" = global ptr null
@"Builtins::isNonNegative:13" = global ptr null
@"Builtins::isNonNegative:5" = global ptr null
@"Builtins::listFilled:10" = global ptr null
@"Builtins::listFilled:17" = global ptr null
@"Builtins::listFilled:5" = global ptr null
@"Builtins::listFilled:8" = global ptr null
@"Builtins::listGet:11" = global ptr null
@"Builtins::listGet:14" = global ptr null
@"Builtins::listGet:16" = global ptr null
@"Builtins::listGet:24" = global ptr null
@"Builtins::listGet:25" = global ptr null
@"Builtins::listGet:30" = global ptr null
@"Builtins::listGet:37" = global ptr null
@"Builtins::listGet:5" = global ptr null
@"Builtins::listInsert:11" = global ptr null
@"Builtins::listInsert:14" = global ptr null
@"Builtins::listInsert:16" = global ptr null
@"Builtins::listInsert:24" = global ptr null
@"Builtins::listInsert:25" = global ptr null
@"Builtins::listInsert:27" = global ptr null
@"Builtins::listInsert:35" = global ptr null
@"Builtins::listInsert:5" = global ptr null
@"Builtins::listLength:11" = global ptr null
@"Builtins::listLength:5" = global ptr null
@"Builtins::listRemoveAt:11" = global ptr null
@"Builtins::listRemoveAt:14" = global ptr null
@"Builtins::listRemoveAt:16" = global ptr null
@"Builtins::listRemoveAt:21" = global ptr null
@"Builtins::listRemoveAt:22" = global ptr null
@"Builtins::listRemoveAt:27" = global ptr null
@"Builtins::listRemoveAt:34" = global ptr null
@"Builtins::listRemoveAt:5" = global ptr null
@"Builtins::listReplace:11" = global ptr null
@"Builtins::listReplace:14" = global ptr null
@"Builtins::listReplace:16" = global ptr null
@"Builtins::listReplace:21" = global ptr null
@"Builtins::listReplace:22" = global ptr null
@"Builtins::listReplace:27" = global ptr null
@"Builtins::listReplace:35" = global ptr null
@"Builtins::listReplace:5" = global ptr null
@"Builtins::not:1" = global ptr null
@"Builtins::print:11" = global ptr null
@"Builtins::print:5" = global ptr null
@"Builtins::structGet:12" = global ptr null
@"Builtins::structGet:21" = global ptr null
@"Builtins::structGet:22" = global ptr null
@"Builtins::structGet:24:0" = global ptr null
@"Builtins::structGet:25" = global ptr null
@"Builtins::structGet:28" = global ptr null
@"Builtins::structGet:29" = global ptr null
@"Builtins::structGet:31:0" = global ptr null
@"Builtins::structGet:32" = global ptr null
@"Builtins::structGet:34" = global ptr null
@"Builtins::structGet:35" = global ptr null
@"Builtins::structGet:36" = global ptr null
@"Builtins::structGet:37" = global ptr null
@"Builtins::structGet:38" = global ptr null
@"Builtins::structGet:45" = global ptr null
@"Builtins::structGet:5" = global ptr null
@"Builtins::structGetKeys:11" = global ptr null
@"Builtins::structGetKeys:5" = global ptr null
@"Builtins::structHasKey:12" = global ptr null
@"Builtins::structHasKey:5" = global ptr null
@"Builtins::tagGetValue:11" = global ptr null
@"Builtins::tagGetValue:13" = global ptr null
@"Builtins::tagGetValue:19" = global ptr null
@"Builtins::tagGetValue:5" = global ptr null
@"Builtins::tagHasValue:11" = global ptr null
@"Builtins::tagHasValue:5" = global ptr null
@"Builtins::tagWithoutValue:11" = global ptr null
@"Builtins::tagWithoutValue:5" = global ptr null
@"Builtins::textCharacters:11" = global ptr null
@"Builtins::textCharacters:5" = global ptr null
@"Builtins::textConcatenate:11" = global ptr null
@"Builtins::textConcatenate:18" = global ptr null
@"Builtins::textConcatenate:5" = global ptr null
@"Builtins::textContains:11" = global ptr null
@"Builtins::textContains:18" = global ptr null
@"Builtins::textContains:5" = global ptr null
@"Builtins::textEndsWith:11" = global ptr null
@"Builtins::textEndsWith:18" = global ptr null
@"Builtins::textEndsWith:5" = global ptr null
@"Builtins::textFromUtf8:11" = global ptr null
@"Builtins::textFromUtf8:5" = global ptr null
@"Builtins::textGetRange:11" = global ptr null
@"Builtins::textGetRange:14" = global ptr null
@"Builtins::textGetRange:16" = global ptr null
@"Builtins::textGetRange:24" = global ptr null
@"Builtins::textGetRange:25" = global ptr null
@"Builtins::textGetRange:27" = global ptr null
@"Builtins::textGetRange:33" = global ptr null
@"Builtins::textGetRange:36" = global ptr null
@"Builtins::textGetRange:38" = global ptr null
@"Builtins::textGetRange:46" = global ptr null
@"Builtins::textGetRange:47" = global ptr null
@"Builtins::textGetRange:49" = global ptr null
@"Builtins::textGetRange:5" = global ptr null
@"Builtins::textGetRange:53" = global ptr null
@"Builtins::textGetRange:55" = global ptr null
@"Builtins::textGetRange:63" = global ptr null
@"Builtins::textIsEmpty:11" = global ptr null
@"Builtins::textIsEmpty:5" = global ptr null
@"Builtins::textLength:11" = global ptr null
@"Builtins::textLength:5" = global ptr null
@"Builtins::textStartsWith:11" = global ptr null
@"Builtins::textStartsWith:18" = global ptr null
@"Builtins::textStartsWith:5" = global ptr null
@"Builtins::textTrimEnd:11" = global ptr null
@"Builtins::textTrimEnd:5" = global ptr null
@"Builtins::textTrimStart:11" = global ptr null
@"Builtins::textTrimStart:5" = global ptr null
@"Builtins::toDebugText:5" = global ptr null
@"Builtins::typeIs:19" = global ptr null
@"Builtins::typeIs:25" = global ptr null
@"Builtins::typeOf:5" = global ptr null
@"Examples::10:10" = global ptr null
@"Examples::10:20" = global ptr null
@"Examples::10:21" = global ptr null
@"Examples::10:29" = global ptr null
@"Examples::10:30" = global ptr null
@"Examples::10:8" = global ptr null
@"anonymous:$generated::needs" = global ptr null
@fun_candy_builtin_equals = global ptr null
@fun_candy_builtin_get_argument_count = global ptr null
@fun_candy_builtin_if_else = global ptr null
@fun_candy_builtin_int_add = global ptr null
@fun_candy_builtin_int_bit_length = global ptr null
@fun_candy_builtin_int_bitwise_and = global ptr null
@fun_candy_builtin_int_bitwise_or = global ptr null
@fun_candy_builtin_int_bitwise_xor = global ptr null
@fun_candy_builtin_int_compare_to = global ptr null
@fun_candy_builtin_int_divide_truncating = global ptr null
@fun_candy_builtin_int_modulo = global ptr null
@fun_candy_builtin_int_multiply = global ptr null
@fun_candy_builtin_int_parse = global ptr null
@fun_candy_builtin_int_remainder = global ptr null
@fun_candy_builtin_int_shift_left = global ptr null
@fun_candy_builtin_int_shift_right = global ptr null
@fun_candy_builtin_int_subtract = global ptr null
@fun_candy_builtin_list_filled = global ptr null
@fun_candy_builtin_list_get = global ptr null
@fun_candy_builtin_list_insert = global ptr null
@fun_candy_builtin_list_length = global ptr null
@fun_candy_builtin_list_remove_at = global ptr null
@fun_candy_builtin_list_replace = global ptr null
@fun_candy_builtin_print = global ptr null
@fun_candy_builtin_struct_get = global ptr null
@fun_candy_builtin_struct_get_keys = global ptr null
@fun_candy_builtin_struct_has_key = global ptr null
@fun_candy_builtin_tag_get_value = global ptr null
@fun_candy_builtin_tag_has_value = global ptr null
@fun_candy_builtin_tag_without_value = global ptr null
@fun_candy_builtin_text_characters = global ptr null
@fun_candy_builtin_text_concatenate = global ptr null
@fun_candy_builtin_text_contains = global ptr null
@fun_candy_builtin_text_ends_with = global ptr null
@fun_candy_builtin_text_from_utf8 = global ptr null
@fun_candy_builtin_text_get_range = global ptr null
@fun_candy_builtin_text_is_empty = global ptr null
@fun_candy_builtin_text_length = global ptr null
@fun_candy_builtin_text_starts_with = global ptr null
@fun_candy_builtin_text_trim_end = global ptr null
@fun_candy_builtin_text_trim_start = global ptr null
@fun_candy_builtin_to_debug_text = global ptr null
@fun_candy_builtin_type_of = global ptr null
@tag_Equal = global ptr null
@tag_Equals = global ptr null
@tag_False = global ptr null
@tag_Function = global ptr null
@tag_FunctionRun = global ptr null
@tag_GetArgumentCount = global ptr null
@tag_Greater = global ptr null
@tag_IfElse = global ptr null
@tag_Int = global ptr null
@tag_IntAdd = global ptr null
@tag_IntBitLength = global ptr null
@tag_IntBitwiseAnd = global ptr null
@tag_IntBitwiseOr = global ptr null
@tag_IntBitwiseXor = global ptr null
@tag_IntCompareTo = global ptr null
@tag_IntDivideTruncating = global ptr null
@tag_IntModulo = global ptr null
@tag_IntMultiply = global ptr null
@tag_IntParse = global ptr null
@tag_IntRemainder = global ptr null
@tag_IntShiftLeft = global ptr null
@tag_IntShiftRight = global ptr null
@tag_IntSubtract = global ptr null
@tag_Less = global ptr null
@tag_List = global ptr null
@tag_ListFilled = global ptr null
@tag_ListGet = global ptr null
@tag_ListInsert = global ptr null
@tag_ListLength = global ptr null
@tag_ListRemoveAt = global ptr null
@tag_ListReplace = global ptr null
@tag_Main = global ptr null
@tag_Match = global ptr null
@tag_NoMatch = global ptr null
@tag_Nothing = global ptr null
@tag_Print = global ptr null
@tag_Struct = global ptr null
@tag_StructGet = global ptr null
@tag_StructGetKeys = global ptr null
@tag_StructHasKey = global ptr null
@tag_Tag = global ptr null
@tag_TagGetValue = global ptr null
@tag_TagHasValue = global ptr null
@tag_TagWithoutValue = global ptr null
@tag_Text = global ptr null
@tag_TextCharacters = global ptr null
@tag_TextConcatenate = global ptr null
@tag_TextContains = global ptr null
@tag_TextEndsWith = global ptr null
@tag_TextFromUtf8 = global ptr null
@tag_TextGetRange = global ptr null
@tag_TextIsEmpty = global ptr null
@tag_TextLength = global ptr null
@tag_TextStartsWith = global ptr null
@tag_TextTrimEnd = global ptr null
@tag_TextTrimStart = global ptr null
@tag_ToDebugText = global ptr null
@tag_True = global ptr null
@tag_TypeOf = global ptr null
@num_0 = global ptr null
@num_1 = global ptr null
@num_2 = global ptr null
@num_340282366920938463463374607431768211455 = global ptr null
@text_. = global ptr null
@"text_. You might want to call `shiftLeft` instead." = global ptr null
@"text_. You might want to call `shiftRight` instead." = global ptr null
@"text_Expected Equal, got " = global ptr null
@"text_Expected False, got " = global ptr null
@"text_Expected Greater, got " = global ptr null
@"text_Expected Less, got " = global ptr null
@"text_Expected True, got " = global ptr null
@"text_Expected a Tag, got `" = global ptr null
@"text_Expected tag to not have a value, but it has one: `" = global ptr null
@"text_No case matched the given expression." = global ptr null
@"text_Shifts by that much are not yet supported." = global ptr null
@"text_Struct `" = global ptr null
@"text_The `condition` must be either `True` or `False`." = global ptr null
@"text_The `reason` must be a text." = global ptr null
@"text_The shift `amount` is negative: " = global ptr null
@"text_You can't divide by zero." = global ptr null
@"text_` is missing the key `" = global ptr null
@"text_`." = global ptr null
@"text_`False` was not satisfied" = global ptr null
@"text_`a | typeIs Int` was not satisfied" = global ptr null
@"text_`a | typeIs Text` was not satisfied" = global ptr null
@"text_`amount | typeIs Int` was not satisfied" = global ptr null
@"text_`b | typeIs Int` was not satisfied" = global ptr null
@"text_`b | typeIs Text` was not satisfied" = global ptr null
@"text_`bytes | typeIs List` was not satisfied" = global ptr null
@"text_`conditionIsBool` was not satisfied" = global ptr null
@"text_`dividend | typeIs Int` was not satisfied" = global ptr null
@"text_`divisor | typeIs Int` was not satisfied" = global ptr null
@"text_`else | getArgumentCount | equals 0` was not satisfied" = global ptr null
@"text_`else | typeIs Function` was not satisfied" = global ptr null
@"text_`endExclusive | isLessThanOrEqualTo (text | \E2\9C\A8.textLength)` was not satisfied" = global ptr null
@"text_`endExclusive | isNonNegative` was not satisfied" = global ptr null
@"text_`endExclusive | typeIs Int` was not satisfied" = global ptr null
@"text_`factorA | typeIs Int` was not satisfied" = global ptr null
@"text_`factorB | typeIs Int` was not satisfied" = global ptr null
@"text_`function | typeIs Function` was not satisfied" = global ptr null
@"text_`function | \E2\9C\A8.getArgumentCount | equals 0` was not satisfied" = global ptr null
@"text_`index | intCompareTo (list | listLength) | equals Less` was not satisfied" = global ptr null
@"text_`index | intCompareTo (list | \E2\9C\A8.listLength) | equals Less` was not satisfied" = global ptr null
@"text_`index | isLessThanOrEqualTo (list | \E2\9C\A8.listLength)` was not satisfied" = global ptr null
@"text_`index | isNonNegative` was not satisfied" = global ptr null
@"text_`index | typeIs Int` was not satisfied" = global ptr null
@"text_`int | typeIs Int` was not satisfied" = global ptr null
@"text_`length | isNonNegative` was not satisfied" = global ptr null
@"text_`length | typeIs Int` was not satisfied" = global ptr null
@"text_`list | typeIs List` was not satisfied" = global ptr null
@"text_`message | typeIs Text` was not satisfied" = global ptr null
@"text_`minuend | typeIs Int` was not satisfied" = global ptr null
@"text_`pattern | typeIs Text` was not satisfied" = global ptr null
@"text_`prefix | typeIs Text` was not satisfied" = global ptr null
@"text_`startInclusive | isLessThanOrEqualTo (text | \E2\9C\A8.textLength)` was not satisfied" = global ptr null
@"text_`startInclusive | isLessThanOrEqualTo endExclusive` was not satisfied" = global ptr null
@"text_`startInclusive | isNonNegative` was not satisfied" = global ptr null
@"text_`startInclusive | typeIs Int` was not satisfied" = global ptr null
@"text_`struct | typeIs Struct` was not satisfied" = global ptr null
@"text_`subtrahend | typeIs Int` was not satisfied" = global ptr null
@"text_`suffix | typeIs Text` was not satisfied" = global ptr null
@"text_`tag | typeIs Tag` was not satisfied" = global ptr null
@"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied" = global ptr null
@"text_`text | typeIs Text` was not satisfied" = global ptr null
@"text_`then | getArgumentCount | equals 0` was not satisfied" = global ptr null
@"text_`then | typeIs Function` was not satisfied" = global ptr null
@"text_`value | isNonNegative` was not satisfied" = global ptr null
@"text_`value | typeIs Int` was not satisfied" = global ptr null
@"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, anonymous_$generated__needs_isConditionTrue_then" = global ptr null
@"fun_anonymous_$generated__needs_condition_then, anonymous_$generated__needs_isConditionBool_then, anonymous_$generated__needs_isReasonText_then" = global ptr null
@"fun_anonymous_$generated__needs" = global ptr null
@"fun_anonymous_$generated__needs_isConditionTrue_else" = global ptr null
@"fun_anonymous_$generated__needs_isConditionBool_else" = global ptr null
@"fun_anonymous_$generated__needs_isReasonText_else" = global ptr null
@"fun_anonymous_$generated__needs_condition_else" = global ptr null
@0 = global ptr null
@"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then" = global ptr null
@"fun_Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_else" = global ptr null
@fun_Builtins__not = global ptr null
@fun_Builtins__not_1_equals_then = global ptr null
@fun_Builtins__not_1_equals_then.3 = global ptr null
@fun_Builtins__not_1_equals_else = global ptr null
@1 = global ptr null
@fun_Builtins__not_1_equals_else.5 = global ptr null
@2 = global ptr null
@fun_Builtins__not_1_equals_else.7 = global ptr null
@3 = global ptr null
@fun_Builtins__not_1_case-0_didNotMatch = global ptr null
@fun_Builtins__not_1_equals_then.9 = global ptr null
@fun_Builtins__not_1_equals_then.11 = global ptr null
@fun_Builtins__not_1_equals_else.13 = global ptr null
@4 = global ptr null
@fun_Builtins__not_1_equals_else.15 = global ptr null
@5 = global ptr null
@fun_Builtins__not_1_equals_else.17 = global ptr null
@6 = global ptr null
@fun_Builtins__not_1_case-1_didNotMatch = global ptr null
@fun_Builtins__isNonNegative = global ptr null
@fun_Builtins__isNonNegative_13_equals_then = global ptr null
@fun_Builtins__isNonNegative_13_equals_then.19 = global ptr null
@fun_Builtins__isNonNegative_13_equals_else = global ptr null
@7 = global ptr null
@fun_Builtins__isNonNegative_13_equals_else.21 = global ptr null
@8 = global ptr null
@fun_Builtins__isNonNegative_13_isMatch_then = global ptr null
@fun_Builtins__isNonNegative_13_isMatch_else = global ptr null
@fun_Builtins__isNonNegative_13_equals_then.23 = global ptr null
@fun_Builtins__isNonNegative_13_equals_then.25 = global ptr null
@fun_Builtins__isNonNegative_13_equals_else.27 = global ptr null
@9 = global ptr null
@fun_Builtins__isNonNegative_13_equals_else.29 = global ptr null
@10 = global ptr null
@fun_Builtins__isNonNegative_13_case-0_didNotMatch = global ptr null
@fun_Builtins__isNonNegative_13_equals_then.31 = global ptr null
@fun_Builtins__isNonNegative_13_equals_then.33 = global ptr null
@fun_Builtins__isNonNegative_13_equals_else.35 = global ptr null
@11 = global ptr null
@fun_Builtins__isNonNegative_13_equals_else.37 = global ptr null
@12 = global ptr null
@fun_Builtins__isNonNegative_13_case-1_didNotMatch = global ptr null
@fun_Builtins__isLessThanOrEqualTo = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_then = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_then.39 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_else = global ptr null
@13 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_else.41 = global ptr null
@14 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_isMatch_then = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_isMatch_else = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_then.43 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_then.45 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_else.47 = global ptr null
@15 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_else.49 = global ptr null
@16 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_then.51 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_then.53 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_else.55 = global ptr null
@17 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_else.57 = global ptr null
@18 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_case-1_didNotMatch = global ptr null
@fun_Builtins__equals = global ptr null
@fun_Builtins__functionRun = global ptr null
@fun_Builtins__getArgumentCount = global ptr null
@fun_Builtins__ifElse = global ptr null
@fun_Builtins__ifElse_1_equals_then = global ptr null
@fun_Builtins__ifElse_1_equals_then.59 = global ptr null
@fun_Builtins__ifElse_1_equals_else = global ptr null
@19 = global ptr null
@fun_Builtins__ifElse_1_equals_else.61 = global ptr null
@20 = global ptr null
@fun_Builtins__ifElse_1_equals_else.63 = global ptr null
@21 = global ptr null
@fun_Builtins__ifElse_1_isMatch_then = global ptr null
@fun_Builtins__ifElse_1_isMatch_else = global ptr null
@fun_Builtins__ifElse_1_equals_then.65 = global ptr null
@fun_Builtins__ifElse_1_equals_then.67 = global ptr null
@fun_Builtins__ifElse_1_equals_else.69 = global ptr null
@22 = global ptr null
@fun_Builtins__ifElse_1_equals_else.71 = global ptr null
@23 = global ptr null
@fun_Builtins__ifElse_1_equals_else.73 = global ptr null
@24 = global ptr null
@fun_Builtins__ifElse_1_case-0_didNotMatch = global ptr null
@fun_Builtins__intAdd = global ptr null
@fun_Builtins__intBitLength = global ptr null
@fun_Builtins__intBitwiseAnd = global ptr null
@fun_Builtins__intBitwiseOr = global ptr null
@fun_Builtins__intBitwiseXor = global ptr null
@fun_Builtins__intCompareTo = global ptr null
@fun_Builtins__intDivideTruncating = global ptr null
@fun_Builtins__intModulo = global ptr null
@fun_Builtins__intMultiply = global ptr null
@fun_Builtins__intParse = global ptr null
@fun_Builtins__intRemainder = global ptr null
@fun_Builtins__intShiftLeft = global ptr null
@fun_Builtins__intShiftLeft_25 = global ptr null
@fun_Builtins__intShiftLeft_26 = global ptr null
@fun_Builtins__intShiftRight = global ptr null
@fun_Builtins__intShiftRight_25 = global ptr null
@fun_Builtins__intShiftRight_26 = global ptr null
@fun_Builtins__intSubtract = global ptr null
@fun_Builtins__listFilled = global ptr null
@fun_Builtins__listGet = global ptr null
@fun_Builtins__listInsert = global ptr null
@fun_Builtins__listLength = global ptr null
@fun_Builtins__listRemoveAt = global ptr null
@fun_Builtins__listReplace = global ptr null
@fun_Builtins__print = global ptr null
@fun_Builtins__structGet = global ptr null
@fun_Builtins__structGet_23 = global ptr null
@fun_Builtins__structGet_24 = global ptr null
@fun_Builtins__structGet_30 = global ptr null
@fun_Builtins__structGet_31 = global ptr null
@fun_Builtins__structGetKeys = global ptr null
@fun_Builtins__structHasKey = global ptr null
@fun_Builtins__tagGetValue = global ptr null
@fun_Builtins__tagHasValue = global ptr null
@fun_Builtins__tagWithoutValue = global ptr null
@fun_Builtins__textCharacters = global ptr null
@fun_Builtins__textConcatenate = global ptr null
@fun_Builtins__textContains = global ptr null
@fun_Builtins__textEndsWith = global ptr null
@fun_Builtins__textFromUtf8 = global ptr null
@fun_Builtins__textGetRange = global ptr null
@fun_Builtins__textIsEmpty = global ptr null
@fun_Builtins__textLength = global ptr null
@fun_Builtins__textStartsWith = global ptr null
@fun_Builtins__textTrimEnd = global ptr null
@fun_Builtins__textTrimStart = global ptr null
@fun_Builtins__toDebugText = global ptr null
@fun_Builtins__typeOf = global ptr null
@fun_Examples__10 = global ptr null
@candy_environment = external global ptr

declare ptr @make_candy_int(i64)

declare ptr @make_candy_tag(ptr, ptr)

declare ptr @make_candy_text(ptr)

declare ptr @make_candy_list(ptr)

declare ptr @make_candy_function(ptr, ptr, i64)

declare ptr @make_candy_struct(ptr, ptr)

declare ptr @candy_builtin_struct_get(ptr, ptr)

declare void @candy_panic(ptr)

declare void @free_candy_value(ptr)

declare void @print_candy_value(ptr)

declare ptr @get_candy_function_pointer(ptr)

declare ptr @get_candy_function_environment(ptr)

define i32 @main() {
entry:
  %0 = alloca i8, i64 19, align 1
  store [19 x i8] c"Builtins::equals:6\00", ptr %0, align 1
  %1 = call ptr @make_candy_text(ptr %0)
  store ptr %1, ptr @"Builtins::equals:6", align 8
  %2 = alloca i8, i64 28, align 1
  store [28 x i8] c"Builtins::fitsInRustU128:10\00", ptr %2, align 1
  %3 = call ptr @make_candy_text(ptr %2)
  store ptr %3, ptr @"Builtins::fitsInRustU128:10", align 8
  %4 = alloca i8, i64 28, align 1
  store [28 x i8] c"Builtins::fitsInRustU128:16\00", ptr %4, align 1
  %5 = call ptr @make_candy_text(ptr %4)
  store ptr %5, ptr @"Builtins::fitsInRustU128:16", align 8
  %6 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::fitsInRustU128:5\00", ptr %6, align 1
  %7 = call ptr @make_candy_text(ptr %6)
  store ptr %7, ptr @"Builtins::fitsInRustU128:5", align 8
  %8 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::fitsInRustU128:8\00", ptr %8, align 1
  %9 = call ptr @make_candy_text(ptr %8)
  store ptr %9, ptr @"Builtins::fitsInRustU128:8", align 8
  %10 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::functionRun:11\00", ptr %10, align 1
  %11 = call ptr @make_candy_text(ptr %10)
  store ptr %11, ptr @"Builtins::functionRun:11", align 8
  %12 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::functionRun:16\00", ptr %12, align 1
  %13 = call ptr @make_candy_text(ptr %12)
  store ptr %13, ptr @"Builtins::functionRun:16", align 8
  %14 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::functionRun:22\00", ptr %14, align 1
  %15 = call ptr @make_candy_text(ptr %14)
  store ptr %15, ptr @"Builtins::functionRun:22", align 8
  %16 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::functionRun:5\00", ptr %16, align 1
  %17 = call ptr @make_candy_text(ptr %16)
  store ptr %17, ptr @"Builtins::functionRun:5", align 8
  %18 = alloca i8, i64 30, align 1
  store [30 x i8] c"Builtins::getArgumentCount:11\00", ptr %18, align 1
  %19 = call ptr @make_candy_text(ptr %18)
  store ptr %19, ptr @"Builtins::getArgumentCount:11", align 8
  %20 = alloca i8, i64 29, align 1
  store [29 x i8] c"Builtins::getArgumentCount:5\00", ptr %20, align 1
  %21 = call ptr @make_candy_text(ptr %20)
  store ptr %21, ptr @"Builtins::getArgumentCount:5", align 8
  %22 = alloca i8, i64 19, align 1
  store [19 x i8] c"Builtins::ifElse:1\00", ptr %22, align 1
  %23 = call ptr @make_candy_text(ptr %22)
  store ptr %23, ptr @"Builtins::ifElse:1", align 8
  %24 = alloca i8, i64 20, align 1
  store [20 x i8] c"Builtins::ifElse:11\00", ptr %24, align 1
  %25 = call ptr @make_candy_text(ptr %24)
  store ptr %25, ptr @"Builtins::ifElse:11", align 8
  %26 = alloca i8, i64 20, align 1
  store [20 x i8] c"Builtins::ifElse:14\00", ptr %26, align 1
  %27 = call ptr @make_candy_text(ptr %26)
  store ptr %27, ptr @"Builtins::ifElse:14", align 8
  %28 = alloca i8, i64 20, align 1
  store [20 x i8] c"Builtins::ifElse:19\00", ptr %28, align 1
  %29 = call ptr @make_candy_text(ptr %28)
  store ptr %29, ptr @"Builtins::ifElse:19", align 8
  %30 = alloca i8, i64 20, align 1
  store [20 x i8] c"Builtins::ifElse:25\00", ptr %30, align 1
  %31 = call ptr @make_candy_text(ptr %30)
  store ptr %31, ptr @"Builtins::ifElse:25", align 8
  %32 = alloca i8, i64 20, align 1
  store [20 x i8] c"Builtins::ifElse:28\00", ptr %32, align 1
  %33 = call ptr @make_candy_text(ptr %32)
  store ptr %33, ptr @"Builtins::ifElse:28", align 8
  %34 = alloca i8, i64 20, align 1
  store [20 x i8] c"Builtins::ifElse:33\00", ptr %34, align 1
  %35 = call ptr @make_candy_text(ptr %34)
  store ptr %35, ptr @"Builtins::ifElse:33", align 8
  %36 = alloca i8, i64 20, align 1
  store [20 x i8] c"Builtins::ifElse:41\00", ptr %36, align 1
  %37 = call ptr @make_candy_text(ptr %36)
  store ptr %37, ptr @"Builtins::ifElse:41", align 8
  %38 = alloca i8, i64 19, align 1
  store [19 x i8] c"Builtins::ifElse:5\00", ptr %38, align 1
  %39 = call ptr @make_candy_text(ptr %38)
  store ptr %39, ptr @"Builtins::ifElse:5", align 8
  %40 = alloca i8, i64 20, align 1
  store [20 x i8] c"Builtins::intAdd:11\00", ptr %40, align 1
  %41 = call ptr @make_candy_text(ptr %40)
  store ptr %41, ptr @"Builtins::intAdd:11", align 8
  %42 = alloca i8, i64 20, align 1
  store [20 x i8] c"Builtins::intAdd:18\00", ptr %42, align 1
  %43 = call ptr @make_candy_text(ptr %42)
  store ptr %43, ptr @"Builtins::intAdd:18", align 8
  %44 = alloca i8, i64 19, align 1
  store [19 x i8] c"Builtins::intAdd:5\00", ptr %44, align 1
  %45 = call ptr @make_candy_text(ptr %44)
  store ptr %45, ptr @"Builtins::intAdd:5", align 8
  %46 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intBitLength:11\00", ptr %46, align 1
  %47 = call ptr @make_candy_text(ptr %46)
  store ptr %47, ptr @"Builtins::intBitLength:11", align 8
  %48 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::intBitLength:5\00", ptr %48, align 1
  %49 = call ptr @make_candy_text(ptr %48)
  store ptr %49, ptr @"Builtins::intBitLength:5", align 8
  %50 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intBitwiseAnd:11\00", ptr %50, align 1
  %51 = call ptr @make_candy_text(ptr %50)
  store ptr %51, ptr @"Builtins::intBitwiseAnd:11", align 8
  %52 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intBitwiseAnd:18\00", ptr %52, align 1
  %53 = call ptr @make_candy_text(ptr %52)
  store ptr %53, ptr @"Builtins::intBitwiseAnd:18", align 8
  %54 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intBitwiseAnd:5\00", ptr %54, align 1
  %55 = call ptr @make_candy_text(ptr %54)
  store ptr %55, ptr @"Builtins::intBitwiseAnd:5", align 8
  %56 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intBitwiseOr:11\00", ptr %56, align 1
  %57 = call ptr @make_candy_text(ptr %56)
  store ptr %57, ptr @"Builtins::intBitwiseOr:11", align 8
  %58 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intBitwiseOr:18\00", ptr %58, align 1
  %59 = call ptr @make_candy_text(ptr %58)
  store ptr %59, ptr @"Builtins::intBitwiseOr:18", align 8
  %60 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::intBitwiseOr:5\00", ptr %60, align 1
  %61 = call ptr @make_candy_text(ptr %60)
  store ptr %61, ptr @"Builtins::intBitwiseOr:5", align 8
  %62 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intBitwiseXor:11\00", ptr %62, align 1
  %63 = call ptr @make_candy_text(ptr %62)
  store ptr %63, ptr @"Builtins::intBitwiseXor:11", align 8
  %64 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intBitwiseXor:18\00", ptr %64, align 1
  %65 = call ptr @make_candy_text(ptr %64)
  store ptr %65, ptr @"Builtins::intBitwiseXor:18", align 8
  %66 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intBitwiseXor:5\00", ptr %66, align 1
  %67 = call ptr @make_candy_text(ptr %66)
  store ptr %67, ptr @"Builtins::intBitwiseXor:5", align 8
  %68 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intCompareTo:11\00", ptr %68, align 1
  %69 = call ptr @make_candy_text(ptr %68)
  store ptr %69, ptr @"Builtins::intCompareTo:11", align 8
  %70 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intCompareTo:18\00", ptr %70, align 1
  %71 = call ptr @make_candy_text(ptr %70)
  store ptr %71, ptr @"Builtins::intCompareTo:18", align 8
  %72 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::intCompareTo:5\00", ptr %72, align 1
  %73 = call ptr @make_candy_text(ptr %72)
  store ptr %73, ptr @"Builtins::intCompareTo:5", align 8
  %74 = alloca i8, i64 33, align 1
  store [33 x i8] c"Builtins::intDivideTruncating:11\00", ptr %74, align 1
  %75 = call ptr @make_candy_text(ptr %74)
  store ptr %75, ptr @"Builtins::intDivideTruncating:11", align 8
  %76 = alloca i8, i64 33, align 1
  store [33 x i8] c"Builtins::intDivideTruncating:17\00", ptr %76, align 1
  %77 = call ptr @make_candy_text(ptr %76)
  store ptr %77, ptr @"Builtins::intDivideTruncating:17", align 8
  %78 = alloca i8, i64 33, align 1
  store [33 x i8] c"Builtins::intDivideTruncating:25\00", ptr %78, align 1
  %79 = call ptr @make_candy_text(ptr %78)
  store ptr %79, ptr @"Builtins::intDivideTruncating:25", align 8
  %80 = alloca i8, i64 33, align 1
  store [33 x i8] c"Builtins::intDivideTruncating:32\00", ptr %80, align 1
  %81 = call ptr @make_candy_text(ptr %80)
  store ptr %81, ptr @"Builtins::intDivideTruncating:32", align 8
  %82 = alloca i8, i64 32, align 1
  store [32 x i8] c"Builtins::intDivideTruncating:5\00", ptr %82, align 1
  %83 = call ptr @make_candy_text(ptr %82)
  store ptr %83, ptr @"Builtins::intDivideTruncating:5", align 8
  %84 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::intModulo:11\00", ptr %84, align 1
  %85 = call ptr @make_candy_text(ptr %84)
  store ptr %85, ptr @"Builtins::intModulo:11", align 8
  %86 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::intModulo:17\00", ptr %86, align 1
  %87 = call ptr @make_candy_text(ptr %86)
  store ptr %87, ptr @"Builtins::intModulo:17", align 8
  %88 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::intModulo:25\00", ptr %88, align 1
  %89 = call ptr @make_candy_text(ptr %88)
  store ptr %89, ptr @"Builtins::intModulo:25", align 8
  %90 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::intModulo:32\00", ptr %90, align 1
  %91 = call ptr @make_candy_text(ptr %90)
  store ptr %91, ptr @"Builtins::intModulo:32", align 8
  %92 = alloca i8, i64 22, align 1
  store [22 x i8] c"Builtins::intModulo:5\00", ptr %92, align 1
  %93 = call ptr @make_candy_text(ptr %92)
  store ptr %93, ptr @"Builtins::intModulo:5", align 8
  %94 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::intMultiply:11\00", ptr %94, align 1
  %95 = call ptr @make_candy_text(ptr %94)
  store ptr %95, ptr @"Builtins::intMultiply:11", align 8
  %96 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::intMultiply:18\00", ptr %96, align 1
  %97 = call ptr @make_candy_text(ptr %96)
  store ptr %97, ptr @"Builtins::intMultiply:18", align 8
  %98 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::intMultiply:5\00", ptr %98, align 1
  %99 = call ptr @make_candy_text(ptr %98)
  store ptr %99, ptr @"Builtins::intMultiply:5", align 8
  %100 = alloca i8, i64 22, align 1
  store [22 x i8] c"Builtins::intParse:11\00", ptr %100, align 1
  %101 = call ptr @make_candy_text(ptr %100)
  store ptr %101, ptr @"Builtins::intParse:11", align 8
  %102 = alloca i8, i64 21, align 1
  store [21 x i8] c"Builtins::intParse:5\00", ptr %102, align 1
  %103 = call ptr @make_candy_text(ptr %102)
  store ptr %103, ptr @"Builtins::intParse:5", align 8
  %104 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intRemainder:11\00", ptr %104, align 1
  %105 = call ptr @make_candy_text(ptr %104)
  store ptr %105, ptr @"Builtins::intRemainder:11", align 8
  %106 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intRemainder:17\00", ptr %106, align 1
  %107 = call ptr @make_candy_text(ptr %106)
  store ptr %107, ptr @"Builtins::intRemainder:17", align 8
  %108 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intRemainder:25\00", ptr %108, align 1
  %109 = call ptr @make_candy_text(ptr %108)
  store ptr %109, ptr @"Builtins::intRemainder:25", align 8
  %110 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intRemainder:32\00", ptr %110, align 1
  %111 = call ptr @make_candy_text(ptr %110)
  store ptr %111, ptr @"Builtins::intRemainder:32", align 8
  %112 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::intRemainder:5\00", ptr %112, align 1
  %113 = call ptr @make_candy_text(ptr %112)
  store ptr %113, ptr @"Builtins::intRemainder:5", align 8
  %114 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intShiftLeft:11\00", ptr %114, align 1
  %115 = call ptr @make_candy_text(ptr %114)
  store ptr %115, ptr @"Builtins::intShiftLeft:11", align 8
  %116 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intShiftLeft:14\00", ptr %116, align 1
  %117 = call ptr @make_candy_text(ptr %116)
  store ptr %117, ptr @"Builtins::intShiftLeft:14", align 8
  %118 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intShiftLeft:23\00", ptr %118, align 1
  %119 = call ptr @make_candy_text(ptr %118)
  store ptr %119, ptr @"Builtins::intShiftLeft:23", align 8
  %120 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intShiftLeft:24\00", ptr %120, align 1
  %121 = call ptr @make_candy_text(ptr %120)
  store ptr %121, ptr @"Builtins::intShiftLeft:24", align 8
  %122 = alloca i8, i64 28, align 1
  store [28 x i8] c"Builtins::intShiftLeft:26:0\00", ptr %122, align 1
  %123 = call ptr @make_candy_text(ptr %122)
  store ptr %123, ptr @"Builtins::intShiftLeft:26:0", align 8
  %124 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intShiftLeft:27\00", ptr %124, align 1
  %125 = call ptr @make_candy_text(ptr %124)
  store ptr %125, ptr @"Builtins::intShiftLeft:27", align 8
  %126 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intShiftLeft:29\00", ptr %126, align 1
  %127 = call ptr @make_candy_text(ptr %126)
  store ptr %127, ptr @"Builtins::intShiftLeft:29", align 8
  %128 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intShiftLeft:30\00", ptr %128, align 1
  %129 = call ptr @make_candy_text(ptr %128)
  store ptr %129, ptr @"Builtins::intShiftLeft:30", align 8
  %130 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intShiftLeft:31\00", ptr %130, align 1
  %131 = call ptr @make_candy_text(ptr %130)
  store ptr %131, ptr @"Builtins::intShiftLeft:31", align 8
  %132 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intShiftLeft:34\00", ptr %132, align 1
  %133 = call ptr @make_candy_text(ptr %132)
  store ptr %133, ptr @"Builtins::intShiftLeft:34", align 8
  %134 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intShiftLeft:42\00", ptr %134, align 1
  %135 = call ptr @make_candy_text(ptr %134)
  store ptr %135, ptr @"Builtins::intShiftLeft:42", align 8
  %136 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intShiftLeft:49\00", ptr %136, align 1
  %137 = call ptr @make_candy_text(ptr %136)
  store ptr %137, ptr @"Builtins::intShiftLeft:49", align 8
  %138 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::intShiftLeft:5\00", ptr %138, align 1
  %139 = call ptr @make_candy_text(ptr %138)
  store ptr %139, ptr @"Builtins::intShiftLeft:5", align 8
  %140 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intShiftRight:11\00", ptr %140, align 1
  %141 = call ptr @make_candy_text(ptr %140)
  store ptr %141, ptr @"Builtins::intShiftRight:11", align 8
  %142 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intShiftRight:14\00", ptr %142, align 1
  %143 = call ptr @make_candy_text(ptr %142)
  store ptr %143, ptr @"Builtins::intShiftRight:14", align 8
  %144 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intShiftRight:23\00", ptr %144, align 1
  %145 = call ptr @make_candy_text(ptr %144)
  store ptr %145, ptr @"Builtins::intShiftRight:23", align 8
  %146 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intShiftRight:24\00", ptr %146, align 1
  %147 = call ptr @make_candy_text(ptr %146)
  store ptr %147, ptr @"Builtins::intShiftRight:24", align 8
  %148 = alloca i8, i64 29, align 1
  store [29 x i8] c"Builtins::intShiftRight:26:0\00", ptr %148, align 1
  %149 = call ptr @make_candy_text(ptr %148)
  store ptr %149, ptr @"Builtins::intShiftRight:26:0", align 8
  %150 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intShiftRight:27\00", ptr %150, align 1
  %151 = call ptr @make_candy_text(ptr %150)
  store ptr %151, ptr @"Builtins::intShiftRight:27", align 8
  %152 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intShiftRight:29\00", ptr %152, align 1
  %153 = call ptr @make_candy_text(ptr %152)
  store ptr %153, ptr @"Builtins::intShiftRight:29", align 8
  %154 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intShiftRight:30\00", ptr %154, align 1
  %155 = call ptr @make_candy_text(ptr %154)
  store ptr %155, ptr @"Builtins::intShiftRight:30", align 8
  %156 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intShiftRight:31\00", ptr %156, align 1
  %157 = call ptr @make_candy_text(ptr %156)
  store ptr %157, ptr @"Builtins::intShiftRight:31", align 8
  %158 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intShiftRight:34\00", ptr %158, align 1
  %159 = call ptr @make_candy_text(ptr %158)
  store ptr %159, ptr @"Builtins::intShiftRight:34", align 8
  %160 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intShiftRight:42\00", ptr %160, align 1
  %161 = call ptr @make_candy_text(ptr %160)
  store ptr %161, ptr @"Builtins::intShiftRight:42", align 8
  %162 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intShiftRight:49\00", ptr %162, align 1
  %163 = call ptr @make_candy_text(ptr %162)
  store ptr %163, ptr @"Builtins::intShiftRight:49", align 8
  %164 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intShiftRight:5\00", ptr %164, align 1
  %165 = call ptr @make_candy_text(ptr %164)
  store ptr %165, ptr @"Builtins::intShiftRight:5", align 8
  %166 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::intSubtract:11\00", ptr %166, align 1
  %167 = call ptr @make_candy_text(ptr %166)
  store ptr %167, ptr @"Builtins::intSubtract:11", align 8
  %168 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::intSubtract:18\00", ptr %168, align 1
  %169 = call ptr @make_candy_text(ptr %168)
  store ptr %169, ptr @"Builtins::intSubtract:18", align 8
  %170 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::intSubtract:5\00", ptr %170, align 1
  %171 = call ptr @make_candy_text(ptr %170)
  store ptr %171, ptr @"Builtins::intSubtract:5", align 8
  %172 = alloca i8, i64 33, align 1
  store [33 x i8] c"Builtins::isLessThanOrEqualTo:11\00", ptr %172, align 1
  %173 = call ptr @make_candy_text(ptr %172)
  store ptr %173, ptr @"Builtins::isLessThanOrEqualTo:11", align 8
  %174 = alloca i8, i64 33, align 1
  store [33 x i8] c"Builtins::isLessThanOrEqualTo:18\00", ptr %174, align 1
  %175 = call ptr @make_candy_text(ptr %174)
  store ptr %175, ptr @"Builtins::isLessThanOrEqualTo:18", align 8
  %176 = alloca i8, i64 33, align 1
  store [33 x i8] c"Builtins::isLessThanOrEqualTo:19\00", ptr %176, align 1
  %177 = call ptr @make_candy_text(ptr %176)
  store ptr %177, ptr @"Builtins::isLessThanOrEqualTo:19", align 8
  %178 = alloca i8, i64 32, align 1
  store [32 x i8] c"Builtins::isLessThanOrEqualTo:5\00", ptr %178, align 1
  %179 = call ptr @make_candy_text(ptr %178)
  store ptr %179, ptr @"Builtins::isLessThanOrEqualTo:5", align 8
  %180 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::isNonNegative:12\00", ptr %180, align 1
  %181 = call ptr @make_candy_text(ptr %180)
  store ptr %181, ptr @"Builtins::isNonNegative:12", align 8
  %182 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::isNonNegative:13\00", ptr %182, align 1
  %183 = call ptr @make_candy_text(ptr %182)
  store ptr %183, ptr @"Builtins::isNonNegative:13", align 8
  %184 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::isNonNegative:5\00", ptr %184, align 1
  %185 = call ptr @make_candy_text(ptr %184)
  store ptr %185, ptr @"Builtins::isNonNegative:5", align 8
  %186 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::listFilled:10\00", ptr %186, align 1
  %187 = call ptr @make_candy_text(ptr %186)
  store ptr %187, ptr @"Builtins::listFilled:10", align 8
  %188 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::listFilled:17\00", ptr %188, align 1
  %189 = call ptr @make_candy_text(ptr %188)
  store ptr %189, ptr @"Builtins::listFilled:17", align 8
  %190 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::listFilled:5\00", ptr %190, align 1
  %191 = call ptr @make_candy_text(ptr %190)
  store ptr %191, ptr @"Builtins::listFilled:5", align 8
  %192 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::listFilled:8\00", ptr %192, align 1
  %193 = call ptr @make_candy_text(ptr %192)
  store ptr %193, ptr @"Builtins::listFilled:8", align 8
  %194 = alloca i8, i64 21, align 1
  store [21 x i8] c"Builtins::listGet:11\00", ptr %194, align 1
  %195 = call ptr @make_candy_text(ptr %194)
  store ptr %195, ptr @"Builtins::listGet:11", align 8
  %196 = alloca i8, i64 21, align 1
  store [21 x i8] c"Builtins::listGet:14\00", ptr %196, align 1
  %197 = call ptr @make_candy_text(ptr %196)
  store ptr %197, ptr @"Builtins::listGet:14", align 8
  %198 = alloca i8, i64 21, align 1
  store [21 x i8] c"Builtins::listGet:16\00", ptr %198, align 1
  %199 = call ptr @make_candy_text(ptr %198)
  store ptr %199, ptr @"Builtins::listGet:16", align 8
  %200 = alloca i8, i64 21, align 1
  store [21 x i8] c"Builtins::listGet:24\00", ptr %200, align 1
  %201 = call ptr @make_candy_text(ptr %200)
  store ptr %201, ptr @"Builtins::listGet:24", align 8
  %202 = alloca i8, i64 21, align 1
  store [21 x i8] c"Builtins::listGet:25\00", ptr %202, align 1
  %203 = call ptr @make_candy_text(ptr %202)
  store ptr %203, ptr @"Builtins::listGet:25", align 8
  %204 = alloca i8, i64 21, align 1
  store [21 x i8] c"Builtins::listGet:30\00", ptr %204, align 1
  %205 = call ptr @make_candy_text(ptr %204)
  store ptr %205, ptr @"Builtins::listGet:30", align 8
  %206 = alloca i8, i64 21, align 1
  store [21 x i8] c"Builtins::listGet:37\00", ptr %206, align 1
  %207 = call ptr @make_candy_text(ptr %206)
  store ptr %207, ptr @"Builtins::listGet:37", align 8
  %208 = alloca i8, i64 20, align 1
  store [20 x i8] c"Builtins::listGet:5\00", ptr %208, align 1
  %209 = call ptr @make_candy_text(ptr %208)
  store ptr %209, ptr @"Builtins::listGet:5", align 8
  %210 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::listInsert:11\00", ptr %210, align 1
  %211 = call ptr @make_candy_text(ptr %210)
  store ptr %211, ptr @"Builtins::listInsert:11", align 8
  %212 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::listInsert:14\00", ptr %212, align 1
  %213 = call ptr @make_candy_text(ptr %212)
  store ptr %213, ptr @"Builtins::listInsert:14", align 8
  %214 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::listInsert:16\00", ptr %214, align 1
  %215 = call ptr @make_candy_text(ptr %214)
  store ptr %215, ptr @"Builtins::listInsert:16", align 8
  %216 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::listInsert:24\00", ptr %216, align 1
  %217 = call ptr @make_candy_text(ptr %216)
  store ptr %217, ptr @"Builtins::listInsert:24", align 8
  %218 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::listInsert:25\00", ptr %218, align 1
  %219 = call ptr @make_candy_text(ptr %218)
  store ptr %219, ptr @"Builtins::listInsert:25", align 8
  %220 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::listInsert:27\00", ptr %220, align 1
  %221 = call ptr @make_candy_text(ptr %220)
  store ptr %221, ptr @"Builtins::listInsert:27", align 8
  %222 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::listInsert:35\00", ptr %222, align 1
  %223 = call ptr @make_candy_text(ptr %222)
  store ptr %223, ptr @"Builtins::listInsert:35", align 8
  %224 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::listInsert:5\00", ptr %224, align 1
  %225 = call ptr @make_candy_text(ptr %224)
  store ptr %225, ptr @"Builtins::listInsert:5", align 8
  %226 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::listLength:11\00", ptr %226, align 1
  %227 = call ptr @make_candy_text(ptr %226)
  store ptr %227, ptr @"Builtins::listLength:11", align 8
  %228 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::listLength:5\00", ptr %228, align 1
  %229 = call ptr @make_candy_text(ptr %228)
  store ptr %229, ptr @"Builtins::listLength:5", align 8
  %230 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::listRemoveAt:11\00", ptr %230, align 1
  %231 = call ptr @make_candy_text(ptr %230)
  store ptr %231, ptr @"Builtins::listRemoveAt:11", align 8
  %232 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::listRemoveAt:14\00", ptr %232, align 1
  %233 = call ptr @make_candy_text(ptr %232)
  store ptr %233, ptr @"Builtins::listRemoveAt:14", align 8
  %234 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::listRemoveAt:16\00", ptr %234, align 1
  %235 = call ptr @make_candy_text(ptr %234)
  store ptr %235, ptr @"Builtins::listRemoveAt:16", align 8
  %236 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::listRemoveAt:21\00", ptr %236, align 1
  %237 = call ptr @make_candy_text(ptr %236)
  store ptr %237, ptr @"Builtins::listRemoveAt:21", align 8
  %238 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::listRemoveAt:22\00", ptr %238, align 1
  %239 = call ptr @make_candy_text(ptr %238)
  store ptr %239, ptr @"Builtins::listRemoveAt:22", align 8
  %240 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::listRemoveAt:27\00", ptr %240, align 1
  %241 = call ptr @make_candy_text(ptr %240)
  store ptr %241, ptr @"Builtins::listRemoveAt:27", align 8
  %242 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::listRemoveAt:34\00", ptr %242, align 1
  %243 = call ptr @make_candy_text(ptr %242)
  store ptr %243, ptr @"Builtins::listRemoveAt:34", align 8
  %244 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::listRemoveAt:5\00", ptr %244, align 1
  %245 = call ptr @make_candy_text(ptr %244)
  store ptr %245, ptr @"Builtins::listRemoveAt:5", align 8
  %246 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::listReplace:11\00", ptr %246, align 1
  %247 = call ptr @make_candy_text(ptr %246)
  store ptr %247, ptr @"Builtins::listReplace:11", align 8
  %248 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::listReplace:14\00", ptr %248, align 1
  %249 = call ptr @make_candy_text(ptr %248)
  store ptr %249, ptr @"Builtins::listReplace:14", align 8
  %250 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::listReplace:16\00", ptr %250, align 1
  %251 = call ptr @make_candy_text(ptr %250)
  store ptr %251, ptr @"Builtins::listReplace:16", align 8
  %252 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::listReplace:21\00", ptr %252, align 1
  %253 = call ptr @make_candy_text(ptr %252)
  store ptr %253, ptr @"Builtins::listReplace:21", align 8
  %254 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::listReplace:22\00", ptr %254, align 1
  %255 = call ptr @make_candy_text(ptr %254)
  store ptr %255, ptr @"Builtins::listReplace:22", align 8
  %256 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::listReplace:27\00", ptr %256, align 1
  %257 = call ptr @make_candy_text(ptr %256)
  store ptr %257, ptr @"Builtins::listReplace:27", align 8
  %258 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::listReplace:35\00", ptr %258, align 1
  %259 = call ptr @make_candy_text(ptr %258)
  store ptr %259, ptr @"Builtins::listReplace:35", align 8
  %260 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::listReplace:5\00", ptr %260, align 1
  %261 = call ptr @make_candy_text(ptr %260)
  store ptr %261, ptr @"Builtins::listReplace:5", align 8
  %262 = alloca i8, i64 16, align 1
  store [16 x i8] c"Builtins::not:1\00", ptr %262, align 1
  %263 = call ptr @make_candy_text(ptr %262)
  store ptr %263, ptr @"Builtins::not:1", align 8
  %264 = alloca i8, i64 19, align 1
  store [19 x i8] c"Builtins::print:11\00", ptr %264, align 1
  %265 = call ptr @make_candy_text(ptr %264)
  store ptr %265, ptr @"Builtins::print:11", align 8
  %266 = alloca i8, i64 18, align 1
  store [18 x i8] c"Builtins::print:5\00", ptr %266, align 1
  %267 = call ptr @make_candy_text(ptr %266)
  store ptr %267, ptr @"Builtins::print:5", align 8
  %268 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::structGet:12\00", ptr %268, align 1
  %269 = call ptr @make_candy_text(ptr %268)
  store ptr %269, ptr @"Builtins::structGet:12", align 8
  %270 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::structGet:21\00", ptr %270, align 1
  %271 = call ptr @make_candy_text(ptr %270)
  store ptr %271, ptr @"Builtins::structGet:21", align 8
  %272 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::structGet:22\00", ptr %272, align 1
  %273 = call ptr @make_candy_text(ptr %272)
  store ptr %273, ptr @"Builtins::structGet:22", align 8
  %274 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::structGet:24:0\00", ptr %274, align 1
  %275 = call ptr @make_candy_text(ptr %274)
  store ptr %275, ptr @"Builtins::structGet:24:0", align 8
  %276 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::structGet:25\00", ptr %276, align 1
  %277 = call ptr @make_candy_text(ptr %276)
  store ptr %277, ptr @"Builtins::structGet:25", align 8
  %278 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::structGet:28\00", ptr %278, align 1
  %279 = call ptr @make_candy_text(ptr %278)
  store ptr %279, ptr @"Builtins::structGet:28", align 8
  %280 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::structGet:29\00", ptr %280, align 1
  %281 = call ptr @make_candy_text(ptr %280)
  store ptr %281, ptr @"Builtins::structGet:29", align 8
  %282 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::structGet:31:0\00", ptr %282, align 1
  %283 = call ptr @make_candy_text(ptr %282)
  store ptr %283, ptr @"Builtins::structGet:31:0", align 8
  %284 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::structGet:32\00", ptr %284, align 1
  %285 = call ptr @make_candy_text(ptr %284)
  store ptr %285, ptr @"Builtins::structGet:32", align 8
  %286 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::structGet:34\00", ptr %286, align 1
  %287 = call ptr @make_candy_text(ptr %286)
  store ptr %287, ptr @"Builtins::structGet:34", align 8
  %288 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::structGet:35\00", ptr %288, align 1
  %289 = call ptr @make_candy_text(ptr %288)
  store ptr %289, ptr @"Builtins::structGet:35", align 8
  %290 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::structGet:36\00", ptr %290, align 1
  %291 = call ptr @make_candy_text(ptr %290)
  store ptr %291, ptr @"Builtins::structGet:36", align 8
  %292 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::structGet:37\00", ptr %292, align 1
  %293 = call ptr @make_candy_text(ptr %292)
  store ptr %293, ptr @"Builtins::structGet:37", align 8
  %294 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::structGet:38\00", ptr %294, align 1
  %295 = call ptr @make_candy_text(ptr %294)
  store ptr %295, ptr @"Builtins::structGet:38", align 8
  %296 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::structGet:45\00", ptr %296, align 1
  %297 = call ptr @make_candy_text(ptr %296)
  store ptr %297, ptr @"Builtins::structGet:45", align 8
  %298 = alloca i8, i64 22, align 1
  store [22 x i8] c"Builtins::structGet:5\00", ptr %298, align 1
  %299 = call ptr @make_candy_text(ptr %298)
  store ptr %299, ptr @"Builtins::structGet:5", align 8
  %300 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::structGetKeys:11\00", ptr %300, align 1
  %301 = call ptr @make_candy_text(ptr %300)
  store ptr %301, ptr @"Builtins::structGetKeys:11", align 8
  %302 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::structGetKeys:5\00", ptr %302, align 1
  %303 = call ptr @make_candy_text(ptr %302)
  store ptr %303, ptr @"Builtins::structGetKeys:5", align 8
  %304 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::structHasKey:12\00", ptr %304, align 1
  %305 = call ptr @make_candy_text(ptr %304)
  store ptr %305, ptr @"Builtins::structHasKey:12", align 8
  %306 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::structHasKey:5\00", ptr %306, align 1
  %307 = call ptr @make_candy_text(ptr %306)
  store ptr %307, ptr @"Builtins::structHasKey:5", align 8
  %308 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::tagGetValue:11\00", ptr %308, align 1
  %309 = call ptr @make_candy_text(ptr %308)
  store ptr %309, ptr @"Builtins::tagGetValue:11", align 8
  %310 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::tagGetValue:13\00", ptr %310, align 1
  %311 = call ptr @make_candy_text(ptr %310)
  store ptr %311, ptr @"Builtins::tagGetValue:13", align 8
  %312 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::tagGetValue:19\00", ptr %312, align 1
  %313 = call ptr @make_candy_text(ptr %312)
  store ptr %313, ptr @"Builtins::tagGetValue:19", align 8
  %314 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::tagGetValue:5\00", ptr %314, align 1
  %315 = call ptr @make_candy_text(ptr %314)
  store ptr %315, ptr @"Builtins::tagGetValue:5", align 8
  %316 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::tagHasValue:11\00", ptr %316, align 1
  %317 = call ptr @make_candy_text(ptr %316)
  store ptr %317, ptr @"Builtins::tagHasValue:11", align 8
  %318 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::tagHasValue:5\00", ptr %318, align 1
  %319 = call ptr @make_candy_text(ptr %318)
  store ptr %319, ptr @"Builtins::tagHasValue:5", align 8
  %320 = alloca i8, i64 29, align 1
  store [29 x i8] c"Builtins::tagWithoutValue:11\00", ptr %320, align 1
  %321 = call ptr @make_candy_text(ptr %320)
  store ptr %321, ptr @"Builtins::tagWithoutValue:11", align 8
  %322 = alloca i8, i64 28, align 1
  store [28 x i8] c"Builtins::tagWithoutValue:5\00", ptr %322, align 1
  %323 = call ptr @make_candy_text(ptr %322)
  store ptr %323, ptr @"Builtins::tagWithoutValue:5", align 8
  %324 = alloca i8, i64 28, align 1
  store [28 x i8] c"Builtins::textCharacters:11\00", ptr %324, align 1
  %325 = call ptr @make_candy_text(ptr %324)
  store ptr %325, ptr @"Builtins::textCharacters:11", align 8
  %326 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::textCharacters:5\00", ptr %326, align 1
  %327 = call ptr @make_candy_text(ptr %326)
  store ptr %327, ptr @"Builtins::textCharacters:5", align 8
  %328 = alloca i8, i64 29, align 1
  store [29 x i8] c"Builtins::textConcatenate:11\00", ptr %328, align 1
  %329 = call ptr @make_candy_text(ptr %328)
  store ptr %329, ptr @"Builtins::textConcatenate:11", align 8
  %330 = alloca i8, i64 29, align 1
  store [29 x i8] c"Builtins::textConcatenate:18\00", ptr %330, align 1
  %331 = call ptr @make_candy_text(ptr %330)
  store ptr %331, ptr @"Builtins::textConcatenate:18", align 8
  %332 = alloca i8, i64 28, align 1
  store [28 x i8] c"Builtins::textConcatenate:5\00", ptr %332, align 1
  %333 = call ptr @make_candy_text(ptr %332)
  store ptr %333, ptr @"Builtins::textConcatenate:5", align 8
  %334 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textContains:11\00", ptr %334, align 1
  %335 = call ptr @make_candy_text(ptr %334)
  store ptr %335, ptr @"Builtins::textContains:11", align 8
  %336 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textContains:18\00", ptr %336, align 1
  %337 = call ptr @make_candy_text(ptr %336)
  store ptr %337, ptr @"Builtins::textContains:18", align 8
  %338 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::textContains:5\00", ptr %338, align 1
  %339 = call ptr @make_candy_text(ptr %338)
  store ptr %339, ptr @"Builtins::textContains:5", align 8
  %340 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textEndsWith:11\00", ptr %340, align 1
  %341 = call ptr @make_candy_text(ptr %340)
  store ptr %341, ptr @"Builtins::textEndsWith:11", align 8
  %342 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textEndsWith:18\00", ptr %342, align 1
  %343 = call ptr @make_candy_text(ptr %342)
  store ptr %343, ptr @"Builtins::textEndsWith:18", align 8
  %344 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::textEndsWith:5\00", ptr %344, align 1
  %345 = call ptr @make_candy_text(ptr %344)
  store ptr %345, ptr @"Builtins::textEndsWith:5", align 8
  %346 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textFromUtf8:11\00", ptr %346, align 1
  %347 = call ptr @make_candy_text(ptr %346)
  store ptr %347, ptr @"Builtins::textFromUtf8:11", align 8
  %348 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::textFromUtf8:5\00", ptr %348, align 1
  %349 = call ptr @make_candy_text(ptr %348)
  store ptr %349, ptr @"Builtins::textFromUtf8:5", align 8
  %350 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:11\00", ptr %350, align 1
  %351 = call ptr @make_candy_text(ptr %350)
  store ptr %351, ptr @"Builtins::textGetRange:11", align 8
  %352 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:14\00", ptr %352, align 1
  %353 = call ptr @make_candy_text(ptr %352)
  store ptr %353, ptr @"Builtins::textGetRange:14", align 8
  %354 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:16\00", ptr %354, align 1
  %355 = call ptr @make_candy_text(ptr %354)
  store ptr %355, ptr @"Builtins::textGetRange:16", align 8
  %356 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:24\00", ptr %356, align 1
  %357 = call ptr @make_candy_text(ptr %356)
  store ptr %357, ptr @"Builtins::textGetRange:24", align 8
  %358 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:25\00", ptr %358, align 1
  %359 = call ptr @make_candy_text(ptr %358)
  store ptr %359, ptr @"Builtins::textGetRange:25", align 8
  %360 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:27\00", ptr %360, align 1
  %361 = call ptr @make_candy_text(ptr %360)
  store ptr %361, ptr @"Builtins::textGetRange:27", align 8
  %362 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:33\00", ptr %362, align 1
  %363 = call ptr @make_candy_text(ptr %362)
  store ptr %363, ptr @"Builtins::textGetRange:33", align 8
  %364 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:36\00", ptr %364, align 1
  %365 = call ptr @make_candy_text(ptr %364)
  store ptr %365, ptr @"Builtins::textGetRange:36", align 8
  %366 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:38\00", ptr %366, align 1
  %367 = call ptr @make_candy_text(ptr %366)
  store ptr %367, ptr @"Builtins::textGetRange:38", align 8
  %368 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:46\00", ptr %368, align 1
  %369 = call ptr @make_candy_text(ptr %368)
  store ptr %369, ptr @"Builtins::textGetRange:46", align 8
  %370 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:47\00", ptr %370, align 1
  %371 = call ptr @make_candy_text(ptr %370)
  store ptr %371, ptr @"Builtins::textGetRange:47", align 8
  %372 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:49\00", ptr %372, align 1
  %373 = call ptr @make_candy_text(ptr %372)
  store ptr %373, ptr @"Builtins::textGetRange:49", align 8
  %374 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::textGetRange:5\00", ptr %374, align 1
  %375 = call ptr @make_candy_text(ptr %374)
  store ptr %375, ptr @"Builtins::textGetRange:5", align 8
  %376 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:53\00", ptr %376, align 1
  %377 = call ptr @make_candy_text(ptr %376)
  store ptr %377, ptr @"Builtins::textGetRange:53", align 8
  %378 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:55\00", ptr %378, align 1
  %379 = call ptr @make_candy_text(ptr %378)
  store ptr %379, ptr @"Builtins::textGetRange:55", align 8
  %380 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:63\00", ptr %380, align 1
  %381 = call ptr @make_candy_text(ptr %380)
  store ptr %381, ptr @"Builtins::textGetRange:63", align 8
  %382 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::textIsEmpty:11\00", ptr %382, align 1
  %383 = call ptr @make_candy_text(ptr %382)
  store ptr %383, ptr @"Builtins::textIsEmpty:11", align 8
  %384 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::textIsEmpty:5\00", ptr %384, align 1
  %385 = call ptr @make_candy_text(ptr %384)
  store ptr %385, ptr @"Builtins::textIsEmpty:5", align 8
  %386 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::textLength:11\00", ptr %386, align 1
  %387 = call ptr @make_candy_text(ptr %386)
  store ptr %387, ptr @"Builtins::textLength:11", align 8
  %388 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::textLength:5\00", ptr %388, align 1
  %389 = call ptr @make_candy_text(ptr %388)
  store ptr %389, ptr @"Builtins::textLength:5", align 8
  %390 = alloca i8, i64 28, align 1
  store [28 x i8] c"Builtins::textStartsWith:11\00", ptr %390, align 1
  %391 = call ptr @make_candy_text(ptr %390)
  store ptr %391, ptr @"Builtins::textStartsWith:11", align 8
  %392 = alloca i8, i64 28, align 1
  store [28 x i8] c"Builtins::textStartsWith:18\00", ptr %392, align 1
  %393 = call ptr @make_candy_text(ptr %392)
  store ptr %393, ptr @"Builtins::textStartsWith:18", align 8
  %394 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::textStartsWith:5\00", ptr %394, align 1
  %395 = call ptr @make_candy_text(ptr %394)
  store ptr %395, ptr @"Builtins::textStartsWith:5", align 8
  %396 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::textTrimEnd:11\00", ptr %396, align 1
  %397 = call ptr @make_candy_text(ptr %396)
  store ptr %397, ptr @"Builtins::textTrimEnd:11", align 8
  %398 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::textTrimEnd:5\00", ptr %398, align 1
  %399 = call ptr @make_candy_text(ptr %398)
  store ptr %399, ptr @"Builtins::textTrimEnd:5", align 8
  %400 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::textTrimStart:11\00", ptr %400, align 1
  %401 = call ptr @make_candy_text(ptr %400)
  store ptr %401, ptr @"Builtins::textTrimStart:11", align 8
  %402 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textTrimStart:5\00", ptr %402, align 1
  %403 = call ptr @make_candy_text(ptr %402)
  store ptr %403, ptr @"Builtins::textTrimStart:5", align 8
  %404 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::toDebugText:5\00", ptr %404, align 1
  %405 = call ptr @make_candy_text(ptr %404)
  store ptr %405, ptr @"Builtins::toDebugText:5", align 8
  %406 = alloca i8, i64 20, align 1
  store [20 x i8] c"Builtins::typeIs:19\00", ptr %406, align 1
  %407 = call ptr @make_candy_text(ptr %406)
  store ptr %407, ptr @"Builtins::typeIs:19", align 8
  %408 = alloca i8, i64 20, align 1
  store [20 x i8] c"Builtins::typeIs:25\00", ptr %408, align 1
  %409 = call ptr @make_candy_text(ptr %408)
  store ptr %409, ptr @"Builtins::typeIs:25", align 8
  %410 = alloca i8, i64 19, align 1
  store [19 x i8] c"Builtins::typeOf:5\00", ptr %410, align 1
  %411 = call ptr @make_candy_text(ptr %410)
  store ptr %411, ptr @"Builtins::typeOf:5", align 8
  %412 = alloca i8, i64 16, align 1
  store [16 x i8] c"Examples::10:10\00", ptr %412, align 1
  %413 = call ptr @make_candy_text(ptr %412)
  store ptr %413, ptr @"Examples::10:10", align 8
  %414 = alloca i8, i64 16, align 1
  store [16 x i8] c"Examples::10:20\00", ptr %414, align 1
  %415 = call ptr @make_candy_text(ptr %414)
  store ptr %415, ptr @"Examples::10:20", align 8
  %416 = alloca i8, i64 16, align 1
  store [16 x i8] c"Examples::10:21\00", ptr %416, align 1
  %417 = call ptr @make_candy_text(ptr %416)
  store ptr %417, ptr @"Examples::10:21", align 8
  %418 = alloca i8, i64 16, align 1
  store [16 x i8] c"Examples::10:29\00", ptr %418, align 1
  %419 = call ptr @make_candy_text(ptr %418)
  store ptr %419, ptr @"Examples::10:29", align 8
  %420 = alloca i8, i64 16, align 1
  store [16 x i8] c"Examples::10:30\00", ptr %420, align 1
  %421 = call ptr @make_candy_text(ptr %420)
  store ptr %421, ptr @"Examples::10:30", align 8
  %422 = alloca i8, i64 15, align 1
  store [15 x i8] c"Examples::10:8\00", ptr %422, align 1
  %423 = call ptr @make_candy_text(ptr %422)
  store ptr %423, ptr @"Examples::10:8", align 8
  %424 = alloca i8, i64 28, align 1
  store [28 x i8] c"anonymous:$generated::needs\00", ptr %424, align 1
  %425 = call ptr @make_candy_text(ptr %424)
  store ptr %425, ptr @"anonymous:$generated::needs", align 8
  %426 = call ptr @make_candy_function(ptr @candy_builtin_equals, ptr null, i64 0)
  store ptr %426, ptr @fun_candy_builtin_equals, align 8
  %427 = call ptr @make_candy_function(ptr @candy_builtin_get_argument_count, ptr null, i64 0)
  store ptr %427, ptr @fun_candy_builtin_get_argument_count, align 8
  %428 = call ptr @make_candy_function(ptr @candy_builtin_if_else, ptr null, i64 0)
  store ptr %428, ptr @fun_candy_builtin_if_else, align 8
  %429 = call ptr @make_candy_function(ptr @candy_builtin_int_add, ptr null, i64 0)
  store ptr %429, ptr @fun_candy_builtin_int_add, align 8
  %430 = call ptr @make_candy_function(ptr @candy_builtin_int_bit_length, ptr null, i64 0)
  store ptr %430, ptr @fun_candy_builtin_int_bit_length, align 8
  %431 = call ptr @make_candy_function(ptr @candy_builtin_int_bitwise_and, ptr null, i64 0)
  store ptr %431, ptr @fun_candy_builtin_int_bitwise_and, align 8
  %432 = call ptr @make_candy_function(ptr @candy_builtin_int_bitwise_or, ptr null, i64 0)
  store ptr %432, ptr @fun_candy_builtin_int_bitwise_or, align 8
  %433 = call ptr @make_candy_function(ptr @candy_builtin_int_bitwise_xor, ptr null, i64 0)
  store ptr %433, ptr @fun_candy_builtin_int_bitwise_xor, align 8
  %434 = call ptr @make_candy_function(ptr @candy_builtin_int_compare_to, ptr null, i64 0)
  store ptr %434, ptr @fun_candy_builtin_int_compare_to, align 8
  %435 = call ptr @make_candy_function(ptr @candy_builtin_int_divide_truncating, ptr null, i64 0)
  store ptr %435, ptr @fun_candy_builtin_int_divide_truncating, align 8
  %436 = call ptr @make_candy_function(ptr @candy_builtin_int_modulo, ptr null, i64 0)
  store ptr %436, ptr @fun_candy_builtin_int_modulo, align 8
  %437 = call ptr @make_candy_function(ptr @candy_builtin_int_multiply, ptr null, i64 0)
  store ptr %437, ptr @fun_candy_builtin_int_multiply, align 8
  %438 = call ptr @make_candy_function(ptr @candy_builtin_int_parse, ptr null, i64 0)
  store ptr %438, ptr @fun_candy_builtin_int_parse, align 8
  %439 = call ptr @make_candy_function(ptr @candy_builtin_int_remainder, ptr null, i64 0)
  store ptr %439, ptr @fun_candy_builtin_int_remainder, align 8
  %440 = call ptr @make_candy_function(ptr @candy_builtin_int_shift_left, ptr null, i64 0)
  store ptr %440, ptr @fun_candy_builtin_int_shift_left, align 8
  %441 = call ptr @make_candy_function(ptr @candy_builtin_int_shift_right, ptr null, i64 0)
  store ptr %441, ptr @fun_candy_builtin_int_shift_right, align 8
  %442 = call ptr @make_candy_function(ptr @candy_builtin_int_subtract, ptr null, i64 0)
  store ptr %442, ptr @fun_candy_builtin_int_subtract, align 8
  %443 = call ptr @make_candy_function(ptr @candy_builtin_list_filled, ptr null, i64 0)
  store ptr %443, ptr @fun_candy_builtin_list_filled, align 8
  %444 = call ptr @make_candy_function(ptr @candy_builtin_list_get, ptr null, i64 0)
  store ptr %444, ptr @fun_candy_builtin_list_get, align 8
  %445 = call ptr @make_candy_function(ptr @candy_builtin_list_insert, ptr null, i64 0)
  store ptr %445, ptr @fun_candy_builtin_list_insert, align 8
  %446 = call ptr @make_candy_function(ptr @candy_builtin_list_length, ptr null, i64 0)
  store ptr %446, ptr @fun_candy_builtin_list_length, align 8
  %447 = call ptr @make_candy_function(ptr @candy_builtin_list_remove_at, ptr null, i64 0)
  store ptr %447, ptr @fun_candy_builtin_list_remove_at, align 8
  %448 = call ptr @make_candy_function(ptr @candy_builtin_list_replace, ptr null, i64 0)
  store ptr %448, ptr @fun_candy_builtin_list_replace, align 8
  %449 = call ptr @make_candy_function(ptr @candy_builtin_print, ptr null, i64 0)
  store ptr %449, ptr @fun_candy_builtin_print, align 8
  %450 = call ptr @make_candy_function(ptr @candy_builtin_struct_get.1, ptr null, i64 0)
  store ptr %450, ptr @fun_candy_builtin_struct_get, align 8
  %451 = call ptr @make_candy_function(ptr @candy_builtin_struct_get_keys, ptr null, i64 0)
  store ptr %451, ptr @fun_candy_builtin_struct_get_keys, align 8
  %452 = call ptr @make_candy_function(ptr @candy_builtin_struct_has_key, ptr null, i64 0)
  store ptr %452, ptr @fun_candy_builtin_struct_has_key, align 8
  %453 = call ptr @make_candy_function(ptr @candy_builtin_tag_get_value, ptr null, i64 0)
  store ptr %453, ptr @fun_candy_builtin_tag_get_value, align 8
  %454 = call ptr @make_candy_function(ptr @candy_builtin_tag_has_value, ptr null, i64 0)
  store ptr %454, ptr @fun_candy_builtin_tag_has_value, align 8
  %455 = call ptr @make_candy_function(ptr @candy_builtin_tag_without_value, ptr null, i64 0)
  store ptr %455, ptr @fun_candy_builtin_tag_without_value, align 8
  %456 = call ptr @make_candy_function(ptr @candy_builtin_text_characters, ptr null, i64 0)
  store ptr %456, ptr @fun_candy_builtin_text_characters, align 8
  %457 = call ptr @make_candy_function(ptr @candy_builtin_text_concatenate, ptr null, i64 0)
  store ptr %457, ptr @fun_candy_builtin_text_concatenate, align 8
  %458 = call ptr @make_candy_function(ptr @candy_builtin_text_contains, ptr null, i64 0)
  store ptr %458, ptr @fun_candy_builtin_text_contains, align 8
  %459 = call ptr @make_candy_function(ptr @candy_builtin_text_ends_with, ptr null, i64 0)
  store ptr %459, ptr @fun_candy_builtin_text_ends_with, align 8
  %460 = call ptr @make_candy_function(ptr @candy_builtin_text_from_utf8, ptr null, i64 0)
  store ptr %460, ptr @fun_candy_builtin_text_from_utf8, align 8
  %461 = call ptr @make_candy_function(ptr @candy_builtin_text_get_range, ptr null, i64 0)
  store ptr %461, ptr @fun_candy_builtin_text_get_range, align 8
  %462 = call ptr @make_candy_function(ptr @candy_builtin_text_is_empty, ptr null, i64 0)
  store ptr %462, ptr @fun_candy_builtin_text_is_empty, align 8
  %463 = call ptr @make_candy_function(ptr @candy_builtin_text_length, ptr null, i64 0)
  store ptr %463, ptr @fun_candy_builtin_text_length, align 8
  %464 = call ptr @make_candy_function(ptr @candy_builtin_text_starts_with, ptr null, i64 0)
  store ptr %464, ptr @fun_candy_builtin_text_starts_with, align 8
  %465 = call ptr @make_candy_function(ptr @candy_builtin_text_trim_end, ptr null, i64 0)
  store ptr %465, ptr @fun_candy_builtin_text_trim_end, align 8
  %466 = call ptr @make_candy_function(ptr @candy_builtin_text_trim_start, ptr null, i64 0)
  store ptr %466, ptr @fun_candy_builtin_text_trim_start, align 8
  %467 = call ptr @make_candy_function(ptr @candy_builtin_to_debug_text, ptr null, i64 0)
  store ptr %467, ptr @fun_candy_builtin_to_debug_text, align 8
  %468 = call ptr @make_candy_function(ptr @candy_builtin_type_of, ptr null, i64 0)
  store ptr %468, ptr @fun_candy_builtin_type_of, align 8
  %469 = alloca i8, i64 6, align 1
  store [6 x i8] c"Equal\00", ptr %469, align 1
  %470 = call ptr @make_candy_tag(ptr %469, ptr null)
  store ptr %470, ptr @tag_Equal, align 8
  %471 = alloca i8, i64 7, align 1
  store [7 x i8] c"Equals\00", ptr %471, align 1
  %472 = call ptr @make_candy_tag(ptr %471, ptr null)
  store ptr %472, ptr @tag_Equals, align 8
  %473 = alloca i8, i64 6, align 1
  store [6 x i8] c"False\00", ptr %473, align 1
  %474 = call ptr @make_candy_tag(ptr %473, ptr null)
  store ptr %474, ptr @tag_False, align 8
  %475 = alloca i8, i64 9, align 1
  store [9 x i8] c"Function\00", ptr %475, align 1
  %476 = call ptr @make_candy_tag(ptr %475, ptr null)
  store ptr %476, ptr @tag_Function, align 8
  %477 = alloca i8, i64 12, align 1
  store [12 x i8] c"FunctionRun\00", ptr %477, align 1
  %478 = call ptr @make_candy_tag(ptr %477, ptr null)
  store ptr %478, ptr @tag_FunctionRun, align 8
  %479 = alloca i8, i64 17, align 1
  store [17 x i8] c"GetArgumentCount\00", ptr %479, align 1
  %480 = call ptr @make_candy_tag(ptr %479, ptr null)
  store ptr %480, ptr @tag_GetArgumentCount, align 8
  %481 = alloca i8, i64 8, align 1
  store [8 x i8] c"Greater\00", ptr %481, align 1
  %482 = call ptr @make_candy_tag(ptr %481, ptr null)
  store ptr %482, ptr @tag_Greater, align 8
  %483 = alloca i8, i64 7, align 1
  store [7 x i8] c"IfElse\00", ptr %483, align 1
  %484 = call ptr @make_candy_tag(ptr %483, ptr null)
  store ptr %484, ptr @tag_IfElse, align 8
  %485 = alloca i8, i64 4, align 1
  store [4 x i8] c"Int\00", ptr %485, align 1
  %486 = call ptr @make_candy_tag(ptr %485, ptr null)
  store ptr %486, ptr @tag_Int, align 8
  %487 = alloca i8, i64 7, align 1
  store [7 x i8] c"IntAdd\00", ptr %487, align 1
  %488 = call ptr @make_candy_tag(ptr %487, ptr null)
  store ptr %488, ptr @tag_IntAdd, align 8
  %489 = alloca i8, i64 13, align 1
  store [13 x i8] c"IntBitLength\00", ptr %489, align 1
  %490 = call ptr @make_candy_tag(ptr %489, ptr null)
  store ptr %490, ptr @tag_IntBitLength, align 8
  %491 = alloca i8, i64 14, align 1
  store [14 x i8] c"IntBitwiseAnd\00", ptr %491, align 1
  %492 = call ptr @make_candy_tag(ptr %491, ptr null)
  store ptr %492, ptr @tag_IntBitwiseAnd, align 8
  %493 = alloca i8, i64 13, align 1
  store [13 x i8] c"IntBitwiseOr\00", ptr %493, align 1
  %494 = call ptr @make_candy_tag(ptr %493, ptr null)
  store ptr %494, ptr @tag_IntBitwiseOr, align 8
  %495 = alloca i8, i64 14, align 1
  store [14 x i8] c"IntBitwiseXor\00", ptr %495, align 1
  %496 = call ptr @make_candy_tag(ptr %495, ptr null)
  store ptr %496, ptr @tag_IntBitwiseXor, align 8
  %497 = alloca i8, i64 13, align 1
  store [13 x i8] c"IntCompareTo\00", ptr %497, align 1
  %498 = call ptr @make_candy_tag(ptr %497, ptr null)
  store ptr %498, ptr @tag_IntCompareTo, align 8
  %499 = alloca i8, i64 20, align 1
  store [20 x i8] c"IntDivideTruncating\00", ptr %499, align 1
  %500 = call ptr @make_candy_tag(ptr %499, ptr null)
  store ptr %500, ptr @tag_IntDivideTruncating, align 8
  %501 = alloca i8, i64 10, align 1
  store [10 x i8] c"IntModulo\00", ptr %501, align 1
  %502 = call ptr @make_candy_tag(ptr %501, ptr null)
  store ptr %502, ptr @tag_IntModulo, align 8
  %503 = alloca i8, i64 12, align 1
  store [12 x i8] c"IntMultiply\00", ptr %503, align 1
  %504 = call ptr @make_candy_tag(ptr %503, ptr null)
  store ptr %504, ptr @tag_IntMultiply, align 8
  %505 = alloca i8, i64 9, align 1
  store [9 x i8] c"IntParse\00", ptr %505, align 1
  %506 = call ptr @make_candy_tag(ptr %505, ptr null)
  store ptr %506, ptr @tag_IntParse, align 8
  %507 = alloca i8, i64 13, align 1
  store [13 x i8] c"IntRemainder\00", ptr %507, align 1
  %508 = call ptr @make_candy_tag(ptr %507, ptr null)
  store ptr %508, ptr @tag_IntRemainder, align 8
  %509 = alloca i8, i64 13, align 1
  store [13 x i8] c"IntShiftLeft\00", ptr %509, align 1
  %510 = call ptr @make_candy_tag(ptr %509, ptr null)
  store ptr %510, ptr @tag_IntShiftLeft, align 8
  %511 = alloca i8, i64 14, align 1
  store [14 x i8] c"IntShiftRight\00", ptr %511, align 1
  %512 = call ptr @make_candy_tag(ptr %511, ptr null)
  store ptr %512, ptr @tag_IntShiftRight, align 8
  %513 = alloca i8, i64 12, align 1
  store [12 x i8] c"IntSubtract\00", ptr %513, align 1
  %514 = call ptr @make_candy_tag(ptr %513, ptr null)
  store ptr %514, ptr @tag_IntSubtract, align 8
  %515 = alloca i8, i64 5, align 1
  store [5 x i8] c"Less\00", ptr %515, align 1
  %516 = call ptr @make_candy_tag(ptr %515, ptr null)
  store ptr %516, ptr @tag_Less, align 8
  %517 = alloca i8, i64 5, align 1
  store [5 x i8] c"List\00", ptr %517, align 1
  %518 = call ptr @make_candy_tag(ptr %517, ptr null)
  store ptr %518, ptr @tag_List, align 8
  %519 = alloca i8, i64 11, align 1
  store [11 x i8] c"ListFilled\00", ptr %519, align 1
  %520 = call ptr @make_candy_tag(ptr %519, ptr null)
  store ptr %520, ptr @tag_ListFilled, align 8
  %521 = alloca i8, i64 8, align 1
  store [8 x i8] c"ListGet\00", ptr %521, align 1
  %522 = call ptr @make_candy_tag(ptr %521, ptr null)
  store ptr %522, ptr @tag_ListGet, align 8
  %523 = alloca i8, i64 11, align 1
  store [11 x i8] c"ListInsert\00", ptr %523, align 1
  %524 = call ptr @make_candy_tag(ptr %523, ptr null)
  store ptr %524, ptr @tag_ListInsert, align 8
  %525 = alloca i8, i64 11, align 1
  store [11 x i8] c"ListLength\00", ptr %525, align 1
  %526 = call ptr @make_candy_tag(ptr %525, ptr null)
  store ptr %526, ptr @tag_ListLength, align 8
  %527 = alloca i8, i64 13, align 1
  store [13 x i8] c"ListRemoveAt\00", ptr %527, align 1
  %528 = call ptr @make_candy_tag(ptr %527, ptr null)
  store ptr %528, ptr @tag_ListRemoveAt, align 8
  %529 = alloca i8, i64 12, align 1
  store [12 x i8] c"ListReplace\00", ptr %529, align 1
  %530 = call ptr @make_candy_tag(ptr %529, ptr null)
  store ptr %530, ptr @tag_ListReplace, align 8
  %531 = alloca i8, i64 5, align 1
  store [5 x i8] c"Main\00", ptr %531, align 1
  %532 = call ptr @make_candy_tag(ptr %531, ptr null)
  store ptr %532, ptr @tag_Main, align 8
  %533 = alloca i8, i64 6, align 1
  store [6 x i8] c"Match\00", ptr %533, align 1
  %534 = call ptr @make_candy_tag(ptr %533, ptr null)
  store ptr %534, ptr @tag_Match, align 8
  %535 = alloca i8, i64 8, align 1
  store [8 x i8] c"NoMatch\00", ptr %535, align 1
  %536 = call ptr @make_candy_tag(ptr %535, ptr null)
  store ptr %536, ptr @tag_NoMatch, align 8
  %537 = alloca i8, i64 8, align 1
  store [8 x i8] c"Nothing\00", ptr %537, align 1
  %538 = call ptr @make_candy_tag(ptr %537, ptr null)
  store ptr %538, ptr @tag_Nothing, align 8
  %539 = alloca i8, i64 6, align 1
  store [6 x i8] c"Print\00", ptr %539, align 1
  %540 = call ptr @make_candy_tag(ptr %539, ptr null)
  store ptr %540, ptr @tag_Print, align 8
  %541 = alloca i8, i64 7, align 1
  store [7 x i8] c"Struct\00", ptr %541, align 1
  %542 = call ptr @make_candy_tag(ptr %541, ptr null)
  store ptr %542, ptr @tag_Struct, align 8
  %543 = alloca i8, i64 10, align 1
  store [10 x i8] c"StructGet\00", ptr %543, align 1
  %544 = call ptr @make_candy_tag(ptr %543, ptr null)
  store ptr %544, ptr @tag_StructGet, align 8
  %545 = alloca i8, i64 14, align 1
  store [14 x i8] c"StructGetKeys\00", ptr %545, align 1
  %546 = call ptr @make_candy_tag(ptr %545, ptr null)
  store ptr %546, ptr @tag_StructGetKeys, align 8
  %547 = alloca i8, i64 13, align 1
  store [13 x i8] c"StructHasKey\00", ptr %547, align 1
  %548 = call ptr @make_candy_tag(ptr %547, ptr null)
  store ptr %548, ptr @tag_StructHasKey, align 8
  %549 = alloca i8, i64 4, align 1
  store [4 x i8] c"Tag\00", ptr %549, align 1
  %550 = call ptr @make_candy_tag(ptr %549, ptr null)
  store ptr %550, ptr @tag_Tag, align 8
  %551 = alloca i8, i64 12, align 1
  store [12 x i8] c"TagGetValue\00", ptr %551, align 1
  %552 = call ptr @make_candy_tag(ptr %551, ptr null)
  store ptr %552, ptr @tag_TagGetValue, align 8
  %553 = alloca i8, i64 12, align 1
  store [12 x i8] c"TagHasValue\00", ptr %553, align 1
  %554 = call ptr @make_candy_tag(ptr %553, ptr null)
  store ptr %554, ptr @tag_TagHasValue, align 8
  %555 = alloca i8, i64 16, align 1
  store [16 x i8] c"TagWithoutValue\00", ptr %555, align 1
  %556 = call ptr @make_candy_tag(ptr %555, ptr null)
  store ptr %556, ptr @tag_TagWithoutValue, align 8
  %557 = alloca i8, i64 5, align 1
  store [5 x i8] c"Text\00", ptr %557, align 1
  %558 = call ptr @make_candy_tag(ptr %557, ptr null)
  store ptr %558, ptr @tag_Text, align 8
  %559 = alloca i8, i64 15, align 1
  store [15 x i8] c"TextCharacters\00", ptr %559, align 1
  %560 = call ptr @make_candy_tag(ptr %559, ptr null)
  store ptr %560, ptr @tag_TextCharacters, align 8
  %561 = alloca i8, i64 16, align 1
  store [16 x i8] c"TextConcatenate\00", ptr %561, align 1
  %562 = call ptr @make_candy_tag(ptr %561, ptr null)
  store ptr %562, ptr @tag_TextConcatenate, align 8
  %563 = alloca i8, i64 13, align 1
  store [13 x i8] c"TextContains\00", ptr %563, align 1
  %564 = call ptr @make_candy_tag(ptr %563, ptr null)
  store ptr %564, ptr @tag_TextContains, align 8
  %565 = alloca i8, i64 13, align 1
  store [13 x i8] c"TextEndsWith\00", ptr %565, align 1
  %566 = call ptr @make_candy_tag(ptr %565, ptr null)
  store ptr %566, ptr @tag_TextEndsWith, align 8
  %567 = alloca i8, i64 13, align 1
  store [13 x i8] c"TextFromUtf8\00", ptr %567, align 1
  %568 = call ptr @make_candy_tag(ptr %567, ptr null)
  store ptr %568, ptr @tag_TextFromUtf8, align 8
  %569 = alloca i8, i64 13, align 1
  store [13 x i8] c"TextGetRange\00", ptr %569, align 1
  %570 = call ptr @make_candy_tag(ptr %569, ptr null)
  store ptr %570, ptr @tag_TextGetRange, align 8
  %571 = alloca i8, i64 12, align 1
  store [12 x i8] c"TextIsEmpty\00", ptr %571, align 1
  %572 = call ptr @make_candy_tag(ptr %571, ptr null)
  store ptr %572, ptr @tag_TextIsEmpty, align 8
  %573 = alloca i8, i64 11, align 1
  store [11 x i8] c"TextLength\00", ptr %573, align 1
  %574 = call ptr @make_candy_tag(ptr %573, ptr null)
  store ptr %574, ptr @tag_TextLength, align 8
  %575 = alloca i8, i64 15, align 1
  store [15 x i8] c"TextStartsWith\00", ptr %575, align 1
  %576 = call ptr @make_candy_tag(ptr %575, ptr null)
  store ptr %576, ptr @tag_TextStartsWith, align 8
  %577 = alloca i8, i64 12, align 1
  store [12 x i8] c"TextTrimEnd\00", ptr %577, align 1
  %578 = call ptr @make_candy_tag(ptr %577, ptr null)
  store ptr %578, ptr @tag_TextTrimEnd, align 8
  %579 = alloca i8, i64 14, align 1
  store [14 x i8] c"TextTrimStart\00", ptr %579, align 1
  %580 = call ptr @make_candy_tag(ptr %579, ptr null)
  store ptr %580, ptr @tag_TextTrimStart, align 8
  %581 = alloca i8, i64 12, align 1
  store [12 x i8] c"ToDebugText\00", ptr %581, align 1
  %582 = call ptr @make_candy_tag(ptr %581, ptr null)
  store ptr %582, ptr @tag_ToDebugText, align 8
  %583 = alloca i8, i64 5, align 1
  store [5 x i8] c"True\00", ptr %583, align 1
  %584 = call ptr @make_candy_tag(ptr %583, ptr null)
  store ptr %584, ptr @tag_True, align 8
  %585 = alloca i8, i64 7, align 1
  store [7 x i8] c"TypeOf\00", ptr %585, align 1
  %586 = call ptr @make_candy_tag(ptr %585, ptr null)
  store ptr %586, ptr @tag_TypeOf, align 8
  %587 = call ptr @make_candy_int(i64 0)
  store ptr %587, ptr @num_0, align 8
  %588 = call ptr @make_candy_int(i64 1)
  store ptr %588, ptr @num_1, align 8
  %589 = call ptr @make_candy_int(i64 2)
  store ptr %589, ptr @num_2, align 8
  %590 = call ptr @make_candy_int(i64 9223372036854775807)
  store ptr %590, ptr @num_340282366920938463463374607431768211455, align 8
  %591 = alloca i8, i64 2, align 1
  store [2 x i8] c".\00", ptr %591, align 1
  %592 = call ptr @make_candy_text(ptr %591)
  store ptr %592, ptr @text_., align 8
  %593 = alloca i8, i64 46, align 1
  store [46 x i8] c". You might want to call `shiftLeft` instead.\00", ptr %593, align 1
  %594 = call ptr @make_candy_text(ptr %593)
  store ptr %594, ptr @"text_. You might want to call `shiftLeft` instead.", align 8
  %595 = alloca i8, i64 47, align 1
  store [47 x i8] c". You might want to call `shiftRight` instead.\00", ptr %595, align 1
  %596 = call ptr @make_candy_text(ptr %595)
  store ptr %596, ptr @"text_. You might want to call `shiftRight` instead.", align 8
  %597 = alloca i8, i64 21, align 1
  store [21 x i8] c"Expected Equal, got \00", ptr %597, align 1
  %598 = call ptr @make_candy_text(ptr %597)
  store ptr %598, ptr @"text_Expected Equal, got ", align 8
  %599 = alloca i8, i64 21, align 1
  store [21 x i8] c"Expected False, got \00", ptr %599, align 1
  %600 = call ptr @make_candy_text(ptr %599)
  store ptr %600, ptr @"text_Expected False, got ", align 8
  %601 = alloca i8, i64 23, align 1
  store [23 x i8] c"Expected Greater, got \00", ptr %601, align 1
  %602 = call ptr @make_candy_text(ptr %601)
  store ptr %602, ptr @"text_Expected Greater, got ", align 8
  %603 = alloca i8, i64 20, align 1
  store [20 x i8] c"Expected Less, got \00", ptr %603, align 1
  %604 = call ptr @make_candy_text(ptr %603)
  store ptr %604, ptr @"text_Expected Less, got ", align 8
  %605 = alloca i8, i64 20, align 1
  store [20 x i8] c"Expected True, got \00", ptr %605, align 1
  %606 = call ptr @make_candy_text(ptr %605)
  store ptr %606, ptr @"text_Expected True, got ", align 8
  %607 = alloca i8, i64 22, align 1
  store [22 x i8] c"Expected a Tag, got `\00", ptr %607, align 1
  %608 = call ptr @make_candy_text(ptr %607)
  store ptr %608, ptr @"text_Expected a Tag, got `", align 8
  %609 = alloca i8, i64 52, align 1
  store [52 x i8] c"Expected tag to not have a value, but it has one: `\00", ptr %609, align 1
  %610 = call ptr @make_candy_text(ptr %609)
  store ptr %610, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %611 = alloca i8, i64 38, align 1
  store [38 x i8] c"No case matched the given expression.\00", ptr %611, align 1
  %612 = call ptr @make_candy_text(ptr %611)
  store ptr %612, ptr @"text_No case matched the given expression.", align 8
  %613 = alloca i8, i64 43, align 1
  store [43 x i8] c"Shifts by that much are not yet supported.\00", ptr %613, align 1
  %614 = call ptr @make_candy_text(ptr %613)
  store ptr %614, ptr @"text_Shifts by that much are not yet supported.", align 8
  %615 = alloca i8, i64 9, align 1
  store [9 x i8] c"Struct `\00", ptr %615, align 1
  %616 = call ptr @make_candy_text(ptr %615)
  store ptr %616, ptr @"text_Struct `", align 8
  %617 = alloca i8, i64 50, align 1
  store [50 x i8] c"The `condition` must be either `True` or `False`.\00", ptr %617, align 1
  %618 = call ptr @make_candy_text(ptr %617)
  store ptr %618, ptr @"text_The `condition` must be either `True` or `False`.", align 8
  %619 = alloca i8, i64 29, align 1
  store [29 x i8] c"The `reason` must be a text.\00", ptr %619, align 1
  %620 = call ptr @make_candy_text(ptr %619)
  store ptr %620, ptr @"text_The `reason` must be a text.", align 8
  %621 = alloca i8, i64 33, align 1
  store [33 x i8] c"The shift `amount` is negative: \00", ptr %621, align 1
  %622 = call ptr @make_candy_text(ptr %621)
  store ptr %622, ptr @"text_The shift `amount` is negative: ", align 8
  %623 = alloca i8, i64 26, align 1
  store [26 x i8] c"You can't divide by zero.\00", ptr %623, align 1
  %624 = call ptr @make_candy_text(ptr %623)
  store ptr %624, ptr @"text_You can't divide by zero.", align 8
  %625 = alloca i8, i64 23, align 1
  store [23 x i8] c"` is missing the key `\00", ptr %625, align 1
  %626 = call ptr @make_candy_text(ptr %625)
  store ptr %626, ptr @"text_` is missing the key `", align 8
  %627 = alloca i8, i64 3, align 1
  store [3 x i8] c"`.\00", ptr %627, align 1
  %628 = call ptr @make_candy_text(ptr %627)
  store ptr %628, ptr @"text_`.", align 8
  %629 = alloca i8, i64 26, align 1
  store [26 x i8] c"`False` was not satisfied\00", ptr %629, align 1
  %630 = call ptr @make_candy_text(ptr %629)
  store ptr %630, ptr @"text_`False` was not satisfied", align 8
  %631 = alloca i8, i64 35, align 1
  store [35 x i8] c"`a | typeIs Int` was not satisfied\00", ptr %631, align 1
  %632 = call ptr @make_candy_text(ptr %631)
  store ptr %632, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %633 = alloca i8, i64 36, align 1
  store [36 x i8] c"`a | typeIs Text` was not satisfied\00", ptr %633, align 1
  %634 = call ptr @make_candy_text(ptr %633)
  store ptr %634, ptr @"text_`a | typeIs Text` was not satisfied", align 8
  %635 = alloca i8, i64 40, align 1
  store [40 x i8] c"`amount | typeIs Int` was not satisfied\00", ptr %635, align 1
  %636 = call ptr @make_candy_text(ptr %635)
  store ptr %636, ptr @"text_`amount | typeIs Int` was not satisfied", align 8
  %637 = alloca i8, i64 35, align 1
  store [35 x i8] c"`b | typeIs Int` was not satisfied\00", ptr %637, align 1
  %638 = call ptr @make_candy_text(ptr %637)
  store ptr %638, ptr @"text_`b | typeIs Int` was not satisfied", align 8
  %639 = alloca i8, i64 36, align 1
  store [36 x i8] c"`b | typeIs Text` was not satisfied\00", ptr %639, align 1
  %640 = call ptr @make_candy_text(ptr %639)
  store ptr %640, ptr @"text_`b | typeIs Text` was not satisfied", align 8
  %641 = alloca i8, i64 40, align 1
  store [40 x i8] c"`bytes | typeIs List` was not satisfied\00", ptr %641, align 1
  %642 = call ptr @make_candy_text(ptr %641)
  store ptr %642, ptr @"text_`bytes | typeIs List` was not satisfied", align 8
  %643 = alloca i8, i64 36, align 1
  store [36 x i8] c"`conditionIsBool` was not satisfied\00", ptr %643, align 1
  %644 = call ptr @make_candy_text(ptr %643)
  store ptr %644, ptr @"text_`conditionIsBool` was not satisfied", align 8
  %645 = alloca i8, i64 42, align 1
  store [42 x i8] c"`dividend | typeIs Int` was not satisfied\00", ptr %645, align 1
  %646 = call ptr @make_candy_text(ptr %645)
  store ptr %646, ptr @"text_`dividend | typeIs Int` was not satisfied", align 8
  %647 = alloca i8, i64 41, align 1
  store [41 x i8] c"`divisor | typeIs Int` was not satisfied\00", ptr %647, align 1
  %648 = call ptr @make_candy_text(ptr %647)
  store ptr %648, ptr @"text_`divisor | typeIs Int` was not satisfied", align 8
  %649 = alloca i8, i64 55, align 1
  store [55 x i8] c"`else | getArgumentCount | equals 0` was not satisfied\00", ptr %649, align 1
  %650 = call ptr @make_candy_text(ptr %649)
  store ptr %650, ptr @"text_`else | getArgumentCount | equals 0` was not satisfied", align 8
  %651 = alloca i8, i64 43, align 1
  store [43 x i8] c"`else | typeIs Function` was not satisfied\00", ptr %651, align 1
  %652 = call ptr @make_candy_text(ptr %651)
  store ptr %652, ptr @"text_`else | typeIs Function` was not satisfied", align 8
  %653 = alloca i8, i64 79, align 1
  store [77 x i8] c"`endExclusive | isLessThanOrEqualTo (text | (.textLength)` was not satisfied\00", ptr %653, align 1
  %654 = call ptr @make_candy_text(ptr %653)
  store ptr %654, ptr @"text_`endExclusive | isLessThanOrEqualTo (text | \E2\9C\A8.textLength)` was not satisfied", align 8
  %655 = alloca i8, i64 49, align 1
  store [49 x i8] c"`endExclusive | isNonNegative` was not satisfied\00", ptr %655, align 1
  %656 = call ptr @make_candy_text(ptr %655)
  store ptr %656, ptr @"text_`endExclusive | isNonNegative` was not satisfied", align 8
  %657 = alloca i8, i64 46, align 1
  store [46 x i8] c"`endExclusive | typeIs Int` was not satisfied\00", ptr %657, align 1
  %658 = call ptr @make_candy_text(ptr %657)
  store ptr %658, ptr @"text_`endExclusive | typeIs Int` was not satisfied", align 8
  %659 = alloca i8, i64 41, align 1
  store [41 x i8] c"`factorA | typeIs Int` was not satisfied\00", ptr %659, align 1
  %660 = call ptr @make_candy_text(ptr %659)
  store ptr %660, ptr @"text_`factorA | typeIs Int` was not satisfied", align 8
  %661 = alloca i8, i64 41, align 1
  store [41 x i8] c"`factorB | typeIs Int` was not satisfied\00", ptr %661, align 1
  %662 = call ptr @make_candy_text(ptr %661)
  store ptr %662, ptr @"text_`factorB | typeIs Int` was not satisfied", align 8
  %663 = alloca i8, i64 47, align 1
  store [47 x i8] c"`function | typeIs Function` was not satisfied\00", ptr %663, align 1
  %664 = call ptr @make_candy_text(ptr %663)
  store ptr %664, ptr @"text_`function | typeIs Function` was not satisfied", align 8
  %665 = alloca i8, i64 63, align 1
  store [61 x i8] c"`function | (.getArgumentCount | equals 0` was not satisfied\00", ptr %665, align 1
  %666 = call ptr @make_candy_text(ptr %665)
  store ptr %666, ptr @"text_`function | \E2\9C\A8.getArgumentCount | equals 0` was not satisfied", align 8
  %667 = alloca i8, i64 75, align 1
  store [75 x i8] c"`index | intCompareTo (list | listLength) | equals Less` was not satisfied\00", ptr %667, align 1
  %668 = call ptr @make_candy_text(ptr %667)
  store ptr %668, ptr @"text_`index | intCompareTo (list | listLength) | equals Less` was not satisfied", align 8
  %669 = alloca i8, i64 79, align 1
  store [77 x i8] c"`index | intCompareTo (list | (.listLength) | equals Less` was not satisfied\00", ptr %669, align 1
  %670 = call ptr @make_candy_text(ptr %669)
  store ptr %670, ptr @"text_`index | intCompareTo (list | \E2\9C\A8.listLength) | equals Less` was not satisfied", align 8
  %671 = alloca i8, i64 72, align 1
  store [70 x i8] c"`index | isLessThanOrEqualTo (list | (.listLength)` was not satisfied\00", ptr %671, align 1
  %672 = call ptr @make_candy_text(ptr %671)
  store ptr %672, ptr @"text_`index | isLessThanOrEqualTo (list | \E2\9C\A8.listLength)` was not satisfied", align 8
  %673 = alloca i8, i64 42, align 1
  store [42 x i8] c"`index | isNonNegative` was not satisfied\00", ptr %673, align 1
  %674 = call ptr @make_candy_text(ptr %673)
  store ptr %674, ptr @"text_`index | isNonNegative` was not satisfied", align 8
  %675 = alloca i8, i64 39, align 1
  store [39 x i8] c"`index | typeIs Int` was not satisfied\00", ptr %675, align 1
  %676 = call ptr @make_candy_text(ptr %675)
  store ptr %676, ptr @"text_`index | typeIs Int` was not satisfied", align 8
  %677 = alloca i8, i64 37, align 1
  store [37 x i8] c"`int | typeIs Int` was not satisfied\00", ptr %677, align 1
  %678 = call ptr @make_candy_text(ptr %677)
  store ptr %678, ptr @"text_`int | typeIs Int` was not satisfied", align 8
  %679 = alloca i8, i64 43, align 1
  store [43 x i8] c"`length | isNonNegative` was not satisfied\00", ptr %679, align 1
  %680 = call ptr @make_candy_text(ptr %679)
  store ptr %680, ptr @"text_`length | isNonNegative` was not satisfied", align 8
  %681 = alloca i8, i64 40, align 1
  store [40 x i8] c"`length | typeIs Int` was not satisfied\00", ptr %681, align 1
  %682 = call ptr @make_candy_text(ptr %681)
  store ptr %682, ptr @"text_`length | typeIs Int` was not satisfied", align 8
  %683 = alloca i8, i64 39, align 1
  store [39 x i8] c"`list | typeIs List` was not satisfied\00", ptr %683, align 1
  %684 = call ptr @make_candy_text(ptr %683)
  store ptr %684, ptr @"text_`list | typeIs List` was not satisfied", align 8
  %685 = alloca i8, i64 42, align 1
  store [42 x i8] c"`message | typeIs Text` was not satisfied\00", ptr %685, align 1
  %686 = call ptr @make_candy_text(ptr %685)
  store ptr %686, ptr @"text_`message | typeIs Text` was not satisfied", align 8
  %687 = alloca i8, i64 41, align 1
  store [41 x i8] c"`minuend | typeIs Int` was not satisfied\00", ptr %687, align 1
  %688 = call ptr @make_candy_text(ptr %687)
  store ptr %688, ptr @"text_`minuend | typeIs Int` was not satisfied", align 8
  %689 = alloca i8, i64 42, align 1
  store [42 x i8] c"`pattern | typeIs Text` was not satisfied\00", ptr %689, align 1
  %690 = call ptr @make_candy_text(ptr %689)
  store ptr %690, ptr @"text_`pattern | typeIs Text` was not satisfied", align 8
  %691 = alloca i8, i64 41, align 1
  store [41 x i8] c"`prefix | typeIs Text` was not satisfied\00", ptr %691, align 1
  %692 = call ptr @make_candy_text(ptr %691)
  store ptr %692, ptr @"text_`prefix | typeIs Text` was not satisfied", align 8
  %693 = alloca i8, i64 81, align 1
  store [79 x i8] c"`startInclusive | isLessThanOrEqualTo (text | (.textLength)` was not satisfied\00", ptr %693, align 1
  %694 = call ptr @make_candy_text(ptr %693)
  store ptr %694, ptr @"text_`startInclusive | isLessThanOrEqualTo (text | \E2\9C\A8.textLength)` was not satisfied", align 8
  %695 = alloca i8, i64 70, align 1
  store [70 x i8] c"`startInclusive | isLessThanOrEqualTo endExclusive` was not satisfied\00", ptr %695, align 1
  %696 = call ptr @make_candy_text(ptr %695)
  store ptr %696, ptr @"text_`startInclusive | isLessThanOrEqualTo endExclusive` was not satisfied", align 8
  %697 = alloca i8, i64 51, align 1
  store [51 x i8] c"`startInclusive | isNonNegative` was not satisfied\00", ptr %697, align 1
  %698 = call ptr @make_candy_text(ptr %697)
  store ptr %698, ptr @"text_`startInclusive | isNonNegative` was not satisfied", align 8
  %699 = alloca i8, i64 48, align 1
  store [48 x i8] c"`startInclusive | typeIs Int` was not satisfied\00", ptr %699, align 1
  %700 = call ptr @make_candy_text(ptr %699)
  store ptr %700, ptr @"text_`startInclusive | typeIs Int` was not satisfied", align 8
  %701 = alloca i8, i64 43, align 1
  store [43 x i8] c"`struct | typeIs Struct` was not satisfied\00", ptr %701, align 1
  %702 = call ptr @make_candy_text(ptr %701)
  store ptr %702, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %703 = alloca i8, i64 44, align 1
  store [44 x i8] c"`subtrahend | typeIs Int` was not satisfied\00", ptr %703, align 1
  %704 = call ptr @make_candy_text(ptr %703)
  store ptr %704, ptr @"text_`subtrahend | typeIs Int` was not satisfied", align 8
  %705 = alloca i8, i64 41, align 1
  store [41 x i8] c"`suffix | typeIs Text` was not satisfied\00", ptr %705, align 1
  %706 = call ptr @make_candy_text(ptr %705)
  store ptr %706, ptr @"text_`suffix | typeIs Text` was not satisfied", align 8
  %707 = alloca i8, i64 37, align 1
  store [37 x i8] c"`tag | typeIs Tag` was not satisfied\00", ptr %707, align 1
  %708 = call ptr @make_candy_text(ptr %707)
  store ptr %708, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %709 = alloca i8, i64 42, align 1
  store [40 x i8] c"`tag | (.tagHasValue` was not satisfied\00", ptr %709, align 1
  %710 = call ptr @make_candy_text(ptr %709)
  store ptr %710, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %711 = alloca i8, i64 39, align 1
  store [39 x i8] c"`text | typeIs Text` was not satisfied\00", ptr %711, align 1
  %712 = call ptr @make_candy_text(ptr %711)
  store ptr %712, ptr @"text_`text | typeIs Text` was not satisfied", align 8
  %713 = alloca i8, i64 55, align 1
  store [55 x i8] c"`then | getArgumentCount | equals 0` was not satisfied\00", ptr %713, align 1
  %714 = call ptr @make_candy_text(ptr %713)
  store ptr %714, ptr @"text_`then | getArgumentCount | equals 0` was not satisfied", align 8
  %715 = alloca i8, i64 43, align 1
  store [43 x i8] c"`then | typeIs Function` was not satisfied\00", ptr %715, align 1
  %716 = call ptr @make_candy_text(ptr %715)
  store ptr %716, ptr @"text_`then | typeIs Function` was not satisfied", align 8
  %717 = alloca i8, i64 42, align 1
  store [42 x i8] c"`value | isNonNegative` was not satisfied\00", ptr %717, align 1
  %718 = call ptr @make_candy_text(ptr %717)
  store ptr %718, ptr @"text_`value | isNonNegative` was not satisfied", align 8
  %719 = alloca i8, i64 39, align 1
  store [39 x i8] c"`value | typeIs Int` was not satisfied\00", ptr %719, align 1
  %720 = call ptr @make_candy_text(ptr %719)
  store ptr %720, ptr @"text_`value | typeIs Int` was not satisfied", align 8
  %721 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %722 = call ptr @make_candy_function(ptr @"Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, anonymous_$generated__needs_isConditionTrue_then", ptr %721, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %722, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %723 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %724 = call ptr @make_candy_function(ptr @"anonymous_$generated__needs_condition_then, anonymous_$generated__needs_isConditionBool_then, anonymous_$generated__needs_isReasonText_then", ptr %723, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %724, ptr @"fun_anonymous_$generated__needs_condition_then, anonymous_$generated__needs_isConditionBool_then, anonymous_$generated__needs_isReasonText_then", align 8
  %725 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %726 = call ptr @make_candy_function(ptr @"anonymous_$generated__needs", ptr %725, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %726, ptr @"fun_anonymous_$generated__needs", align 8
  %727 = alloca ptr, i64 2, align 8
  %728 = load ptr, ptr @tag_Match, align 8
  %729 = getelementptr ptr, ptr %727, i64 0
  store ptr %728, ptr %729, align 8
  %730 = getelementptr ptr, ptr %727, i64 1
  store ptr null, ptr %730, align 8
  %731 = call ptr @make_candy_list(ptr %727)
  store ptr %731, ptr @0, align 8
  %732 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %733 = call ptr @make_candy_function(ptr @"Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then", ptr %732, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %733, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then", align 8
  %734 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %735 = call ptr @make_candy_function(ptr @"Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_else", ptr %734, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %735, ptr @"fun_Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_else", align 8
  %736 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %737 = call ptr @make_candy_function(ptr @Builtins__not, ptr %736, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %737, ptr @fun_Builtins__not, align 8
  %738 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %739 = call ptr @make_candy_function(ptr @Builtins__isNonNegative, ptr %738, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %739, ptr @fun_Builtins__isNonNegative, align 8
  %740 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %741 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo, ptr %740, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %741, ptr @fun_Builtins__isLessThanOrEqualTo, align 8
  %742 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %743 = call ptr @make_candy_function(ptr @Builtins__equals, ptr %742, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %743, ptr @fun_Builtins__equals, align 8
  %744 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %745 = call ptr @make_candy_function(ptr @Builtins__functionRun, ptr %744, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %745, ptr @fun_Builtins__functionRun, align 8
  %746 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %747 = call ptr @make_candy_function(ptr @Builtins__getArgumentCount, ptr %746, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %747, ptr @fun_Builtins__getArgumentCount, align 8
  %748 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %749 = call ptr @make_candy_function(ptr @Builtins__ifElse, ptr %748, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %749, ptr @fun_Builtins__ifElse, align 8
  %750 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %751 = call ptr @make_candy_function(ptr @Builtins__intAdd, ptr %750, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %751, ptr @fun_Builtins__intAdd, align 8
  %752 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %753 = call ptr @make_candy_function(ptr @Builtins__intBitLength, ptr %752, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %753, ptr @fun_Builtins__intBitLength, align 8
  %754 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %755 = call ptr @make_candy_function(ptr @Builtins__intBitwiseAnd, ptr %754, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %755, ptr @fun_Builtins__intBitwiseAnd, align 8
  %756 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %757 = call ptr @make_candy_function(ptr @Builtins__intBitwiseOr, ptr %756, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %757, ptr @fun_Builtins__intBitwiseOr, align 8
  %758 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %759 = call ptr @make_candy_function(ptr @Builtins__intBitwiseXor, ptr %758, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %759, ptr @fun_Builtins__intBitwiseXor, align 8
  %760 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %761 = call ptr @make_candy_function(ptr @Builtins__intCompareTo, ptr %760, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %761, ptr @fun_Builtins__intCompareTo, align 8
  %762 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %763 = call ptr @make_candy_function(ptr @Builtins__intDivideTruncating, ptr %762, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %763, ptr @fun_Builtins__intDivideTruncating, align 8
  %764 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %765 = call ptr @make_candy_function(ptr @Builtins__intModulo, ptr %764, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %765, ptr @fun_Builtins__intModulo, align 8
  %766 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %767 = call ptr @make_candy_function(ptr @Builtins__intMultiply, ptr %766, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %767, ptr @fun_Builtins__intMultiply, align 8
  %768 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %769 = call ptr @make_candy_function(ptr @Builtins__intParse, ptr %768, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %769, ptr @fun_Builtins__intParse, align 8
  %770 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %771 = call ptr @make_candy_function(ptr @Builtins__intRemainder, ptr %770, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %771, ptr @fun_Builtins__intRemainder, align 8
  %772 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %773 = call ptr @make_candy_function(ptr @Builtins__intShiftLeft, ptr %772, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %773, ptr @fun_Builtins__intShiftLeft, align 8
  %774 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %775 = call ptr @make_candy_function(ptr @Builtins__intShiftRight, ptr %774, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %775, ptr @fun_Builtins__intShiftRight, align 8
  %776 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %777 = call ptr @make_candy_function(ptr @Builtins__intSubtract, ptr %776, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %777, ptr @fun_Builtins__intSubtract, align 8
  %778 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %779 = call ptr @make_candy_function(ptr @Builtins__listFilled, ptr %778, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %779, ptr @fun_Builtins__listFilled, align 8
  %780 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %781 = call ptr @make_candy_function(ptr @Builtins__listGet, ptr %780, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %781, ptr @fun_Builtins__listGet, align 8
  %782 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %783 = call ptr @make_candy_function(ptr @Builtins__listInsert, ptr %782, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %783, ptr @fun_Builtins__listInsert, align 8
  %784 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %785 = call ptr @make_candy_function(ptr @Builtins__listLength, ptr %784, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %785, ptr @fun_Builtins__listLength, align 8
  %786 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %787 = call ptr @make_candy_function(ptr @Builtins__listRemoveAt, ptr %786, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %787, ptr @fun_Builtins__listRemoveAt, align 8
  %788 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %789 = call ptr @make_candy_function(ptr @Builtins__listReplace, ptr %788, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %789, ptr @fun_Builtins__listReplace, align 8
  %790 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %791 = call ptr @make_candy_function(ptr @Builtins__print, ptr %790, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %791, ptr @fun_Builtins__print, align 8
  %792 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %793 = call ptr @make_candy_function(ptr @Builtins__structGet, ptr %792, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %793, ptr @fun_Builtins__structGet, align 8
  %794 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %795 = call ptr @make_candy_function(ptr @Builtins__structGetKeys, ptr %794, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %795, ptr @fun_Builtins__structGetKeys, align 8
  %796 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %797 = call ptr @make_candy_function(ptr @Builtins__structHasKey, ptr %796, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %797, ptr @fun_Builtins__structHasKey, align 8
  %798 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %799 = call ptr @make_candy_function(ptr @Builtins__tagGetValue, ptr %798, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %799, ptr @fun_Builtins__tagGetValue, align 8
  %800 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %801 = call ptr @make_candy_function(ptr @Builtins__tagHasValue, ptr %800, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %801, ptr @fun_Builtins__tagHasValue, align 8
  %802 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %803 = call ptr @make_candy_function(ptr @Builtins__tagWithoutValue, ptr %802, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %803, ptr @fun_Builtins__tagWithoutValue, align 8
  %804 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %805 = call ptr @make_candy_function(ptr @Builtins__textCharacters, ptr %804, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %805, ptr @fun_Builtins__textCharacters, align 8
  %806 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %807 = call ptr @make_candy_function(ptr @Builtins__textConcatenate, ptr %806, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %807, ptr @fun_Builtins__textConcatenate, align 8
  %808 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %809 = call ptr @make_candy_function(ptr @Builtins__textContains, ptr %808, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %809, ptr @fun_Builtins__textContains, align 8
  %810 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %811 = call ptr @make_candy_function(ptr @Builtins__textEndsWith, ptr %810, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %811, ptr @fun_Builtins__textEndsWith, align 8
  %812 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %813 = call ptr @make_candy_function(ptr @Builtins__textFromUtf8, ptr %812, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %813, ptr @fun_Builtins__textFromUtf8, align 8
  %814 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %815 = call ptr @make_candy_function(ptr @Builtins__textGetRange, ptr %814, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %815, ptr @fun_Builtins__textGetRange, align 8
  %816 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %817 = call ptr @make_candy_function(ptr @Builtins__textIsEmpty, ptr %816, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %817, ptr @fun_Builtins__textIsEmpty, align 8
  %818 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %819 = call ptr @make_candy_function(ptr @Builtins__textLength, ptr %818, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %819, ptr @fun_Builtins__textLength, align 8
  %820 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %821 = call ptr @make_candy_function(ptr @Builtins__textStartsWith, ptr %820, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %821, ptr @fun_Builtins__textStartsWith, align 8
  %822 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %823 = call ptr @make_candy_function(ptr @Builtins__textTrimEnd, ptr %822, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %823, ptr @fun_Builtins__textTrimEnd, align 8
  %824 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %825 = call ptr @make_candy_function(ptr @Builtins__textTrimStart, ptr %824, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %825, ptr @fun_Builtins__textTrimStart, align 8
  %826 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %827 = call ptr @make_candy_function(ptr @Builtins__toDebugText, ptr %826, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %827, ptr @fun_Builtins__toDebugText, align 8
  %828 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %829 = call ptr @make_candy_function(ptr @Builtins__typeOf, ptr %828, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %829, ptr @fun_Builtins__typeOf, align 8
  %830 = alloca ptr, i64 45, align 8
  %831 = alloca ptr, i64 45, align 8
  %832 = load ptr, ptr @tag_ListRemoveAt, align 8
  %833 = load ptr, ptr @fun_Builtins__listRemoveAt, align 8
  %834 = getelementptr ptr, ptr %830, i64 0
  store ptr %832, ptr %834, align 8
  %835 = getelementptr ptr, ptr %831, i64 0
  store ptr %833, ptr %835, align 8
  %836 = load ptr, ptr @tag_IfElse, align 8
  %837 = load ptr, ptr @fun_Builtins__ifElse, align 8
  %838 = getelementptr ptr, ptr %830, i64 1
  store ptr %836, ptr %838, align 8
  %839 = getelementptr ptr, ptr %831, i64 1
  store ptr %837, ptr %839, align 8
  %840 = load ptr, ptr @tag_StructHasKey, align 8
  %841 = load ptr, ptr @fun_Builtins__structHasKey, align 8
  %842 = getelementptr ptr, ptr %830, i64 2
  store ptr %840, ptr %842, align 8
  %843 = getelementptr ptr, ptr %831, i64 2
  store ptr %841, ptr %843, align 8
  %844 = load ptr, ptr @tag_IntBitLength, align 8
  %845 = load ptr, ptr @fun_Builtins__intBitLength, align 8
  %846 = getelementptr ptr, ptr %830, i64 3
  store ptr %844, ptr %846, align 8
  %847 = getelementptr ptr, ptr %831, i64 3
  store ptr %845, ptr %847, align 8
  %848 = load ptr, ptr @tag_Print, align 8
  %849 = load ptr, ptr @fun_Builtins__print, align 8
  %850 = getelementptr ptr, ptr %830, i64 4
  store ptr %848, ptr %850, align 8
  %851 = getelementptr ptr, ptr %831, i64 4
  store ptr %849, ptr %851, align 8
  %852 = load ptr, ptr @tag_TextStartsWith, align 8
  %853 = load ptr, ptr @fun_Builtins__textStartsWith, align 8
  %854 = getelementptr ptr, ptr %830, i64 5
  store ptr %852, ptr %854, align 8
  %855 = getelementptr ptr, ptr %831, i64 5
  store ptr %853, ptr %855, align 8
  %856 = load ptr, ptr @tag_IntBitwiseXor, align 8
  %857 = load ptr, ptr @fun_Builtins__intBitwiseXor, align 8
  %858 = getelementptr ptr, ptr %830, i64 6
  store ptr %856, ptr %858, align 8
  %859 = getelementptr ptr, ptr %831, i64 6
  store ptr %857, ptr %859, align 8
  %860 = load ptr, ptr @tag_TextIsEmpty, align 8
  %861 = load ptr, ptr @fun_Builtins__textIsEmpty, align 8
  %862 = getelementptr ptr, ptr %830, i64 7
  store ptr %860, ptr %862, align 8
  %863 = getelementptr ptr, ptr %831, i64 7
  store ptr %861, ptr %863, align 8
  %864 = load ptr, ptr @tag_IntAdd, align 8
  %865 = load ptr, ptr @fun_Builtins__intAdd, align 8
  %866 = getelementptr ptr, ptr %830, i64 8
  store ptr %864, ptr %866, align 8
  %867 = getelementptr ptr, ptr %831, i64 8
  store ptr %865, ptr %867, align 8
  %868 = load ptr, ptr @tag_TextLength, align 8
  %869 = load ptr, ptr @fun_Builtins__textLength, align 8
  %870 = getelementptr ptr, ptr %830, i64 9
  store ptr %868, ptr %870, align 8
  %871 = getelementptr ptr, ptr %831, i64 9
  store ptr %869, ptr %871, align 8
  %872 = load ptr, ptr @tag_TagWithoutValue, align 8
  %873 = load ptr, ptr @fun_Builtins__tagWithoutValue, align 8
  %874 = getelementptr ptr, ptr %830, i64 10
  store ptr %872, ptr %874, align 8
  %875 = getelementptr ptr, ptr %831, i64 10
  store ptr %873, ptr %875, align 8
  %876 = load ptr, ptr @tag_TextCharacters, align 8
  %877 = load ptr, ptr @fun_Builtins__textCharacters, align 8
  %878 = getelementptr ptr, ptr %830, i64 11
  store ptr %876, ptr %878, align 8
  %879 = getelementptr ptr, ptr %831, i64 11
  store ptr %877, ptr %879, align 8
  %880 = load ptr, ptr @tag_TextEndsWith, align 8
  %881 = load ptr, ptr @fun_Builtins__textEndsWith, align 8
  %882 = getelementptr ptr, ptr %830, i64 12
  store ptr %880, ptr %882, align 8
  %883 = getelementptr ptr, ptr %831, i64 12
  store ptr %881, ptr %883, align 8
  %884 = load ptr, ptr @tag_IntModulo, align 8
  %885 = load ptr, ptr @fun_Builtins__intModulo, align 8
  %886 = getelementptr ptr, ptr %830, i64 13
  store ptr %884, ptr %886, align 8
  %887 = getelementptr ptr, ptr %831, i64 13
  store ptr %885, ptr %887, align 8
  %888 = load ptr, ptr @tag_ListInsert, align 8
  %889 = load ptr, ptr @fun_Builtins__listInsert, align 8
  %890 = getelementptr ptr, ptr %830, i64 14
  store ptr %888, ptr %890, align 8
  %891 = getelementptr ptr, ptr %831, i64 14
  store ptr %889, ptr %891, align 8
  %892 = load ptr, ptr @tag_StructGet, align 8
  %893 = load ptr, ptr @fun_Builtins__structGet, align 8
  %894 = getelementptr ptr, ptr %830, i64 15
  store ptr %892, ptr %894, align 8
  %895 = getelementptr ptr, ptr %831, i64 15
  store ptr %893, ptr %895, align 8
  %896 = load ptr, ptr @tag_ListGet, align 8
  %897 = load ptr, ptr @fun_Builtins__listGet, align 8
  %898 = getelementptr ptr, ptr %830, i64 16
  store ptr %896, ptr %898, align 8
  %899 = getelementptr ptr, ptr %831, i64 16
  store ptr %897, ptr %899, align 8
  %900 = load ptr, ptr @tag_TextConcatenate, align 8
  %901 = load ptr, ptr @fun_Builtins__textConcatenate, align 8
  %902 = getelementptr ptr, ptr %830, i64 17
  store ptr %900, ptr %902, align 8
  %903 = getelementptr ptr, ptr %831, i64 17
  store ptr %901, ptr %903, align 8
  %904 = load ptr, ptr @tag_IntShiftRight, align 8
  %905 = load ptr, ptr @fun_Builtins__intShiftRight, align 8
  %906 = getelementptr ptr, ptr %830, i64 18
  store ptr %904, ptr %906, align 8
  %907 = getelementptr ptr, ptr %831, i64 18
  store ptr %905, ptr %907, align 8
  %908 = load ptr, ptr @tag_TextTrimStart, align 8
  %909 = load ptr, ptr @fun_Builtins__textTrimStart, align 8
  %910 = getelementptr ptr, ptr %830, i64 19
  store ptr %908, ptr %910, align 8
  %911 = getelementptr ptr, ptr %831, i64 19
  store ptr %909, ptr %911, align 8
  %912 = load ptr, ptr @tag_TextTrimEnd, align 8
  %913 = load ptr, ptr @fun_Builtins__textTrimEnd, align 8
  %914 = getelementptr ptr, ptr %830, i64 20
  store ptr %912, ptr %914, align 8
  %915 = getelementptr ptr, ptr %831, i64 20
  store ptr %913, ptr %915, align 8
  %916 = load ptr, ptr @tag_IntShiftLeft, align 8
  %917 = load ptr, ptr @fun_Builtins__intShiftLeft, align 8
  %918 = getelementptr ptr, ptr %830, i64 21
  store ptr %916, ptr %918, align 8
  %919 = getelementptr ptr, ptr %831, i64 21
  store ptr %917, ptr %919, align 8
  %920 = load ptr, ptr @tag_ListLength, align 8
  %921 = load ptr, ptr @fun_Builtins__listLength, align 8
  %922 = getelementptr ptr, ptr %830, i64 22
  store ptr %920, ptr %922, align 8
  %923 = getelementptr ptr, ptr %831, i64 22
  store ptr %921, ptr %923, align 8
  %924 = load ptr, ptr @tag_StructGetKeys, align 8
  %925 = load ptr, ptr @fun_Builtins__structGetKeys, align 8
  %926 = getelementptr ptr, ptr %830, i64 23
  store ptr %924, ptr %926, align 8
  %927 = getelementptr ptr, ptr %831, i64 23
  store ptr %925, ptr %927, align 8
  %928 = load ptr, ptr @tag_IntBitwiseAnd, align 8
  %929 = load ptr, ptr @fun_Builtins__intBitwiseAnd, align 8
  %930 = getelementptr ptr, ptr %830, i64 24
  store ptr %928, ptr %930, align 8
  %931 = getelementptr ptr, ptr %831, i64 24
  store ptr %929, ptr %931, align 8
  %932 = load ptr, ptr @tag_IntSubtract, align 8
  %933 = load ptr, ptr @fun_Builtins__intSubtract, align 8
  %934 = getelementptr ptr, ptr %830, i64 25
  store ptr %932, ptr %934, align 8
  %935 = getelementptr ptr, ptr %831, i64 25
  store ptr %933, ptr %935, align 8
  %936 = load ptr, ptr @tag_TextFromUtf8, align 8
  %937 = load ptr, ptr @fun_Builtins__textFromUtf8, align 8
  %938 = getelementptr ptr, ptr %830, i64 26
  store ptr %936, ptr %938, align 8
  %939 = getelementptr ptr, ptr %831, i64 26
  store ptr %937, ptr %939, align 8
  %940 = load ptr, ptr @tag_ListReplace, align 8
  %941 = load ptr, ptr @fun_Builtins__listReplace, align 8
  %942 = getelementptr ptr, ptr %830, i64 27
  store ptr %940, ptr %942, align 8
  %943 = getelementptr ptr, ptr %831, i64 27
  store ptr %941, ptr %943, align 8
  %944 = load ptr, ptr @tag_GetArgumentCount, align 8
  %945 = load ptr, ptr @fun_Builtins__getArgumentCount, align 8
  %946 = getelementptr ptr, ptr %830, i64 28
  store ptr %944, ptr %946, align 8
  %947 = getelementptr ptr, ptr %831, i64 28
  store ptr %945, ptr %947, align 8
  %948 = load ptr, ptr @tag_IntRemainder, align 8
  %949 = load ptr, ptr @fun_Builtins__intRemainder, align 8
  %950 = getelementptr ptr, ptr %830, i64 29
  store ptr %948, ptr %950, align 8
  %951 = getelementptr ptr, ptr %831, i64 29
  store ptr %949, ptr %951, align 8
  %952 = load ptr, ptr @tag_ToDebugText, align 8
  %953 = load ptr, ptr @fun_Builtins__toDebugText, align 8
  %954 = getelementptr ptr, ptr %830, i64 30
  store ptr %952, ptr %954, align 8
  %955 = getelementptr ptr, ptr %831, i64 30
  store ptr %953, ptr %955, align 8
  %956 = load ptr, ptr @tag_ListFilled, align 8
  %957 = load ptr, ptr @fun_Builtins__listFilled, align 8
  %958 = getelementptr ptr, ptr %830, i64 31
  store ptr %956, ptr %958, align 8
  %959 = getelementptr ptr, ptr %831, i64 31
  store ptr %957, ptr %959, align 8
  %960 = load ptr, ptr @tag_FunctionRun, align 8
  %961 = load ptr, ptr @fun_Builtins__functionRun, align 8
  %962 = getelementptr ptr, ptr %830, i64 32
  store ptr %960, ptr %962, align 8
  %963 = getelementptr ptr, ptr %831, i64 32
  store ptr %961, ptr %963, align 8
  %964 = load ptr, ptr @tag_IntParse, align 8
  %965 = load ptr, ptr @fun_Builtins__intParse, align 8
  %966 = getelementptr ptr, ptr %830, i64 33
  store ptr %964, ptr %966, align 8
  %967 = getelementptr ptr, ptr %831, i64 33
  store ptr %965, ptr %967, align 8
  %968 = load ptr, ptr @tag_TypeOf, align 8
  %969 = load ptr, ptr @fun_Builtins__typeOf, align 8
  %970 = getelementptr ptr, ptr %830, i64 34
  store ptr %968, ptr %970, align 8
  %971 = getelementptr ptr, ptr %831, i64 34
  store ptr %969, ptr %971, align 8
  %972 = load ptr, ptr @tag_TextContains, align 8
  %973 = load ptr, ptr @fun_Builtins__textContains, align 8
  %974 = getelementptr ptr, ptr %830, i64 35
  store ptr %972, ptr %974, align 8
  %975 = getelementptr ptr, ptr %831, i64 35
  store ptr %973, ptr %975, align 8
  %976 = load ptr, ptr @tag_TagHasValue, align 8
  %977 = load ptr, ptr @fun_Builtins__tagHasValue, align 8
  %978 = getelementptr ptr, ptr %830, i64 36
  store ptr %976, ptr %978, align 8
  %979 = getelementptr ptr, ptr %831, i64 36
  store ptr %977, ptr %979, align 8
  %980 = load ptr, ptr @tag_Equals, align 8
  %981 = load ptr, ptr @fun_Builtins__equals, align 8
  %982 = getelementptr ptr, ptr %830, i64 37
  store ptr %980, ptr %982, align 8
  %983 = getelementptr ptr, ptr %831, i64 37
  store ptr %981, ptr %983, align 8
  %984 = load ptr, ptr @tag_IntDivideTruncating, align 8
  %985 = load ptr, ptr @fun_Builtins__intDivideTruncating, align 8
  %986 = getelementptr ptr, ptr %830, i64 38
  store ptr %984, ptr %986, align 8
  %987 = getelementptr ptr, ptr %831, i64 38
  store ptr %985, ptr %987, align 8
  %988 = load ptr, ptr @tag_TextGetRange, align 8
  %989 = load ptr, ptr @fun_Builtins__textGetRange, align 8
  %990 = getelementptr ptr, ptr %830, i64 39
  store ptr %988, ptr %990, align 8
  %991 = getelementptr ptr, ptr %831, i64 39
  store ptr %989, ptr %991, align 8
  %992 = load ptr, ptr @tag_IntMultiply, align 8
  %993 = load ptr, ptr @fun_Builtins__intMultiply, align 8
  %994 = getelementptr ptr, ptr %830, i64 40
  store ptr %992, ptr %994, align 8
  %995 = getelementptr ptr, ptr %831, i64 40
  store ptr %993, ptr %995, align 8
  %996 = load ptr, ptr @tag_IntCompareTo, align 8
  %997 = load ptr, ptr @fun_Builtins__intCompareTo, align 8
  %998 = getelementptr ptr, ptr %830, i64 41
  store ptr %996, ptr %998, align 8
  %999 = getelementptr ptr, ptr %831, i64 41
  store ptr %997, ptr %999, align 8
  %1000 = load ptr, ptr @tag_TagGetValue, align 8
  %1001 = load ptr, ptr @fun_Builtins__tagGetValue, align 8
  %1002 = getelementptr ptr, ptr %830, i64 42
  store ptr %1000, ptr %1002, align 8
  %1003 = getelementptr ptr, ptr %831, i64 42
  store ptr %1001, ptr %1003, align 8
  %1004 = load ptr, ptr @tag_IntBitwiseOr, align 8
  %1005 = load ptr, ptr @fun_Builtins__intBitwiseOr, align 8
  %1006 = getelementptr ptr, ptr %830, i64 43
  store ptr %1004, ptr %1006, align 8
  %1007 = getelementptr ptr, ptr %831, i64 43
  store ptr %1005, ptr %1007, align 8
  %1008 = getelementptr ptr, ptr %830, i64 44
  store ptr null, ptr %1008, align 8
  %1009 = getelementptr ptr, ptr %831, i64 44
  store ptr null, ptr %1009, align 8
  %1010 = call ptr @make_candy_struct(ptr %830, ptr %831)
  %1011 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %1012 = getelementptr inbounds { ptr }, ptr %1011, i32 0, i32 0
  store ptr %1010, ptr %1012, align 8
  %1013 = call ptr @make_candy_function(ptr @Examples__10, ptr %1011, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %1013, ptr @fun_Examples__10, align 8
  %1014 = alloca ptr, i64 2, align 8
  %1015 = alloca ptr, i64 2, align 8
  %1016 = load ptr, ptr @tag_Main, align 8
  %1017 = load ptr, ptr @fun_Examples__10, align 8
  %1018 = getelementptr ptr, ptr %1014, i64 0
  store ptr %1016, ptr %1018, align 8
  %1019 = getelementptr ptr, ptr %1015, i64 0
  store ptr %1017, ptr %1019, align 8
  %1020 = getelementptr ptr, ptr %1014, i64 1
  store ptr null, ptr %1020, align 8
  %1021 = getelementptr ptr, ptr %1015, i64 1
  store ptr null, ptr %1021, align 8
  %1022 = call ptr @make_candy_struct(ptr %1014, ptr %1015)
  %1023 = alloca i8, i64 5, align 1
  store [5 x i8] c"Main\00", ptr %1023, align 1
  %1024 = call ptr @make_candy_tag(ptr %1023, ptr null)
  %1025 = call ptr @candy_builtin_struct_get(ptr %1022, ptr %1024)
  %1026 = call ptr @run_candy_main(ptr %1025, ptr @candy_environment)
  call void @print_candy_value(ptr %1026)
  %1027 = load ptr, ptr @"Builtins::equals:6", align 8
  call void @free_candy_value(ptr %1027)
  %1028 = load ptr, ptr @"Builtins::fitsInRustU128:10", align 8
  call void @free_candy_value(ptr %1028)
  %1029 = load ptr, ptr @"Builtins::fitsInRustU128:16", align 8
  call void @free_candy_value(ptr %1029)
  %1030 = load ptr, ptr @"Builtins::fitsInRustU128:5", align 8
  call void @free_candy_value(ptr %1030)
  %1031 = load ptr, ptr @"Builtins::fitsInRustU128:8", align 8
  call void @free_candy_value(ptr %1031)
  %1032 = load ptr, ptr @"Builtins::functionRun:11", align 8
  call void @free_candy_value(ptr %1032)
  %1033 = load ptr, ptr @"Builtins::functionRun:16", align 8
  call void @free_candy_value(ptr %1033)
  %1034 = load ptr, ptr @"Builtins::functionRun:22", align 8
  call void @free_candy_value(ptr %1034)
  %1035 = load ptr, ptr @"Builtins::functionRun:5", align 8
  call void @free_candy_value(ptr %1035)
  %1036 = load ptr, ptr @"Builtins::getArgumentCount:11", align 8
  call void @free_candy_value(ptr %1036)
  %1037 = load ptr, ptr @"Builtins::getArgumentCount:5", align 8
  call void @free_candy_value(ptr %1037)
  %1038 = load ptr, ptr @"Builtins::ifElse:1", align 8
  call void @free_candy_value(ptr %1038)
  %1039 = load ptr, ptr @"Builtins::ifElse:11", align 8
  call void @free_candy_value(ptr %1039)
  %1040 = load ptr, ptr @"Builtins::ifElse:14", align 8
  call void @free_candy_value(ptr %1040)
  %1041 = load ptr, ptr @"Builtins::ifElse:19", align 8
  call void @free_candy_value(ptr %1041)
  %1042 = load ptr, ptr @"Builtins::ifElse:25", align 8
  call void @free_candy_value(ptr %1042)
  %1043 = load ptr, ptr @"Builtins::ifElse:28", align 8
  call void @free_candy_value(ptr %1043)
  %1044 = load ptr, ptr @"Builtins::ifElse:33", align 8
  call void @free_candy_value(ptr %1044)
  %1045 = load ptr, ptr @"Builtins::ifElse:41", align 8
  call void @free_candy_value(ptr %1045)
  %1046 = load ptr, ptr @"Builtins::ifElse:5", align 8
  call void @free_candy_value(ptr %1046)
  %1047 = load ptr, ptr @"Builtins::intAdd:11", align 8
  call void @free_candy_value(ptr %1047)
  %1048 = load ptr, ptr @"Builtins::intAdd:18", align 8
  call void @free_candy_value(ptr %1048)
  %1049 = load ptr, ptr @"Builtins::intAdd:5", align 8
  call void @free_candy_value(ptr %1049)
  %1050 = load ptr, ptr @"Builtins::intBitLength:11", align 8
  call void @free_candy_value(ptr %1050)
  %1051 = load ptr, ptr @"Builtins::intBitLength:5", align 8
  call void @free_candy_value(ptr %1051)
  %1052 = load ptr, ptr @"Builtins::intBitwiseAnd:11", align 8
  call void @free_candy_value(ptr %1052)
  %1053 = load ptr, ptr @"Builtins::intBitwiseAnd:18", align 8
  call void @free_candy_value(ptr %1053)
  %1054 = load ptr, ptr @"Builtins::intBitwiseAnd:5", align 8
  call void @free_candy_value(ptr %1054)
  %1055 = load ptr, ptr @"Builtins::intBitwiseOr:11", align 8
  call void @free_candy_value(ptr %1055)
  %1056 = load ptr, ptr @"Builtins::intBitwiseOr:18", align 8
  call void @free_candy_value(ptr %1056)
  %1057 = load ptr, ptr @"Builtins::intBitwiseOr:5", align 8
  call void @free_candy_value(ptr %1057)
  %1058 = load ptr, ptr @"Builtins::intBitwiseXor:11", align 8
  call void @free_candy_value(ptr %1058)
  %1059 = load ptr, ptr @"Builtins::intBitwiseXor:18", align 8
  call void @free_candy_value(ptr %1059)
  %1060 = load ptr, ptr @"Builtins::intBitwiseXor:5", align 8
  call void @free_candy_value(ptr %1060)
  %1061 = load ptr, ptr @"Builtins::intCompareTo:11", align 8
  call void @free_candy_value(ptr %1061)
  %1062 = load ptr, ptr @"Builtins::intCompareTo:18", align 8
  call void @free_candy_value(ptr %1062)
  %1063 = load ptr, ptr @"Builtins::intCompareTo:5", align 8
  call void @free_candy_value(ptr %1063)
  %1064 = load ptr, ptr @"Builtins::intDivideTruncating:11", align 8
  call void @free_candy_value(ptr %1064)
  %1065 = load ptr, ptr @"Builtins::intDivideTruncating:17", align 8
  call void @free_candy_value(ptr %1065)
  %1066 = load ptr, ptr @"Builtins::intDivideTruncating:25", align 8
  call void @free_candy_value(ptr %1066)
  %1067 = load ptr, ptr @"Builtins::intDivideTruncating:32", align 8
  call void @free_candy_value(ptr %1067)
  %1068 = load ptr, ptr @"Builtins::intDivideTruncating:5", align 8
  call void @free_candy_value(ptr %1068)
  %1069 = load ptr, ptr @"Builtins::intModulo:11", align 8
  call void @free_candy_value(ptr %1069)
  %1070 = load ptr, ptr @"Builtins::intModulo:17", align 8
  call void @free_candy_value(ptr %1070)
  %1071 = load ptr, ptr @"Builtins::intModulo:25", align 8
  call void @free_candy_value(ptr %1071)
  %1072 = load ptr, ptr @"Builtins::intModulo:32", align 8
  call void @free_candy_value(ptr %1072)
  %1073 = load ptr, ptr @"Builtins::intModulo:5", align 8
  call void @free_candy_value(ptr %1073)
  %1074 = load ptr, ptr @"Builtins::intMultiply:11", align 8
  call void @free_candy_value(ptr %1074)
  %1075 = load ptr, ptr @"Builtins::intMultiply:18", align 8
  call void @free_candy_value(ptr %1075)
  %1076 = load ptr, ptr @"Builtins::intMultiply:5", align 8
  call void @free_candy_value(ptr %1076)
  %1077 = load ptr, ptr @"Builtins::intParse:11", align 8
  call void @free_candy_value(ptr %1077)
  %1078 = load ptr, ptr @"Builtins::intParse:5", align 8
  call void @free_candy_value(ptr %1078)
  %1079 = load ptr, ptr @"Builtins::intRemainder:11", align 8
  call void @free_candy_value(ptr %1079)
  %1080 = load ptr, ptr @"Builtins::intRemainder:17", align 8
  call void @free_candy_value(ptr %1080)
  %1081 = load ptr, ptr @"Builtins::intRemainder:25", align 8
  call void @free_candy_value(ptr %1081)
  %1082 = load ptr, ptr @"Builtins::intRemainder:32", align 8
  call void @free_candy_value(ptr %1082)
  %1083 = load ptr, ptr @"Builtins::intRemainder:5", align 8
  call void @free_candy_value(ptr %1083)
  %1084 = load ptr, ptr @"Builtins::intShiftLeft:11", align 8
  call void @free_candy_value(ptr %1084)
  %1085 = load ptr, ptr @"Builtins::intShiftLeft:14", align 8
  call void @free_candy_value(ptr %1085)
  %1086 = load ptr, ptr @"Builtins::intShiftLeft:23", align 8
  call void @free_candy_value(ptr %1086)
  %1087 = load ptr, ptr @"Builtins::intShiftLeft:24", align 8
  call void @free_candy_value(ptr %1087)
  %1088 = load ptr, ptr @"Builtins::intShiftLeft:26:0", align 8
  call void @free_candy_value(ptr %1088)
  %1089 = load ptr, ptr @"Builtins::intShiftLeft:27", align 8
  call void @free_candy_value(ptr %1089)
  %1090 = load ptr, ptr @"Builtins::intShiftLeft:29", align 8
  call void @free_candy_value(ptr %1090)
  %1091 = load ptr, ptr @"Builtins::intShiftLeft:30", align 8
  call void @free_candy_value(ptr %1091)
  %1092 = load ptr, ptr @"Builtins::intShiftLeft:31", align 8
  call void @free_candy_value(ptr %1092)
  %1093 = load ptr, ptr @"Builtins::intShiftLeft:34", align 8
  call void @free_candy_value(ptr %1093)
  %1094 = load ptr, ptr @"Builtins::intShiftLeft:42", align 8
  call void @free_candy_value(ptr %1094)
  %1095 = load ptr, ptr @"Builtins::intShiftLeft:49", align 8
  call void @free_candy_value(ptr %1095)
  %1096 = load ptr, ptr @"Builtins::intShiftLeft:5", align 8
  call void @free_candy_value(ptr %1096)
  %1097 = load ptr, ptr @"Builtins::intShiftRight:11", align 8
  call void @free_candy_value(ptr %1097)
  %1098 = load ptr, ptr @"Builtins::intShiftRight:14", align 8
  call void @free_candy_value(ptr %1098)
  %1099 = load ptr, ptr @"Builtins::intShiftRight:23", align 8
  call void @free_candy_value(ptr %1099)
  %1100 = load ptr, ptr @"Builtins::intShiftRight:24", align 8
  call void @free_candy_value(ptr %1100)
  %1101 = load ptr, ptr @"Builtins::intShiftRight:26:0", align 8
  call void @free_candy_value(ptr %1101)
  %1102 = load ptr, ptr @"Builtins::intShiftRight:27", align 8
  call void @free_candy_value(ptr %1102)
  %1103 = load ptr, ptr @"Builtins::intShiftRight:29", align 8
  call void @free_candy_value(ptr %1103)
  %1104 = load ptr, ptr @"Builtins::intShiftRight:30", align 8
  call void @free_candy_value(ptr %1104)
  %1105 = load ptr, ptr @"Builtins::intShiftRight:31", align 8
  call void @free_candy_value(ptr %1105)
  %1106 = load ptr, ptr @"Builtins::intShiftRight:34", align 8
  call void @free_candy_value(ptr %1106)
  %1107 = load ptr, ptr @"Builtins::intShiftRight:42", align 8
  call void @free_candy_value(ptr %1107)
  %1108 = load ptr, ptr @"Builtins::intShiftRight:49", align 8
  call void @free_candy_value(ptr %1108)
  %1109 = load ptr, ptr @"Builtins::intShiftRight:5", align 8
  call void @free_candy_value(ptr %1109)
  %1110 = load ptr, ptr @"Builtins::intSubtract:11", align 8
  call void @free_candy_value(ptr %1110)
  %1111 = load ptr, ptr @"Builtins::intSubtract:18", align 8
  call void @free_candy_value(ptr %1111)
  %1112 = load ptr, ptr @"Builtins::intSubtract:5", align 8
  call void @free_candy_value(ptr %1112)
  %1113 = load ptr, ptr @"Builtins::isLessThanOrEqualTo:11", align 8
  call void @free_candy_value(ptr %1113)
  %1114 = load ptr, ptr @"Builtins::isLessThanOrEqualTo:18", align 8
  call void @free_candy_value(ptr %1114)
  %1115 = load ptr, ptr @"Builtins::isLessThanOrEqualTo:19", align 8
  call void @free_candy_value(ptr %1115)
  %1116 = load ptr, ptr @"Builtins::isLessThanOrEqualTo:5", align 8
  call void @free_candy_value(ptr %1116)
  %1117 = load ptr, ptr @"Builtins::isNonNegative:12", align 8
  call void @free_candy_value(ptr %1117)
  %1118 = load ptr, ptr @"Builtins::isNonNegative:13", align 8
  call void @free_candy_value(ptr %1118)
  %1119 = load ptr, ptr @"Builtins::isNonNegative:5", align 8
  call void @free_candy_value(ptr %1119)
  %1120 = load ptr, ptr @"Builtins::listFilled:10", align 8
  call void @free_candy_value(ptr %1120)
  %1121 = load ptr, ptr @"Builtins::listFilled:17", align 8
  call void @free_candy_value(ptr %1121)
  %1122 = load ptr, ptr @"Builtins::listFilled:5", align 8
  call void @free_candy_value(ptr %1122)
  %1123 = load ptr, ptr @"Builtins::listFilled:8", align 8
  call void @free_candy_value(ptr %1123)
  %1124 = load ptr, ptr @"Builtins::listGet:11", align 8
  call void @free_candy_value(ptr %1124)
  %1125 = load ptr, ptr @"Builtins::listGet:14", align 8
  call void @free_candy_value(ptr %1125)
  %1126 = load ptr, ptr @"Builtins::listGet:16", align 8
  call void @free_candy_value(ptr %1126)
  %1127 = load ptr, ptr @"Builtins::listGet:24", align 8
  call void @free_candy_value(ptr %1127)
  %1128 = load ptr, ptr @"Builtins::listGet:25", align 8
  call void @free_candy_value(ptr %1128)
  %1129 = load ptr, ptr @"Builtins::listGet:30", align 8
  call void @free_candy_value(ptr %1129)
  %1130 = load ptr, ptr @"Builtins::listGet:37", align 8
  call void @free_candy_value(ptr %1130)
  %1131 = load ptr, ptr @"Builtins::listGet:5", align 8
  call void @free_candy_value(ptr %1131)
  %1132 = load ptr, ptr @"Builtins::listInsert:11", align 8
  call void @free_candy_value(ptr %1132)
  %1133 = load ptr, ptr @"Builtins::listInsert:14", align 8
  call void @free_candy_value(ptr %1133)
  %1134 = load ptr, ptr @"Builtins::listInsert:16", align 8
  call void @free_candy_value(ptr %1134)
  %1135 = load ptr, ptr @"Builtins::listInsert:24", align 8
  call void @free_candy_value(ptr %1135)
  %1136 = load ptr, ptr @"Builtins::listInsert:25", align 8
  call void @free_candy_value(ptr %1136)
  %1137 = load ptr, ptr @"Builtins::listInsert:27", align 8
  call void @free_candy_value(ptr %1137)
  %1138 = load ptr, ptr @"Builtins::listInsert:35", align 8
  call void @free_candy_value(ptr %1138)
  %1139 = load ptr, ptr @"Builtins::listInsert:5", align 8
  call void @free_candy_value(ptr %1139)
  %1140 = load ptr, ptr @"Builtins::listLength:11", align 8
  call void @free_candy_value(ptr %1140)
  %1141 = load ptr, ptr @"Builtins::listLength:5", align 8
  call void @free_candy_value(ptr %1141)
  %1142 = load ptr, ptr @"Builtins::listRemoveAt:11", align 8
  call void @free_candy_value(ptr %1142)
  %1143 = load ptr, ptr @"Builtins::listRemoveAt:14", align 8
  call void @free_candy_value(ptr %1143)
  %1144 = load ptr, ptr @"Builtins::listRemoveAt:16", align 8
  call void @free_candy_value(ptr %1144)
  %1145 = load ptr, ptr @"Builtins::listRemoveAt:21", align 8
  call void @free_candy_value(ptr %1145)
  %1146 = load ptr, ptr @"Builtins::listRemoveAt:22", align 8
  call void @free_candy_value(ptr %1146)
  %1147 = load ptr, ptr @"Builtins::listRemoveAt:27", align 8
  call void @free_candy_value(ptr %1147)
  %1148 = load ptr, ptr @"Builtins::listRemoveAt:34", align 8
  call void @free_candy_value(ptr %1148)
  %1149 = load ptr, ptr @"Builtins::listRemoveAt:5", align 8
  call void @free_candy_value(ptr %1149)
  %1150 = load ptr, ptr @"Builtins::listReplace:11", align 8
  call void @free_candy_value(ptr %1150)
  %1151 = load ptr, ptr @"Builtins::listReplace:14", align 8
  call void @free_candy_value(ptr %1151)
  %1152 = load ptr, ptr @"Builtins::listReplace:16", align 8
  call void @free_candy_value(ptr %1152)
  %1153 = load ptr, ptr @"Builtins::listReplace:21", align 8
  call void @free_candy_value(ptr %1153)
  %1154 = load ptr, ptr @"Builtins::listReplace:22", align 8
  call void @free_candy_value(ptr %1154)
  %1155 = load ptr, ptr @"Builtins::listReplace:27", align 8
  call void @free_candy_value(ptr %1155)
  %1156 = load ptr, ptr @"Builtins::listReplace:35", align 8
  call void @free_candy_value(ptr %1156)
  %1157 = load ptr, ptr @"Builtins::listReplace:5", align 8
  call void @free_candy_value(ptr %1157)
  %1158 = load ptr, ptr @"Builtins::not:1", align 8
  call void @free_candy_value(ptr %1158)
  %1159 = load ptr, ptr @"Builtins::print:11", align 8
  call void @free_candy_value(ptr %1159)
  %1160 = load ptr, ptr @"Builtins::print:5", align 8
  call void @free_candy_value(ptr %1160)
  %1161 = load ptr, ptr @"Builtins::structGet:12", align 8
  call void @free_candy_value(ptr %1161)
  %1162 = load ptr, ptr @"Builtins::structGet:21", align 8
  call void @free_candy_value(ptr %1162)
  %1163 = load ptr, ptr @"Builtins::structGet:22", align 8
  call void @free_candy_value(ptr %1163)
  %1164 = load ptr, ptr @"Builtins::structGet:24:0", align 8
  call void @free_candy_value(ptr %1164)
  %1165 = load ptr, ptr @"Builtins::structGet:25", align 8
  call void @free_candy_value(ptr %1165)
  %1166 = load ptr, ptr @"Builtins::structGet:28", align 8
  call void @free_candy_value(ptr %1166)
  %1167 = load ptr, ptr @"Builtins::structGet:29", align 8
  call void @free_candy_value(ptr %1167)
  %1168 = load ptr, ptr @"Builtins::structGet:31:0", align 8
  call void @free_candy_value(ptr %1168)
  %1169 = load ptr, ptr @"Builtins::structGet:32", align 8
  call void @free_candy_value(ptr %1169)
  %1170 = load ptr, ptr @"Builtins::structGet:34", align 8
  call void @free_candy_value(ptr %1170)
  %1171 = load ptr, ptr @"Builtins::structGet:35", align 8
  call void @free_candy_value(ptr %1171)
  %1172 = load ptr, ptr @"Builtins::structGet:36", align 8
  call void @free_candy_value(ptr %1172)
  %1173 = load ptr, ptr @"Builtins::structGet:37", align 8
  call void @free_candy_value(ptr %1173)
  %1174 = load ptr, ptr @"Builtins::structGet:38", align 8
  call void @free_candy_value(ptr %1174)
  %1175 = load ptr, ptr @"Builtins::structGet:45", align 8
  call void @free_candy_value(ptr %1175)
  %1176 = load ptr, ptr @"Builtins::structGet:5", align 8
  call void @free_candy_value(ptr %1176)
  %1177 = load ptr, ptr @"Builtins::structGetKeys:11", align 8
  call void @free_candy_value(ptr %1177)
  %1178 = load ptr, ptr @"Builtins::structGetKeys:5", align 8
  call void @free_candy_value(ptr %1178)
  %1179 = load ptr, ptr @"Builtins::structHasKey:12", align 8
  call void @free_candy_value(ptr %1179)
  %1180 = load ptr, ptr @"Builtins::structHasKey:5", align 8
  call void @free_candy_value(ptr %1180)
  %1181 = load ptr, ptr @"Builtins::tagGetValue:11", align 8
  call void @free_candy_value(ptr %1181)
  %1182 = load ptr, ptr @"Builtins::tagGetValue:13", align 8
  call void @free_candy_value(ptr %1182)
  %1183 = load ptr, ptr @"Builtins::tagGetValue:19", align 8
  call void @free_candy_value(ptr %1183)
  %1184 = load ptr, ptr @"Builtins::tagGetValue:5", align 8
  call void @free_candy_value(ptr %1184)
  %1185 = load ptr, ptr @"Builtins::tagHasValue:11", align 8
  call void @free_candy_value(ptr %1185)
  %1186 = load ptr, ptr @"Builtins::tagHasValue:5", align 8
  call void @free_candy_value(ptr %1186)
  %1187 = load ptr, ptr @"Builtins::tagWithoutValue:11", align 8
  call void @free_candy_value(ptr %1187)
  %1188 = load ptr, ptr @"Builtins::tagWithoutValue:5", align 8
  call void @free_candy_value(ptr %1188)
  %1189 = load ptr, ptr @"Builtins::textCharacters:11", align 8
  call void @free_candy_value(ptr %1189)
  %1190 = load ptr, ptr @"Builtins::textCharacters:5", align 8
  call void @free_candy_value(ptr %1190)
  %1191 = load ptr, ptr @"Builtins::textConcatenate:11", align 8
  call void @free_candy_value(ptr %1191)
  %1192 = load ptr, ptr @"Builtins::textConcatenate:18", align 8
  call void @free_candy_value(ptr %1192)
  %1193 = load ptr, ptr @"Builtins::textConcatenate:5", align 8
  call void @free_candy_value(ptr %1193)
  %1194 = load ptr, ptr @"Builtins::textContains:11", align 8
  call void @free_candy_value(ptr %1194)
  %1195 = load ptr, ptr @"Builtins::textContains:18", align 8
  call void @free_candy_value(ptr %1195)
  %1196 = load ptr, ptr @"Builtins::textContains:5", align 8
  call void @free_candy_value(ptr %1196)
  %1197 = load ptr, ptr @"Builtins::textEndsWith:11", align 8
  call void @free_candy_value(ptr %1197)
  %1198 = load ptr, ptr @"Builtins::textEndsWith:18", align 8
  call void @free_candy_value(ptr %1198)
  %1199 = load ptr, ptr @"Builtins::textEndsWith:5", align 8
  call void @free_candy_value(ptr %1199)
  %1200 = load ptr, ptr @"Builtins::textFromUtf8:11", align 8
  call void @free_candy_value(ptr %1200)
  %1201 = load ptr, ptr @"Builtins::textFromUtf8:5", align 8
  call void @free_candy_value(ptr %1201)
  %1202 = load ptr, ptr @"Builtins::textGetRange:11", align 8
  call void @free_candy_value(ptr %1202)
  %1203 = load ptr, ptr @"Builtins::textGetRange:14", align 8
  call void @free_candy_value(ptr %1203)
  %1204 = load ptr, ptr @"Builtins::textGetRange:16", align 8
  call void @free_candy_value(ptr %1204)
  %1205 = load ptr, ptr @"Builtins::textGetRange:24", align 8
  call void @free_candy_value(ptr %1205)
  %1206 = load ptr, ptr @"Builtins::textGetRange:25", align 8
  call void @free_candy_value(ptr %1206)
  %1207 = load ptr, ptr @"Builtins::textGetRange:27", align 8
  call void @free_candy_value(ptr %1207)
  %1208 = load ptr, ptr @"Builtins::textGetRange:33", align 8
  call void @free_candy_value(ptr %1208)
  %1209 = load ptr, ptr @"Builtins::textGetRange:36", align 8
  call void @free_candy_value(ptr %1209)
  %1210 = load ptr, ptr @"Builtins::textGetRange:38", align 8
  call void @free_candy_value(ptr %1210)
  %1211 = load ptr, ptr @"Builtins::textGetRange:46", align 8
  call void @free_candy_value(ptr %1211)
  %1212 = load ptr, ptr @"Builtins::textGetRange:47", align 8
  call void @free_candy_value(ptr %1212)
  %1213 = load ptr, ptr @"Builtins::textGetRange:49", align 8
  call void @free_candy_value(ptr %1213)
  %1214 = load ptr, ptr @"Builtins::textGetRange:5", align 8
  call void @free_candy_value(ptr %1214)
  %1215 = load ptr, ptr @"Builtins::textGetRange:53", align 8
  call void @free_candy_value(ptr %1215)
  %1216 = load ptr, ptr @"Builtins::textGetRange:55", align 8
  call void @free_candy_value(ptr %1216)
  %1217 = load ptr, ptr @"Builtins::textGetRange:63", align 8
  call void @free_candy_value(ptr %1217)
  %1218 = load ptr, ptr @"Builtins::textIsEmpty:11", align 8
  call void @free_candy_value(ptr %1218)
  %1219 = load ptr, ptr @"Builtins::textIsEmpty:5", align 8
  call void @free_candy_value(ptr %1219)
  %1220 = load ptr, ptr @"Builtins::textLength:11", align 8
  call void @free_candy_value(ptr %1220)
  %1221 = load ptr, ptr @"Builtins::textLength:5", align 8
  call void @free_candy_value(ptr %1221)
  %1222 = load ptr, ptr @"Builtins::textStartsWith:11", align 8
  call void @free_candy_value(ptr %1222)
  %1223 = load ptr, ptr @"Builtins::textStartsWith:18", align 8
  call void @free_candy_value(ptr %1223)
  %1224 = load ptr, ptr @"Builtins::textStartsWith:5", align 8
  call void @free_candy_value(ptr %1224)
  %1225 = load ptr, ptr @"Builtins::textTrimEnd:11", align 8
  call void @free_candy_value(ptr %1225)
  %1226 = load ptr, ptr @"Builtins::textTrimEnd:5", align 8
  call void @free_candy_value(ptr %1226)
  %1227 = load ptr, ptr @"Builtins::textTrimStart:11", align 8
  call void @free_candy_value(ptr %1227)
  %1228 = load ptr, ptr @"Builtins::textTrimStart:5", align 8
  call void @free_candy_value(ptr %1228)
  %1229 = load ptr, ptr @"Builtins::toDebugText:5", align 8
  call void @free_candy_value(ptr %1229)
  %1230 = load ptr, ptr @"Builtins::typeIs:19", align 8
  call void @free_candy_value(ptr %1230)
  %1231 = load ptr, ptr @"Builtins::typeIs:25", align 8
  call void @free_candy_value(ptr %1231)
  %1232 = load ptr, ptr @"Builtins::typeOf:5", align 8
  call void @free_candy_value(ptr %1232)
  %1233 = load ptr, ptr @"Examples::10:10", align 8
  call void @free_candy_value(ptr %1233)
  %1234 = load ptr, ptr @"Examples::10:20", align 8
  call void @free_candy_value(ptr %1234)
  %1235 = load ptr, ptr @"Examples::10:21", align 8
  call void @free_candy_value(ptr %1235)
  %1236 = load ptr, ptr @"Examples::10:29", align 8
  call void @free_candy_value(ptr %1236)
  %1237 = load ptr, ptr @"Examples::10:30", align 8
  call void @free_candy_value(ptr %1237)
  %1238 = load ptr, ptr @"Examples::10:8", align 8
  call void @free_candy_value(ptr %1238)
  %1239 = load ptr, ptr @"anonymous:$generated::needs", align 8
  call void @free_candy_value(ptr %1239)
  %1240 = load ptr, ptr @fun_candy_builtin_equals, align 8
  call void @free_candy_value(ptr %1240)
  %1241 = load ptr, ptr @fun_candy_builtin_get_argument_count, align 8
  call void @free_candy_value(ptr %1241)
  %1242 = load ptr, ptr @fun_candy_builtin_if_else, align 8
  call void @free_candy_value(ptr %1242)
  %1243 = load ptr, ptr @fun_candy_builtin_int_add, align 8
  call void @free_candy_value(ptr %1243)
  %1244 = load ptr, ptr @fun_candy_builtin_int_bit_length, align 8
  call void @free_candy_value(ptr %1244)
  %1245 = load ptr, ptr @fun_candy_builtin_int_bitwise_and, align 8
  call void @free_candy_value(ptr %1245)
  %1246 = load ptr, ptr @fun_candy_builtin_int_bitwise_or, align 8
  call void @free_candy_value(ptr %1246)
  %1247 = load ptr, ptr @fun_candy_builtin_int_bitwise_xor, align 8
  call void @free_candy_value(ptr %1247)
  %1248 = load ptr, ptr @fun_candy_builtin_int_compare_to, align 8
  call void @free_candy_value(ptr %1248)
  %1249 = load ptr, ptr @fun_candy_builtin_int_divide_truncating, align 8
  call void @free_candy_value(ptr %1249)
  %1250 = load ptr, ptr @fun_candy_builtin_int_modulo, align 8
  call void @free_candy_value(ptr %1250)
  %1251 = load ptr, ptr @fun_candy_builtin_int_multiply, align 8
  call void @free_candy_value(ptr %1251)
  %1252 = load ptr, ptr @fun_candy_builtin_int_parse, align 8
  call void @free_candy_value(ptr %1252)
  %1253 = load ptr, ptr @fun_candy_builtin_int_remainder, align 8
  call void @free_candy_value(ptr %1253)
  %1254 = load ptr, ptr @fun_candy_builtin_int_shift_left, align 8
  call void @free_candy_value(ptr %1254)
  %1255 = load ptr, ptr @fun_candy_builtin_int_shift_right, align 8
  call void @free_candy_value(ptr %1255)
  %1256 = load ptr, ptr @fun_candy_builtin_int_subtract, align 8
  call void @free_candy_value(ptr %1256)
  %1257 = load ptr, ptr @fun_candy_builtin_list_filled, align 8
  call void @free_candy_value(ptr %1257)
  %1258 = load ptr, ptr @fun_candy_builtin_list_get, align 8
  call void @free_candy_value(ptr %1258)
  %1259 = load ptr, ptr @fun_candy_builtin_list_insert, align 8
  call void @free_candy_value(ptr %1259)
  %1260 = load ptr, ptr @fun_candy_builtin_list_length, align 8
  call void @free_candy_value(ptr %1260)
  %1261 = load ptr, ptr @fun_candy_builtin_list_remove_at, align 8
  call void @free_candy_value(ptr %1261)
  %1262 = load ptr, ptr @fun_candy_builtin_list_replace, align 8
  call void @free_candy_value(ptr %1262)
  %1263 = load ptr, ptr @fun_candy_builtin_print, align 8
  call void @free_candy_value(ptr %1263)
  %1264 = load ptr, ptr @fun_candy_builtin_struct_get, align 8
  call void @free_candy_value(ptr %1264)
  %1265 = load ptr, ptr @fun_candy_builtin_struct_get_keys, align 8
  call void @free_candy_value(ptr %1265)
  %1266 = load ptr, ptr @fun_candy_builtin_struct_has_key, align 8
  call void @free_candy_value(ptr %1266)
  %1267 = load ptr, ptr @fun_candy_builtin_tag_get_value, align 8
  call void @free_candy_value(ptr %1267)
  %1268 = load ptr, ptr @fun_candy_builtin_tag_has_value, align 8
  call void @free_candy_value(ptr %1268)
  %1269 = load ptr, ptr @fun_candy_builtin_tag_without_value, align 8
  call void @free_candy_value(ptr %1269)
  %1270 = load ptr, ptr @fun_candy_builtin_text_characters, align 8
  call void @free_candy_value(ptr %1270)
  %1271 = load ptr, ptr @fun_candy_builtin_text_concatenate, align 8
  call void @free_candy_value(ptr %1271)
  %1272 = load ptr, ptr @fun_candy_builtin_text_contains, align 8
  call void @free_candy_value(ptr %1272)
  %1273 = load ptr, ptr @fun_candy_builtin_text_ends_with, align 8
  call void @free_candy_value(ptr %1273)
  %1274 = load ptr, ptr @fun_candy_builtin_text_from_utf8, align 8
  call void @free_candy_value(ptr %1274)
  %1275 = load ptr, ptr @fun_candy_builtin_text_get_range, align 8
  call void @free_candy_value(ptr %1275)
  %1276 = load ptr, ptr @fun_candy_builtin_text_is_empty, align 8
  call void @free_candy_value(ptr %1276)
  %1277 = load ptr, ptr @fun_candy_builtin_text_length, align 8
  call void @free_candy_value(ptr %1277)
  %1278 = load ptr, ptr @fun_candy_builtin_text_starts_with, align 8
  call void @free_candy_value(ptr %1278)
  %1279 = load ptr, ptr @fun_candy_builtin_text_trim_end, align 8
  call void @free_candy_value(ptr %1279)
  %1280 = load ptr, ptr @fun_candy_builtin_text_trim_start, align 8
  call void @free_candy_value(ptr %1280)
  %1281 = load ptr, ptr @fun_candy_builtin_to_debug_text, align 8
  call void @free_candy_value(ptr %1281)
  %1282 = load ptr, ptr @fun_candy_builtin_type_of, align 8
  call void @free_candy_value(ptr %1282)
  %1283 = load ptr, ptr @tag_Equal, align 8
  call void @free_candy_value(ptr %1283)
  %1284 = load ptr, ptr @tag_Equals, align 8
  call void @free_candy_value(ptr %1284)
  %1285 = load ptr, ptr @tag_False, align 8
  call void @free_candy_value(ptr %1285)
  %1286 = load ptr, ptr @tag_Function, align 8
  call void @free_candy_value(ptr %1286)
  %1287 = load ptr, ptr @tag_FunctionRun, align 8
  call void @free_candy_value(ptr %1287)
  %1288 = load ptr, ptr @tag_GetArgumentCount, align 8
  call void @free_candy_value(ptr %1288)
  %1289 = load ptr, ptr @tag_Greater, align 8
  call void @free_candy_value(ptr %1289)
  %1290 = load ptr, ptr @tag_IfElse, align 8
  call void @free_candy_value(ptr %1290)
  %1291 = load ptr, ptr @tag_Int, align 8
  call void @free_candy_value(ptr %1291)
  %1292 = load ptr, ptr @tag_IntAdd, align 8
  call void @free_candy_value(ptr %1292)
  %1293 = load ptr, ptr @tag_IntBitLength, align 8
  call void @free_candy_value(ptr %1293)
  %1294 = load ptr, ptr @tag_IntBitwiseAnd, align 8
  call void @free_candy_value(ptr %1294)
  %1295 = load ptr, ptr @tag_IntBitwiseOr, align 8
  call void @free_candy_value(ptr %1295)
  %1296 = load ptr, ptr @tag_IntBitwiseXor, align 8
  call void @free_candy_value(ptr %1296)
  %1297 = load ptr, ptr @tag_IntCompareTo, align 8
  call void @free_candy_value(ptr %1297)
  %1298 = load ptr, ptr @tag_IntDivideTruncating, align 8
  call void @free_candy_value(ptr %1298)
  %1299 = load ptr, ptr @tag_IntModulo, align 8
  call void @free_candy_value(ptr %1299)
  %1300 = load ptr, ptr @tag_IntMultiply, align 8
  call void @free_candy_value(ptr %1300)
  %1301 = load ptr, ptr @tag_IntParse, align 8
  call void @free_candy_value(ptr %1301)
  %1302 = load ptr, ptr @tag_IntRemainder, align 8
  call void @free_candy_value(ptr %1302)
  %1303 = load ptr, ptr @tag_IntShiftLeft, align 8
  call void @free_candy_value(ptr %1303)
  %1304 = load ptr, ptr @tag_IntShiftRight, align 8
  call void @free_candy_value(ptr %1304)
  %1305 = load ptr, ptr @tag_IntSubtract, align 8
  call void @free_candy_value(ptr %1305)
  %1306 = load ptr, ptr @tag_Less, align 8
  call void @free_candy_value(ptr %1306)
  %1307 = load ptr, ptr @tag_List, align 8
  call void @free_candy_value(ptr %1307)
  %1308 = load ptr, ptr @tag_ListFilled, align 8
  call void @free_candy_value(ptr %1308)
  %1309 = load ptr, ptr @tag_ListGet, align 8
  call void @free_candy_value(ptr %1309)
  %1310 = load ptr, ptr @tag_ListInsert, align 8
  call void @free_candy_value(ptr %1310)
  %1311 = load ptr, ptr @tag_ListLength, align 8
  call void @free_candy_value(ptr %1311)
  %1312 = load ptr, ptr @tag_ListRemoveAt, align 8
  call void @free_candy_value(ptr %1312)
  %1313 = load ptr, ptr @tag_ListReplace, align 8
  call void @free_candy_value(ptr %1313)
  %1314 = load ptr, ptr @tag_Main, align 8
  call void @free_candy_value(ptr %1314)
  %1315 = load ptr, ptr @tag_Match, align 8
  call void @free_candy_value(ptr %1315)
  %1316 = load ptr, ptr @tag_NoMatch, align 8
  call void @free_candy_value(ptr %1316)
  %1317 = load ptr, ptr @tag_Nothing, align 8
  call void @free_candy_value(ptr %1317)
  %1318 = load ptr, ptr @tag_Print, align 8
  call void @free_candy_value(ptr %1318)
  %1319 = load ptr, ptr @tag_Struct, align 8
  call void @free_candy_value(ptr %1319)
  %1320 = load ptr, ptr @tag_StructGet, align 8
  call void @free_candy_value(ptr %1320)
  %1321 = load ptr, ptr @tag_StructGetKeys, align 8
  call void @free_candy_value(ptr %1321)
  %1322 = load ptr, ptr @tag_StructHasKey, align 8
  call void @free_candy_value(ptr %1322)
  %1323 = load ptr, ptr @tag_Tag, align 8
  call void @free_candy_value(ptr %1323)
  %1324 = load ptr, ptr @tag_TagGetValue, align 8
  call void @free_candy_value(ptr %1324)
  %1325 = load ptr, ptr @tag_TagHasValue, align 8
  call void @free_candy_value(ptr %1325)
  %1326 = load ptr, ptr @tag_TagWithoutValue, align 8
  call void @free_candy_value(ptr %1326)
  %1327 = load ptr, ptr @tag_Text, align 8
  call void @free_candy_value(ptr %1327)
  %1328 = load ptr, ptr @tag_TextCharacters, align 8
  call void @free_candy_value(ptr %1328)
  %1329 = load ptr, ptr @tag_TextConcatenate, align 8
  call void @free_candy_value(ptr %1329)
  %1330 = load ptr, ptr @tag_TextContains, align 8
  call void @free_candy_value(ptr %1330)
  %1331 = load ptr, ptr @tag_TextEndsWith, align 8
  call void @free_candy_value(ptr %1331)
  %1332 = load ptr, ptr @tag_TextFromUtf8, align 8
  call void @free_candy_value(ptr %1332)
  %1333 = load ptr, ptr @tag_TextGetRange, align 8
  call void @free_candy_value(ptr %1333)
  %1334 = load ptr, ptr @tag_TextIsEmpty, align 8
  call void @free_candy_value(ptr %1334)
  %1335 = load ptr, ptr @tag_TextLength, align 8
  call void @free_candy_value(ptr %1335)
  %1336 = load ptr, ptr @tag_TextStartsWith, align 8
  call void @free_candy_value(ptr %1336)
  %1337 = load ptr, ptr @tag_TextTrimEnd, align 8
  call void @free_candy_value(ptr %1337)
  %1338 = load ptr, ptr @tag_TextTrimStart, align 8
  call void @free_candy_value(ptr %1338)
  %1339 = load ptr, ptr @tag_ToDebugText, align 8
  call void @free_candy_value(ptr %1339)
  %1340 = load ptr, ptr @tag_True, align 8
  call void @free_candy_value(ptr %1340)
  %1341 = load ptr, ptr @tag_TypeOf, align 8
  call void @free_candy_value(ptr %1341)
  %1342 = load ptr, ptr @num_0, align 8
  call void @free_candy_value(ptr %1342)
  %1343 = load ptr, ptr @num_1, align 8
  call void @free_candy_value(ptr %1343)
  %1344 = load ptr, ptr @num_2, align 8
  call void @free_candy_value(ptr %1344)
  %1345 = load ptr, ptr @num_340282366920938463463374607431768211455, align 8
  call void @free_candy_value(ptr %1345)
  %1346 = load ptr, ptr @text_., align 8
  call void @free_candy_value(ptr %1346)
  %1347 = load ptr, ptr @"text_. You might want to call `shiftLeft` instead.", align 8
  call void @free_candy_value(ptr %1347)
  %1348 = load ptr, ptr @"text_. You might want to call `shiftRight` instead.", align 8
  call void @free_candy_value(ptr %1348)
  %1349 = load ptr, ptr @"text_Expected Equal, got ", align 8
  call void @free_candy_value(ptr %1349)
  %1350 = load ptr, ptr @"text_Expected False, got ", align 8
  call void @free_candy_value(ptr %1350)
  %1351 = load ptr, ptr @"text_Expected Greater, got ", align 8
  call void @free_candy_value(ptr %1351)
  %1352 = load ptr, ptr @"text_Expected Less, got ", align 8
  call void @free_candy_value(ptr %1352)
  %1353 = load ptr, ptr @"text_Expected True, got ", align 8
  call void @free_candy_value(ptr %1353)
  %1354 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  call void @free_candy_value(ptr %1354)
  %1355 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  call void @free_candy_value(ptr %1355)
  %1356 = load ptr, ptr @"text_No case matched the given expression.", align 8
  call void @free_candy_value(ptr %1356)
  %1357 = load ptr, ptr @"text_Shifts by that much are not yet supported.", align 8
  call void @free_candy_value(ptr %1357)
  %1358 = load ptr, ptr @"text_Struct `", align 8
  call void @free_candy_value(ptr %1358)
  %1359 = load ptr, ptr @"text_The `condition` must be either `True` or `False`.", align 8
  call void @free_candy_value(ptr %1359)
  %1360 = load ptr, ptr @"text_The `reason` must be a text.", align 8
  call void @free_candy_value(ptr %1360)
  %1361 = load ptr, ptr @"text_The shift `amount` is negative: ", align 8
  call void @free_candy_value(ptr %1361)
  %1362 = load ptr, ptr @"text_You can't divide by zero.", align 8
  call void @free_candy_value(ptr %1362)
  %1363 = load ptr, ptr @"text_` is missing the key `", align 8
  call void @free_candy_value(ptr %1363)
  %1364 = load ptr, ptr @"text_`.", align 8
  call void @free_candy_value(ptr %1364)
  %1365 = load ptr, ptr @"text_`False` was not satisfied", align 8
  call void @free_candy_value(ptr %1365)
  %1366 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1366)
  %1367 = load ptr, ptr @"text_`a | typeIs Text` was not satisfied", align 8
  call void @free_candy_value(ptr %1367)
  %1368 = load ptr, ptr @"text_`amount | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1368)
  %1369 = load ptr, ptr @"text_`b | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1369)
  %1370 = load ptr, ptr @"text_`b | typeIs Text` was not satisfied", align 8
  call void @free_candy_value(ptr %1370)
  %1371 = load ptr, ptr @"text_`bytes | typeIs List` was not satisfied", align 8
  call void @free_candy_value(ptr %1371)
  %1372 = load ptr, ptr @"text_`conditionIsBool` was not satisfied", align 8
  call void @free_candy_value(ptr %1372)
  %1373 = load ptr, ptr @"text_`dividend | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1373)
  %1374 = load ptr, ptr @"text_`divisor | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1374)
  %1375 = load ptr, ptr @"text_`else | getArgumentCount | equals 0` was not satisfied", align 8
  call void @free_candy_value(ptr %1375)
  %1376 = load ptr, ptr @"text_`else | typeIs Function` was not satisfied", align 8
  call void @free_candy_value(ptr %1376)
  %1377 = load ptr, ptr @"text_`endExclusive | isLessThanOrEqualTo (text | \E2\9C\A8.textLength)` was not satisfied", align 8
  call void @free_candy_value(ptr %1377)
  %1378 = load ptr, ptr @"text_`endExclusive | isNonNegative` was not satisfied", align 8
  call void @free_candy_value(ptr %1378)
  %1379 = load ptr, ptr @"text_`endExclusive | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1379)
  %1380 = load ptr, ptr @"text_`factorA | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1380)
  %1381 = load ptr, ptr @"text_`factorB | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1381)
  %1382 = load ptr, ptr @"text_`function | typeIs Function` was not satisfied", align 8
  call void @free_candy_value(ptr %1382)
  %1383 = load ptr, ptr @"text_`function | \E2\9C\A8.getArgumentCount | equals 0` was not satisfied", align 8
  call void @free_candy_value(ptr %1383)
  %1384 = load ptr, ptr @"text_`index | intCompareTo (list | listLength) | equals Less` was not satisfied", align 8
  call void @free_candy_value(ptr %1384)
  %1385 = load ptr, ptr @"text_`index | intCompareTo (list | \E2\9C\A8.listLength) | equals Less` was not satisfied", align 8
  call void @free_candy_value(ptr %1385)
  %1386 = load ptr, ptr @"text_`index | isLessThanOrEqualTo (list | \E2\9C\A8.listLength)` was not satisfied", align 8
  call void @free_candy_value(ptr %1386)
  %1387 = load ptr, ptr @"text_`index | isNonNegative` was not satisfied", align 8
  call void @free_candy_value(ptr %1387)
  %1388 = load ptr, ptr @"text_`index | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1388)
  %1389 = load ptr, ptr @"text_`int | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1389)
  %1390 = load ptr, ptr @"text_`length | isNonNegative` was not satisfied", align 8
  call void @free_candy_value(ptr %1390)
  %1391 = load ptr, ptr @"text_`length | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1391)
  %1392 = load ptr, ptr @"text_`list | typeIs List` was not satisfied", align 8
  call void @free_candy_value(ptr %1392)
  %1393 = load ptr, ptr @"text_`message | typeIs Text` was not satisfied", align 8
  call void @free_candy_value(ptr %1393)
  %1394 = load ptr, ptr @"text_`minuend | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1394)
  %1395 = load ptr, ptr @"text_`pattern | typeIs Text` was not satisfied", align 8
  call void @free_candy_value(ptr %1395)
  %1396 = load ptr, ptr @"text_`prefix | typeIs Text` was not satisfied", align 8
  call void @free_candy_value(ptr %1396)
  %1397 = load ptr, ptr @"text_`startInclusive | isLessThanOrEqualTo (text | \E2\9C\A8.textLength)` was not satisfied", align 8
  call void @free_candy_value(ptr %1397)
  %1398 = load ptr, ptr @"text_`startInclusive | isLessThanOrEqualTo endExclusive` was not satisfied", align 8
  call void @free_candy_value(ptr %1398)
  %1399 = load ptr, ptr @"text_`startInclusive | isNonNegative` was not satisfied", align 8
  call void @free_candy_value(ptr %1399)
  %1400 = load ptr, ptr @"text_`startInclusive | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1400)
  %1401 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  call void @free_candy_value(ptr %1401)
  %1402 = load ptr, ptr @"text_`subtrahend | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1402)
  %1403 = load ptr, ptr @"text_`suffix | typeIs Text` was not satisfied", align 8
  call void @free_candy_value(ptr %1403)
  %1404 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  call void @free_candy_value(ptr %1404)
  %1405 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  call void @free_candy_value(ptr %1405)
  %1406 = load ptr, ptr @"text_`text | typeIs Text` was not satisfied", align 8
  call void @free_candy_value(ptr %1406)
  %1407 = load ptr, ptr @"text_`then | getArgumentCount | equals 0` was not satisfied", align 8
  call void @free_candy_value(ptr %1407)
  %1408 = load ptr, ptr @"text_`then | typeIs Function` was not satisfied", align 8
  call void @free_candy_value(ptr %1408)
  %1409 = load ptr, ptr @"text_`value | isNonNegative` was not satisfied", align 8
  call void @free_candy_value(ptr %1409)
  %1410 = load ptr, ptr @"text_`value | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1410)
  %1411 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  call void @free_candy_value(ptr %1411)
  %1412 = load ptr, ptr @"fun_anonymous_$generated__needs_condition_then, anonymous_$generated__needs_isConditionBool_then, anonymous_$generated__needs_isReasonText_then", align 8
  call void @free_candy_value(ptr %1412)
  %1413 = load ptr, ptr @"fun_anonymous_$generated__needs", align 8
  call void @free_candy_value(ptr %1413)
  %1414 = load ptr, ptr @"fun_anonymous_$generated__needs_isConditionTrue_else", align 8
  call void @free_candy_value(ptr %1414)
  %1415 = load ptr, ptr @"fun_anonymous_$generated__needs_isConditionBool_else", align 8
  call void @free_candy_value(ptr %1415)
  %1416 = load ptr, ptr @"fun_anonymous_$generated__needs_isReasonText_else", align 8
  call void @free_candy_value(ptr %1416)
  %1417 = load ptr, ptr @"fun_anonymous_$generated__needs_condition_else", align 8
  call void @free_candy_value(ptr %1417)
  %1418 = load ptr, ptr @0, align 8
  call void @free_candy_value(ptr %1418)
  %1419 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then", align 8
  call void @free_candy_value(ptr %1419)
  %1420 = load ptr, ptr @"fun_Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_else", align 8
  call void @free_candy_value(ptr %1420)
  %1421 = load ptr, ptr @fun_Builtins__not, align 8
  call void @free_candy_value(ptr %1421)
  %1422 = load ptr, ptr @fun_Builtins__not_1_equals_then, align 8
  call void @free_candy_value(ptr %1422)
  %1423 = load ptr, ptr @fun_Builtins__not_1_equals_then.3, align 8
  call void @free_candy_value(ptr %1423)
  %1424 = load ptr, ptr @fun_Builtins__not_1_equals_else, align 8
  call void @free_candy_value(ptr %1424)
  %1425 = load ptr, ptr @1, align 8
  call void @free_candy_value(ptr %1425)
  %1426 = load ptr, ptr @fun_Builtins__not_1_equals_else.5, align 8
  call void @free_candy_value(ptr %1426)
  %1427 = load ptr, ptr @2, align 8
  call void @free_candy_value(ptr %1427)
  %1428 = load ptr, ptr @fun_Builtins__not_1_equals_else.7, align 8
  call void @free_candy_value(ptr %1428)
  %1429 = load ptr, ptr @3, align 8
  call void @free_candy_value(ptr %1429)
  %1430 = load ptr, ptr @fun_Builtins__not_1_case-0_didNotMatch, align 8
  call void @free_candy_value(ptr %1430)
  %1431 = load ptr, ptr @fun_Builtins__not_1_equals_then.9, align 8
  call void @free_candy_value(ptr %1431)
  %1432 = load ptr, ptr @fun_Builtins__not_1_equals_then.11, align 8
  call void @free_candy_value(ptr %1432)
  %1433 = load ptr, ptr @fun_Builtins__not_1_equals_else.13, align 8
  call void @free_candy_value(ptr %1433)
  %1434 = load ptr, ptr @4, align 8
  call void @free_candy_value(ptr %1434)
  %1435 = load ptr, ptr @fun_Builtins__not_1_equals_else.15, align 8
  call void @free_candy_value(ptr %1435)
  %1436 = load ptr, ptr @5, align 8
  call void @free_candy_value(ptr %1436)
  %1437 = load ptr, ptr @fun_Builtins__not_1_equals_else.17, align 8
  call void @free_candy_value(ptr %1437)
  %1438 = load ptr, ptr @6, align 8
  call void @free_candy_value(ptr %1438)
  %1439 = load ptr, ptr @fun_Builtins__not_1_case-1_didNotMatch, align 8
  call void @free_candy_value(ptr %1439)
  %1440 = load ptr, ptr @fun_Builtins__isNonNegative, align 8
  call void @free_candy_value(ptr %1440)
  %1441 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then, align 8
  call void @free_candy_value(ptr %1441)
  %1442 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then.19, align 8
  call void @free_candy_value(ptr %1442)
  %1443 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else, align 8
  call void @free_candy_value(ptr %1443)
  %1444 = load ptr, ptr @7, align 8
  call void @free_candy_value(ptr %1444)
  %1445 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.21, align 8
  call void @free_candy_value(ptr %1445)
  %1446 = load ptr, ptr @8, align 8
  call void @free_candy_value(ptr %1446)
  %1447 = load ptr, ptr @fun_Builtins__isNonNegative_13_isMatch_then, align 8
  call void @free_candy_value(ptr %1447)
  %1448 = load ptr, ptr @fun_Builtins__isNonNegative_13_isMatch_else, align 8
  call void @free_candy_value(ptr %1448)
  %1449 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then.23, align 8
  call void @free_candy_value(ptr %1449)
  %1450 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then.25, align 8
  call void @free_candy_value(ptr %1450)
  %1451 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.27, align 8
  call void @free_candy_value(ptr %1451)
  %1452 = load ptr, ptr @9, align 8
  call void @free_candy_value(ptr %1452)
  %1453 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.29, align 8
  call void @free_candy_value(ptr %1453)
  %1454 = load ptr, ptr @10, align 8
  call void @free_candy_value(ptr %1454)
  %1455 = load ptr, ptr @fun_Builtins__isNonNegative_13_case-0_didNotMatch, align 8
  call void @free_candy_value(ptr %1455)
  %1456 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then.31, align 8
  call void @free_candy_value(ptr %1456)
  %1457 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then.33, align 8
  call void @free_candy_value(ptr %1457)
  %1458 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.35, align 8
  call void @free_candy_value(ptr %1458)
  %1459 = load ptr, ptr @11, align 8
  call void @free_candy_value(ptr %1459)
  %1460 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.37, align 8
  call void @free_candy_value(ptr %1460)
  %1461 = load ptr, ptr @12, align 8
  call void @free_candy_value(ptr %1461)
  %1462 = load ptr, ptr @fun_Builtins__isNonNegative_13_case-1_didNotMatch, align 8
  call void @free_candy_value(ptr %1462)
  %1463 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo, align 8
  call void @free_candy_value(ptr %1463)
  %1464 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then, align 8
  call void @free_candy_value(ptr %1464)
  %1465 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.39, align 8
  call void @free_candy_value(ptr %1465)
  %1466 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else, align 8
  call void @free_candy_value(ptr %1466)
  %1467 = load ptr, ptr @13, align 8
  call void @free_candy_value(ptr %1467)
  %1468 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.41, align 8
  call void @free_candy_value(ptr %1468)
  %1469 = load ptr, ptr @14, align 8
  call void @free_candy_value(ptr %1469)
  %1470 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_isMatch_then, align 8
  call void @free_candy_value(ptr %1470)
  %1471 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_isMatch_else, align 8
  call void @free_candy_value(ptr %1471)
  %1472 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.43, align 8
  call void @free_candy_value(ptr %1472)
  %1473 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.45, align 8
  call void @free_candy_value(ptr %1473)
  %1474 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.47, align 8
  call void @free_candy_value(ptr %1474)
  %1475 = load ptr, ptr @15, align 8
  call void @free_candy_value(ptr %1475)
  %1476 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.49, align 8
  call void @free_candy_value(ptr %1476)
  %1477 = load ptr, ptr @16, align 8
  call void @free_candy_value(ptr %1477)
  %1478 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch, align 8
  call void @free_candy_value(ptr %1478)
  %1479 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.51, align 8
  call void @free_candy_value(ptr %1479)
  %1480 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.53, align 8
  call void @free_candy_value(ptr %1480)
  %1481 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.55, align 8
  call void @free_candy_value(ptr %1481)
  %1482 = load ptr, ptr @17, align 8
  call void @free_candy_value(ptr %1482)
  %1483 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.57, align 8
  call void @free_candy_value(ptr %1483)
  %1484 = load ptr, ptr @18, align 8
  call void @free_candy_value(ptr %1484)
  %1485 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_case-1_didNotMatch, align 8
  call void @free_candy_value(ptr %1485)
  %1486 = load ptr, ptr @fun_Builtins__equals, align 8
  call void @free_candy_value(ptr %1486)
  %1487 = load ptr, ptr @fun_Builtins__functionRun, align 8
  call void @free_candy_value(ptr %1487)
  %1488 = load ptr, ptr @fun_Builtins__getArgumentCount, align 8
  call void @free_candy_value(ptr %1488)
  %1489 = load ptr, ptr @fun_Builtins__ifElse, align 8
  call void @free_candy_value(ptr %1489)
  %1490 = load ptr, ptr @fun_Builtins__ifElse_1_equals_then, align 8
  call void @free_candy_value(ptr %1490)
  %1491 = load ptr, ptr @fun_Builtins__ifElse_1_equals_then.59, align 8
  call void @free_candy_value(ptr %1491)
  %1492 = load ptr, ptr @fun_Builtins__ifElse_1_equals_else, align 8
  call void @free_candy_value(ptr %1492)
  %1493 = load ptr, ptr @19, align 8
  call void @free_candy_value(ptr %1493)
  %1494 = load ptr, ptr @fun_Builtins__ifElse_1_equals_else.61, align 8
  call void @free_candy_value(ptr %1494)
  %1495 = load ptr, ptr @20, align 8
  call void @free_candy_value(ptr %1495)
  %1496 = load ptr, ptr @fun_Builtins__ifElse_1_equals_else.63, align 8
  call void @free_candy_value(ptr %1496)
  %1497 = load ptr, ptr @21, align 8
  call void @free_candy_value(ptr %1497)
  %1498 = load ptr, ptr @fun_Builtins__ifElse_1_isMatch_then, align 8
  call void @free_candy_value(ptr %1498)
  %1499 = load ptr, ptr @fun_Builtins__ifElse_1_isMatch_else, align 8
  call void @free_candy_value(ptr %1499)
  %1500 = load ptr, ptr @fun_Builtins__ifElse_1_equals_then.65, align 8
  call void @free_candy_value(ptr %1500)
  %1501 = load ptr, ptr @fun_Builtins__ifElse_1_equals_then.67, align 8
  call void @free_candy_value(ptr %1501)
  %1502 = load ptr, ptr @fun_Builtins__ifElse_1_equals_else.69, align 8
  call void @free_candy_value(ptr %1502)
  %1503 = load ptr, ptr @22, align 8
  call void @free_candy_value(ptr %1503)
  %1504 = load ptr, ptr @fun_Builtins__ifElse_1_equals_else.71, align 8
  call void @free_candy_value(ptr %1504)
  %1505 = load ptr, ptr @23, align 8
  call void @free_candy_value(ptr %1505)
  %1506 = load ptr, ptr @fun_Builtins__ifElse_1_equals_else.73, align 8
  call void @free_candy_value(ptr %1506)
  %1507 = load ptr, ptr @24, align 8
  call void @free_candy_value(ptr %1507)
  %1508 = load ptr, ptr @fun_Builtins__ifElse_1_case-0_didNotMatch, align 8
  call void @free_candy_value(ptr %1508)
  %1509 = load ptr, ptr @fun_Builtins__intAdd, align 8
  call void @free_candy_value(ptr %1509)
  %1510 = load ptr, ptr @fun_Builtins__intBitLength, align 8
  call void @free_candy_value(ptr %1510)
  %1511 = load ptr, ptr @fun_Builtins__intBitwiseAnd, align 8
  call void @free_candy_value(ptr %1511)
  %1512 = load ptr, ptr @fun_Builtins__intBitwiseOr, align 8
  call void @free_candy_value(ptr %1512)
  %1513 = load ptr, ptr @fun_Builtins__intBitwiseXor, align 8
  call void @free_candy_value(ptr %1513)
  %1514 = load ptr, ptr @fun_Builtins__intCompareTo, align 8
  call void @free_candy_value(ptr %1514)
  %1515 = load ptr, ptr @fun_Builtins__intDivideTruncating, align 8
  call void @free_candy_value(ptr %1515)
  %1516 = load ptr, ptr @fun_Builtins__intModulo, align 8
  call void @free_candy_value(ptr %1516)
  %1517 = load ptr, ptr @fun_Builtins__intMultiply, align 8
  call void @free_candy_value(ptr %1517)
  %1518 = load ptr, ptr @fun_Builtins__intParse, align 8
  call void @free_candy_value(ptr %1518)
  %1519 = load ptr, ptr @fun_Builtins__intRemainder, align 8
  call void @free_candy_value(ptr %1519)
  %1520 = load ptr, ptr @fun_Builtins__intShiftLeft, align 8
  call void @free_candy_value(ptr %1520)
  %1521 = load ptr, ptr @fun_Builtins__intShiftLeft_25, align 8
  call void @free_candy_value(ptr %1521)
  %1522 = load ptr, ptr @fun_Builtins__intShiftLeft_26, align 8
  call void @free_candy_value(ptr %1522)
  %1523 = load ptr, ptr @fun_Builtins__intShiftRight, align 8
  call void @free_candy_value(ptr %1523)
  %1524 = load ptr, ptr @fun_Builtins__intShiftRight_25, align 8
  call void @free_candy_value(ptr %1524)
  %1525 = load ptr, ptr @fun_Builtins__intShiftRight_26, align 8
  call void @free_candy_value(ptr %1525)
  %1526 = load ptr, ptr @fun_Builtins__intSubtract, align 8
  call void @free_candy_value(ptr %1526)
  %1527 = load ptr, ptr @fun_Builtins__listFilled, align 8
  call void @free_candy_value(ptr %1527)
  %1528 = load ptr, ptr @fun_Builtins__listGet, align 8
  call void @free_candy_value(ptr %1528)
  %1529 = load ptr, ptr @fun_Builtins__listInsert, align 8
  call void @free_candy_value(ptr %1529)
  %1530 = load ptr, ptr @fun_Builtins__listLength, align 8
  call void @free_candy_value(ptr %1530)
  %1531 = load ptr, ptr @fun_Builtins__listRemoveAt, align 8
  call void @free_candy_value(ptr %1531)
  %1532 = load ptr, ptr @fun_Builtins__listReplace, align 8
  call void @free_candy_value(ptr %1532)
  %1533 = load ptr, ptr @fun_Builtins__print, align 8
  call void @free_candy_value(ptr %1533)
  %1534 = load ptr, ptr @fun_Builtins__structGet, align 8
  call void @free_candy_value(ptr %1534)
  %1535 = load ptr, ptr @fun_Builtins__structGet_23, align 8
  call void @free_candy_value(ptr %1535)
  %1536 = load ptr, ptr @fun_Builtins__structGet_24, align 8
  call void @free_candy_value(ptr %1536)
  %1537 = load ptr, ptr @fun_Builtins__structGet_30, align 8
  call void @free_candy_value(ptr %1537)
  %1538 = load ptr, ptr @fun_Builtins__structGet_31, align 8
  call void @free_candy_value(ptr %1538)
  %1539 = load ptr, ptr @fun_Builtins__structGetKeys, align 8
  call void @free_candy_value(ptr %1539)
  %1540 = load ptr, ptr @fun_Builtins__structHasKey, align 8
  call void @free_candy_value(ptr %1540)
  %1541 = load ptr, ptr @fun_Builtins__tagGetValue, align 8
  call void @free_candy_value(ptr %1541)
  %1542 = load ptr, ptr @fun_Builtins__tagHasValue, align 8
  call void @free_candy_value(ptr %1542)
  %1543 = load ptr, ptr @fun_Builtins__tagWithoutValue, align 8
  call void @free_candy_value(ptr %1543)
  %1544 = load ptr, ptr @fun_Builtins__textCharacters, align 8
  call void @free_candy_value(ptr %1544)
  %1545 = load ptr, ptr @fun_Builtins__textConcatenate, align 8
  call void @free_candy_value(ptr %1545)
  %1546 = load ptr, ptr @fun_Builtins__textContains, align 8
  call void @free_candy_value(ptr %1546)
  %1547 = load ptr, ptr @fun_Builtins__textEndsWith, align 8
  call void @free_candy_value(ptr %1547)
  %1548 = load ptr, ptr @fun_Builtins__textFromUtf8, align 8
  call void @free_candy_value(ptr %1548)
  %1549 = load ptr, ptr @fun_Builtins__textGetRange, align 8
  call void @free_candy_value(ptr %1549)
  %1550 = load ptr, ptr @fun_Builtins__textIsEmpty, align 8
  call void @free_candy_value(ptr %1550)
  %1551 = load ptr, ptr @fun_Builtins__textLength, align 8
  call void @free_candy_value(ptr %1551)
  %1552 = load ptr, ptr @fun_Builtins__textStartsWith, align 8
  call void @free_candy_value(ptr %1552)
  %1553 = load ptr, ptr @fun_Builtins__textTrimEnd, align 8
  call void @free_candy_value(ptr %1553)
  %1554 = load ptr, ptr @fun_Builtins__textTrimStart, align 8
  call void @free_candy_value(ptr %1554)
  %1555 = load ptr, ptr @fun_Builtins__toDebugText, align 8
  call void @free_candy_value(ptr %1555)
  %1556 = load ptr, ptr @fun_Builtins__typeOf, align 8
  call void @free_candy_value(ptr %1556)
  %1557 = load ptr, ptr @fun_Examples__10, align 8
  call void @free_candy_value(ptr %1557)
  ret i32 0
}

declare ptr @run_candy_main(ptr, ptr)

declare ptr @candy_builtin_equals(ptr, ptr)

declare ptr @candy_builtin_get_argument_count(ptr)

declare ptr @candy_builtin_if_else(ptr, ptr, ptr)

declare ptr @candy_builtin_int_add(ptr, ptr)

declare ptr @candy_builtin_int_bit_length(ptr)

declare ptr @candy_builtin_int_bitwise_and(ptr, ptr)

declare ptr @candy_builtin_int_bitwise_or(ptr, ptr)

declare ptr @candy_builtin_int_bitwise_xor(ptr, ptr)

declare ptr @candy_builtin_int_compare_to(ptr, ptr)

declare ptr @candy_builtin_int_divide_truncating(ptr, ptr)

declare ptr @candy_builtin_int_modulo(ptr, ptr)

declare ptr @candy_builtin_int_multiply(ptr, ptr)

declare ptr @candy_builtin_int_parse(ptr)

declare ptr @candy_builtin_int_remainder(ptr, ptr)

declare ptr @candy_builtin_int_shift_left(ptr, ptr)

declare ptr @candy_builtin_int_shift_right(ptr, ptr)

declare ptr @candy_builtin_int_subtract(ptr, ptr)

declare ptr @candy_builtin_list_filled(ptr, ptr)

declare ptr @candy_builtin_list_get(ptr, ptr)

declare ptr @candy_builtin_list_insert(ptr, ptr, ptr)

declare ptr @candy_builtin_list_length(ptr)

declare ptr @candy_builtin_list_remove_at(ptr, ptr)

declare ptr @candy_builtin_list_replace(ptr, ptr, ptr)

declare ptr @candy_builtin_print(ptr)

declare ptr @candy_builtin_struct_get.1(ptr, ptr)

declare ptr @candy_builtin_struct_get_keys(ptr)

declare ptr @candy_builtin_struct_has_key(ptr, ptr)

declare ptr @candy_builtin_tag_get_value(ptr)

declare ptr @candy_builtin_tag_has_value(ptr)

declare ptr @candy_builtin_tag_without_value(ptr)

declare ptr @candy_builtin_text_characters(ptr)

declare ptr @candy_builtin_text_concatenate(ptr, ptr)

declare ptr @candy_builtin_text_contains(ptr, ptr)

declare ptr @candy_builtin_text_ends_with(ptr, ptr)

declare ptr @candy_builtin_text_from_utf8(ptr)

declare ptr @candy_builtin_text_get_range(ptr, ptr, ptr)

declare ptr @candy_builtin_text_is_empty(ptr)

declare ptr @candy_builtin_text_length(ptr)

declare ptr @candy_builtin_text_starts_with(ptr, ptr)

declare ptr @candy_builtin_text_trim_end(ptr)

declare ptr @candy_builtin_text_trim_start(ptr)

declare ptr @candy_builtin_to_debug_text(ptr)

declare ptr @candy_builtin_type_of(ptr)

declare noalias ptr @malloc(i32)

define ptr @"Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, anonymous_$generated__needs_isConditionTrue_then"() {
"Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, anonymous_$generated__needs_isConditionTrue_then":
  %0 = load ptr, ptr @tag_True, align 8
  ret ptr %0
}

define ptr @"anonymous_$generated__needs_condition_then, anonymous_$generated__needs_isConditionBool_then, anonymous_$generated__needs_isReasonText_then"() {
"anonymous_$generated__needs_condition_then, anonymous_$generated__needs_isConditionBool_then, anonymous_$generated__needs_isReasonText_then":
  %0 = load ptr, ptr @tag_Nothing, align 8
  ret ptr %0
}

define ptr @"anonymous_$generated__needs"(ptr %0, ptr %1, ptr %2) {
"anonymous_$generated__needs":
  %3 = load ptr, ptr @tag_True, align 8
  %4 = call ptr @candy_builtin_equals(ptr %0, ptr %3)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %0, ptr %6, align 8
  %7 = call ptr @make_candy_function(ptr @"anonymous_$generated__needs_isConditionTrue_else", ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %7, ptr @"fun_anonymous_$generated__needs_isConditionTrue_else", align 8
  %8 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %9 = load ptr, ptr @"fun_anonymous_$generated__needs_isConditionTrue_else", align 8
  %10 = call ptr @candy_builtin_if_else(ptr %4, ptr %8, ptr %9)
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %12 = call ptr @make_candy_function(ptr @"anonymous_$generated__needs_isConditionBool_else", ptr %11, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %12, ptr @"fun_anonymous_$generated__needs_isConditionBool_else", align 8
  %13 = load ptr, ptr @"fun_anonymous_$generated__needs_condition_then, anonymous_$generated__needs_isConditionBool_then, anonymous_$generated__needs_isReasonText_then", align 8
  %14 = load ptr, ptr @"fun_anonymous_$generated__needs_isConditionBool_else", align 8
  %15 = call ptr @candy_builtin_if_else(ptr %10, ptr %13, ptr %14)
  %16 = call ptr @candy_builtin_type_of(ptr %1)
  %17 = load ptr, ptr @tag_Text, align 8
  %18 = call ptr @candy_builtin_equals(ptr %16, ptr %17)
  %19 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %20 = call ptr @make_candy_function(ptr @"anonymous_$generated__needs_isReasonText_else", ptr %19, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %20, ptr @"fun_anonymous_$generated__needs_isReasonText_else", align 8
  %21 = load ptr, ptr @"fun_anonymous_$generated__needs_condition_then, anonymous_$generated__needs_isConditionBool_then, anonymous_$generated__needs_isReasonText_then", align 8
  %22 = load ptr, ptr @"fun_anonymous_$generated__needs_isReasonText_else", align 8
  %23 = call ptr @candy_builtin_if_else(ptr %18, ptr %21, ptr %22)
  %24 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %25 = getelementptr inbounds { ptr, ptr }, ptr %24, i32 0, i32 0
  store ptr %1, ptr %25, align 8
  %26 = getelementptr inbounds { ptr, ptr }, ptr %24, i32 0, i32 1
  store ptr %2, ptr %26, align 8
  %27 = call ptr @make_candy_function(ptr @"anonymous_$generated__needs_condition_else", ptr %24, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %27, ptr @"fun_anonymous_$generated__needs_condition_else", align 8
  %28 = load ptr, ptr @"fun_anonymous_$generated__needs_condition_then, anonymous_$generated__needs_isConditionBool_then, anonymous_$generated__needs_isReasonText_then", align 8
  %29 = load ptr, ptr @"fun_anonymous_$generated__needs_condition_else", align 8
  %30 = call ptr @candy_builtin_if_else(ptr %0, ptr %28, ptr %29)
  ret ptr %30
}

define ptr @"anonymous_$generated__needs_isConditionTrue_else"(ptr %0) {
"anonymous_$generated__needs_isConditionTrue_else":
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_False, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  ret ptr %4
}

define ptr @"anonymous_$generated__needs_isConditionBool_else"() {
"anonymous_$generated__needs_isConditionBool_else":
  %0 = load ptr, ptr @"text_The `condition` must be either `True` or `False`.", align 8
  call void @candy_panic(ptr %0)
  unreachable
}

define ptr @"anonymous_$generated__needs_isReasonText_else"() {
"anonymous_$generated__needs_isReasonText_else":
  %0 = load ptr, ptr @"text_The `reason` must be a text.", align 8
  call void @candy_panic(ptr %0)
  unreachable
}

define ptr @"anonymous_$generated__needs_condition_else"(ptr %0) {
"anonymous_$generated__needs_condition_else":
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  call void @candy_panic(ptr %2)
  unreachable
}

define ptr @"Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then"() {
"Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then":
  %0 = load ptr, ptr @0, align 8
  ret ptr %0
}

define ptr @"Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_else"() {
"Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_else":
  %0 = load ptr, ptr @tag_False, align 8
  ret ptr %0
}

define ptr @Builtins__not(ptr %0) {
Builtins__not:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Tag, align 8
  %3 = call ptr @candy_builtin_equals(ptr %2, ptr %1)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %5 = getelementptr inbounds { ptr }, ptr %4, i32 0, i32 0
  store ptr %0, ptr %5, align 8
  %6 = call ptr @make_candy_function(ptr @Builtins__not_1_equals_then, ptr %4, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %6, ptr @fun_Builtins__not_1_equals_then, align 8
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %8 = getelementptr inbounds { ptr }, ptr %7, i32 0, i32 0
  store ptr %1, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Builtins__not_1_equals_else.6, ptr %7, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Builtins__not_1_equals_else.7, align 8
  %10 = load ptr, ptr @fun_Builtins__not_1_equals_then, align 8
  %11 = load ptr, ptr @fun_Builtins__not_1_equals_else.7, align 8
  %12 = call ptr @candy_builtin_if_else(ptr %3, ptr %10, ptr %11)
  %13 = load ptr, ptr @num_0, align 8
  %14 = call ptr @candy_builtin_list_get(ptr %12, ptr %13)
  %15 = load ptr, ptr @tag_Match, align 8
  %16 = call ptr @candy_builtin_equals(ptr %14, ptr %15)
  %17 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %18 = getelementptr inbounds { ptr, ptr }, ptr %17, i32 0, i32 0
  store ptr %0, ptr %18, align 8
  %19 = getelementptr inbounds { ptr, ptr }, ptr %17, i32 0, i32 1
  store ptr %12, ptr %19, align 8
  %20 = call ptr @make_candy_function(ptr @Builtins__not_1_case-0_didNotMatch, ptr %17, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %20, ptr @fun_Builtins__not_1_case-0_didNotMatch, align 8
  %21 = load ptr, ptr @"fun_Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_else", align 8
  %22 = load ptr, ptr @fun_Builtins__not_1_case-0_didNotMatch, align 8
  %23 = call ptr @candy_builtin_if_else(ptr %16, ptr %21, ptr %22)
  ret ptr %23
}

define ptr @Builtins__not_1_equals_then(ptr %0) {
Builtins__not_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__not_1_equals_then.2, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__not_1_equals_then.3, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__not_1_equals_else.4, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__not_1_equals_else.5, align 8
  %14 = load ptr, ptr @fun_Builtins__not_1_equals_then.3, align 8
  %15 = load ptr, ptr @fun_Builtins__not_1_equals_else.5, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Builtins__not_1_equals_then.2(ptr %0) {
Builtins__not_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr, ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = getelementptr inbounds { ptr, ptr }, ptr %6, i32 0, i32 1
  store ptr %3, ptr %10, align 8
  %11 = call ptr @make_candy_function(ptr @Builtins__not_1_equals_else, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %11, ptr @fun_Builtins__not_1_equals_else, align 8
  %12 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then", align 8
  %13 = load ptr, ptr @fun_Builtins__not_1_equals_else, align 8
  %14 = call ptr @candy_builtin_if_else(ptr %5, ptr %12, ptr %13)
  ret ptr %14
}

define ptr @Builtins__not_1_equals_else(ptr %0) {
Builtins__not_1_equals_else:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = call ptr @candy_builtin_tag_get_value(ptr %5)
  %7 = call ptr @candy_builtin_to_debug_text(ptr %6)
  %8 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %9 = call ptr @candy_builtin_text_concatenate(ptr %8, ptr %7)
  %10 = load ptr, ptr @"text_`.", align 8
  %11 = call ptr @candy_builtin_text_concatenate(ptr %9, ptr %10)
  %12 = alloca ptr, i64 3, align 8
  %13 = load ptr, ptr @tag_NoMatch, align 8
  %14 = getelementptr ptr, ptr %12, i64 0
  store ptr %13, ptr %14, align 8
  %15 = getelementptr ptr, ptr %12, i64 1
  store ptr %11, ptr %15, align 8
  %16 = getelementptr ptr, ptr %12, i64 2
  store ptr null, ptr %16, align 8
  %17 = call ptr @make_candy_list(ptr %12)
  store ptr %17, ptr @1, align 8
  ret ptr @1
}

define ptr @Builtins__not_1_equals_else.4(ptr %0) {
Builtins__not_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected True, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @2, align 8
  ret ptr @2
}

define ptr @Builtins__not_1_equals_else.6(ptr %0) {
Builtins__not_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @3, align 8
  ret ptr @3
}

define ptr @Builtins__not_1_case-0_didNotMatch(ptr %0) {
Builtins__not_1_case-0_didNotMatch:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = call ptr @candy_builtin_type_of(ptr %6)
  %8 = load ptr, ptr @tag_Tag, align 8
  %9 = call ptr @candy_builtin_equals(ptr %8, ptr %7)
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %12, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Builtins__not_1_equals_then.8, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Builtins__not_1_equals_then.9, align 8
  %15 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %16 = getelementptr inbounds { ptr }, ptr %15, i32 0, i32 0
  store ptr %7, ptr %16, align 8
  %17 = call ptr @make_candy_function(ptr @Builtins__not_1_equals_else.16, ptr %15, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %17, ptr @fun_Builtins__not_1_equals_else.17, align 8
  %18 = load ptr, ptr @fun_Builtins__not_1_equals_then.9, align 8
  %19 = load ptr, ptr @fun_Builtins__not_1_equals_else.17, align 8
  %20 = call ptr @candy_builtin_if_else(ptr %9, ptr %18, ptr %19)
  %21 = load ptr, ptr @num_0, align 8
  %22 = call ptr @candy_builtin_list_get(ptr %20, ptr %21)
  %23 = load ptr, ptr @tag_Match, align 8
  %24 = call ptr @candy_builtin_equals(ptr %22, ptr %23)
  %25 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %26 = getelementptr inbounds { ptr }, ptr %25, i32 0, i32 0
  store ptr %20, ptr %26, align 8
  %27 = call ptr @make_candy_function(ptr @Builtins__not_1_case-1_didNotMatch, ptr %25, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %27, ptr @fun_Builtins__not_1_case-1_didNotMatch, align 8
  %28 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %29 = load ptr, ptr @fun_Builtins__not_1_case-1_didNotMatch, align 8
  %30 = call ptr @candy_builtin_if_else(ptr %24, ptr %28, ptr %29)
  ret ptr %30
}

define ptr @Builtins__not_1_equals_then.8(ptr %0) {
Builtins__not_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__not_1_equals_then.10, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__not_1_equals_then.11, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__not_1_equals_else.14, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__not_1_equals_else.15, align 8
  %14 = load ptr, ptr @fun_Builtins__not_1_equals_then.11, align 8
  %15 = load ptr, ptr @fun_Builtins__not_1_equals_else.15, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Builtins__not_1_equals_then.10(ptr %0) {
Builtins__not_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr, ptr }, ptr %6, i32 0, i32 0
  store ptr %3, ptr %7, align 8
  %8 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr inbounds { ptr, ptr }, ptr %6, i32 0, i32 1
  store ptr %9, ptr %10, align 8
  %11 = call ptr @make_candy_function(ptr @Builtins__not_1_equals_else.12, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %11, ptr @fun_Builtins__not_1_equals_else.13, align 8
  %12 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then", align 8
  %13 = load ptr, ptr @fun_Builtins__not_1_equals_else.13, align 8
  %14 = call ptr @candy_builtin_if_else(ptr %5, ptr %12, ptr %13)
  ret ptr %14
}

define ptr @Builtins__not_1_equals_else.12(ptr %0) {
Builtins__not_1_equals_else:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = call ptr @candy_builtin_tag_get_value(ptr %5)
  %7 = call ptr @candy_builtin_to_debug_text(ptr %6)
  %8 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %9 = call ptr @candy_builtin_text_concatenate(ptr %8, ptr %7)
  %10 = load ptr, ptr @"text_`.", align 8
  %11 = call ptr @candy_builtin_text_concatenate(ptr %9, ptr %10)
  %12 = alloca ptr, i64 3, align 8
  %13 = load ptr, ptr @tag_NoMatch, align 8
  %14 = getelementptr ptr, ptr %12, i64 0
  store ptr %13, ptr %14, align 8
  %15 = getelementptr ptr, ptr %12, i64 1
  store ptr %11, ptr %15, align 8
  %16 = getelementptr ptr, ptr %12, i64 2
  store ptr null, ptr %16, align 8
  %17 = call ptr @make_candy_list(ptr %12)
  store ptr %17, ptr @4, align 8
  ret ptr @4
}

define ptr @Builtins__not_1_equals_else.14(ptr %0) {
Builtins__not_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected False, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @5, align 8
  ret ptr @5
}

define ptr @Builtins__not_1_equals_else.16(ptr %0) {
Builtins__not_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @6, align 8
  ret ptr @6
}

define ptr @Builtins__not_1_case-1_didNotMatch(ptr %0) {
Builtins__not_1_case-1_didNotMatch:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`False` was not satisfied", align 8
  call void @candy_panic(ptr %5)
  unreachable
}

define ptr @Builtins__isNonNegative(ptr %0) {
Builtins__isNonNegative:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Int, align 8
  %3 = call ptr @candy_builtin_equals(ptr %1, ptr %2)
  %4 = load ptr, ptr @"text_`int | typeIs Int` was not satisfied", align 8
  %5 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %4, ptr null)
  %6 = load ptr, ptr @num_0, align 8
  %7 = call ptr @candy_builtin_int_compare_to(ptr %0, ptr %6)
  %8 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %9 = getelementptr inbounds { ptr }, ptr %8, i32 0, i32 0
  store ptr %7, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_then, ptr %8, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isNonNegative_13_equals_then, align 8
  %11 = call ptr @get_candy_function_environment(ptr @fun_Builtins__isNonNegative_13_equals_then)
  %12 = call ptr @Builtins__isNonNegative_13_equals_then(ptr %11)
  %13 = load ptr, ptr @num_0, align 8
  %14 = call ptr @candy_builtin_list_get(ptr %12, ptr %13)
  %15 = load ptr, ptr @tag_Match, align 8
  %16 = call ptr @candy_builtin_equals(ptr %14, ptr %15)
  %17 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %18 = getelementptr inbounds { ptr }, ptr %17, i32 0, i32 0
  store ptr %12, ptr %18, align 8
  %19 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_isMatch_then, ptr %17, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %19, ptr @fun_Builtins__isNonNegative_13_isMatch_then, align 8
  %20 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %21 = getelementptr inbounds { ptr }, ptr %20, i32 0, i32 0
  store ptr %7, ptr %21, align 8
  %22 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_isMatch_else, ptr %20, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %22, ptr @fun_Builtins__isNonNegative_13_isMatch_else, align 8
  %23 = load ptr, ptr @fun_Builtins__isNonNegative_13_isMatch_then, align 8
  %24 = load ptr, ptr @fun_Builtins__isNonNegative_13_isMatch_else, align 8
  %25 = call ptr @candy_builtin_if_else(ptr %16, ptr %23, ptr %24)
  %26 = load ptr, ptr @num_0, align 8
  %27 = call ptr @candy_builtin_list_get(ptr %25, ptr %26)
  %28 = load ptr, ptr @tag_Match, align 8
  %29 = call ptr @candy_builtin_equals(ptr %27, ptr %28)
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %31 = getelementptr inbounds { ptr, ptr }, ptr %30, i32 0, i32 0
  store ptr %7, ptr %31, align 8
  %32 = getelementptr inbounds { ptr, ptr }, ptr %30, i32 0, i32 1
  store ptr %25, ptr %32, align 8
  %33 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_case-0_didNotMatch, ptr %30, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %33, ptr @fun_Builtins__isNonNegative_13_case-0_didNotMatch, align 8
  %34 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %35 = load ptr, ptr @fun_Builtins__isNonNegative_13_case-0_didNotMatch, align 8
  %36 = call ptr @candy_builtin_if_else(ptr %29, ptr %34, ptr %35)
  ret ptr %36
}

define ptr @Builtins__isNonNegative_13_equals_then(ptr %0) {
Builtins__isNonNegative_13_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_Greater, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_then.18, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isNonNegative_13_equals_then.19, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_else.20, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__isNonNegative_13_equals_else.21, align 8
  %14 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then.19, align 8
  %15 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.21, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Builtins__isNonNegative_13_equals_then.18(ptr %0) {
Builtins__isNonNegative_13_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr, ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = getelementptr inbounds { ptr, ptr }, ptr %6, i32 0, i32 1
  store ptr %3, ptr %10, align 8
  %11 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_else, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %11, ptr @fun_Builtins__isNonNegative_13_equals_else, align 8
  %12 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then", align 8
  %13 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else, align 8
  %14 = call ptr @candy_builtin_if_else(ptr %5, ptr %12, ptr %13)
  ret ptr %14
}

define ptr @Builtins__isNonNegative_13_equals_else(ptr %0) {
Builtins__isNonNegative_13_equals_else:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = call ptr @candy_builtin_tag_get_value(ptr %5)
  %7 = call ptr @candy_builtin_to_debug_text(ptr %6)
  %8 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %9 = call ptr @candy_builtin_text_concatenate(ptr %8, ptr %7)
  %10 = load ptr, ptr @"text_`.", align 8
  %11 = call ptr @candy_builtin_text_concatenate(ptr %9, ptr %10)
  %12 = alloca ptr, i64 3, align 8
  %13 = load ptr, ptr @tag_NoMatch, align 8
  %14 = getelementptr ptr, ptr %12, i64 0
  store ptr %13, ptr %14, align 8
  %15 = getelementptr ptr, ptr %12, i64 1
  store ptr %11, ptr %15, align 8
  %16 = getelementptr ptr, ptr %12, i64 2
  store ptr null, ptr %16, align 8
  %17 = call ptr @make_candy_list(ptr %12)
  store ptr %17, ptr @7, align 8
  ret ptr @7
}

define ptr @Builtins__isNonNegative_13_equals_else.20(ptr %0) {
Builtins__isNonNegative_13_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected Greater, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @8, align 8
  ret ptr @8
}

define ptr @Builtins__isNonNegative_13_isMatch_then(ptr %0) {
Builtins__isNonNegative_13_isMatch_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Builtins__isNonNegative_13_isMatch_else(ptr %0) {
Builtins__isNonNegative_13_isMatch_else:
  %1 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %2 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr inbounds { ptr }, ptr %1, i32 0, i32 0
  store ptr %3, ptr %4, align 8
  %5 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_then.22, ptr %1, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %5, ptr @fun_Builtins__isNonNegative_13_equals_then.23, align 8
  %6 = call ptr @get_candy_function_environment(ptr @fun_Builtins__isNonNegative_13_equals_then.23)
  %7 = call ptr @Builtins__isNonNegative_13_equals_then.22(ptr %6)
  ret ptr %7
}

define ptr @Builtins__isNonNegative_13_equals_then.22(ptr %0) {
Builtins__isNonNegative_13_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_Equal, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_then.24, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isNonNegative_13_equals_then.25, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_else.28, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__isNonNegative_13_equals_else.29, align 8
  %14 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then.25, align 8
  %15 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.29, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Builtins__isNonNegative_13_equals_then.24(ptr %0) {
Builtins__isNonNegative_13_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr, ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = getelementptr inbounds { ptr, ptr }, ptr %6, i32 0, i32 1
  store ptr %3, ptr %10, align 8
  %11 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_else.26, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %11, ptr @fun_Builtins__isNonNegative_13_equals_else.27, align 8
  %12 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then", align 8
  %13 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.27, align 8
  %14 = call ptr @candy_builtin_if_else(ptr %5, ptr %12, ptr %13)
  ret ptr %14
}

define ptr @Builtins__isNonNegative_13_equals_else.26(ptr %0) {
Builtins__isNonNegative_13_equals_else:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = call ptr @candy_builtin_tag_get_value(ptr %5)
  %7 = call ptr @candy_builtin_to_debug_text(ptr %6)
  %8 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %9 = call ptr @candy_builtin_text_concatenate(ptr %8, ptr %7)
  %10 = load ptr, ptr @"text_`.", align 8
  %11 = call ptr @candy_builtin_text_concatenate(ptr %9, ptr %10)
  %12 = alloca ptr, i64 3, align 8
  %13 = load ptr, ptr @tag_NoMatch, align 8
  %14 = getelementptr ptr, ptr %12, i64 0
  store ptr %13, ptr %14, align 8
  %15 = getelementptr ptr, ptr %12, i64 1
  store ptr %11, ptr %15, align 8
  %16 = getelementptr ptr, ptr %12, i64 2
  store ptr null, ptr %16, align 8
  %17 = call ptr @make_candy_list(ptr %12)
  store ptr %17, ptr @9, align 8
  ret ptr @9
}

define ptr @Builtins__isNonNegative_13_equals_else.28(ptr %0) {
Builtins__isNonNegative_13_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected Equal, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @10, align 8
  ret ptr @10
}

define ptr @Builtins__isNonNegative_13_case-0_didNotMatch(ptr %0) {
Builtins__isNonNegative_13_case-0_didNotMatch:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %7, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_then.30, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Builtins__isNonNegative_13_equals_then.31, align 8
  %10 = call ptr @get_candy_function_environment(ptr @fun_Builtins__isNonNegative_13_equals_then.31)
  %11 = call ptr @Builtins__isNonNegative_13_equals_then.30(ptr %10)
  %12 = load ptr, ptr @num_0, align 8
  %13 = call ptr @candy_builtin_list_get(ptr %11, ptr %12)
  %14 = load ptr, ptr @tag_Match, align 8
  %15 = call ptr @candy_builtin_equals(ptr %13, ptr %14)
  %16 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %17 = getelementptr inbounds { ptr }, ptr %16, i32 0, i32 0
  store ptr %11, ptr %17, align 8
  %18 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_case-1_didNotMatch, ptr %16, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %18, ptr @fun_Builtins__isNonNegative_13_case-1_didNotMatch, align 8
  %19 = load ptr, ptr @"fun_Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_else", align 8
  %20 = load ptr, ptr @fun_Builtins__isNonNegative_13_case-1_didNotMatch, align 8
  %21 = call ptr @candy_builtin_if_else(ptr %15, ptr %19, ptr %20)
  ret ptr %21
}

define ptr @Builtins__isNonNegative_13_equals_then.30(ptr %0) {
Builtins__isNonNegative_13_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_Less, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_then.32, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isNonNegative_13_equals_then.33, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_else.36, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__isNonNegative_13_equals_else.37, align 8
  %14 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then.33, align 8
  %15 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.37, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Builtins__isNonNegative_13_equals_then.32(ptr %0) {
Builtins__isNonNegative_13_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr, ptr }, ptr %6, i32 0, i32 0
  store ptr %3, ptr %7, align 8
  %8 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr inbounds { ptr, ptr }, ptr %6, i32 0, i32 1
  store ptr %9, ptr %10, align 8
  %11 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_else.34, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %11, ptr @fun_Builtins__isNonNegative_13_equals_else.35, align 8
  %12 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then", align 8
  %13 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.35, align 8
  %14 = call ptr @candy_builtin_if_else(ptr %5, ptr %12, ptr %13)
  ret ptr %14
}

define ptr @Builtins__isNonNegative_13_equals_else.34(ptr %0) {
Builtins__isNonNegative_13_equals_else:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = call ptr @candy_builtin_tag_get_value(ptr %5)
  %7 = call ptr @candy_builtin_to_debug_text(ptr %6)
  %8 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %9 = call ptr @candy_builtin_text_concatenate(ptr %8, ptr %7)
  %10 = load ptr, ptr @"text_`.", align 8
  %11 = call ptr @candy_builtin_text_concatenate(ptr %9, ptr %10)
  %12 = alloca ptr, i64 3, align 8
  %13 = load ptr, ptr @tag_NoMatch, align 8
  %14 = getelementptr ptr, ptr %12, i64 0
  store ptr %13, ptr %14, align 8
  %15 = getelementptr ptr, ptr %12, i64 1
  store ptr %11, ptr %15, align 8
  %16 = getelementptr ptr, ptr %12, i64 2
  store ptr null, ptr %16, align 8
  %17 = call ptr @make_candy_list(ptr %12)
  store ptr %17, ptr @11, align 8
  ret ptr @11
}

define ptr @Builtins__isNonNegative_13_equals_else.36(ptr %0) {
Builtins__isNonNegative_13_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected Less, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @12, align 8
  ret ptr @12
}

define ptr @Builtins__isNonNegative_13_case-1_didNotMatch(ptr %0) {
Builtins__isNonNegative_13_case-1_didNotMatch:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_No case matched the given expression.", align 8
  call void @candy_panic(ptr %5)
  unreachable
}

define ptr @Builtins__isLessThanOrEqualTo(ptr %0, ptr %1) {
Builtins__isLessThanOrEqualTo:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Int, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Int, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`b | typeIs Int` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = call ptr @candy_builtin_int_compare_to(ptr %0, ptr %1)
  %13 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %14 = getelementptr inbounds { ptr }, ptr %13, i32 0, i32 0
  store ptr %12, ptr %14, align 8
  %15 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_then, ptr %13, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %15, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then, align 8
  %16 = call ptr @get_candy_function_environment(ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then)
  %17 = call ptr @Builtins__isLessThanOrEqualTo_19_equals_then(ptr %16)
  %18 = load ptr, ptr @num_0, align 8
  %19 = call ptr @candy_builtin_list_get(ptr %17, ptr %18)
  %20 = load ptr, ptr @tag_Match, align 8
  %21 = call ptr @candy_builtin_equals(ptr %19, ptr %20)
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %23 = getelementptr inbounds { ptr }, ptr %22, i32 0, i32 0
  store ptr %17, ptr %23, align 8
  %24 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_isMatch_then, ptr %22, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %24, ptr @fun_Builtins__isLessThanOrEqualTo_19_isMatch_then, align 8
  %25 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %26 = getelementptr inbounds { ptr }, ptr %25, i32 0, i32 0
  store ptr %12, ptr %26, align 8
  %27 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_isMatch_else, ptr %25, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %27, ptr @fun_Builtins__isLessThanOrEqualTo_19_isMatch_else, align 8
  %28 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_isMatch_then, align 8
  %29 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_isMatch_else, align 8
  %30 = call ptr @candy_builtin_if_else(ptr %21, ptr %28, ptr %29)
  %31 = load ptr, ptr @num_0, align 8
  %32 = call ptr @candy_builtin_list_get(ptr %30, ptr %31)
  %33 = load ptr, ptr @tag_Match, align 8
  %34 = call ptr @candy_builtin_equals(ptr %32, ptr %33)
  %35 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %36 = getelementptr inbounds { ptr, ptr }, ptr %35, i32 0, i32 0
  store ptr %12, ptr %36, align 8
  %37 = getelementptr inbounds { ptr, ptr }, ptr %35, i32 0, i32 1
  store ptr %30, ptr %37, align 8
  %38 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch, ptr %35, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %38, ptr @fun_Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch, align 8
  %39 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %40 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch, align 8
  %41 = call ptr @candy_builtin_if_else(ptr %34, ptr %39, ptr %40)
  ret ptr %41
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_then(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_Less, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_then.38, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.39, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_else.40, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.41, align 8
  %14 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.39, align 8
  %15 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.41, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_then.38(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr, ptr }, ptr %6, i32 0, i32 0
  store ptr %3, ptr %7, align 8
  %8 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr inbounds { ptr, ptr }, ptr %6, i32 0, i32 1
  store ptr %9, ptr %10, align 8
  %11 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_else, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %11, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else, align 8
  %12 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then", align 8
  %13 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else, align 8
  %14 = call ptr @candy_builtin_if_else(ptr %5, ptr %12, ptr %13)
  ret ptr %14
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_else(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_else:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = call ptr @candy_builtin_tag_get_value(ptr %5)
  %7 = call ptr @candy_builtin_to_debug_text(ptr %6)
  %8 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %9 = call ptr @candy_builtin_text_concatenate(ptr %8, ptr %7)
  %10 = load ptr, ptr @"text_`.", align 8
  %11 = call ptr @candy_builtin_text_concatenate(ptr %9, ptr %10)
  %12 = alloca ptr, i64 3, align 8
  %13 = load ptr, ptr @tag_NoMatch, align 8
  %14 = getelementptr ptr, ptr %12, i64 0
  store ptr %13, ptr %14, align 8
  %15 = getelementptr ptr, ptr %12, i64 1
  store ptr %11, ptr %15, align 8
  %16 = getelementptr ptr, ptr %12, i64 2
  store ptr null, ptr %16, align 8
  %17 = call ptr @make_candy_list(ptr %12)
  store ptr %17, ptr @13, align 8
  ret ptr @13
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_else.40(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected Less, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @14, align 8
  ret ptr @14
}

define ptr @Builtins__isLessThanOrEqualTo_19_isMatch_then(ptr %0) {
Builtins__isLessThanOrEqualTo_19_isMatch_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Builtins__isLessThanOrEqualTo_19_isMatch_else(ptr %0) {
Builtins__isLessThanOrEqualTo_19_isMatch_else:
  %1 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %2 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr inbounds { ptr }, ptr %1, i32 0, i32 0
  store ptr %3, ptr %4, align 8
  %5 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_then.42, ptr %1, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %5, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.43, align 8
  %6 = call ptr @get_candy_function_environment(ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.43)
  %7 = call ptr @Builtins__isLessThanOrEqualTo_19_equals_then.42(ptr %6)
  ret ptr %7
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_then.42(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_Equal, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_then.44, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.45, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_else.48, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.49, align 8
  %14 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.45, align 8
  %15 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.49, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_then.44(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr, ptr }, ptr %6, i32 0, i32 0
  store ptr %3, ptr %7, align 8
  %8 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr inbounds { ptr, ptr }, ptr %6, i32 0, i32 1
  store ptr %9, ptr %10, align 8
  %11 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_else.46, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %11, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.47, align 8
  %12 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then", align 8
  %13 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.47, align 8
  %14 = call ptr @candy_builtin_if_else(ptr %5, ptr %12, ptr %13)
  ret ptr %14
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_else.46(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_else:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = call ptr @candy_builtin_tag_get_value(ptr %5)
  %7 = call ptr @candy_builtin_to_debug_text(ptr %6)
  %8 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %9 = call ptr @candy_builtin_text_concatenate(ptr %8, ptr %7)
  %10 = load ptr, ptr @"text_`.", align 8
  %11 = call ptr @candy_builtin_text_concatenate(ptr %9, ptr %10)
  %12 = alloca ptr, i64 3, align 8
  %13 = load ptr, ptr @tag_NoMatch, align 8
  %14 = getelementptr ptr, ptr %12, i64 0
  store ptr %13, ptr %14, align 8
  %15 = getelementptr ptr, ptr %12, i64 1
  store ptr %11, ptr %15, align 8
  %16 = getelementptr ptr, ptr %12, i64 2
  store ptr null, ptr %16, align 8
  %17 = call ptr @make_candy_list(ptr %12)
  store ptr %17, ptr @15, align 8
  ret ptr @15
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_else.48(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected Equal, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @16, align 8
  ret ptr @16
}

define ptr @Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch(ptr %0) {
Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %7, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_then.50, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.51, align 8
  %10 = call ptr @get_candy_function_environment(ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.51)
  %11 = call ptr @Builtins__isLessThanOrEqualTo_19_equals_then.50(ptr %10)
  %12 = load ptr, ptr @num_0, align 8
  %13 = call ptr @candy_builtin_list_get(ptr %11, ptr %12)
  %14 = load ptr, ptr @tag_Match, align 8
  %15 = call ptr @candy_builtin_equals(ptr %13, ptr %14)
  %16 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %17 = getelementptr inbounds { ptr }, ptr %16, i32 0, i32 0
  store ptr %11, ptr %17, align 8
  %18 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_case-1_didNotMatch, ptr %16, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %18, ptr @fun_Builtins__isLessThanOrEqualTo_19_case-1_didNotMatch, align 8
  %19 = load ptr, ptr @"fun_Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_else", align 8
  %20 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_case-1_didNotMatch, align 8
  %21 = call ptr @candy_builtin_if_else(ptr %15, ptr %19, ptr %20)
  ret ptr %21
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_then.50(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_Greater, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_then.52, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.53, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_else.56, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.57, align 8
  %14 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.53, align 8
  %15 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.57, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_then.52(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr, ptr }, ptr %6, i32 0, i32 0
  store ptr %3, ptr %7, align 8
  %8 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr inbounds { ptr, ptr }, ptr %6, i32 0, i32 1
  store ptr %9, ptr %10, align 8
  %11 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_else.54, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %11, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.55, align 8
  %12 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then", align 8
  %13 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.55, align 8
  %14 = call ptr @candy_builtin_if_else(ptr %5, ptr %12, ptr %13)
  ret ptr %14
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_else.54(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_else:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = call ptr @candy_builtin_tag_get_value(ptr %5)
  %7 = call ptr @candy_builtin_to_debug_text(ptr %6)
  %8 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %9 = call ptr @candy_builtin_text_concatenate(ptr %8, ptr %7)
  %10 = load ptr, ptr @"text_`.", align 8
  %11 = call ptr @candy_builtin_text_concatenate(ptr %9, ptr %10)
  %12 = alloca ptr, i64 3, align 8
  %13 = load ptr, ptr @tag_NoMatch, align 8
  %14 = getelementptr ptr, ptr %12, i64 0
  store ptr %13, ptr %14, align 8
  %15 = getelementptr ptr, ptr %12, i64 1
  store ptr %11, ptr %15, align 8
  %16 = getelementptr ptr, ptr %12, i64 2
  store ptr null, ptr %16, align 8
  %17 = call ptr @make_candy_list(ptr %12)
  store ptr %17, ptr @17, align 8
  ret ptr @17
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_else.56(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected Greater, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @18, align 8
  ret ptr @18
}

define ptr @Builtins__isLessThanOrEqualTo_19_case-1_didNotMatch(ptr %0) {
Builtins__isLessThanOrEqualTo_19_case-1_didNotMatch:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_No case matched the given expression.", align 8
  call void @candy_panic(ptr %5)
  unreachable
}

define ptr @Builtins__equals(ptr %0, ptr %1) {
Builtins__equals:
  %2 = call ptr @candy_builtin_equals(ptr %0, ptr %1)
  ret ptr %2
}

define ptr @Builtins__functionRun(ptr %0) {
Builtins__functionRun:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Function, align 8
  %3 = call ptr @candy_builtin_equals(ptr %1, ptr %2)
  %4 = load ptr, ptr @"text_`function | typeIs Function` was not satisfied", align 8
  %5 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %4, ptr null)
  %6 = call ptr @candy_builtin_get_argument_count(ptr %0)
  %7 = load ptr, ptr @num_0, align 8
  %8 = call ptr @candy_builtin_equals(ptr %6, ptr %7)
  %9 = load ptr, ptr @"text_`function | \E2\9C\A8.getArgumentCount | equals 0` was not satisfied", align 8
  %10 = call ptr @"anonymous_$generated__needs"(ptr %8, ptr %9, ptr null)
  %11 = call ptr @get_candy_function_pointer(ptr %0)
  %12 = call ptr @get_candy_function_environment(ptr %0)
  %13 = call ptr (...) %11(ptr %12)
  ret ptr %13
}

define ptr @Builtins__getArgumentCount(ptr %0) {
Builtins__getArgumentCount:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Function, align 8
  %3 = call ptr @candy_builtin_equals(ptr %1, ptr %2)
  %4 = load ptr, ptr @"text_`function | typeIs Function` was not satisfied", align 8
  %5 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %4, ptr null)
  %6 = call ptr @candy_builtin_get_argument_count(ptr %0)
  ret ptr %6
}

define ptr @Builtins__ifElse(ptr %0, ptr %1, ptr %2) {
Builtins__ifElse:
  %3 = call ptr @candy_builtin_type_of(ptr %0)
  %4 = load ptr, ptr @tag_Tag, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %0, ptr %7, align 8
  %8 = call ptr @make_candy_function(ptr @Builtins__ifElse_1_equals_then, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %8, ptr @fun_Builtins__ifElse_1_equals_then, align 8
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %10 = getelementptr inbounds { ptr }, ptr %9, i32 0, i32 0
  store ptr %3, ptr %10, align 8
  %11 = call ptr @make_candy_function(ptr @Builtins__ifElse_1_equals_else.62, ptr %9, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %11, ptr @fun_Builtins__ifElse_1_equals_else.63, align 8
  %12 = load ptr, ptr @fun_Builtins__ifElse_1_equals_then, align 8
  %13 = load ptr, ptr @fun_Builtins__ifElse_1_equals_else.63, align 8
  %14 = call ptr @candy_builtin_if_else(ptr %5, ptr %12, ptr %13)
  %15 = load ptr, ptr @num_0, align 8
  %16 = call ptr @candy_builtin_list_get(ptr %14, ptr %15)
  %17 = load ptr, ptr @tag_Match, align 8
  %18 = call ptr @candy_builtin_equals(ptr %16, ptr %17)
  %19 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %20 = getelementptr inbounds { ptr }, ptr %19, i32 0, i32 0
  store ptr %14, ptr %20, align 8
  %21 = call ptr @make_candy_function(ptr @Builtins__ifElse_1_isMatch_then, ptr %19, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %21, ptr @fun_Builtins__ifElse_1_isMatch_then, align 8
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %23 = getelementptr inbounds { ptr }, ptr %22, i32 0, i32 0
  store ptr %0, ptr %23, align 8
  %24 = call ptr @make_candy_function(ptr @Builtins__ifElse_1_isMatch_else, ptr %22, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %24, ptr @fun_Builtins__ifElse_1_isMatch_else, align 8
  %25 = load ptr, ptr @fun_Builtins__ifElse_1_isMatch_then, align 8
  %26 = load ptr, ptr @fun_Builtins__ifElse_1_isMatch_else, align 8
  %27 = call ptr @candy_builtin_if_else(ptr %18, ptr %25, ptr %26)
  %28 = load ptr, ptr @num_0, align 8
  %29 = call ptr @candy_builtin_list_get(ptr %27, ptr %28)
  %30 = load ptr, ptr @tag_Match, align 8
  %31 = call ptr @candy_builtin_equals(ptr %29, ptr %30)
  %32 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %33 = getelementptr inbounds { ptr }, ptr %32, i32 0, i32 0
  store ptr %27, ptr %33, align 8
  %34 = call ptr @make_candy_function(ptr @Builtins__ifElse_1_case-0_didNotMatch, ptr %32, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %34, ptr @fun_Builtins__ifElse_1_case-0_didNotMatch, align 8
  %35 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %36 = load ptr, ptr @fun_Builtins__ifElse_1_case-0_didNotMatch, align 8
  %37 = call ptr @candy_builtin_if_else(ptr %31, ptr %35, ptr %36)
  %38 = load ptr, ptr @"text_`conditionIsBool` was not satisfied", align 8
  %39 = call ptr @"anonymous_$generated__needs"(ptr %37, ptr %38, ptr null)
  %40 = call ptr @candy_builtin_type_of(ptr %1)
  %41 = load ptr, ptr @tag_Function, align 8
  %42 = call ptr @candy_builtin_equals(ptr %40, ptr %41)
  %43 = load ptr, ptr @"text_`then | typeIs Function` was not satisfied", align 8
  %44 = call ptr @"anonymous_$generated__needs"(ptr %42, ptr %43, ptr null)
  %45 = call ptr @candy_builtin_type_of(ptr %1)
  %46 = load ptr, ptr @tag_Function, align 8
  %47 = call ptr @candy_builtin_equals(ptr %45, ptr %46)
  %48 = load ptr, ptr @"text_`function | typeIs Function` was not satisfied", align 8
  %49 = load ptr, ptr @"Builtins::ifElse:14", align 8
  %50 = call ptr @"anonymous_$generated__needs"(ptr %47, ptr %48, ptr %49)
  %51 = call ptr @candy_builtin_get_argument_count(ptr %1)
  %52 = load ptr, ptr @num_0, align 8
  %53 = call ptr @candy_builtin_equals(ptr %51, ptr %52)
  %54 = load ptr, ptr @"text_`then | getArgumentCount | equals 0` was not satisfied", align 8
  %55 = call ptr @"anonymous_$generated__needs"(ptr %53, ptr %54, ptr null)
  %56 = call ptr @candy_builtin_type_of(ptr %2)
  %57 = load ptr, ptr @tag_Function, align 8
  %58 = call ptr @candy_builtin_equals(ptr %56, ptr %57)
  %59 = load ptr, ptr @"text_`else | typeIs Function` was not satisfied", align 8
  %60 = call ptr @"anonymous_$generated__needs"(ptr %58, ptr %59, ptr null)
  %61 = call ptr @candy_builtin_type_of(ptr %2)
  %62 = load ptr, ptr @tag_Function, align 8
  %63 = call ptr @candy_builtin_equals(ptr %61, ptr %62)
  %64 = load ptr, ptr @"text_`function | typeIs Function` was not satisfied", align 8
  %65 = load ptr, ptr @"Builtins::ifElse:28", align 8
  %66 = call ptr @"anonymous_$generated__needs"(ptr %63, ptr %64, ptr %65)
  %67 = call ptr @candy_builtin_get_argument_count(ptr %2)
  %68 = load ptr, ptr @num_0, align 8
  %69 = call ptr @candy_builtin_equals(ptr %67, ptr %68)
  %70 = load ptr, ptr @"text_`else | getArgumentCount | equals 0` was not satisfied", align 8
  %71 = call ptr @"anonymous_$generated__needs"(ptr %69, ptr %70, ptr null)
  %72 = call ptr @candy_builtin_if_else(ptr %0, ptr %1, ptr %2)
  ret ptr %72
}

define ptr @Builtins__ifElse_1_equals_then(ptr %0) {
Builtins__ifElse_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__ifElse_1_equals_then.58, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__ifElse_1_equals_then.59, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__ifElse_1_equals_else.60, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__ifElse_1_equals_else.61, align 8
  %14 = load ptr, ptr @fun_Builtins__ifElse_1_equals_then.59, align 8
  %15 = load ptr, ptr @fun_Builtins__ifElse_1_equals_else.61, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Builtins__ifElse_1_equals_then.58(ptr %0) {
Builtins__ifElse_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr, ptr }, ptr %6, i32 0, i32 0
  store ptr %3, ptr %7, align 8
  %8 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr inbounds { ptr, ptr }, ptr %6, i32 0, i32 1
  store ptr %9, ptr %10, align 8
  %11 = call ptr @make_candy_function(ptr @Builtins__ifElse_1_equals_else, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %11, ptr @fun_Builtins__ifElse_1_equals_else, align 8
  %12 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then", align 8
  %13 = load ptr, ptr @fun_Builtins__ifElse_1_equals_else, align 8
  %14 = call ptr @candy_builtin_if_else(ptr %5, ptr %12, ptr %13)
  ret ptr %14
}

define ptr @Builtins__ifElse_1_equals_else(ptr %0) {
Builtins__ifElse_1_equals_else:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = call ptr @candy_builtin_tag_get_value(ptr %5)
  %7 = call ptr @candy_builtin_to_debug_text(ptr %6)
  %8 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %9 = call ptr @candy_builtin_text_concatenate(ptr %8, ptr %7)
  %10 = load ptr, ptr @"text_`.", align 8
  %11 = call ptr @candy_builtin_text_concatenate(ptr %9, ptr %10)
  %12 = alloca ptr, i64 3, align 8
  %13 = load ptr, ptr @tag_NoMatch, align 8
  %14 = getelementptr ptr, ptr %12, i64 0
  store ptr %13, ptr %14, align 8
  %15 = getelementptr ptr, ptr %12, i64 1
  store ptr %11, ptr %15, align 8
  %16 = getelementptr ptr, ptr %12, i64 2
  store ptr null, ptr %16, align 8
  %17 = call ptr @make_candy_list(ptr %12)
  store ptr %17, ptr @19, align 8
  ret ptr @19
}

define ptr @Builtins__ifElse_1_equals_else.60(ptr %0) {
Builtins__ifElse_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected True, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @20, align 8
  ret ptr @20
}

define ptr @Builtins__ifElse_1_equals_else.62(ptr %0) {
Builtins__ifElse_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @21, align 8
  ret ptr @21
}

define ptr @Builtins__ifElse_1_isMatch_then(ptr %0) {
Builtins__ifElse_1_isMatch_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Builtins__ifElse_1_isMatch_else(ptr %0) {
Builtins__ifElse_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Tag, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__ifElse_1_equals_then.64, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__ifElse_1_equals_then.65, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__ifElse_1_equals_else.72, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__ifElse_1_equals_else.73, align 8
  %14 = load ptr, ptr @fun_Builtins__ifElse_1_equals_then.65, align 8
  %15 = load ptr, ptr @fun_Builtins__ifElse_1_equals_else.73, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Builtins__ifElse_1_equals_then.64(ptr %0) {
Builtins__ifElse_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__ifElse_1_equals_then.66, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__ifElse_1_equals_then.67, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__ifElse_1_equals_else.70, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__ifElse_1_equals_else.71, align 8
  %14 = load ptr, ptr @fun_Builtins__ifElse_1_equals_then.67, align 8
  %15 = load ptr, ptr @fun_Builtins__ifElse_1_equals_else.71, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Builtins__ifElse_1_equals_then.66(ptr %0) {
Builtins__ifElse_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr, ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = getelementptr inbounds { ptr, ptr }, ptr %6, i32 0, i32 1
  store ptr %3, ptr %10, align 8
  %11 = call ptr @make_candy_function(ptr @Builtins__ifElse_1_equals_else.68, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %11, ptr @fun_Builtins__ifElse_1_equals_else.69, align 8
  %12 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then", align 8
  %13 = load ptr, ptr @fun_Builtins__ifElse_1_equals_else.69, align 8
  %14 = call ptr @candy_builtin_if_else(ptr %5, ptr %12, ptr %13)
  ret ptr %14
}

define ptr @Builtins__ifElse_1_equals_else.68(ptr %0) {
Builtins__ifElse_1_equals_else:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = call ptr @candy_builtin_tag_get_value(ptr %5)
  %7 = call ptr @candy_builtin_to_debug_text(ptr %6)
  %8 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %9 = call ptr @candy_builtin_text_concatenate(ptr %8, ptr %7)
  %10 = load ptr, ptr @"text_`.", align 8
  %11 = call ptr @candy_builtin_text_concatenate(ptr %9, ptr %10)
  %12 = alloca ptr, i64 3, align 8
  %13 = load ptr, ptr @tag_NoMatch, align 8
  %14 = getelementptr ptr, ptr %12, i64 0
  store ptr %13, ptr %14, align 8
  %15 = getelementptr ptr, ptr %12, i64 1
  store ptr %11, ptr %15, align 8
  %16 = getelementptr ptr, ptr %12, i64 2
  store ptr null, ptr %16, align 8
  %17 = call ptr @make_candy_list(ptr %12)
  store ptr %17, ptr @22, align 8
  ret ptr @22
}

define ptr @Builtins__ifElse_1_equals_else.70(ptr %0) {
Builtins__ifElse_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected False, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @23, align 8
  ret ptr @23
}

define ptr @Builtins__ifElse_1_equals_else.72(ptr %0) {
Builtins__ifElse_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @24, align 8
  ret ptr @24
}

define ptr @Builtins__ifElse_1_case-0_didNotMatch(ptr %0) {
Builtins__ifElse_1_case-0_didNotMatch:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = load ptr, ptr @tag_False, align 8
  ret ptr %5
}

define ptr @Builtins__intAdd(ptr %0, ptr %1) {
Builtins__intAdd:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Int, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Int, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`b | typeIs Int` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = call ptr @candy_builtin_int_add(ptr %0, ptr %1)
  ret ptr %12
}

define ptr @Builtins__intBitLength(ptr %0) {
Builtins__intBitLength:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Int, align 8
  %3 = call ptr @candy_builtin_equals(ptr %1, ptr %2)
  %4 = load ptr, ptr @"text_`value | typeIs Int` was not satisfied", align 8
  %5 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %4, ptr null)
  %6 = call ptr @candy_builtin_int_bit_length(ptr %0)
  ret ptr %6
}

define ptr @Builtins__intBitwiseAnd(ptr %0, ptr %1) {
Builtins__intBitwiseAnd:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Int, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Int, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`b | typeIs Int` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = call ptr @candy_builtin_int_bitwise_and(ptr %0, ptr %1)
  ret ptr %12
}

define ptr @Builtins__intBitwiseOr(ptr %0, ptr %1) {
Builtins__intBitwiseOr:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Int, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Int, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`b | typeIs Int` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = call ptr @candy_builtin_int_bitwise_or(ptr %0, ptr %1)
  ret ptr %12
}

define ptr @Builtins__intBitwiseXor(ptr %0, ptr %1) {
Builtins__intBitwiseXor:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Int, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Int, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`b | typeIs Int` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = call ptr @candy_builtin_int_bitwise_xor(ptr %0, ptr %1)
  ret ptr %12
}

define ptr @Builtins__intCompareTo(ptr %0, ptr %1) {
Builtins__intCompareTo:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Int, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Int, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`b | typeIs Int` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = call ptr @candy_builtin_int_compare_to(ptr %0, ptr %1)
  ret ptr %12
}

define ptr @Builtins__intDivideTruncating(ptr %0, ptr %1) {
Builtins__intDivideTruncating:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Int, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`dividend | typeIs Int` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Int, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`divisor | typeIs Int` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = load ptr, ptr @num_0, align 8
  %13 = call ptr @candy_builtin_equals(ptr %1, ptr %12)
  %14 = call ptr @Builtins__not(ptr %13)
  %15 = load ptr, ptr @"text_You can't divide by zero.", align 8
  %16 = call ptr @"anonymous_$generated__needs"(ptr %14, ptr %15, ptr null)
  %17 = call ptr @candy_builtin_int_divide_truncating(ptr %0, ptr %1)
  ret ptr %17
}

define ptr @Builtins__intModulo(ptr %0, ptr %1) {
Builtins__intModulo:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Int, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`dividend | typeIs Int` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Int, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`divisor | typeIs Int` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = load ptr, ptr @num_0, align 8
  %13 = call ptr @candy_builtin_equals(ptr %1, ptr %12)
  %14 = call ptr @Builtins__not(ptr %13)
  %15 = load ptr, ptr @"text_You can't divide by zero.", align 8
  %16 = call ptr @"anonymous_$generated__needs"(ptr %14, ptr %15, ptr null)
  %17 = call ptr @candy_builtin_int_modulo(ptr %0, ptr %1)
  ret ptr %17
}

define ptr @Builtins__intMultiply(ptr %0, ptr %1) {
Builtins__intMultiply:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Int, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`factorA | typeIs Int` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Int, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`factorB | typeIs Int` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = call ptr @candy_builtin_int_multiply(ptr %0, ptr %1)
  ret ptr %12
}

define ptr @Builtins__intParse(ptr %0) {
Builtins__intParse:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Text, align 8
  %3 = call ptr @candy_builtin_equals(ptr %1, ptr %2)
  %4 = load ptr, ptr @"text_`text | typeIs Text` was not satisfied", align 8
  %5 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %4, ptr null)
  %6 = call ptr @candy_builtin_int_parse(ptr %0)
  ret ptr %6
}

define ptr @Builtins__intRemainder(ptr %0, ptr %1) {
Builtins__intRemainder:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Int, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`dividend | typeIs Int` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Int, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`divisor | typeIs Int` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = load ptr, ptr @num_0, align 8
  %13 = call ptr @candy_builtin_equals(ptr %1, ptr %12)
  %14 = call ptr @Builtins__not(ptr %13)
  %15 = load ptr, ptr @"text_You can't divide by zero.", align 8
  %16 = call ptr @"anonymous_$generated__needs"(ptr %14, ptr %15, ptr null)
  %17 = call ptr @candy_builtin_int_remainder(ptr %0, ptr %1)
  ret ptr %17
}

define ptr @Builtins__intShiftLeft(ptr %0, ptr %1) {
Builtins__intShiftLeft:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Int, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`value | typeIs Int` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Int, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`amount | typeIs Int` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = call ptr @Builtins__isNonNegative(ptr %1)
  %13 = call ptr @candy_builtin_type_of(ptr %1)
  %14 = load ptr, ptr @tag_Text, align 8
  %15 = call ptr @candy_builtin_equals(ptr %13, ptr %14)
  %16 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %17 = getelementptr inbounds { ptr }, ptr %16, i32 0, i32 0
  store ptr %1, ptr %17, align 8
  %18 = call ptr @make_candy_function(ptr @Builtins__intShiftLeft_25, ptr %16, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %18, ptr @fun_Builtins__intShiftLeft_25, align 8
  %19 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %20 = getelementptr inbounds { ptr }, ptr %19, i32 0, i32 0
  store ptr %1, ptr %20, align 8
  %21 = call ptr @make_candy_function(ptr @Builtins__intShiftLeft_26, ptr %19, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %21, ptr @fun_Builtins__intShiftLeft_26, align 8
  %22 = load ptr, ptr @fun_Builtins__intShiftLeft_25, align 8
  %23 = load ptr, ptr @fun_Builtins__intShiftLeft_26, align 8
  %24 = call ptr @candy_builtin_if_else(ptr %15, ptr %22, ptr %23)
  %25 = load ptr, ptr @"text_The shift `amount` is negative: ", align 8
  %26 = call ptr @candy_builtin_text_concatenate(ptr %25, ptr %24)
  %27 = load ptr, ptr @"text_. You might want to call `shiftRight` instead.", align 8
  %28 = call ptr @candy_builtin_text_concatenate(ptr %26, ptr %27)
  %29 = call ptr @"anonymous_$generated__needs"(ptr %12, ptr %28, ptr null)
  %30 = call ptr @candy_builtin_type_of(ptr %1)
  %31 = load ptr, ptr @tag_Int, align 8
  %32 = call ptr @candy_builtin_equals(ptr %30, ptr %31)
  %33 = load ptr, ptr @"text_`value | typeIs Int` was not satisfied", align 8
  %34 = load ptr, ptr @"Builtins::intShiftLeft:34", align 8
  %35 = call ptr @"anonymous_$generated__needs"(ptr %32, ptr %33, ptr %34)
  %36 = call ptr @Builtins__isNonNegative(ptr %1)
  %37 = load ptr, ptr @"text_`value | isNonNegative` was not satisfied", align 8
  %38 = load ptr, ptr @"Builtins::intShiftLeft:34", align 8
  %39 = call ptr @"anonymous_$generated__needs"(ptr %36, ptr %37, ptr %38)
  %40 = load ptr, ptr @num_340282366920938463463374607431768211455, align 8
  %41 = call ptr @Builtins__isLessThanOrEqualTo(ptr %1, ptr %40)
  %42 = load ptr, ptr @"text_Shifts by that much are not yet supported.", align 8
  %43 = call ptr @"anonymous_$generated__needs"(ptr %41, ptr %42, ptr null)
  %44 = call ptr @candy_builtin_int_shift_left(ptr %0, ptr %1)
  ret ptr %44
}

define ptr @Builtins__intShiftLeft_25(ptr %0) {
Builtins__intShiftLeft_25:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Builtins__intShiftLeft_26(ptr %0) {
Builtins__intShiftLeft_26:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  ret ptr %3
}

define ptr @Builtins__intShiftRight(ptr %0, ptr %1) {
Builtins__intShiftRight:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Int, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`value | typeIs Int` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Int, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`amount | typeIs Int` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = call ptr @Builtins__isNonNegative(ptr %1)
  %13 = call ptr @candy_builtin_type_of(ptr %1)
  %14 = load ptr, ptr @tag_Text, align 8
  %15 = call ptr @candy_builtin_equals(ptr %13, ptr %14)
  %16 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %17 = getelementptr inbounds { ptr }, ptr %16, i32 0, i32 0
  store ptr %1, ptr %17, align 8
  %18 = call ptr @make_candy_function(ptr @Builtins__intShiftRight_25, ptr %16, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %18, ptr @fun_Builtins__intShiftRight_25, align 8
  %19 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %20 = getelementptr inbounds { ptr }, ptr %19, i32 0, i32 0
  store ptr %1, ptr %20, align 8
  %21 = call ptr @make_candy_function(ptr @Builtins__intShiftRight_26, ptr %19, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %21, ptr @fun_Builtins__intShiftRight_26, align 8
  %22 = load ptr, ptr @fun_Builtins__intShiftRight_25, align 8
  %23 = load ptr, ptr @fun_Builtins__intShiftRight_26, align 8
  %24 = call ptr @candy_builtin_if_else(ptr %15, ptr %22, ptr %23)
  %25 = load ptr, ptr @"text_The shift `amount` is negative: ", align 8
  %26 = call ptr @candy_builtin_text_concatenate(ptr %25, ptr %24)
  %27 = load ptr, ptr @"text_. You might want to call `shiftLeft` instead.", align 8
  %28 = call ptr @candy_builtin_text_concatenate(ptr %26, ptr %27)
  %29 = call ptr @"anonymous_$generated__needs"(ptr %12, ptr %28, ptr null)
  %30 = call ptr @candy_builtin_type_of(ptr %1)
  %31 = load ptr, ptr @tag_Int, align 8
  %32 = call ptr @candy_builtin_equals(ptr %30, ptr %31)
  %33 = load ptr, ptr @"text_`value | typeIs Int` was not satisfied", align 8
  %34 = load ptr, ptr @"Builtins::intShiftRight:34", align 8
  %35 = call ptr @"anonymous_$generated__needs"(ptr %32, ptr %33, ptr %34)
  %36 = call ptr @Builtins__isNonNegative(ptr %1)
  %37 = load ptr, ptr @"text_`value | isNonNegative` was not satisfied", align 8
  %38 = load ptr, ptr @"Builtins::intShiftRight:34", align 8
  %39 = call ptr @"anonymous_$generated__needs"(ptr %36, ptr %37, ptr %38)
  %40 = load ptr, ptr @num_340282366920938463463374607431768211455, align 8
  %41 = call ptr @Builtins__isLessThanOrEqualTo(ptr %1, ptr %40)
  %42 = load ptr, ptr @"text_Shifts by that much are not yet supported.", align 8
  %43 = call ptr @"anonymous_$generated__needs"(ptr %41, ptr %42, ptr null)
  %44 = call ptr @candy_builtin_int_shift_right(ptr %0, ptr %1)
  ret ptr %44
}

define ptr @Builtins__intShiftRight_25(ptr %0) {
Builtins__intShiftRight_25:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Builtins__intShiftRight_26(ptr %0) {
Builtins__intShiftRight_26:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  ret ptr %3
}

define ptr @Builtins__intSubtract(ptr %0, ptr %1) {
Builtins__intSubtract:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Int, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`minuend | typeIs Int` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Int, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`subtrahend | typeIs Int` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = call ptr @candy_builtin_int_subtract(ptr %0, ptr %1)
  ret ptr %12
}

define ptr @Builtins__listFilled(ptr %0, ptr %1) {
Builtins__listFilled:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Int, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`length | typeIs Int` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @Builtins__isNonNegative(ptr %0)
  %8 = load ptr, ptr @"text_`length | isNonNegative` was not satisfied", align 8
  %9 = call ptr @"anonymous_$generated__needs"(ptr %7, ptr %8, ptr null)
  %10 = call ptr @candy_builtin_list_filled(ptr %0, ptr %1)
  ret ptr %10
}

define ptr @Builtins__listGet(ptr %0, ptr %1) {
Builtins__listGet:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_List, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`list | typeIs List` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Int, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`index | typeIs Int` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = call ptr @Builtins__isNonNegative(ptr %1)
  %13 = load ptr, ptr @"text_`index | isNonNegative` was not satisfied", align 8
  %14 = call ptr @"anonymous_$generated__needs"(ptr %12, ptr %13, ptr null)
  %15 = call ptr @candy_builtin_list_length(ptr %0)
  %16 = call ptr @candy_builtin_type_of(ptr %1)
  %17 = load ptr, ptr @tag_Int, align 8
  %18 = call ptr @candy_builtin_equals(ptr %16, ptr %17)
  %19 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %20 = load ptr, ptr @"Builtins::listGet:25", align 8
  %21 = call ptr @"anonymous_$generated__needs"(ptr %18, ptr %19, ptr %20)
  %22 = call ptr @candy_builtin_int_compare_to(ptr %1, ptr %15)
  %23 = load ptr, ptr @tag_Less, align 8
  %24 = call ptr @candy_builtin_equals(ptr %22, ptr %23)
  %25 = load ptr, ptr @"text_`index | intCompareTo (list | \E2\9C\A8.listLength) | equals Less` was not satisfied", align 8
  %26 = call ptr @"anonymous_$generated__needs"(ptr %24, ptr %25, ptr null)
  %27 = call ptr @candy_builtin_list_get(ptr %0, ptr %1)
  ret ptr %27
}

define ptr @Builtins__listInsert(ptr %0, ptr %1, ptr %2) {
Builtins__listInsert:
  %3 = call ptr @candy_builtin_type_of(ptr %0)
  %4 = load ptr, ptr @tag_List, align 8
  %5 = call ptr @candy_builtin_equals(ptr %3, ptr %4)
  %6 = load ptr, ptr @"text_`list | typeIs List` was not satisfied", align 8
  %7 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %6, ptr null)
  %8 = call ptr @candy_builtin_type_of(ptr %1)
  %9 = load ptr, ptr @tag_Int, align 8
  %10 = call ptr @candy_builtin_equals(ptr %8, ptr %9)
  %11 = load ptr, ptr @"text_`index | typeIs Int` was not satisfied", align 8
  %12 = call ptr @"anonymous_$generated__needs"(ptr %10, ptr %11, ptr null)
  %13 = call ptr @Builtins__isNonNegative(ptr %1)
  %14 = load ptr, ptr @"text_`index | isNonNegative` was not satisfied", align 8
  %15 = call ptr @"anonymous_$generated__needs"(ptr %13, ptr %14, ptr null)
  %16 = call ptr @candy_builtin_list_length(ptr %0)
  %17 = call ptr @Builtins__isLessThanOrEqualTo(ptr %1, ptr %16)
  %18 = load ptr, ptr @"text_`index | isLessThanOrEqualTo (list | \E2\9C\A8.listLength)` was not satisfied", align 8
  %19 = call ptr @"anonymous_$generated__needs"(ptr %17, ptr %18, ptr null)
  %20 = call ptr @candy_builtin_list_insert(ptr %0, ptr %1, ptr %2)
  ret ptr %20
}

define ptr @Builtins__listLength(ptr %0) {
Builtins__listLength:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_List, align 8
  %3 = call ptr @candy_builtin_equals(ptr %1, ptr %2)
  %4 = load ptr, ptr @"text_`list | typeIs List` was not satisfied", align 8
  %5 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %4, ptr null)
  %6 = call ptr @candy_builtin_list_length(ptr %0)
  ret ptr %6
}

define ptr @Builtins__listRemoveAt(ptr %0, ptr %1) {
Builtins__listRemoveAt:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_List, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`list | typeIs List` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Int, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`index | typeIs Int` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = call ptr @Builtins__isNonNegative(ptr %1)
  %13 = load ptr, ptr @"text_`index | isNonNegative` was not satisfied", align 8
  %14 = call ptr @"anonymous_$generated__needs"(ptr %12, ptr %13, ptr null)
  %15 = call ptr @candy_builtin_type_of(ptr %0)
  %16 = load ptr, ptr @tag_List, align 8
  %17 = call ptr @candy_builtin_equals(ptr %15, ptr %16)
  %18 = load ptr, ptr @"text_`list | typeIs List` was not satisfied", align 8
  %19 = load ptr, ptr @"Builtins::listRemoveAt:21", align 8
  %20 = call ptr @"anonymous_$generated__needs"(ptr %17, ptr %18, ptr %19)
  %21 = call ptr @candy_builtin_list_length(ptr %0)
  %22 = call ptr @candy_builtin_type_of(ptr %1)
  %23 = load ptr, ptr @tag_Int, align 8
  %24 = call ptr @candy_builtin_equals(ptr %22, ptr %23)
  %25 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %26 = load ptr, ptr @"Builtins::listRemoveAt:22", align 8
  %27 = call ptr @"anonymous_$generated__needs"(ptr %24, ptr %25, ptr %26)
  %28 = call ptr @candy_builtin_int_compare_to(ptr %1, ptr %21)
  %29 = load ptr, ptr @tag_Less, align 8
  %30 = call ptr @candy_builtin_equals(ptr %28, ptr %29)
  %31 = load ptr, ptr @"text_`index | intCompareTo (list | listLength) | equals Less` was not satisfied", align 8
  %32 = call ptr @"anonymous_$generated__needs"(ptr %30, ptr %31, ptr null)
  %33 = call ptr @candy_builtin_list_remove_at(ptr %0, ptr %1)
  ret ptr %33
}

define ptr @Builtins__listReplace(ptr %0, ptr %1, ptr %2) {
Builtins__listReplace:
  %3 = call ptr @candy_builtin_type_of(ptr %0)
  %4 = load ptr, ptr @tag_List, align 8
  %5 = call ptr @candy_builtin_equals(ptr %3, ptr %4)
  %6 = load ptr, ptr @"text_`list | typeIs List` was not satisfied", align 8
  %7 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %6, ptr null)
  %8 = call ptr @candy_builtin_type_of(ptr %1)
  %9 = load ptr, ptr @tag_Int, align 8
  %10 = call ptr @candy_builtin_equals(ptr %8, ptr %9)
  %11 = load ptr, ptr @"text_`index | typeIs Int` was not satisfied", align 8
  %12 = call ptr @"anonymous_$generated__needs"(ptr %10, ptr %11, ptr null)
  %13 = call ptr @Builtins__isNonNegative(ptr %1)
  %14 = load ptr, ptr @"text_`index | isNonNegative` was not satisfied", align 8
  %15 = call ptr @"anonymous_$generated__needs"(ptr %13, ptr %14, ptr null)
  %16 = call ptr @candy_builtin_type_of(ptr %0)
  %17 = load ptr, ptr @tag_List, align 8
  %18 = call ptr @candy_builtin_equals(ptr %16, ptr %17)
  %19 = load ptr, ptr @"text_`list | typeIs List` was not satisfied", align 8
  %20 = load ptr, ptr @"Builtins::listReplace:21", align 8
  %21 = call ptr @"anonymous_$generated__needs"(ptr %18, ptr %19, ptr %20)
  %22 = call ptr @candy_builtin_list_length(ptr %0)
  %23 = call ptr @candy_builtin_type_of(ptr %1)
  %24 = load ptr, ptr @tag_Int, align 8
  %25 = call ptr @candy_builtin_equals(ptr %23, ptr %24)
  %26 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %27 = load ptr, ptr @"Builtins::listReplace:22", align 8
  %28 = call ptr @"anonymous_$generated__needs"(ptr %25, ptr %26, ptr %27)
  %29 = call ptr @candy_builtin_int_compare_to(ptr %1, ptr %22)
  %30 = load ptr, ptr @tag_Less, align 8
  %31 = call ptr @candy_builtin_equals(ptr %29, ptr %30)
  %32 = load ptr, ptr @"text_`index | intCompareTo (list | listLength) | equals Less` was not satisfied", align 8
  %33 = call ptr @"anonymous_$generated__needs"(ptr %31, ptr %32, ptr null)
  %34 = call ptr @candy_builtin_list_replace(ptr %0, ptr %1, ptr %2)
  ret ptr %34
}

define ptr @Builtins__print(ptr %0) {
Builtins__print:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Text, align 8
  %3 = call ptr @candy_builtin_equals(ptr %1, ptr %2)
  %4 = load ptr, ptr @"text_`message | typeIs Text` was not satisfied", align 8
  %5 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %4, ptr null)
  %6 = call ptr @candy_builtin_print(ptr %0)
  ret ptr %6
}

define ptr @Builtins__structGet(ptr %0, ptr %1) {
Builtins__structGet:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Struct, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_struct_has_key(ptr %0, ptr %1)
  %8 = call ptr @candy_builtin_type_of(ptr %0)
  %9 = load ptr, ptr @tag_Text, align 8
  %10 = call ptr @candy_builtin_equals(ptr %8, ptr %9)
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %0, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__structGet_23, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__structGet_23, align 8
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %15 = getelementptr inbounds { ptr }, ptr %14, i32 0, i32 0
  store ptr %0, ptr %15, align 8
  %16 = call ptr @make_candy_function(ptr @Builtins__structGet_24, ptr %14, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %16, ptr @fun_Builtins__structGet_24, align 8
  %17 = load ptr, ptr @fun_Builtins__structGet_23, align 8
  %18 = load ptr, ptr @fun_Builtins__structGet_24, align 8
  %19 = call ptr @candy_builtin_if_else(ptr %10, ptr %17, ptr %18)
  %20 = call ptr @candy_builtin_type_of(ptr %1)
  %21 = load ptr, ptr @tag_Text, align 8
  %22 = call ptr @candy_builtin_equals(ptr %20, ptr %21)
  %23 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %24 = getelementptr inbounds { ptr }, ptr %23, i32 0, i32 0
  store ptr %1, ptr %24, align 8
  %25 = call ptr @make_candy_function(ptr @Builtins__structGet_30, ptr %23, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %25, ptr @fun_Builtins__structGet_30, align 8
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %27 = getelementptr inbounds { ptr }, ptr %26, i32 0, i32 0
  store ptr %1, ptr %27, align 8
  %28 = call ptr @make_candy_function(ptr @Builtins__structGet_31, ptr %26, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %28, ptr @fun_Builtins__structGet_31, align 8
  %29 = load ptr, ptr @fun_Builtins__structGet_30, align 8
  %30 = load ptr, ptr @fun_Builtins__structGet_31, align 8
  %31 = call ptr @candy_builtin_if_else(ptr %22, ptr %29, ptr %30)
  %32 = load ptr, ptr @"text_Struct `", align 8
  %33 = call ptr @candy_builtin_text_concatenate(ptr %32, ptr %19)
  %34 = load ptr, ptr @"text_` is missing the key `", align 8
  %35 = call ptr @candy_builtin_text_concatenate(ptr %33, ptr %34)
  %36 = call ptr @candy_builtin_text_concatenate(ptr %35, ptr %31)
  %37 = load ptr, ptr @"text_`.", align 8
  %38 = call ptr @candy_builtin_text_concatenate(ptr %36, ptr %37)
  %39 = call ptr @"anonymous_$generated__needs"(ptr %7, ptr %38, ptr null)
  %40 = call ptr @candy_builtin_struct_get.1(ptr %0, ptr %1)
  ret ptr %40
}

define ptr @Builtins__structGet_23(ptr %0) {
Builtins__structGet_23:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Builtins__structGet_24(ptr %0) {
Builtins__structGet_24:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  ret ptr %3
}

define ptr @Builtins__structGet_30(ptr %0) {
Builtins__structGet_30:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Builtins__structGet_31(ptr %0) {
Builtins__structGet_31:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  ret ptr %3
}

define ptr @Builtins__structGetKeys(ptr %0) {
Builtins__structGetKeys:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Struct, align 8
  %3 = call ptr @candy_builtin_equals(ptr %1, ptr %2)
  %4 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %5 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %4, ptr null)
  %6 = call ptr @candy_builtin_struct_get_keys(ptr %0)
  ret ptr %6
}

define ptr @Builtins__structHasKey(ptr %0, ptr %1) {
Builtins__structHasKey:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Struct, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_struct_has_key(ptr %0, ptr %1)
  ret ptr %7
}

define ptr @Builtins__tagGetValue(ptr %0) {
Builtins__tagGetValue:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Tag, align 8
  %3 = call ptr @candy_builtin_equals(ptr %1, ptr %2)
  %4 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %5 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %4, ptr null)
  %6 = call ptr @candy_builtin_tag_has_value(ptr %0)
  %7 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %8 = call ptr @"anonymous_$generated__needs"(ptr %6, ptr %7, ptr null)
  %9 = call ptr @candy_builtin_tag_get_value(ptr %0)
  ret ptr %9
}

define ptr @Builtins__tagHasValue(ptr %0) {
Builtins__tagHasValue:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Tag, align 8
  %3 = call ptr @candy_builtin_equals(ptr %1, ptr %2)
  %4 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %5 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %4, ptr null)
  %6 = call ptr @candy_builtin_tag_has_value(ptr %0)
  ret ptr %6
}

define ptr @Builtins__tagWithoutValue(ptr %0) {
Builtins__tagWithoutValue:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Tag, align 8
  %3 = call ptr @candy_builtin_equals(ptr %1, ptr %2)
  %4 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %5 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %4, ptr null)
  %6 = call ptr @candy_builtin_tag_without_value(ptr %0)
  ret ptr %6
}

define ptr @Builtins__textCharacters(ptr %0) {
Builtins__textCharacters:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Text, align 8
  %3 = call ptr @candy_builtin_equals(ptr %1, ptr %2)
  %4 = load ptr, ptr @"text_`text | typeIs Text` was not satisfied", align 8
  %5 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %4, ptr null)
  %6 = call ptr @candy_builtin_text_characters(ptr %0)
  ret ptr %6
}

define ptr @Builtins__textConcatenate(ptr %0, ptr %1) {
Builtins__textConcatenate:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Text, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`a | typeIs Text` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Text, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`b | typeIs Text` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = call ptr @candy_builtin_text_concatenate(ptr %0, ptr %1)
  ret ptr %12
}

define ptr @Builtins__textContains(ptr %0, ptr %1) {
Builtins__textContains:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Text, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`text | typeIs Text` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Text, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`pattern | typeIs Text` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = call ptr @candy_builtin_text_contains(ptr %0, ptr %1)
  ret ptr %12
}

define ptr @Builtins__textEndsWith(ptr %0, ptr %1) {
Builtins__textEndsWith:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Text, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`text | typeIs Text` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Text, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`suffix | typeIs Text` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = call ptr @candy_builtin_text_ends_with(ptr %0, ptr %1)
  ret ptr %12
}

define ptr @Builtins__textFromUtf8(ptr %0) {
Builtins__textFromUtf8:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_List, align 8
  %3 = call ptr @candy_builtin_equals(ptr %1, ptr %2)
  %4 = load ptr, ptr @"text_`bytes | typeIs List` was not satisfied", align 8
  %5 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %4, ptr null)
  %6 = call ptr @candy_builtin_text_from_utf8(ptr %0)
  ret ptr %6
}

define ptr @Builtins__textGetRange(ptr %0, ptr %1, ptr %2) {
Builtins__textGetRange:
  %3 = call ptr @candy_builtin_type_of(ptr %0)
  %4 = load ptr, ptr @tag_Text, align 8
  %5 = call ptr @candy_builtin_equals(ptr %3, ptr %4)
  %6 = load ptr, ptr @"text_`text | typeIs Text` was not satisfied", align 8
  %7 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %6, ptr null)
  %8 = call ptr @candy_builtin_type_of(ptr %1)
  %9 = load ptr, ptr @tag_Int, align 8
  %10 = call ptr @candy_builtin_equals(ptr %8, ptr %9)
  %11 = load ptr, ptr @"text_`startInclusive | typeIs Int` was not satisfied", align 8
  %12 = call ptr @"anonymous_$generated__needs"(ptr %10, ptr %11, ptr null)
  %13 = call ptr @Builtins__isNonNegative(ptr %1)
  %14 = load ptr, ptr @"text_`startInclusive | isNonNegative` was not satisfied", align 8
  %15 = call ptr @"anonymous_$generated__needs"(ptr %13, ptr %14, ptr null)
  %16 = call ptr @candy_builtin_text_length(ptr %0)
  %17 = call ptr @Builtins__isLessThanOrEqualTo(ptr %1, ptr %16)
  %18 = load ptr, ptr @"text_`startInclusive | isLessThanOrEqualTo (text | \E2\9C\A8.textLength)` was not satisfied", align 8
  %19 = call ptr @"anonymous_$generated__needs"(ptr %17, ptr %18, ptr null)
  %20 = call ptr @candy_builtin_type_of(ptr %2)
  %21 = load ptr, ptr @tag_Int, align 8
  %22 = call ptr @candy_builtin_equals(ptr %20, ptr %21)
  %23 = load ptr, ptr @"text_`endExclusive | typeIs Int` was not satisfied", align 8
  %24 = call ptr @"anonymous_$generated__needs"(ptr %22, ptr %23, ptr null)
  %25 = call ptr @Builtins__isNonNegative(ptr %2)
  %26 = load ptr, ptr @"text_`endExclusive | isNonNegative` was not satisfied", align 8
  %27 = call ptr @"anonymous_$generated__needs"(ptr %25, ptr %26, ptr null)
  %28 = call ptr @candy_builtin_text_length(ptr %0)
  %29 = call ptr @Builtins__isLessThanOrEqualTo(ptr %2, ptr %28)
  %30 = load ptr, ptr @"text_`endExclusive | isLessThanOrEqualTo (text | \E2\9C\A8.textLength)` was not satisfied", align 8
  %31 = call ptr @"anonymous_$generated__needs"(ptr %29, ptr %30, ptr null)
  %32 = call ptr @Builtins__isLessThanOrEqualTo(ptr %1, ptr %2)
  %33 = load ptr, ptr @"text_`startInclusive | isLessThanOrEqualTo endExclusive` was not satisfied", align 8
  %34 = call ptr @"anonymous_$generated__needs"(ptr %32, ptr %33, ptr null)
  %35 = call ptr @candy_builtin_text_get_range(ptr %0, ptr %1, ptr %2)
  ret ptr %35
}

define ptr @Builtins__textIsEmpty(ptr %0) {
Builtins__textIsEmpty:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Text, align 8
  %3 = call ptr @candy_builtin_equals(ptr %1, ptr %2)
  %4 = load ptr, ptr @"text_`text | typeIs Text` was not satisfied", align 8
  %5 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %4, ptr null)
  %6 = call ptr @candy_builtin_text_is_empty(ptr %0)
  ret ptr %6
}

define ptr @Builtins__textLength(ptr %0) {
Builtins__textLength:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Text, align 8
  %3 = call ptr @candy_builtin_equals(ptr %1, ptr %2)
  %4 = load ptr, ptr @"text_`text | typeIs Text` was not satisfied", align 8
  %5 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %4, ptr null)
  %6 = call ptr @candy_builtin_text_length(ptr %0)
  ret ptr %6
}

define ptr @Builtins__textStartsWith(ptr %0, ptr %1) {
Builtins__textStartsWith:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Text, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`text | typeIs Text` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Text, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`prefix | typeIs Text` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = call ptr @candy_builtin_text_starts_with(ptr %0, ptr %1)
  ret ptr %12
}

define ptr @Builtins__textTrimEnd(ptr %0) {
Builtins__textTrimEnd:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Text, align 8
  %3 = call ptr @candy_builtin_equals(ptr %1, ptr %2)
  %4 = load ptr, ptr @"text_`text | typeIs Text` was not satisfied", align 8
  %5 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %4, ptr null)
  %6 = call ptr @candy_builtin_text_trim_end(ptr %0)
  ret ptr %6
}

define ptr @Builtins__textTrimStart(ptr %0) {
Builtins__textTrimStart:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Text, align 8
  %3 = call ptr @candy_builtin_equals(ptr %1, ptr %2)
  %4 = load ptr, ptr @"text_`text | typeIs Text` was not satisfied", align 8
  %5 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %4, ptr null)
  %6 = call ptr @candy_builtin_text_trim_start(ptr %0)
  ret ptr %6
}

define ptr @Builtins__toDebugText(ptr %0) {
Builtins__toDebugText:
  %1 = call ptr @candy_builtin_to_debug_text(ptr %0)
  ret ptr %1
}

define ptr @Builtins__typeOf(ptr %0) {
Builtins__typeOf:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  ret ptr %1
}

define ptr @Examples__10(ptr %0, ptr %1) {
Examples__10:
  %2 = getelementptr inbounds { ptr }, ptr %1, i32 0, i32 0
  %3 = load ptr, ptr %2, align 8
  %4 = load ptr, ptr @tag_IntAdd, align 8
  %5 = call ptr @Builtins__structGet(ptr %3, ptr %4)
  %6 = load ptr, ptr @num_1, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @get_candy_function_pointer(ptr %5)
  %9 = call ptr @get_candy_function_environment(ptr %5)
  %10 = call ptr (...) %8(ptr %6, ptr %7, ptr %9)
  %11 = getelementptr inbounds { ptr }, ptr %1, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = load ptr, ptr @tag_ToDebugText, align 8
  %14 = call ptr @Builtins__structGet(ptr %12, ptr %13)
  %15 = call ptr @get_candy_function_pointer(ptr %14)
  %16 = call ptr @get_candy_function_environment(ptr %14)
  %17 = call ptr (...) %15(ptr %10, ptr %16)
  %18 = getelementptr inbounds { ptr }, ptr %1, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  %20 = load ptr, ptr @tag_Print, align 8
  %21 = call ptr @Builtins__structGet(ptr %19, ptr %20)
  %22 = call ptr @get_candy_function_pointer(ptr %21)
  %23 = call ptr @get_candy_function_environment(ptr %21)
  %24 = call ptr (...) %22(ptr %17, ptr %23)
  ret ptr %24
}
