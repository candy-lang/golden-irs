# MIR for module Examples:
#
# Tracing Config:
#
# • Include tracing of fuzzable functions? No
# • Include tracing of calls? Only for panic traces
# • Include tracing of evaluated expressions? No

# anonymous:$generated::needs
$49 = { $2 $3 $4 (+ responsible $1) ->
  $5 = anonymous:$generated::needs
  $6 = builtinEquals
  $7 = Nothing
  $8 = True
  $9 = False
  $10 = call $6 with $2 $8 ($5 is responsible)
  $11 = builtinIfElse
  # anonymous:$generated::needs:isConditionTrue:then
  $14 = { (responsible $12) ->
    $13 = $8
  }
  # anonymous:$generated::needs:isConditionTrue:else
  $17 = { (responsible $15) ->
    $16 = call $6 with $2 $9 ($5 is responsible)
  }
  $18 = call $11 with $10 $14 $17 ($5 is responsible)
  $19 = builtinIfElse
  # anonymous:$generated::needs:isConditionBool:then
  $22 = { (responsible $20) ->
    $21 = $7
  }
  # anonymous:$generated::needs:isConditionBool:else
  $26 = { (responsible $23) ->
    $24 = "The `condition` must be either `True` or `False`."
    $25 = panicking because $24 ($1 is at fault)
  }
  $27 = call $19 with $18 $22 $26 ($5 is responsible)
  $28 = builtinTypeOf
  $29 = call $28 with $3 ($1 is responsible)
  $30 = Text
  $31 = call $6 with $29 $30 ($1 is responsible)
  $32 = builtinIfElse
  # anonymous:$generated::needs:isReasonText:then
  $35 = { (responsible $33) ->
    $34 = $7
  }
  # anonymous:$generated::needs:isReasonText:else
  $39 = { (responsible $36) ->
    $37 = "The `reason` must be a text."
    $38 = panicking because $37 ($1 is at fault)
  }
  $40 = call $32 with $31 $35 $39 ($5 is responsible)
  $41 = builtinIfElse
  # anonymous:$generated::needs:condition:then
  $44 = { (responsible $42) ->
    $43 = $7
  }
  # anonymous:$generated::needs:condition:else
  $47 = { (responsible $45) ->
    $46 = panicking because $3 ($4 is at fault)
  }
  $48 = call $41 with $2 $44 $47 ($5 is responsible)
}
$50 = Examples::
# Examples::use
$54 = { $52 (+ responsible $51) ->
  $53 = use $52 (relative to Examples:; $51 is responsible)
}
$55 = "Builtins"
$56 = Examples::1
$57 = Examples::1
$58 = trace: start of call of $54 with $55 ($56 is responsible, code is at $57)
$59 = call $54 with $55 ($56 is responsible)
$60 = trace: end of call
$61 = $59
$62 = $54
$63 = builtinTextConcatenate
$64 = builtinTypeOf
$65 = Text
$66 = builtinEquals
$67 = builtinIfElse
$68 = builtinToDebugText
$69 = "Builtins"
$70 = Examples::10
$71 = Examples::10
$72 = trace: start of call of $62 with $69 ($70 is responsible, code is at $71)
$73 = call $62 with $69 ($70 is responsible)
$74 = trace: end of call
$75 = $73
$76 = $75
$77 = $76
$78 = Nothing
# Examples::12
$153 = { $80 (+ responsible $79) ->
  $81 = 1
  $82 = builtinStructGet
  $83 = StructGet
  $84 = Examples::12:3
  $85 = Examples::12:3
  $86 = trace: start of call of $82 with $61 $83 ($84 is responsible, code is at $85)
  $87 = call $82 with $61 $83 ($84 is responsible)
  $88 = trace: end of call
  $89 = $87
  $90 = $77
  $91 = IntAdd
  $92 = Examples::12:6
  $93 = Examples::12:6
  $94 = trace: start of call of $89 with $90 $91 ($92 is responsible, code is at $93)
  $95 = call $89 with $90 $91 ($92 is responsible)
  $96 = trace: end of call
  $97 = $95
  $98 = 2
  $99 = Examples::12:8
  $100 = Examples::12:8
  $101 = trace: start of call of $97 with $81 $98 ($99 is responsible, code is at $100)
  $102 = call $97 with $81 $98 ($99 is responsible)
  $103 = trace: end of call
  $104 = $102
  $105 = $104
  $106 = $105
  $107 = Nothing
  $108 = $106
  $109 = builtinStructGet
  $110 = StructGet
  $111 = Examples::12:13
  $112 = Examples::12:13
  $113 = trace: start of call of $109 with $61 $110 ($111 is responsible, code is at $112)
  $114 = call $109 with $61 $110 ($111 is responsible)
  $115 = trace: end of call
  $116 = $114
  $117 = $77
  $118 = ToDebugText
  $119 = Examples::12:16
  $120 = Examples::12:16
  $121 = trace: start of call of $116 with $117 $118 ($119 is responsible, code is at $120)
  $122 = call $116 with $117 $118 ($119 is responsible)
  $123 = trace: end of call
  $124 = $122
  $125 = Examples::12:17
  $126 = Examples::12:17
  $127 = trace: start of call of $124 with $108 ($125 is responsible, code is at $126)
  $128 = call $124 with $108 ($125 is responsible)
  $129 = trace: end of call
  $130 = $128
  $131 = builtinStructGet
  $132 = StructGet
  $133 = Examples::12:20
  $134 = Examples::12:20
  $135 = trace: start of call of $131 with $61 $132 ($133 is responsible, code is at $134)
  $136 = call $131 with $61 $132 ($133 is responsible)
  $137 = trace: end of call
  $138 = $136
  $139 = $77
  $140 = Print
  $141 = Examples::12:23
  $142 = Examples::12:23
  $143 = trace: start of call of $138 with $139 $140 ($141 is responsible, code is at $142)
  $144 = call $138 with $139 $140 ($141 is responsible)
  $145 = trace: end of call
  $146 = $144
  $147 = Examples::12:24
  $148 = Examples::12:24
  $149 = trace: start of call of $146 with $130 ($147 is responsible, code is at $148)
  $150 = call $146 with $130 ($147 is responsible)
  $151 = trace: end of call
  $152 = $150
}
$154 = $153
$155 = $154
$156 = Nothing
$157 = Main
$158 = [$157: $155]
$159 = builtinStructHasKey
$160 = Main
$161 = call $159 with $158 $160 ($50 is responsible)
$162 = "The module doesn't export a main function."
$163 = builtinIfElse
# Examples::then
$166 = { (responsible $164) ->
  $165 = Nothing
}
# Examples::else
$169 = { (responsible $167) ->
  $168 = panicking because $162 ($50 is at fault)
}
$170 = call $163 with $161 $166 $169 ($50 is responsible)
$171 = builtinStructGet
$172 = call $171 with $158 $160 ($50 is responsible)
$173 = builtinTypeOf
$174 = call $173 with $172 ($50 is responsible)
$175 = builtinEquals
$176 = Function
$177 = call $175 with $174 $176 ($50 is responsible)
$178 = "The exported main value is not a function."
$179 = builtinIfElse
# Examples::then
$182 = { (responsible $180) ->
  $181 = Nothing
}
# Examples::else
$185 = { (responsible $183) ->
  $184 = panicking because $178 ($50 is at fault)
}
$186 = call $179 with $177 $182 $185 ($50 is responsible)
$187 = builtinGetArgumentCount
$188 = call $187 with $172 ($50 is responsible)
$189 = 1
$190 = call $175 with $188 $189 ($50 is responsible)
$191 = "The exported main function doesn't accept exactly one parameter."
$192 = builtinIfElse
# Examples::then
$195 = { (responsible $193) ->
  $194 = Nothing
}
# Examples::else
$198 = { (responsible $196) ->
  $197 = panicking because $191 ($50 is at fault)
}
$199 = call $192 with $190 $195 $198 ($50 is responsible)
$200 = $172
