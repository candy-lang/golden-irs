# RCST for module Examples:
Cst { data: (), kind: Comment { octothorpe: Cst { data: (), kind: Octothorpe }, comment: " Run or benchmark by navigating into this folder and then running one of these commands:" } }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Comment { octothorpe: Cst { data: (), kind: Octothorpe }, comment: " `cargo build --release -- run`" } }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Comment { octothorpe: Cst { data: (), kind: Octothorpe }, comment: " `cargo build --release && time target/release/candy run`" } }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("builtins") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("use") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Text { opening: Cst { data: (), kind: OpeningText { opening_single_quotes: [], opening_double_quote: Cst { data: (), kind: DoubleQuote } } }, parts: [Cst { data: (), kind: TextPart("Builtins") }], closing: Cst { data: (), kind: ClosingText { closing_double_quote: Cst { data: (), kind: DoubleQuote }, closing_single_quotes: [] } } } }] } }] } }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Comment { octothorpe: Cst { data: (), kind: Octothorpe }, comment: " echo = use \".echo\"" } }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Comment { octothorpe: Cst { data: (), kind: Octothorpe }, comment: " fibonacci = use \".fibonacci\"" } }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("main") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: ColonEqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: Function { opening_curly_brace: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: OpeningCurlyBrace }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, parameters_and_arrow: Some(([Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("environment") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }], Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Arrow }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Comment { octothorpe: Cst { data: (), kind: Octothorpe }, comment: " print message = environment.stdout message" } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }] } })), body: [Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("result") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Int { value: 1, string: "1" } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("builtins") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("intAdd") } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Int { value: 2, string: "2" } }] } } } }] } }, Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("result") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("builtins") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("toDebugText") } } } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("builtins") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("print") } } } } }, Cst { data: (), kind: Newline("\n") }], closing_curly_brace: Cst { data: (), kind: ClosingCurlyBrace } } }] } }
Cst { data: (), kind: Newline("\n") }
