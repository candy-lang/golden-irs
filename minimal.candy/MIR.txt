# MIR for module Examples:minimal
#
# Tracing Config:
#
# • Include tracing of fuzzable functions? No
# • Include tracing of calls? No
# • Include tracing of evaluated expressions? No

# anonymous:$generated::needs
$49 = { $2 $3 $4 (+ responsible $1) ->
  $5 = anonymous:$generated::needs
  $6 = builtinEquals
  $7 = Nothing
  $8 = True
  $9 = False
  $10 = call $6 with $2 $8 ($5 is responsible)
  $11 = builtinIfElse
  # anonymous:$generated::needs:isConditionTrue:then
  $14 = { (responsible $12) ->
    $13 = $8
  }
  # anonymous:$generated::needs:isConditionTrue:else
  $17 = { (responsible $15) ->
    $16 = call $6 with $2 $9 ($5 is responsible)
  }
  $18 = call $11 with $10 $14 $17 ($5 is responsible)
  $19 = builtinIfElse
  # anonymous:$generated::needs:isConditionBool:then
  $22 = { (responsible $20) ->
    $21 = $7
  }
  # anonymous:$generated::needs:isConditionBool:else
  $26 = { (responsible $23) ->
    $24 = "The `condition` must be either `True` or `False`."
    $25 = panicking because $24 ($1 is at fault)
  }
  $27 = call $19 with $18 $22 $26 ($5 is responsible)
  $28 = builtinTypeOf
  $29 = call $28 with $3 ($1 is responsible)
  $30 = Text
  $31 = call $6 with $29 $30 ($1 is responsible)
  $32 = builtinIfElse
  # anonymous:$generated::needs:isReasonText:then
  $35 = { (responsible $33) ->
    $34 = $7
  }
  # anonymous:$generated::needs:isReasonText:else
  $39 = { (responsible $36) ->
    $37 = "The `reason` must be a text."
    $38 = panicking because $37 ($1 is at fault)
  }
  $40 = call $32 with $31 $35 $39 ($5 is responsible)
  $41 = builtinIfElse
  # anonymous:$generated::needs:condition:then
  $44 = { (responsible $42) ->
    $43 = $7
  }
  # anonymous:$generated::needs:condition:else
  $47 = { (responsible $45) ->
    $46 = panicking because $3 ($4 is at fault)
  }
  $48 = call $41 with $2 $44 $47 ($5 is responsible)
}
$50 = Examples:minimal:
# Examples:minimal:use
$54 = { $52 (+ responsible $51) ->
  $53 = use $52 (relative to Examples:minimal; $51 is responsible)
}
$55 = "Builtins"
$56 = Examples:minimal:1
$57 = call $54 with $55 ($56 is responsible)
# Examples:minimal:main
$61 = { $59 (+ responsible $58) ->
  $60 = Nothing
}
$62 = $61
$63 = Main
$64 = [$63: $62]
$65 = builtinStructHasKey
$66 = Main
$67 = call $65 with $64 $66 ($50 is responsible)
$68 = "The module doesn't export a main function."
$69 = builtinIfElse
# Examples:minimal:then
$72 = { (responsible $70) ->
  $71 = Nothing
}
# Examples:minimal:else
$75 = { (responsible $73) ->
  $74 = panicking because $68 ($50 is at fault)
}
$76 = call $69 with $67 $72 $75 ($50 is responsible)
$77 = builtinStructGet
$78 = call $77 with $64 $66 ($50 is responsible)
$79 = builtinTypeOf
$80 = call $79 with $78 ($50 is responsible)
$81 = builtinEquals
$82 = Function
$83 = call $81 with $80 $82 ($50 is responsible)
$84 = "The exported main value is not a function."
$85 = builtinIfElse
# Examples:minimal:then
$88 = { (responsible $86) ->
  $87 = Nothing
}
# Examples:minimal:else
$91 = { (responsible $89) ->
  $90 = panicking because $84 ($50 is at fault)
}
$92 = call $85 with $83 $88 $91 ($50 is responsible)
$93 = builtinGetArgumentCount
$94 = call $93 with $78 ($50 is responsible)
$95 = 1
$96 = call $81 with $94 $95 ($50 is responsible)
$97 = "The exported main function doesn't accept exactly one parameter."
$98 = builtinIfElse
# Examples:minimal:then
$101 = { (responsible $99) ->
  $100 = Nothing
}
# Examples:minimal:else
$104 = { (responsible $102) ->
  $103 = panicking because $97 ($50 is at fault)
}
$105 = call $98 with $96 $101 $104 ($50 is responsible)
$106 = $78
