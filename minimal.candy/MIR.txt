# MIR for module Examples:minimal
#
# Tracing Config:
#
# • Include tracing of fuzzable functions? No
# • Include tracing of calls? Only for panic traces
# • Include tracing of evaluated expressions? No

# anonymous:$generated::needs
$49 = { $2 $3 $4 (+ responsible $1) ->
  $5 = anonymous:$generated::needs
  $6 = builtinEquals
  $7 = Nothing
  $8 = True
  $9 = False
  $10 = call $6 with $2 $8 ($5 is responsible)
  $11 = builtinIfElse
  # anonymous:$generated::needs:isConditionTrue:then
  $14 = { (responsible $12) ->
    $13 = $8
  }
  # anonymous:$generated::needs:isConditionTrue:else
  $17 = { (responsible $15) ->
    $16 = call $6 with $2 $9 ($5 is responsible)
  }
  $18 = call $11 with $10 $14 $17 ($5 is responsible)
  $19 = builtinIfElse
  # anonymous:$generated::needs:isConditionBool:then
  $22 = { (responsible $20) ->
    $21 = $7
  }
  # anonymous:$generated::needs:isConditionBool:else
  $26 = { (responsible $23) ->
    $24 = "The `condition` must be either `True` or `False`."
    $25 = panicking because $24 ($1 is at fault)
  }
  $27 = call $19 with $18 $22 $26 ($5 is responsible)
  $28 = builtinTypeOf
  $29 = call $28 with $3 ($1 is responsible)
  $30 = Text
  $31 = call $6 with $29 $30 ($1 is responsible)
  $32 = builtinIfElse
  # anonymous:$generated::needs:isReasonText:then
  $35 = { (responsible $33) ->
    $34 = $7
  }
  # anonymous:$generated::needs:isReasonText:else
  $39 = { (responsible $36) ->
    $37 = "The `reason` must be a text."
    $38 = panicking because $37 ($1 is at fault)
  }
  $40 = call $32 with $31 $35 $39 ($5 is responsible)
  $41 = builtinIfElse
  # anonymous:$generated::needs:condition:then
  $44 = { (responsible $42) ->
    $43 = $7
  }
  # anonymous:$generated::needs:condition:else
  $47 = { (responsible $45) ->
    $46 = panicking because $3 ($4 is at fault)
  }
  $48 = call $41 with $2 $44 $47 ($5 is responsible)
}
$50 = Examples:minimal:
# Examples:minimal:use
$54 = { $52 (+ responsible $51) ->
  $53 = use $52 (relative to Examples:minimal; $51 is responsible)
}
$55 = "Builtins"
$56 = Examples:minimal:1
$57 = builtinEquals
$58 = builtinGetArgumentCount
$59 = builtinTagHasValue
$60 = builtinTagWithValue
$61 = builtinTextConcatenate
$62 = builtinToDebugText
$63 = builtinTypeOf
$64 = call $63 with $54 ($56 is responsible)
$65 = Tag
$66 = call $57 with $64 $65 ($56 is responsible)
$67 = builtinIfElse
# Examples:minimal:1:calleeIsTag:then
$79 = { (responsible $68) ->
  $69 = call $59 with $54 ($56 is responsible)
  $70 = builtinIfElse
  # Examples:minimal:1:doesTagHaveValue:then
  $74 = { (responsible $71) ->
    $72 = "You called a tag that already has a value."
    $73 = panicking because $72 ($56 is at fault)
  }
  # Examples:minimal:1:doesTagHaveValue:else
  $77 = { (responsible $75) ->
    $76 = call $60 with $54 $55 ($56 is responsible)
  }
  $78 = call $70 with $69 $74 $77 ($56 is responsible)
}
# Examples:minimal:1:calleeIsTag:else
$111 = { (responsible $80) ->
  $81 = Function
  $82 = call $57 with $64 $81 ($56 is responsible)
  $83 = builtinIfElse
  # Examples:minimal:1:calleeIsFunction:then
  $105 = { (responsible $84) ->
    $85 = call $58 with $54 ($56 is responsible)
    $86 = 1
    $87 = call $57 with $85 $86 ($56 is responsible)
    $88 = builtinIfElse
    # Examples:minimal:1:hasCorrectNumberOfArguments:then
    $95 = { (responsible $89) ->
      $90 = Examples:minimal:1
      $91 = trace: start of call of $54 with $55 ($56 is responsible, code is at $90)
      $92 = call $54 with $55 ($56 is responsible)
      $93 = trace: end of call
      $94 = $92
    }
    # Examples:minimal:1:hasCorrectNumberOfArguments:else
    $103 = { (responsible $96) ->
      $97 = "You called a function that expects "
      $98 = call $62 with $85 ($56 is responsible)
      $99 = " arguments with 1 arguments."
      $100 = call $61 with $97 $98 ($56 is responsible)
      $101 = call $61 with $100 $99 ($56 is responsible)
      $102 = panicking because $101 ($56 is at fault)
    }
    $104 = call $88 with $87 $95 $103 ($56 is responsible)
  }
  # Examples:minimal:1:calleeIsFunction:else
  $109 = { (responsible $106) ->
    $107 = "You can only call tags or functions."
    $108 = panicking because $107 ($56 is at fault)
  }
  $110 = call $83 with $82 $105 $109 ($56 is responsible)
}
$112 = call $67 with $66 $79 $111 ($56 is responsible)
# Examples:minimal:main
$116 = { $114 (+ responsible $113) ->
  $115 = Nothing
}
$117 = $116
$118 = Main
$119 = [$118: $117]
$120 = builtinStructHasKey
$121 = Main
$122 = call $120 with $119 $121 ($50 is responsible)
$123 = "The module doesn't export a main function."
$124 = builtinIfElse
# Examples:minimal:then
$127 = { (responsible $125) ->
  $126 = Nothing
}
# Examples:minimal:else
$130 = { (responsible $128) ->
  $129 = panicking because $123 ($50 is at fault)
}
$131 = call $124 with $122 $127 $130 ($50 is responsible)
$132 = builtinStructGet
$133 = call $132 with $119 $121 ($50 is responsible)
$134 = builtinTypeOf
$135 = call $134 with $133 ($50 is responsible)
$136 = builtinEquals
$137 = Function
$138 = call $136 with $135 $137 ($50 is responsible)
$139 = "The exported main value is not a function."
$140 = builtinIfElse
# Examples:minimal:then
$143 = { (responsible $141) ->
  $142 = Nothing
}
# Examples:minimal:else
$146 = { (responsible $144) ->
  $145 = panicking because $139 ($50 is at fault)
}
$147 = call $140 with $138 $143 $146 ($50 is responsible)
$148 = builtinGetArgumentCount
$149 = call $148 with $133 ($50 is responsible)
$150 = 1
$151 = call $136 with $149 $150 ($50 is responsible)
$152 = "The exported main function doesn't accept exactly one parameter."
$153 = builtinIfElse
# Examples:minimal:then
$156 = { (responsible $154) ->
  $155 = Nothing
}
# Examples:minimal:else
$159 = { (responsible $157) ->
  $158 = panicking because $152 ($50 is at fault)
}
$160 = call $153 with $151 $156 $159 ($50 is responsible)
$161 = $133
