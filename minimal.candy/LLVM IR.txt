; ModuleID = 'module'
source_filename = "module"

@tag_Nothing = global ptr null
@fun_Examples_minimal_main = global ptr null
@candy_environment = external global ptr

declare ptr @make_candy_int(i64)

declare ptr @make_candy_tag(ptr, ptr)

declare ptr @make_candy_text(ptr)

declare ptr @make_candy_list(ptr)

declare ptr @make_candy_function(ptr, ptr, i64)

declare ptr @make_candy_struct(ptr, ptr)

declare void @candy_panic(ptr)

declare void @free_candy_value(ptr)

declare void @print_candy_value(ptr)

declare ptr @get_candy_function_pointer(ptr)

declare ptr @get_candy_function_environment(ptr)

define i32 @main() {
entry:
  %0 = alloca i8, i64 8, align 1
  store [8 x i8] c"Nothing\00", ptr %0, align 1
  %1 = call ptr @make_candy_tag(ptr %0, ptr null)
  store ptr %1, ptr @tag_Nothing, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %3 = call ptr @make_candy_function(ptr @Examples_minimal_main, ptr %2, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %3, ptr @fun_Examples_minimal_main, align 8
  %4 = call ptr @run_candy_main(ptr @fun_Examples_minimal_main, ptr @candy_environment)
  call void @print_candy_value(ptr %4)
  %5 = load ptr, ptr @tag_Nothing, align 8
  call void @free_candy_value(ptr %5)
  %6 = load ptr, ptr @fun_Examples_minimal_main, align 8
  call void @free_candy_value(ptr %6)
  ret i32 0
}

declare ptr @run_candy_main(ptr, ptr)

declare noalias ptr @malloc(i32)

define ptr @Examples_minimal_main(ptr %0) {
Examples_minimal_main:
  %1 = load ptr, ptr @tag_Nothing, align 8
  ret ptr %1
}
