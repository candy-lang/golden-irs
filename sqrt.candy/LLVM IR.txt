; ModuleID = 'module'
source_filename = "module"

@"Builtins::equals:6" = global ptr null
@"Builtins::fitsInRustU128:10" = global ptr null
@"Builtins::fitsInRustU128:16" = global ptr null
@"Builtins::fitsInRustU128:5" = global ptr null
@"Builtins::fitsInRustU128:8" = global ptr null
@"Builtins::functionRun:11" = global ptr null
@"Builtins::functionRun:16" = global ptr null
@"Builtins::functionRun:22" = global ptr null
@"Builtins::functionRun:5" = global ptr null
@"Builtins::getArgumentCount:11" = global ptr null
@"Builtins::getArgumentCount:5" = global ptr null
@"Builtins::ifElse:1" = global ptr null
@"Builtins::ifElse:11" = global ptr null
@"Builtins::ifElse:14" = global ptr null
@"Builtins::ifElse:19" = global ptr null
@"Builtins::ifElse:25" = global ptr null
@"Builtins::ifElse:28" = global ptr null
@"Builtins::ifElse:33" = global ptr null
@"Builtins::ifElse:41" = global ptr null
@"Builtins::ifElse:5" = global ptr null
@"Builtins::intAdd:11" = global ptr null
@"Builtins::intAdd:18" = global ptr null
@"Builtins::intAdd:5" = global ptr null
@"Builtins::intBitwiseAnd:18" = global ptr null
@"Builtins::intBitwiseAnd:5" = global ptr null
@"Builtins::intCompareTo:11" = global ptr null
@"Builtins::intCompareTo:18" = global ptr null
@"Builtins::intCompareTo:5" = global ptr null
@"Builtins::intDivideTruncating:11" = global ptr null
@"Builtins::intDivideTruncating:17" = global ptr null
@"Builtins::intDivideTruncating:25" = global ptr null
@"Builtins::intDivideTruncating:32" = global ptr null
@"Builtins::intDivideTruncating:5" = global ptr null
@"Builtins::intMultiply:11" = global ptr null
@"Builtins::intMultiply:18" = global ptr null
@"Builtins::intMultiply:5" = global ptr null
@"Builtins::intRemainder:11" = global ptr null
@"Builtins::intRemainder:17" = global ptr null
@"Builtins::intRemainder:25" = global ptr null
@"Builtins::intRemainder:32" = global ptr null
@"Builtins::intRemainder:5" = global ptr null
@"Builtins::intShiftRight:11" = global ptr null
@"Builtins::intShiftRight:14" = global ptr null
@"Builtins::intShiftRight:23" = global ptr null
@"Builtins::intShiftRight:24" = global ptr null
@"Builtins::intShiftRight:26:0" = global ptr null
@"Builtins::intShiftRight:27" = global ptr null
@"Builtins::intShiftRight:29" = global ptr null
@"Builtins::intShiftRight:30" = global ptr null
@"Builtins::intShiftRight:31" = global ptr null
@"Builtins::intShiftRight:34" = global ptr null
@"Builtins::intShiftRight:42" = global ptr null
@"Builtins::intShiftRight:49" = global ptr null
@"Builtins::intShiftRight:5" = global ptr null
@"Builtins::intSubtract:11" = global ptr null
@"Builtins::intSubtract:18" = global ptr null
@"Builtins::intSubtract:5" = global ptr null
@"Builtins::isLessThanOrEqualTo:11" = global ptr null
@"Builtins::isLessThanOrEqualTo:18" = global ptr null
@"Builtins::isLessThanOrEqualTo:19" = global ptr null
@"Builtins::isLessThanOrEqualTo:5" = global ptr null
@"Builtins::isNonNegative:12" = global ptr null
@"Builtins::isNonNegative:13" = global ptr null
@"Builtins::isNonNegative:5" = global ptr null
@"Builtins::not:1" = global ptr null
@"Builtins::print:11" = global ptr null
@"Builtins::structGet:12" = global ptr null
@"Builtins::structGet:14" = global ptr null
@"Builtins::structGet:21" = global ptr null
@"Builtins::structGet:5" = global ptr null
@"Builtins::tagGetValue:11" = global ptr null
@"Builtins::tagGetValue:13" = global ptr null
@"Builtins::tagGetValue:19" = global ptr null
@"Builtins::tagGetValue:5" = global ptr null
@"Builtins::textGetRange:11" = global ptr null
@"Builtins::textGetRange:14" = global ptr null
@"Builtins::textGetRange:16" = global ptr null
@"Builtins::textGetRange:24" = global ptr null
@"Builtins::textGetRange:25" = global ptr null
@"Builtins::textGetRange:27" = global ptr null
@"Builtins::textGetRange:33" = global ptr null
@"Builtins::textGetRange:36" = global ptr null
@"Builtins::textGetRange:38" = global ptr null
@"Builtins::textGetRange:46" = global ptr null
@"Builtins::textGetRange:47" = global ptr null
@"Builtins::textGetRange:49" = global ptr null
@"Builtins::textGetRange:5" = global ptr null
@"Builtins::textGetRange:53" = global ptr null
@"Builtins::textGetRange:55" = global ptr null
@"Builtins::textGetRange:63" = global ptr null
@"Builtins::textLength:11" = global ptr null
@"Builtins::textLength:5" = global ptr null
@"Builtins::textStartsWith:11" = global ptr null
@"Builtins::textStartsWith:18" = global ptr null
@"Builtins::textStartsWith:5" = global ptr null
@"Builtins::toDebugText:5" = global ptr null
@"Builtins::typeIs:19" = global ptr null
@"Builtins::typeIs:25" = global ptr null
@"Builtins::typeOf:5" = global ptr null
@"Core:bool:implies:12" = global ptr null
@"Core:bool:implies:15" = global ptr null
@"Core:bool:implies:4" = global ptr null
@"Core:bool:implies:9" = global ptr null
@"Core:bool:is:1" = global ptr null
@"Core:bool:lazyAnd:16" = global ptr null
@"Core:bool:lazyAnd:18" = global ptr null
@"Core:bool:lazyAnd:18:13" = global ptr null
@"Core:bool:lazyAnd:18:21" = global ptr null
@"Core:bool:lazyAnd:18:9" = global ptr null
@"Core:bool:lazyAnd:4" = global ptr null
@"Core:bool:lazyOr:16" = global ptr null
@"Core:bool:lazyOr:18" = global ptr null
@"Core:bool:lazyOr:18:10" = global ptr null
@"Core:bool:lazyOr:18:14" = global ptr null
@"Core:bool:lazyOr:18:22" = global ptr null
@"Core:bool:lazyOr:4" = global ptr null
@"Core:bool:not:4" = global ptr null
@"Core:bool:not:6" = global ptr null
@"Core:bool:or:13" = global ptr null
@"Core:bool:or:4" = global ptr null
@"Core:bool:or:9" = global ptr null
@"Core:check:check:1" = global ptr null
@"Core:check:check:14" = global ptr null
@"Core:check:check:5" = global ptr null
@"Core:controlFlow:recursive:17" = global ptr null
@"Core:controlFlow:recursive:18:0:3" = global ptr null
@"Core:controlFlow:recursive:18:5" = global ptr null
@"Core:controlFlow:recursive:23" = global ptr null
@"Core:fixedDecimal:absolute:11" = global ptr null
@"Core:fixedDecimal:absolute:4" = global ptr null
@"Core:fixedDecimal:absolute:8" = global ptr null
@"Core:fixedDecimal:absolute:9:2" = global ptr null
@"Core:fixedDecimal:add:13" = global ptr null
@"Core:fixedDecimal:add:27" = global ptr null
@"Core:fixedDecimal:add:29" = global ptr null
@"Core:fixedDecimal:add:4" = global ptr null
@"Core:fixedDecimal:add:9" = global ptr null
@"Core:fixedDecimal:approxEquals:14" = global ptr null
@"Core:fixedDecimal:approxEquals:17" = global ptr null
@"Core:fixedDecimal:approxEquals:19" = global ptr null
@"Core:fixedDecimal:approxEquals:23" = global ptr null
@"Core:fixedDecimal:approxEquals:25" = global ptr null
@"Core:fixedDecimal:approxEquals:28" = global ptr null
@"Core:fixedDecimal:approxEquals:4" = global ptr null
@"Core:fixedDecimal:approxEquals:9" = global ptr null
@"Core:fixedDecimal:comparableMinorUnits:20" = global ptr null
@"Core:fixedDecimal:comparableMinorUnits:23" = global ptr null
@"Core:fixedDecimal:comparableMinorUnits:24" = global ptr null
@"Core:fixedDecimal:comparableMinorUnits:30" = global ptr null
@"Core:fixedDecimal:comparableMinorUnits:35" = global ptr null
@"Core:fixedDecimal:comparableMinorUnits:4" = global ptr null
@"Core:fixedDecimal:comparableMinorUnits:9" = global ptr null
@"Core:fixedDecimal:compareTo:13" = global ptr null
@"Core:fixedDecimal:compareTo:26" = global ptr null
@"Core:fixedDecimal:compareTo:4" = global ptr null
@"Core:fixedDecimal:compareTo:45" = global ptr null
@"Core:fixedDecimal:compareTo:46" = global ptr null
@"Core:fixedDecimal:compareTo:9" = global ptr null
@"Core:fixedDecimal:divideTruncatingAtScale:14" = global ptr null
@"Core:fixedDecimal:divideTruncatingAtScale:17" = global ptr null
@"Core:fixedDecimal:divideTruncatingAtScale:29" = global ptr null
@"Core:fixedDecimal:divideTruncatingAtScale:37" = global ptr null
@"Core:fixedDecimal:divideTruncatingAtScale:4" = global ptr null
@"Core:fixedDecimal:divideTruncatingAtScale:41" = global ptr null
@"Core:fixedDecimal:divideTruncatingAtScale:56" = global ptr null
@"Core:fixedDecimal:divideTruncatingAtScale:57" = global ptr null
@"Core:fixedDecimal:divideTruncatingAtScale:67" = global ptr null
@"Core:fixedDecimal:divideTruncatingAtScale:69" = global ptr null
@"Core:fixedDecimal:divideTruncatingAtScale:9" = global ptr null
@"Core:fixedDecimal:floorToInt:18" = global ptr null
@"Core:fixedDecimal:floorToInt:20" = global ptr null
@"Core:fixedDecimal:floorToInt:21" = global ptr null
@"Core:fixedDecimal:floorToInt:4" = global ptr null
@"Core:fixedDecimal:floorToInt:7" = global ptr null
@"Core:fixedDecimal:fromIntScaled:11" = global ptr null
@"Core:fixedDecimal:fromIntScaled:16" = global ptr null
@"Core:fixedDecimal:is:1" = global ptr null
@"Core:fixedDecimal:is:1:18:2" = global ptr null
@"Core:fixedDecimal:is:1:19" = global ptr null
@"Core:fixedDecimal:is:1:minorUnits" = global ptr null
@"Core:fixedDecimal:is:1:scale" = global ptr null
@"Core:fixedDecimal:isGreaterThan:14" = global ptr null
@"Core:fixedDecimal:isGreaterThan:4" = global ptr null
@"Core:fixedDecimal:isGreaterThan:9" = global ptr null
@"Core:fixedDecimal:isLessThanOrEqualTo:13" = global ptr null
@"Core:fixedDecimal:isLessThanOrEqualTo:22" = global ptr null
@"Core:fixedDecimal:isLessThanOrEqualTo:4" = global ptr null
@"Core:fixedDecimal:isLessThanOrEqualTo:9" = global ptr null
@"Core:fixedDecimal:isNegative:17" = global ptr null
@"Core:fixedDecimal:isNegative:4" = global ptr null
@"Core:fixedDecimal:isNegative:7" = global ptr null
@"Core:fixedDecimal:isNonNegative:16" = global ptr null
@"Core:fixedDecimal:isNonNegative:4" = global ptr null
@"Core:fixedDecimal:isNonNegative:7" = global ptr null
@"Core:fixedDecimal:isScale:18:9" = global ptr null
@"Core:fixedDecimal:isScale:19" = global ptr null
@"Core:fixedDecimal:minorUnits:19" = global ptr null
@"Core:fixedDecimal:minorUnits:21" = global ptr null
@"Core:fixedDecimal:minorUnits:4" = global ptr null
@"Core:fixedDecimal:negate:17" = global ptr null
@"Core:fixedDecimal:negate:20" = global ptr null
@"Core:fixedDecimal:negate:21" = global ptr null
@"Core:fixedDecimal:negate:4" = global ptr null
@"Core:fixedDecimal:negate:8" = global ptr null
@"Core:fixedDecimal:rescaledMinorUnits:13" = global ptr null
@"Core:fixedDecimal:rescaledMinorUnits:23" = global ptr null
@"Core:fixedDecimal:rescaledMinorUnits:24:14" = global ptr null
@"Core:fixedDecimal:rescaledMinorUnits:24:2" = global ptr null
@"Core:fixedDecimal:rescaledMinorUnits:24:24" = global ptr null
@"Core:fixedDecimal:rescaledMinorUnits:24:25" = global ptr null
@"Core:fixedDecimal:rescaledMinorUnits:24:26" = global ptr null
@"Core:fixedDecimal:rescaledMinorUnits:25:2" = global ptr null
@"Core:fixedDecimal:rescaledMinorUnits:25:23" = global ptr null
@"Core:fixedDecimal:rescaledMinorUnits:25:24" = global ptr null
@"Core:fixedDecimal:rescaledMinorUnits:25:25" = global ptr null
@"Core:fixedDecimal:rescaledMinorUnits:25:26" = global ptr null
@"Core:fixedDecimal:rescaledMinorUnits:26" = global ptr null
@"Core:fixedDecimal:rescaledMinorUnits:4" = global ptr null
@"Core:fixedDecimal:rescaledMinorUnits:9" = global ptr null
@"Core:fixedDecimal:scale:19" = global ptr null
@"Core:fixedDecimal:scale:21" = global ptr null
@"Core:fixedDecimal:scale:4" = global ptr null
@"Core:fixedDecimal:scaleFactor:15" = global ptr null
@"Core:fixedDecimal:scaleFactor:4" = global ptr null
@"Core:fixedDecimal:subtract:13" = global ptr null
@"Core:fixedDecimal:subtract:27" = global ptr null
@"Core:fixedDecimal:subtract:29" = global ptr null
@"Core:fixedDecimal:subtract:4" = global ptr null
@"Core:fixedDecimal:subtract:9" = global ptr null
@"Core:fixedDecimal:toText:10:18" = global ptr null
@"Core:fixedDecimal:toText:10:2" = global ptr null
@"Core:fixedDecimal:toText:10:30" = global ptr null
@"Core:fixedDecimal:toText:10:31:10" = global ptr null
@"Core:fixedDecimal:toText:10:31:28" = global ptr null
@"Core:fixedDecimal:toText:10:32:10" = global ptr null
@"Core:fixedDecimal:toText:10:32:28" = global ptr null
@"Core:fixedDecimal:toText:10:33" = global ptr null
@"Core:fixedDecimal:toText:10:4" = global ptr null
@"Core:fixedDecimal:toText:10:8" = global ptr null
@"Core:fixedDecimal:toText:11" = global ptr null
@"Core:fixedDecimal:toText:20" = global ptr null
@"Core:fixedDecimal:toText:21" = global ptr null
@"Core:fixedDecimal:toText:23:0" = global ptr null
@"Core:fixedDecimal:toText:24" = global ptr null
@"Core:fixedDecimal:toText:27" = global ptr null
@"Core:fixedDecimal:toText:28" = global ptr null
@"Core:fixedDecimal:toText:30:0" = global ptr null
@"Core:fixedDecimal:toText:31" = global ptr null
@"Core:fixedDecimal:toText:32" = global ptr null
@"Core:fixedDecimal:toText:33" = global ptr null
@"Core:fixedDecimal:toText:4" = global ptr null
@"Core:fixedDecimal:toText:7" = global ptr null
@"Core:function:is0:11:3" = global ptr null
@"Core:function:is0:13" = global ptr null
@"Core:function:is2:11:3" = global ptr null
@"Core:function:is2:13" = global ptr null
@"Core:function:run:14" = global ptr null
@"Core:function:run:4" = global ptr null
@"Core:int:compareTo:20" = global ptr null
@"Core:int:compareTo:4" = global ptr null
@"Core:int:compareTo:9" = global ptr null
@"Core:int:isEven:4" = global ptr null
@"Core:int:isEven:8" = global ptr null
@"Core:int:isGreaterThan:13" = global ptr null
@"Core:int:isGreaterThan:4" = global ptr null
@"Core:int:isGreaterThan:9" = global ptr null
@"Core:int:isGreaterThanOrEqualTo:13" = global ptr null
@"Core:int:isGreaterThanOrEqualTo:22" = global ptr null
@"Core:int:isGreaterThanOrEqualTo:4" = global ptr null
@"Core:int:isGreaterThanOrEqualTo:9" = global ptr null
@"Core:int:isLessThan:13" = global ptr null
@"Core:int:isLessThan:4" = global ptr null
@"Core:int:isLessThan:9" = global ptr null
@"Core:int:isNegative:4" = global ptr null
@"Core:int:isNegative:8" = global ptr null
@"Core:int:isNonNegative:16" = global ptr null
@"Core:int:isNonNegative:4" = global ptr null
@"Core:int:isNonNegative:7" = global ptr null
@"Core:int:max:14" = global ptr null
@"Core:int:max:17" = global ptr null
@"Core:int:max:4" = global ptr null
@"Core:int:max:9" = global ptr null
@"Core:int:negate:4" = global ptr null
@"Core:int:negate:8" = global ptr null
@"Core:int:pow:12" = global ptr null
@"Core:int:pow:14" = global ptr null
@"Core:int:pow:21:1" = global ptr null
@"Core:int:pow:21:4" = global ptr null
@"Core:int:pow:21:4:4" = global ptr null
@"Core:int:pow:21:4:5:10" = global ptr null
@"Core:int:pow:21:4:5:12" = global ptr null
@"Core:int:pow:21:4:5:5" = global ptr null
@"Core:int:pow:21:4:6:12" = global ptr null
@"Core:int:pow:21:4:6:15" = global ptr null
@"Core:int:pow:21:4:6:17" = global ptr null
@"Core:int:pow:21:4:6:18" = global ptr null
@"Core:int:pow:21:4:6:7" = global ptr null
@"Core:int:pow:21:4:7" = global ptr null
@"Core:int:pow:21:base" = global ptr null
@"Core:int:pow:21:exponent" = global ptr null
@"Core:int:pow:22" = global ptr null
@"Core:int:pow:9" = global ptr null
@"Core:text:removePrefix:14" = global ptr null
@"Core:text:removePrefix:15:4" = global ptr null
@"Core:text:removePrefix:15:7" = global ptr null
@"Core:text:removePrefix:15:8" = global ptr null
@"Core:text:removePrefix:17" = global ptr null
@"Core:text:removePrefix:4" = global ptr null
@"Core:text:removePrefix:9" = global ptr null
@"Examples:sqrt:main:47" = global ptr null
@"Examples:sqrt:main:48" = global ptr null
@"Examples:sqrt:main:49" = global ptr null
@"Examples:sqrt:main:51:0" = global ptr null
@"Examples:sqrt:main:52" = global ptr null
@"Examples:sqrt:main:55" = global ptr null
@"Examples:sqrt:sqrt:82:28" = global ptr null
@"Examples:sqrt:sqrt:82:29" = global ptr null
@"Examples:sqrt:sqrt:82:41" = global ptr null
@"Examples:sqrt:sqrt:82:55" = global ptr null
@"Examples:sqrt:sqrt:82:57:2" = global ptr null
@"Examples:sqrt:sqrt:82:58" = global ptr null
@"Examples:sqrt:sqrt:83" = global ptr null
@"anonymous:$generated::needs" = global ptr null
@fun_candy_builtin_equals = global ptr null
@fun_candy_builtin_get_argument_count = global ptr null
@fun_candy_builtin_if_else = global ptr null
@fun_candy_builtin_int_add = global ptr null
@fun_candy_builtin_int_bitwise_and = global ptr null
@fun_candy_builtin_int_compare_to = global ptr null
@fun_candy_builtin_int_divide_truncating = global ptr null
@fun_candy_builtin_int_multiply = global ptr null
@fun_candy_builtin_int_remainder = global ptr null
@fun_candy_builtin_int_shift_right = global ptr null
@fun_candy_builtin_int_subtract = global ptr null
@fun_candy_builtin_list_get = global ptr null
@fun_candy_builtin_print = global ptr null
@fun_candy_builtin_struct_get = global ptr null
@fun_candy_builtin_struct_has_key = global ptr null
@fun_candy_builtin_tag_get_value = global ptr null
@fun_candy_builtin_tag_has_value = global ptr null
@fun_candy_builtin_tag_without_value = global ptr null
@fun_candy_builtin_text_concatenate = global ptr null
@fun_candy_builtin_text_get_range = global ptr null
@fun_candy_builtin_text_length = global ptr null
@fun_candy_builtin_text_starts_with = global ptr null
@fun_candy_builtin_to_debug_text = global ptr null
@fun_candy_builtin_type_of = global ptr null
@tag_Base = global ptr null
@tag_Equal = global ptr null
@tag_Exponent = global ptr null
@tag_False = global ptr null
@tag_FixedDecimal = global ptr null
@tag_Function = global ptr null
@tag_Greater = global ptr null
@tag_Int = global ptr null
@tag_Less = global ptr null
@tag_Match = global ptr null
@tag_MinorUnits = global ptr null
@tag_NoMatch = global ptr null
@tag_Nothing = global ptr null
@tag_Scale = global ptr null
@tag_Struct = global ptr null
@tag_Tag = global ptr null
@tag_Text = global ptr null
@tag_True = global ptr null
@num_0 = global ptr null
@num_1 = global ptr null
@num_2 = global ptr null
@num_10 = global ptr null
@num_65 = global ptr null
@num_340282366920938463463374607431768211455 = global ptr null
@text_-1 = global ptr null
@text_. = global ptr null
@"text_. You might want to call `shiftLeft` instead." = global ptr null
@text_1 = global ptr null
@"text_A check failed." = global ptr null
@"text_Expected Equal, got " = global ptr null
@"text_Expected False, got " = global ptr null
@"text_Expected FixedDecimal, got " = global ptr null
@"text_Expected Greater, got " = global ptr null
@"text_Expected Less, got " = global ptr null
@"text_Expected True, got " = global ptr null
@"text_Expected `0`, got `" = global ptr null
@"text_Expected a Struct, got `" = global ptr null
@"text_Expected a Tag, got `" = global ptr null
@"text_Expected tag to have a value, but it doesn't have any." = global ptr null
@"text_Expected tag to not have a value, but it has one: `" = global ptr null
@"text_No case matched the given expression." = global ptr null
@"text_Shifts by that much are not yet supported." = global ptr null
@"text_Struct doesn't contain key `Base`: `" = global ptr null
@"text_Struct doesn't contain key `Exponent`: `" = global ptr null
@"text_Struct doesn't contain key `MinorUnits`: `" = global ptr null
@"text_Struct doesn't contain key `Scale`: `" = global ptr null
@"text_The `body` should take the recursive function and the argument." = global ptr null
@"text_The `condition` must be either `True` or `False`." = global ptr null
@"text_The `reason` must be a text." = global ptr null
@"text_The root of 2 is " = global ptr null
@"text_The shift `amount` is negative: " = global ptr null
@"text_You can't divide by zero." = global ptr null
@"text_`." = global ptr null
@"text_`False` was not satisfied" = global ptr null
@"text_`a | typeIs Int` was not satisfied" = global ptr null
@"text_`amount | typeIs Int` was not satisfied" = global ptr null
@"text_`b | typeIs Int` was not satisfied" = global ptr null
@"text_`b` didn't return a bool." = global ptr null
@"text_`conditionIsBool` was not satisfied" = global ptr null
@"text_`dividend | typeIs Int` was not satisfied" = global ptr null
@"text_`divisor | typeIs Int` was not satisfied" = global ptr null
@"text_`else | getArgumentCount | equals 0` was not satisfied" = global ptr null
@"text_`else | typeIs Function` was not satisfied" = global ptr null
@"text_`endExclusive | isLessThanOrEqualTo (text | \E2\9C\A8.textLength)` was not satisfied" = global ptr null
@"text_`endExclusive | isNonNegative` was not satisfied" = global ptr null
@"text_`endExclusive | typeIs Int` was not satisfied" = global ptr null
@"text_`factorA | typeIs Int` was not satisfied" = global ptr null
@"text_`factorB | typeIs Int` was not satisfied" = global ptr null
@"text_`function | typeIs Function` was not satisfied" = global ptr null
@"text_`function | \E2\9C\A8.getArgumentCount | equals 0` was not satisfied" = global ptr null
@"text_`function.is0 b` was not satisfied" = global ptr null
@"text_`int | typeIs Int` was not satisfied" = global ptr null
@"text_`int.is minorUnits` was not satisfied" = global ptr null
@"text_`is a` was not satisfied" = global ptr null
@"text_`is b` was not satisfied" = global ptr null
@"text_`is delta` was not satisfied" = global ptr null
@"text_`is dividend` was not satisfied" = global ptr null
@"text_`is divisor` was not satisfied" = global ptr null
@"text_`is exponent` was not satisfied" = global ptr null
@"text_`is minuend` was not satisfied" = global ptr null
@"text_`is prefix` was not satisfied" = global ptr null
@"text_`is subtrahend` was not satisfied" = global ptr null
@"text_`is summandA` was not satisfied" = global ptr null
@"text_`is summandB` was not satisfied" = global ptr null
@"text_`is text` was not satisfied" = global ptr null
@"text_`is valueA` was not satisfied" = global ptr null
@"text_`is valueB` was not satisfied" = global ptr null
@"text_`is value` was not satisfied" = global ptr null
@"text_`is0 body` was not satisfied" = global ptr null
@"text_`isConditionBool` was not satisfied" = global ptr null
@"text_`isNonNegative delta` was not satisfied" = global ptr null
@"text_`isNonNegative exponent` was not satisfied" = global ptr null
@"text_`isScale scale` was not satisfied" = global ptr null
@"text_`isScale targetScale` was not satisfied" = global ptr null
@"text_`minuend | typeIs Int` was not satisfied" = global ptr null
@"text_`prefix | typeIs Text` was not satisfied" = global ptr null
@"text_`startInclusive | isLessThanOrEqualTo (text | \E2\9C\A8.textLength)` was not satisfied" = global ptr null
@"text_`startInclusive | isLessThanOrEqualTo endExclusive` was not satisfied" = global ptr null
@"text_`startInclusive | isNonNegative` was not satisfied" = global ptr null
@"text_`startInclusive | typeIs Int` was not satisfied" = global ptr null
@"text_`struct | typeIs Struct` was not satisfied" = global ptr null
@"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied" = global ptr null
@"text_`subtrahend | typeIs Int` was not satisfied" = global ptr null
@"text_`tag | typeIs Tag` was not satisfied" = global ptr null
@"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied" = global ptr null
@"text_`text | typeIs Text` was not satisfied" = global ptr null
@"text_`then | getArgumentCount | equals 0` was not satisfied" = global ptr null
@"text_`then | typeIs Function` was not satisfied" = global ptr null
@"text_`value | isNonNegative` was not satisfied" = global ptr null
@"text_`value | typeIs Int` was not satisfied" = global ptr null
@"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then" = global ptr null
@"fun_Core__19_isMatch_then, Core__30_isMatch_then, Core__41_isMatch_then, Core__102_isMatch_then, Core__153_isMatch_then, Core__164_isMatch_then, Core_bool_9_isMatch_then, Core_check_9_isMatch_then, Core_controlFlow_if_27, Core_controlFlow_29_isMatch_then, Core_controlFlow_50_isMatch_then, Core_fixedDecimal_19_isMatch_then, Core_fixedDecimal_30_isMatch_then, Core_fixedDecimal_41_isMatch_then, Core_fixedDecimal_52_isMatch_then, Core_fixedDecimal_103_isMatch_then, Core_function_19_isMatch_then, Core_int_pow_21_1_isMatch_then, Core_int_29_isMatch_then, Core_int_40_isMatch_then, Core_iterable_generateWithState_14_0_11_1_isMatch_then, Core_iterable_map_19_11_1_isMatch_then, Core_iterable_reduceLeft_38_1_isMatch_then, Core_iterable_take_33_1_isMatch_then, Core_iterable_takeWhile_2_11_1_isMatch_then, Core_iterable_withIndex_11_1_isMatch_then, Core_iterable_withIndex_11_14_1_isMatch_then, Core_iterable_19_isMatch_then, Core_iterable_30_isMatch_then, Core_iterable_82_11_1_isMatch_then, Core_iterable_84_2_11_1_isMatch_then, Core_iterable_84_2_11_7_15_1_isMatch_then, Core_list_generate_59_1_isMatch_then, Core_list_29_isMatch_then, Core_list_40_isMatch_then, Core_result_19_isMatch_then, Core_result_30_isMatch_then, Core_struct_19_isMatch_then, Core_tag_29_isMatch_then, Core_text_29_isMatch_then, Core_text_40_isMatch_then, Core_type_19_isMatch_then, Examples_sqrt_then, Examples_sqrt_19_isMatch_then, anonymous_$generated__needs_condition_then, anonymous_$generated__needs_isConditionBool_then, anonymous_$generated__needs_isReasonText_then" = global ptr null
@"fun_anonymous_$generated__needs" = global ptr null
@"fun_anonymous_$generated__needs_isConditionTrue_else" = global ptr null
@"fun_anonymous_$generated__needs_isConditionBool_else" = global ptr null
@"fun_anonymous_$generated__needs_isReasonText_else" = global ptr null
@"fun_anonymous_$generated__needs_condition_else" = global ptr null
@0 = global ptr null
@"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then" = global ptr null
@"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else" = global ptr null
@fun_Builtins__not = global ptr null
@fun_Builtins__not_1_equals_then = global ptr null
@fun_Builtins__not_1_equals_then.2 = global ptr null
@fun_Builtins__not_1_equals_else = global ptr null
@1 = global ptr null
@fun_Builtins__not_1_equals_else.4 = global ptr null
@2 = global ptr null
@fun_Builtins__not_1_equals_else.6 = global ptr null
@3 = global ptr null
@fun_Builtins__not_1_case-0_didNotMatch = global ptr null
@fun_Builtins__not_1_equals_then.8 = global ptr null
@fun_Builtins__not_1_equals_then.10 = global ptr null
@fun_Builtins__not_1_equals_else.12 = global ptr null
@4 = global ptr null
@fun_Builtins__not_1_equals_else.14 = global ptr null
@5 = global ptr null
@fun_Builtins__not_1_equals_else.16 = global ptr null
@6 = global ptr null
@fun_Builtins__not_1_case-1_didNotMatch = global ptr null
@fun_Builtins__isNonNegative_13_case-1_didNotMatch = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_case-1_didNotMatch = global ptr null
@fun_Builtins__isLessThanOrEqualTo = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_then = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_else = global ptr null
@7 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_else.18 = global ptr null
@8 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_isMatch_then = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_isMatch_else = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_then.20 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_else.22 = global ptr null
@9 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_else.24 = global ptr null
@10 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_then.26 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_else.28 = global ptr null
@11 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_else.30 = global ptr null
@12 = global ptr null
@fun_Builtins__ifElse = global ptr null
@fun_Builtins__ifElse_1_equals_then = global ptr null
@fun_Builtins__ifElse_1_equals_then.32 = global ptr null
@fun_Builtins__ifElse_1_equals_else = global ptr null
@13 = global ptr null
@fun_Builtins__ifElse_1_equals_else.34 = global ptr null
@14 = global ptr null
@fun_Builtins__ifElse_1_equals_else.36 = global ptr null
@15 = global ptr null
@fun_Builtins__ifElse_1_isMatch_then = global ptr null
@fun_Builtins__ifElse_1_isMatch_else = global ptr null
@fun_Builtins__ifElse_1_equals_then.38 = global ptr null
@fun_Builtins__ifElse_1_equals_then.40 = global ptr null
@fun_Builtins__ifElse_1_equals_else.42 = global ptr null
@16 = global ptr null
@fun_Builtins__ifElse_1_equals_else.44 = global ptr null
@17 = global ptr null
@fun_Builtins__ifElse_1_equals_else.46 = global ptr null
@18 = global ptr null
@fun_Builtins__intDivideTruncating = global ptr null
@fun_Builtins__intRemainder = global ptr null
@fun_Builtins__intShiftRight = global ptr null
@fun_Builtins__isNonNegative_13_equals_then = global ptr null
@fun_Builtins__isNonNegative_13_equals_else = global ptr null
@19 = global ptr null
@fun_Builtins__isNonNegative_13_equals_else.48 = global ptr null
@20 = global ptr null
@fun_Builtins__isNonNegative_13_isMatch_then = global ptr null
@fun_Builtins__isNonNegative_13_isMatch_else = global ptr null
@fun_Builtins__isNonNegative_13_equals_then.50 = global ptr null
@fun_Builtins__isNonNegative_13_equals_else.52 = global ptr null
@21 = global ptr null
@fun_Builtins__isNonNegative_13_equals_else.54 = global ptr null
@22 = global ptr null
@fun_Builtins__isNonNegative_13_case-0_didNotMatch = global ptr null
@fun_Builtins__isNonNegative_13_equals_then.56 = global ptr null
@fun_Builtins__isNonNegative_13_equals_else.58 = global ptr null
@23 = global ptr null
@fun_Builtins__isNonNegative_13_equals_else.60 = global ptr null
@24 = global ptr null
@fun_Builtins__intShiftRight_25 = global ptr null
@fun_Builtins__intShiftRight_26 = global ptr null
@fun_Builtins__isNonNegative_13_isMatch_then.62 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_then.64 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_else.66 = global ptr null
@25 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_else.68 = global ptr null
@26 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_isMatch_then.70 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_isMatch_else.72 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_then.74 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_else.76 = global ptr null
@27 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_else.78 = global ptr null
@28 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch.80 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_then.82 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_else.84 = global ptr null
@29 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_else.86 = global ptr null
@30 = global ptr null
@fun_Builtins__textGetRange = global ptr null
@fun_Builtins__isNonNegative_13_equals_then.88 = global ptr null
@fun_Builtins__isNonNegative_13_equals_else.90 = global ptr null
@31 = global ptr null
@fun_Builtins__isNonNegative_13_equals_else.92 = global ptr null
@32 = global ptr null
@fun_Builtins__isNonNegative_13_isMatch_then.94 = global ptr null
@fun_Builtins__isNonNegative_13_isMatch_else.96 = global ptr null
@fun_Builtins__isNonNegative_13_equals_then.98 = global ptr null
@fun_Builtins__isNonNegative_13_equals_else.100 = global ptr null
@33 = global ptr null
@fun_Builtins__isNonNegative_13_equals_else.102 = global ptr null
@34 = global ptr null
@fun_Builtins__isNonNegative_13_case-0_didNotMatch.104 = global ptr null
@fun_Builtins__isNonNegative_13_equals_then.106 = global ptr null
@fun_Builtins__isNonNegative_13_equals_else.108 = global ptr null
@35 = global ptr null
@fun_Builtins__isNonNegative_13_equals_else.110 = global ptr null
@36 = global ptr null
@fun_Builtins__isNonNegative_13_equals_then.112 = global ptr null
@fun_Builtins__isNonNegative_13_equals_else.114 = global ptr null
@37 = global ptr null
@fun_Builtins__isNonNegative_13_equals_else.116 = global ptr null
@38 = global ptr null
@fun_Builtins__isNonNegative_13_isMatch_then.118 = global ptr null
@fun_Builtins__isNonNegative_13_isMatch_else.120 = global ptr null
@fun_Builtins__isNonNegative_13_equals_then.122 = global ptr null
@fun_Builtins__isNonNegative_13_equals_else.124 = global ptr null
@39 = global ptr null
@fun_Builtins__isNonNegative_13_equals_else.126 = global ptr null
@40 = global ptr null
@fun_Builtins__isNonNegative_13_case-0_didNotMatch.128 = global ptr null
@fun_Builtins__isNonNegative_13_equals_then.130 = global ptr null
@fun_Builtins__isNonNegative_13_equals_else.132 = global ptr null
@41 = global ptr null
@fun_Builtins__isNonNegative_13_equals_else.134 = global ptr null
@42 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_then.136 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_else.138 = global ptr null
@43 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_else.140 = global ptr null
@44 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_isMatch_then.142 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_isMatch_else.144 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_then.146 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_else.148 = global ptr null
@45 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_else.150 = global ptr null
@46 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch.152 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_then.154 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_else.156 = global ptr null
@47 = global ptr null
@fun_Builtins__isLessThanOrEqualTo_19_equals_else.158 = global ptr null
@48 = global ptr null
@fun_Core_bool_is = global ptr null
@fun_Core_bool_is_1_equals_then = global ptr null
@fun_Core_bool_is_1_equals_then.160 = global ptr null
@fun_Core_bool_is_1_equals_else = global ptr null
@49 = global ptr null
@fun_Core_bool_is_1_equals_else.162 = global ptr null
@50 = global ptr null
@fun_Core_bool_is_1_equals_else.164 = global ptr null
@51 = global ptr null
@fun_Core_bool_is_1_isMatch_then = global ptr null
@fun_Core_bool_is_1_isMatch_else = global ptr null
@fun_Core_bool_is_1_equals_then.166 = global ptr null
@fun_Core_bool_is_1_equals_then.168 = global ptr null
@fun_Core_bool_is_1_equals_else.170 = global ptr null
@52 = global ptr null
@fun_Core_bool_is_1_equals_else.172 = global ptr null
@53 = global ptr null
@fun_Core_bool_is_1_equals_else.174 = global ptr null
@54 = global ptr null
@fun_Core_bool_not_6_case-1_didNotMatch = global ptr null
@fun_Core_bool_not = global ptr null
@fun_Core_bool_is_1_equals_then.176 = global ptr null
@fun_Core_bool_is_1_equals_then.178 = global ptr null
@fun_Core_bool_is_1_equals_else.180 = global ptr null
@55 = global ptr null
@fun_Core_bool_is_1_equals_else.182 = global ptr null
@56 = global ptr null
@fun_Core_bool_is_1_equals_else.184 = global ptr null
@57 = global ptr null
@fun_Core_bool_is_1_isMatch_then.186 = global ptr null
@fun_Core_bool_is_1_isMatch_else.188 = global ptr null
@fun_Core_bool_is_1_equals_then.190 = global ptr null
@fun_Core_bool_is_1_equals_then.192 = global ptr null
@fun_Core_bool_is_1_equals_else.194 = global ptr null
@58 = global ptr null
@fun_Core_bool_is_1_equals_else.196 = global ptr null
@59 = global ptr null
@fun_Core_bool_is_1_equals_else.198 = global ptr null
@60 = global ptr null
@fun_Core_bool_not_6_equals_then = global ptr null
@fun_Core_bool_not_6_equals_then.200 = global ptr null
@fun_Core_bool_not_6_equals_else = global ptr null
@61 = global ptr null
@fun_Core_bool_not_6_equals_else.202 = global ptr null
@62 = global ptr null
@fun_Core_bool_not_6_equals_else.204 = global ptr null
@63 = global ptr null
@fun_Core_bool_not_6_case-0_didNotMatch = global ptr null
@fun_Core_bool_not_6_equals_then.206 = global ptr null
@fun_Core_bool_not_6_equals_then.208 = global ptr null
@fun_Core_bool_not_6_equals_else.210 = global ptr null
@64 = global ptr null
@fun_Core_bool_not_6_equals_else.212 = global ptr null
@65 = global ptr null
@fun_Core_bool_not_6_equals_else.214 = global ptr null
@66 = global ptr null
@fun_Core_bool_lazyAnd_18_case-1_didNotMatch = global ptr null
@fun_Core_bool_lazyAnd = global ptr null
@fun_Core_bool_is_1_equals_then.216 = global ptr null
@fun_Core_bool_is_1_equals_then.218 = global ptr null
@fun_Core_bool_is_1_equals_else.220 = global ptr null
@67 = global ptr null
@fun_Core_bool_is_1_equals_else.222 = global ptr null
@68 = global ptr null
@fun_Core_bool_is_1_equals_else.224 = global ptr null
@69 = global ptr null
@fun_Core_bool_is_1_isMatch_then.226 = global ptr null
@fun_Core_bool_is_1_isMatch_else.228 = global ptr null
@fun_Core_bool_is_1_equals_then.230 = global ptr null
@fun_Core_bool_is_1_equals_then.232 = global ptr null
@fun_Core_bool_is_1_equals_else.234 = global ptr null
@70 = global ptr null
@fun_Core_bool_is_1_equals_else.236 = global ptr null
@71 = global ptr null
@fun_Core_bool_is_1_equals_else.238 = global ptr null
@72 = global ptr null
@fun_Core_function_is0_11 = global ptr null
@fun_Core_bool_lazyAnd_18_equals_then = global ptr null
@fun_Core_bool_lazyAnd_18_equals_then.240 = global ptr null
@fun_Core_bool_lazyAnd_18_equals_else = global ptr null
@73 = global ptr null
@fun_Core_bool_lazyAnd_18_equals_else.242 = global ptr null
@74 = global ptr null
@fun_Core_bool_lazyAnd_18_equals_else.244 = global ptr null
@75 = global ptr null
@fun_Core_bool_lazyAnd_18_case-0_matched = global ptr null
@fun_Core_function_is0_11.246 = global ptr null
@fun_Core_bool_lazyAnd_18_case-0_didNotMatch = global ptr null
@fun_Core_bool_lazyAnd_18_equals_then.248 = global ptr null
@fun_Core_bool_lazyAnd_18_equals_then.250 = global ptr null
@fun_Core_bool_lazyAnd_18_equals_else.252 = global ptr null
@76 = global ptr null
@fun_Core_bool_lazyAnd_18_equals_else.254 = global ptr null
@77 = global ptr null
@fun_Core_bool_lazyAnd_18_equals_else.256 = global ptr null
@78 = global ptr null
@fun_Core_bool_lazyOr_18_case-1_didNotMatch = global ptr null
@fun_Core_bool_lazyOr = global ptr null
@fun_Core_bool_is_1_equals_then.258 = global ptr null
@fun_Core_bool_is_1_equals_then.260 = global ptr null
@fun_Core_bool_is_1_equals_else.262 = global ptr null
@79 = global ptr null
@fun_Core_bool_is_1_equals_else.264 = global ptr null
@80 = global ptr null
@fun_Core_bool_is_1_equals_else.266 = global ptr null
@81 = global ptr null
@fun_Core_bool_is_1_isMatch_then.268 = global ptr null
@fun_Core_bool_is_1_isMatch_else.270 = global ptr null
@fun_Core_bool_is_1_equals_then.272 = global ptr null
@fun_Core_bool_is_1_equals_then.274 = global ptr null
@fun_Core_bool_is_1_equals_else.276 = global ptr null
@82 = global ptr null
@fun_Core_bool_is_1_equals_else.278 = global ptr null
@83 = global ptr null
@fun_Core_bool_is_1_equals_else.280 = global ptr null
@84 = global ptr null
@fun_Core_function_is0_11.282 = global ptr null
@fun_Core_bool_lazyOr_18_equals_then = global ptr null
@fun_Core_bool_lazyOr_18_equals_then.284 = global ptr null
@fun_Core_bool_lazyOr_18_equals_else = global ptr null
@85 = global ptr null
@fun_Core_bool_lazyOr_18_equals_else.286 = global ptr null
@86 = global ptr null
@fun_Core_bool_lazyOr_18_equals_else.288 = global ptr null
@87 = global ptr null
@fun_Core_bool_lazyOr_18_case-0_didNotMatch = global ptr null
@fun_Core_bool_lazyOr_18_equals_then.290 = global ptr null
@fun_Core_bool_lazyOr_18_equals_then.292 = global ptr null
@fun_Core_bool_lazyOr_18_equals_else.294 = global ptr null
@88 = global ptr null
@fun_Core_bool_lazyOr_18_equals_else.296 = global ptr null
@89 = global ptr null
@fun_Core_bool_lazyOr_18_equals_else.298 = global ptr null
@90 = global ptr null
@fun_Core_bool_lazyOr_18_case-1_matched = global ptr null
@fun_Core_function_is0_11.300 = global ptr null
@fun_Core_bool_or = global ptr null
@fun_Core_bool_is_1_equals_then.302 = global ptr null
@fun_Core_bool_is_1_equals_then.304 = global ptr null
@fun_Core_bool_is_1_equals_else.306 = global ptr null
@91 = global ptr null
@fun_Core_bool_is_1_equals_else.308 = global ptr null
@92 = global ptr null
@fun_Core_bool_is_1_equals_else.310 = global ptr null
@93 = global ptr null
@fun_Core_bool_is_1_isMatch_then.312 = global ptr null
@fun_Core_bool_is_1_isMatch_else.314 = global ptr null
@fun_Core_bool_is_1_equals_then.316 = global ptr null
@fun_Core_bool_is_1_equals_then.318 = global ptr null
@fun_Core_bool_is_1_equals_else.320 = global ptr null
@94 = global ptr null
@fun_Core_bool_is_1_equals_else.322 = global ptr null
@95 = global ptr null
@fun_Core_bool_is_1_equals_else.324 = global ptr null
@96 = global ptr null
@fun_Core_bool_is_1_equals_then.326 = global ptr null
@fun_Core_bool_is_1_equals_then.328 = global ptr null
@fun_Core_bool_is_1_equals_else.330 = global ptr null
@97 = global ptr null
@fun_Core_bool_is_1_equals_else.332 = global ptr null
@98 = global ptr null
@fun_Core_bool_is_1_equals_else.334 = global ptr null
@99 = global ptr null
@fun_Core_bool_is_1_isMatch_then.336 = global ptr null
@fun_Core_bool_is_1_isMatch_else.338 = global ptr null
@fun_Core_bool_is_1_equals_then.340 = global ptr null
@fun_Core_bool_is_1_equals_then.342 = global ptr null
@fun_Core_bool_is_1_equals_else.344 = global ptr null
@100 = global ptr null
@fun_Core_bool_is_1_equals_else.346 = global ptr null
@101 = global ptr null
@fun_Core_bool_is_1_equals_else.348 = global ptr null
@102 = global ptr null
@fun_Core_bool_or_12 = global ptr null
@fun_Core_bool_implies = global ptr null
@fun_Core_bool_is_1_equals_then.350 = global ptr null
@fun_Core_bool_is_1_equals_then.352 = global ptr null
@fun_Core_bool_is_1_equals_else.354 = global ptr null
@103 = global ptr null
@fun_Core_bool_is_1_equals_else.356 = global ptr null
@104 = global ptr null
@fun_Core_bool_is_1_equals_else.358 = global ptr null
@105 = global ptr null
@fun_Core_bool_is_1_isMatch_then.360 = global ptr null
@fun_Core_bool_is_1_isMatch_else.362 = global ptr null
@fun_Core_bool_is_1_equals_then.364 = global ptr null
@fun_Core_bool_is_1_equals_then.366 = global ptr null
@fun_Core_bool_is_1_equals_else.368 = global ptr null
@106 = global ptr null
@fun_Core_bool_is_1_equals_else.370 = global ptr null
@107 = global ptr null
@fun_Core_bool_is_1_equals_else.372 = global ptr null
@108 = global ptr null
@fun_Core_bool_is_1_equals_then.374 = global ptr null
@fun_Core_bool_is_1_equals_then.376 = global ptr null
@fun_Core_bool_is_1_equals_else.378 = global ptr null
@109 = global ptr null
@fun_Core_bool_is_1_equals_else.380 = global ptr null
@110 = global ptr null
@fun_Core_bool_is_1_equals_else.382 = global ptr null
@111 = global ptr null
@fun_Core_bool_is_1_isMatch_then.384 = global ptr null
@fun_Core_bool_is_1_isMatch_else.386 = global ptr null
@fun_Core_bool_is_1_equals_then.388 = global ptr null
@fun_Core_bool_is_1_equals_then.390 = global ptr null
@fun_Core_bool_is_1_equals_else.392 = global ptr null
@112 = global ptr null
@fun_Core_bool_is_1_equals_else.394 = global ptr null
@113 = global ptr null
@fun_Core_bool_is_1_equals_else.396 = global ptr null
@114 = global ptr null
@fun_Core_bool_is_1_isMatch_then.398 = global ptr null
@fun_Core_bool_not_6_equals_then.400 = global ptr null
@fun_Core_bool_not_6_equals_then.402 = global ptr null
@fun_Core_bool_not_6_equals_else.404 = global ptr null
@115 = global ptr null
@fun_Core_bool_not_6_equals_else.406 = global ptr null
@116 = global ptr null
@fun_Core_bool_not_6_equals_else.408 = global ptr null
@117 = global ptr null
@fun_Core_bool_not_6_case-0_didNotMatch.410 = global ptr null
@fun_Core_bool_not_6_equals_then.412 = global ptr null
@fun_Core_bool_not_6_equals_then.414 = global ptr null
@fun_Core_bool_not_6_equals_else.416 = global ptr null
@118 = global ptr null
@fun_Core_bool_not_6_equals_else.418 = global ptr null
@119 = global ptr null
@fun_Core_bool_not_6_equals_else.420 = global ptr null
@120 = global ptr null
@"fun_anonymous_$generated__needs_isConditionBool_else.422" = global ptr null
@fun_Core_check_check = global ptr null
@fun_Core_check_check_1_equals_then = global ptr null
@fun_Core_check_check_1_equals_then.424 = global ptr null
@fun_Core_check_check_1_equals_else = global ptr null
@121 = global ptr null
@fun_Core_check_check_1_equals_else.426 = global ptr null
@122 = global ptr null
@fun_Core_check_check_1_equals_else.428 = global ptr null
@123 = global ptr null
@fun_Core_check_check_1_isMatch_then = global ptr null
@fun_Core_check_check_1_isMatch_else = global ptr null
@fun_Core_check_check_1_equals_then.430 = global ptr null
@fun_Core_check_check_1_equals_then.432 = global ptr null
@fun_Core_check_check_1_equals_else.434 = global ptr null
@124 = global ptr null
@fun_Core_check_check_1_equals_else.436 = global ptr null
@125 = global ptr null
@fun_Core_check_check_1_equals_else.438 = global ptr null
@126 = global ptr null
@"fun_anonymous_$generated__needs_isConditionTrue_else.440" = global ptr null
@"fun_anonymous_$generated__needs_condition_else.442" = global ptr null
@fun_Core_controlFlow_recursive = global ptr null
@fun_Core_function_is2_11 = global ptr null
@fun_Core_controlFlow_recursive_18 = global ptr null
@fun_Core_controlFlow_recursive_18_0 = global ptr null
@fun_Core_function_run = global ptr null
@fun_Core_function_is0_11.444 = global ptr null
@fun_Core_int_compareTo = global ptr null
@fun_Core_int_isLessThan = global ptr null
@fun_Core_int_isGreaterThan = global ptr null
@fun_Core_int_isNonNegative = global ptr null
@fun_Core_int_isEven = global ptr null
@fun_Core_int_max = global ptr null
@fun_Core_int_max_15 = global ptr null
@fun_Core_int_max_16 = global ptr null
@fun_Core_int_pow_21_4_case-0_matched = global ptr null
@fun_Core_int_pow_21 = global ptr null
@fun_Core_int_pow_21_1_equals_then = global ptr null
@fun_Core_int_pow_21_1_hasKey_then = global ptr null
@127 = global ptr null
@fun_Core_int_pow_21_1_hasKey_else = global ptr null
@128 = global ptr null
@fun_Core_int_pow_21_1_isMatch_then = global ptr null
@fun_Core_int_pow_21_1_hasKey_then.446 = global ptr null
@129 = global ptr null
@fun_Core_int_pow_21_1_hasKey_else.448 = global ptr null
@130 = global ptr null
@fun_Core_int_pow_21_1_isMatch_then.450 = global ptr null
@131 = global ptr null
@fun_Core_int_pow_21_1_isMatch_else = global ptr null
@fun_Core_int_pow_21_1_isMatch_else.452 = global ptr null
@fun_Core_int_pow_21_1_equals_else = global ptr null
@132 = global ptr null
@fun_Core_int_pow_21_1_isMatch_else.454 = global ptr null
@fun_Core_int_pow_21_4_equals_else = global ptr null
@133 = global ptr null
@fun_Core_int_pow_21_4_case-0_didNotMatch = global ptr null
@fun_Core_int_pow_21_4_5 = global ptr null
@fun_Core_int_pow_21_4_6 = global ptr null
@fun_Core_text_removePrefix = global ptr null
@fun_Core_text_removePrefix_15 = global ptr null
@fun_Core_text_removePrefix_16 = global ptr null
@fun_Core_fixedDecimal_isScale = global ptr null
@fun_Core_fixedDecimal_isScale_18 = global ptr null
@fun_Core_fixedDecimal_scaleFactor = global ptr null
@fun_Core_fixedDecimal_isScale_18.456 = global ptr null
@134 = global ptr null
@"fun_Core_fixedDecimal_is_1_equals_else, Core_result_is_1_equals_else, Core_result_mapOrElse_30_equals_else" = global ptr null
@fun_Core_fixedDecimal_fromIntScaled = global ptr null
@fun_Core_fixedDecimal_isScale_18.458 = global ptr null
@tag_FixedDecimal.459 = global ptr null
@fun_Core_fixedDecimal_rescaledMinorUnits = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.461 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.463 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.465 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then = global ptr null
@135 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else = global ptr null
@136 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.467 = global ptr null
@137 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.469 = global ptr null
@138 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.471 = global ptr null
@139 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.473 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else = global ptr null
@140 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.475 = global ptr null
@141 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.477 = global ptr null
@142 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched = global ptr null
@fun_Core_fixedDecimal_is_1_18 = global ptr null
@fun_Core_fixedDecimal_isScale_18.479 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.481 = global ptr null
@fun_Core_fixedDecimal_is_1_18.483 = global ptr null
@fun_Core_fixedDecimal_rescaledMinorUnits_24 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.485 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.487 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.489 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.491 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.493 = global ptr null
@143 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.495 = global ptr null
@144 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.497 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.499 = global ptr null
@145 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.501 = global ptr null
@146 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.503 = global ptr null
@147 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.505 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.507 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.509 = global ptr null
@148 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.511 = global ptr null
@149 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.513 = global ptr null
@150 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.515 = global ptr null
@fun_Core_fixedDecimal_is_1_18.517 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.519 = global ptr null
@fun_Core_fixedDecimal_is_1_18.521 = global ptr null
@fun_Core_fixedDecimal_rescaledMinorUnits_25 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.523 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.525 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.527 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.529 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.531 = global ptr null
@151 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.533 = global ptr null
@152 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.535 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.537 = global ptr null
@153 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.539 = global ptr null
@154 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.541 = global ptr null
@155 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.543 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.545 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.547 = global ptr null
@156 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.549 = global ptr null
@157 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.551 = global ptr null
@158 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.553 = global ptr null
@fun_Core_fixedDecimal_is_1_18.555 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.557 = global ptr null
@fun_Core_fixedDecimal_is_1_18.559 = global ptr null
@fun_Core_fixedDecimal_add = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.561 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.563 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.565 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.567 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.569 = global ptr null
@159 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.571 = global ptr null
@160 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.573 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.575 = global ptr null
@161 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.577 = global ptr null
@162 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.579 = global ptr null
@163 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.581 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.583 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.585 = global ptr null
@164 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.587 = global ptr null
@165 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.589 = global ptr null
@166 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.591 = global ptr null
@fun_Core_fixedDecimal_is_1_18.593 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.595 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.597 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.599 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.601 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.603 = global ptr null
@167 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.605 = global ptr null
@168 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.607 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.609 = global ptr null
@169 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.611 = global ptr null
@170 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.613 = global ptr null
@171 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.615 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.617 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.619 = global ptr null
@172 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.621 = global ptr null
@173 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.623 = global ptr null
@174 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.625 = global ptr null
@fun_Core_fixedDecimal_is_1_18.627 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.629 = global ptr null
@fun_Core_fixedDecimal_is_1_18.631 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.633 = global ptr null
@fun_Core_fixedDecimal_is_1_18.635 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.637 = global ptr null
@fun_Core_fixedDecimal_is_1_18.639 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.641 = global ptr null
@fun_Core_fixedDecimal_is_1_18.643 = global ptr null
@fun_Core_fixedDecimal_divideTruncatingAtScale = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.645 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.647 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.649 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.651 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.653 = global ptr null
@175 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.655 = global ptr null
@176 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.657 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.659 = global ptr null
@177 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.661 = global ptr null
@178 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.663 = global ptr null
@179 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.665 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.667 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.669 = global ptr null
@180 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.671 = global ptr null
@181 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.673 = global ptr null
@182 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.675 = global ptr null
@fun_Core_fixedDecimal_is_1_18.677 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.679 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.681 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.683 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.685 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.687 = global ptr null
@183 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.689 = global ptr null
@184 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.691 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.693 = global ptr null
@185 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.695 = global ptr null
@186 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.697 = global ptr null
@187 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.699 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.701 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.703 = global ptr null
@188 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.705 = global ptr null
@189 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.707 = global ptr null
@190 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.709 = global ptr null
@fun_Core_fixedDecimal_is_1_18.711 = global ptr null
@fun_Core_fixedDecimal_isScale_18.713 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.715 = global ptr null
@fun_Core_fixedDecimal_is_1_18.717 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.719 = global ptr null
@fun_Core_fixedDecimal_is_1_18.721 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.723 = global ptr null
@fun_Core_fixedDecimal_is_1_18.725 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.727 = global ptr null
@fun_Core_fixedDecimal_is_1_18.729 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.731 = global ptr null
@fun_Core_fixedDecimal_is_1_18.733 = global ptr null
@fun_Core_fixedDecimal_isLessThanOrEqualTo = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.735 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.737 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.739 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.741 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.743 = global ptr null
@191 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.745 = global ptr null
@192 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.747 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.749 = global ptr null
@193 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.751 = global ptr null
@194 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.753 = global ptr null
@195 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.755 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.757 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.759 = global ptr null
@196 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.761 = global ptr null
@197 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.763 = global ptr null
@198 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.765 = global ptr null
@fun_Core_fixedDecimal_is_1_18.767 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.769 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.771 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.773 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.775 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.777 = global ptr null
@199 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.779 = global ptr null
@200 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.781 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.783 = global ptr null
@201 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.785 = global ptr null
@202 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.787 = global ptr null
@203 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.789 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.791 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.793 = global ptr null
@204 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.795 = global ptr null
@205 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.797 = global ptr null
@206 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.799 = global ptr null
@fun_Core_fixedDecimal_is_1_18.801 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.803 = global ptr null
@fun_Core_fixedDecimal_is_1_18.805 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.807 = global ptr null
@fun_Core_fixedDecimal_is_1_18.809 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.811 = global ptr null
@fun_Core_fixedDecimal_is_1_18.813 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.815 = global ptr null
@fun_Core_fixedDecimal_is_1_18.817 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.819 = global ptr null
@fun_Core_fixedDecimal_is_1_18.821 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.823 = global ptr null
@fun_Core_fixedDecimal_is_1_18.825 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.827 = global ptr null
@fun_Core_fixedDecimal_is_1_18.829 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.831 = global ptr null
@fun_Core_fixedDecimal_is_1_18.833 = global ptr null
@fun_Core_fixedDecimal_absolute = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.835 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.837 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.839 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.841 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.843 = global ptr null
@207 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.845 = global ptr null
@208 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.847 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.849 = global ptr null
@209 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.851 = global ptr null
@210 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.853 = global ptr null
@211 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.855 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.857 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.859 = global ptr null
@212 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.861 = global ptr null
@213 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.863 = global ptr null
@214 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.865 = global ptr null
@fun_Core_fixedDecimal_is_1_18.867 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.869 = global ptr null
@fun_Core_fixedDecimal_is_1_18.871 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.873 = global ptr null
@fun_Core_fixedDecimal_is_1_18.875 = global ptr null
@fun_Core_fixedDecimal_absolute_9 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.877 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.879 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.881 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.883 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.885 = global ptr null
@215 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.887 = global ptr null
@216 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.889 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.891 = global ptr null
@217 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.893 = global ptr null
@218 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.895 = global ptr null
@219 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.897 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.899 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.901 = global ptr null
@220 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.903 = global ptr null
@221 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.905 = global ptr null
@222 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.907 = global ptr null
@fun_Core_fixedDecimal_is_1_18.909 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.911 = global ptr null
@fun_Core_fixedDecimal_is_1_18.913 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.915 = global ptr null
@fun_Core_fixedDecimal_is_1_18.917 = global ptr null
@fun_Core_fixedDecimal_absolute_10 = global ptr null
@fun_Core_fixedDecimal_approxEquals = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.919 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.921 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.923 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.925 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.927 = global ptr null
@223 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.929 = global ptr null
@224 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.931 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.933 = global ptr null
@225 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.935 = global ptr null
@226 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.937 = global ptr null
@227 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.939 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.941 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.943 = global ptr null
@228 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.945 = global ptr null
@229 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.947 = global ptr null
@230 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.949 = global ptr null
@fun_Core_fixedDecimal_is_1_18.951 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.953 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.955 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.957 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.959 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.961 = global ptr null
@231 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.963 = global ptr null
@232 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.965 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.967 = global ptr null
@233 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.969 = global ptr null
@234 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.971 = global ptr null
@235 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.973 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.975 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.977 = global ptr null
@236 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.979 = global ptr null
@237 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.981 = global ptr null
@238 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.983 = global ptr null
@fun_Core_fixedDecimal_is_1_18.985 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.987 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.989 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.991 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.993 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.995 = global ptr null
@239 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.997 = global ptr null
@240 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.999 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.1001 = global ptr null
@241 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.1003 = global ptr null
@242 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.1005 = global ptr null
@243 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.1007 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.1009 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.1011 = global ptr null
@244 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.1013 = global ptr null
@245 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.1015 = global ptr null
@246 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.1017 = global ptr null
@fun_Core_fixedDecimal_is_1_18.1019 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.1021 = global ptr null
@fun_Core_fixedDecimal_is_1_18.1023 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.1025 = global ptr null
@fun_Core_fixedDecimal_is_1_18.1027 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.1029 = global ptr null
@fun_Core_fixedDecimal_is_1_18.1031 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.1033 = global ptr null
@fun_Core_fixedDecimal_is_1_18.1035 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.1037 = global ptr null
@fun_Core_fixedDecimal_is_1_18.1039 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.1041 = global ptr null
@fun_Core_fixedDecimal_is_1_18.1043 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.1045 = global ptr null
@fun_Core_fixedDecimal_is_1_18.1047 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.1049 = global ptr null
@fun_Core_fixedDecimal_is_1_18.1051 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.1053 = global ptr null
@fun_Core_fixedDecimal_is_1_18.1055 = global ptr null
@fun_Core_fixedDecimal_toText = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.1057 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.1059 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.1061 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.1063 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.1065 = global ptr null
@247 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.1067 = global ptr null
@248 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.1069 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.1071 = global ptr null
@249 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.1073 = global ptr null
@250 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.1075 = global ptr null
@251 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.1077 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.1079 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.1081 = global ptr null
@252 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.1083 = global ptr null
@253 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.1085 = global ptr null
@254 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.1087 = global ptr null
@fun_Core_fixedDecimal_is_1_18.1089 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.1091 = global ptr null
@fun_Core_fixedDecimal_is_1_18.1093 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.1095 = global ptr null
@fun_Core_fixedDecimal_is_1_18.1097 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.1099 = global ptr null
@fun_Core_fixedDecimal_is_1_18.1101 = global ptr null
@fun_Core_fixedDecimal_toText_10 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.1103 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.1105 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.1107 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.1109 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.1111 = global ptr null
@255 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.1113 = global ptr null
@256 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.1115 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.1117 = global ptr null
@257 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.1119 = global ptr null
@258 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.1121 = global ptr null
@259 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.1123 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.1125 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.1127 = global ptr null
@260 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.1129 = global ptr null
@261 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.1131 = global ptr null
@262 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.1133 = global ptr null
@fun_Core_fixedDecimal_is_1_18.1135 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.1137 = global ptr null
@fun_Core_fixedDecimal_is_1_18.1139 = global ptr null
@fun_Core_fixedDecimal_toText_10_31 = global ptr null
@fun_Core_fixedDecimal_toText_10_32 = global ptr null
@fun_Core_fixedDecimal_toText_22 = global ptr null
@fun_Core_fixedDecimal_toText_23 = global ptr null
@fun_Core_fixedDecimal_toText_29 = global ptr null
@fun_Core_fixedDecimal_toText_30 = global ptr null
@tag_FixedDecimal.1140 = global ptr null
@tag_FixedDecimal.1141 = global ptr null
@fun_Core_controlFlow_recursive_18.1143 = global ptr null
@fun_Core_controlFlow_recursive_18_0.1145 = global ptr null
@fun_Examples_sqrt_sqrt_82 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.1147 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.1149 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.1151 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_then.1153 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.1155 = global ptr null
@263 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.1157 = global ptr null
@264 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.1159 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_then.1161 = global ptr null
@265 = global ptr null
@fun_Core_fixedDecimal_is_1_hasKey_else.1163 = global ptr null
@266 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_then.1165 = global ptr null
@267 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.1167 = global ptr null
@fun_Core_fixedDecimal_is_1_isMatch_else.1169 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.1171 = global ptr null
@268 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.1173 = global ptr null
@269 = global ptr null
@fun_Core_fixedDecimal_is_1_equals_else.1175 = global ptr null
@270 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.1177 = global ptr null
@fun_Core_fixedDecimal_is_1_18.1179 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.1181 = global ptr null
@fun_Core_fixedDecimal_is_1_18.1183 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.1185 = global ptr null
@fun_Core_fixedDecimal_is_1_18.1187 = global ptr null
@fun_Core_fixedDecimal_is_1_case-0_matched.1189 = global ptr null
@fun_Core_fixedDecimal_is_1_18.1191 = global ptr null
@fun_Examples_sqrt_sqrt_82_56 = global ptr null
@fun_Examples_sqrt_sqrt_82_57 = global ptr null
@fun_Examples_sqrt_main = global ptr null
@fun_Examples_sqrt_main_50 = global ptr null
@fun_Examples_sqrt_main_51 = global ptr null
@candy_environment = external global ptr

declare ptr @make_candy_int(i64)

declare ptr @make_candy_tag(ptr, ptr)

declare ptr @make_candy_text(ptr)

declare ptr @make_candy_list(ptr)

declare ptr @make_candy_function(ptr, ptr, i64)

declare ptr @make_candy_struct(ptr, ptr)

declare void @candy_panic(ptr)

declare void @free_candy_value(ptr)

declare void @print_candy_value(ptr)

declare ptr @get_candy_function_pointer(ptr)

declare ptr @get_candy_function_environment(ptr)

define i32 @main() {
entry:
  %0 = alloca i8, i64 19, align 1
  store [19 x i8] c"Builtins::equals:6\00", ptr %0, align 1
  %1 = call ptr @make_candy_text(ptr %0)
  store ptr %1, ptr @"Builtins::equals:6", align 8
  %2 = alloca i8, i64 28, align 1
  store [28 x i8] c"Builtins::fitsInRustU128:10\00", ptr %2, align 1
  %3 = call ptr @make_candy_text(ptr %2)
  store ptr %3, ptr @"Builtins::fitsInRustU128:10", align 8
  %4 = alloca i8, i64 28, align 1
  store [28 x i8] c"Builtins::fitsInRustU128:16\00", ptr %4, align 1
  %5 = call ptr @make_candy_text(ptr %4)
  store ptr %5, ptr @"Builtins::fitsInRustU128:16", align 8
  %6 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::fitsInRustU128:5\00", ptr %6, align 1
  %7 = call ptr @make_candy_text(ptr %6)
  store ptr %7, ptr @"Builtins::fitsInRustU128:5", align 8
  %8 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::fitsInRustU128:8\00", ptr %8, align 1
  %9 = call ptr @make_candy_text(ptr %8)
  store ptr %9, ptr @"Builtins::fitsInRustU128:8", align 8
  %10 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::functionRun:11\00", ptr %10, align 1
  %11 = call ptr @make_candy_text(ptr %10)
  store ptr %11, ptr @"Builtins::functionRun:11", align 8
  %12 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::functionRun:16\00", ptr %12, align 1
  %13 = call ptr @make_candy_text(ptr %12)
  store ptr %13, ptr @"Builtins::functionRun:16", align 8
  %14 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::functionRun:22\00", ptr %14, align 1
  %15 = call ptr @make_candy_text(ptr %14)
  store ptr %15, ptr @"Builtins::functionRun:22", align 8
  %16 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::functionRun:5\00", ptr %16, align 1
  %17 = call ptr @make_candy_text(ptr %16)
  store ptr %17, ptr @"Builtins::functionRun:5", align 8
  %18 = alloca i8, i64 30, align 1
  store [30 x i8] c"Builtins::getArgumentCount:11\00", ptr %18, align 1
  %19 = call ptr @make_candy_text(ptr %18)
  store ptr %19, ptr @"Builtins::getArgumentCount:11", align 8
  %20 = alloca i8, i64 29, align 1
  store [29 x i8] c"Builtins::getArgumentCount:5\00", ptr %20, align 1
  %21 = call ptr @make_candy_text(ptr %20)
  store ptr %21, ptr @"Builtins::getArgumentCount:5", align 8
  %22 = alloca i8, i64 19, align 1
  store [19 x i8] c"Builtins::ifElse:1\00", ptr %22, align 1
  %23 = call ptr @make_candy_text(ptr %22)
  store ptr %23, ptr @"Builtins::ifElse:1", align 8
  %24 = alloca i8, i64 20, align 1
  store [20 x i8] c"Builtins::ifElse:11\00", ptr %24, align 1
  %25 = call ptr @make_candy_text(ptr %24)
  store ptr %25, ptr @"Builtins::ifElse:11", align 8
  %26 = alloca i8, i64 20, align 1
  store [20 x i8] c"Builtins::ifElse:14\00", ptr %26, align 1
  %27 = call ptr @make_candy_text(ptr %26)
  store ptr %27, ptr @"Builtins::ifElse:14", align 8
  %28 = alloca i8, i64 20, align 1
  store [20 x i8] c"Builtins::ifElse:19\00", ptr %28, align 1
  %29 = call ptr @make_candy_text(ptr %28)
  store ptr %29, ptr @"Builtins::ifElse:19", align 8
  %30 = alloca i8, i64 20, align 1
  store [20 x i8] c"Builtins::ifElse:25\00", ptr %30, align 1
  %31 = call ptr @make_candy_text(ptr %30)
  store ptr %31, ptr @"Builtins::ifElse:25", align 8
  %32 = alloca i8, i64 20, align 1
  store [20 x i8] c"Builtins::ifElse:28\00", ptr %32, align 1
  %33 = call ptr @make_candy_text(ptr %32)
  store ptr %33, ptr @"Builtins::ifElse:28", align 8
  %34 = alloca i8, i64 20, align 1
  store [20 x i8] c"Builtins::ifElse:33\00", ptr %34, align 1
  %35 = call ptr @make_candy_text(ptr %34)
  store ptr %35, ptr @"Builtins::ifElse:33", align 8
  %36 = alloca i8, i64 20, align 1
  store [20 x i8] c"Builtins::ifElse:41\00", ptr %36, align 1
  %37 = call ptr @make_candy_text(ptr %36)
  store ptr %37, ptr @"Builtins::ifElse:41", align 8
  %38 = alloca i8, i64 19, align 1
  store [19 x i8] c"Builtins::ifElse:5\00", ptr %38, align 1
  %39 = call ptr @make_candy_text(ptr %38)
  store ptr %39, ptr @"Builtins::ifElse:5", align 8
  %40 = alloca i8, i64 20, align 1
  store [20 x i8] c"Builtins::intAdd:11\00", ptr %40, align 1
  %41 = call ptr @make_candy_text(ptr %40)
  store ptr %41, ptr @"Builtins::intAdd:11", align 8
  %42 = alloca i8, i64 20, align 1
  store [20 x i8] c"Builtins::intAdd:18\00", ptr %42, align 1
  %43 = call ptr @make_candy_text(ptr %42)
  store ptr %43, ptr @"Builtins::intAdd:18", align 8
  %44 = alloca i8, i64 19, align 1
  store [19 x i8] c"Builtins::intAdd:5\00", ptr %44, align 1
  %45 = call ptr @make_candy_text(ptr %44)
  store ptr %45, ptr @"Builtins::intAdd:5", align 8
  %46 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intBitwiseAnd:18\00", ptr %46, align 1
  %47 = call ptr @make_candy_text(ptr %46)
  store ptr %47, ptr @"Builtins::intBitwiseAnd:18", align 8
  %48 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intBitwiseAnd:5\00", ptr %48, align 1
  %49 = call ptr @make_candy_text(ptr %48)
  store ptr %49, ptr @"Builtins::intBitwiseAnd:5", align 8
  %50 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intCompareTo:11\00", ptr %50, align 1
  %51 = call ptr @make_candy_text(ptr %50)
  store ptr %51, ptr @"Builtins::intCompareTo:11", align 8
  %52 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intCompareTo:18\00", ptr %52, align 1
  %53 = call ptr @make_candy_text(ptr %52)
  store ptr %53, ptr @"Builtins::intCompareTo:18", align 8
  %54 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::intCompareTo:5\00", ptr %54, align 1
  %55 = call ptr @make_candy_text(ptr %54)
  store ptr %55, ptr @"Builtins::intCompareTo:5", align 8
  %56 = alloca i8, i64 33, align 1
  store [33 x i8] c"Builtins::intDivideTruncating:11\00", ptr %56, align 1
  %57 = call ptr @make_candy_text(ptr %56)
  store ptr %57, ptr @"Builtins::intDivideTruncating:11", align 8
  %58 = alloca i8, i64 33, align 1
  store [33 x i8] c"Builtins::intDivideTruncating:17\00", ptr %58, align 1
  %59 = call ptr @make_candy_text(ptr %58)
  store ptr %59, ptr @"Builtins::intDivideTruncating:17", align 8
  %60 = alloca i8, i64 33, align 1
  store [33 x i8] c"Builtins::intDivideTruncating:25\00", ptr %60, align 1
  %61 = call ptr @make_candy_text(ptr %60)
  store ptr %61, ptr @"Builtins::intDivideTruncating:25", align 8
  %62 = alloca i8, i64 33, align 1
  store [33 x i8] c"Builtins::intDivideTruncating:32\00", ptr %62, align 1
  %63 = call ptr @make_candy_text(ptr %62)
  store ptr %63, ptr @"Builtins::intDivideTruncating:32", align 8
  %64 = alloca i8, i64 32, align 1
  store [32 x i8] c"Builtins::intDivideTruncating:5\00", ptr %64, align 1
  %65 = call ptr @make_candy_text(ptr %64)
  store ptr %65, ptr @"Builtins::intDivideTruncating:5", align 8
  %66 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::intMultiply:11\00", ptr %66, align 1
  %67 = call ptr @make_candy_text(ptr %66)
  store ptr %67, ptr @"Builtins::intMultiply:11", align 8
  %68 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::intMultiply:18\00", ptr %68, align 1
  %69 = call ptr @make_candy_text(ptr %68)
  store ptr %69, ptr @"Builtins::intMultiply:18", align 8
  %70 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::intMultiply:5\00", ptr %70, align 1
  %71 = call ptr @make_candy_text(ptr %70)
  store ptr %71, ptr @"Builtins::intMultiply:5", align 8
  %72 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intRemainder:11\00", ptr %72, align 1
  %73 = call ptr @make_candy_text(ptr %72)
  store ptr %73, ptr @"Builtins::intRemainder:11", align 8
  %74 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intRemainder:17\00", ptr %74, align 1
  %75 = call ptr @make_candy_text(ptr %74)
  store ptr %75, ptr @"Builtins::intRemainder:17", align 8
  %76 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intRemainder:25\00", ptr %76, align 1
  %77 = call ptr @make_candy_text(ptr %76)
  store ptr %77, ptr @"Builtins::intRemainder:25", align 8
  %78 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intRemainder:32\00", ptr %78, align 1
  %79 = call ptr @make_candy_text(ptr %78)
  store ptr %79, ptr @"Builtins::intRemainder:32", align 8
  %80 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::intRemainder:5\00", ptr %80, align 1
  %81 = call ptr @make_candy_text(ptr %80)
  store ptr %81, ptr @"Builtins::intRemainder:5", align 8
  %82 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intShiftRight:11\00", ptr %82, align 1
  %83 = call ptr @make_candy_text(ptr %82)
  store ptr %83, ptr @"Builtins::intShiftRight:11", align 8
  %84 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intShiftRight:14\00", ptr %84, align 1
  %85 = call ptr @make_candy_text(ptr %84)
  store ptr %85, ptr @"Builtins::intShiftRight:14", align 8
  %86 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intShiftRight:23\00", ptr %86, align 1
  %87 = call ptr @make_candy_text(ptr %86)
  store ptr %87, ptr @"Builtins::intShiftRight:23", align 8
  %88 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intShiftRight:24\00", ptr %88, align 1
  %89 = call ptr @make_candy_text(ptr %88)
  store ptr %89, ptr @"Builtins::intShiftRight:24", align 8
  %90 = alloca i8, i64 29, align 1
  store [29 x i8] c"Builtins::intShiftRight:26:0\00", ptr %90, align 1
  %91 = call ptr @make_candy_text(ptr %90)
  store ptr %91, ptr @"Builtins::intShiftRight:26:0", align 8
  %92 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intShiftRight:27\00", ptr %92, align 1
  %93 = call ptr @make_candy_text(ptr %92)
  store ptr %93, ptr @"Builtins::intShiftRight:27", align 8
  %94 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intShiftRight:29\00", ptr %94, align 1
  %95 = call ptr @make_candy_text(ptr %94)
  store ptr %95, ptr @"Builtins::intShiftRight:29", align 8
  %96 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intShiftRight:30\00", ptr %96, align 1
  %97 = call ptr @make_candy_text(ptr %96)
  store ptr %97, ptr @"Builtins::intShiftRight:30", align 8
  %98 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intShiftRight:31\00", ptr %98, align 1
  %99 = call ptr @make_candy_text(ptr %98)
  store ptr %99, ptr @"Builtins::intShiftRight:31", align 8
  %100 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intShiftRight:34\00", ptr %100, align 1
  %101 = call ptr @make_candy_text(ptr %100)
  store ptr %101, ptr @"Builtins::intShiftRight:34", align 8
  %102 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intShiftRight:42\00", ptr %102, align 1
  %103 = call ptr @make_candy_text(ptr %102)
  store ptr %103, ptr @"Builtins::intShiftRight:42", align 8
  %104 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::intShiftRight:49\00", ptr %104, align 1
  %105 = call ptr @make_candy_text(ptr %104)
  store ptr %105, ptr @"Builtins::intShiftRight:49", align 8
  %106 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::intShiftRight:5\00", ptr %106, align 1
  %107 = call ptr @make_candy_text(ptr %106)
  store ptr %107, ptr @"Builtins::intShiftRight:5", align 8
  %108 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::intSubtract:11\00", ptr %108, align 1
  %109 = call ptr @make_candy_text(ptr %108)
  store ptr %109, ptr @"Builtins::intSubtract:11", align 8
  %110 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::intSubtract:18\00", ptr %110, align 1
  %111 = call ptr @make_candy_text(ptr %110)
  store ptr %111, ptr @"Builtins::intSubtract:18", align 8
  %112 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::intSubtract:5\00", ptr %112, align 1
  %113 = call ptr @make_candy_text(ptr %112)
  store ptr %113, ptr @"Builtins::intSubtract:5", align 8
  %114 = alloca i8, i64 33, align 1
  store [33 x i8] c"Builtins::isLessThanOrEqualTo:11\00", ptr %114, align 1
  %115 = call ptr @make_candy_text(ptr %114)
  store ptr %115, ptr @"Builtins::isLessThanOrEqualTo:11", align 8
  %116 = alloca i8, i64 33, align 1
  store [33 x i8] c"Builtins::isLessThanOrEqualTo:18\00", ptr %116, align 1
  %117 = call ptr @make_candy_text(ptr %116)
  store ptr %117, ptr @"Builtins::isLessThanOrEqualTo:18", align 8
  %118 = alloca i8, i64 33, align 1
  store [33 x i8] c"Builtins::isLessThanOrEqualTo:19\00", ptr %118, align 1
  %119 = call ptr @make_candy_text(ptr %118)
  store ptr %119, ptr @"Builtins::isLessThanOrEqualTo:19", align 8
  %120 = alloca i8, i64 32, align 1
  store [32 x i8] c"Builtins::isLessThanOrEqualTo:5\00", ptr %120, align 1
  %121 = call ptr @make_candy_text(ptr %120)
  store ptr %121, ptr @"Builtins::isLessThanOrEqualTo:5", align 8
  %122 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::isNonNegative:12\00", ptr %122, align 1
  %123 = call ptr @make_candy_text(ptr %122)
  store ptr %123, ptr @"Builtins::isNonNegative:12", align 8
  %124 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::isNonNegative:13\00", ptr %124, align 1
  %125 = call ptr @make_candy_text(ptr %124)
  store ptr %125, ptr @"Builtins::isNonNegative:13", align 8
  %126 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::isNonNegative:5\00", ptr %126, align 1
  %127 = call ptr @make_candy_text(ptr %126)
  store ptr %127, ptr @"Builtins::isNonNegative:5", align 8
  %128 = alloca i8, i64 16, align 1
  store [16 x i8] c"Builtins::not:1\00", ptr %128, align 1
  %129 = call ptr @make_candy_text(ptr %128)
  store ptr %129, ptr @"Builtins::not:1", align 8
  %130 = alloca i8, i64 19, align 1
  store [19 x i8] c"Builtins::print:11\00", ptr %130, align 1
  %131 = call ptr @make_candy_text(ptr %130)
  store ptr %131, ptr @"Builtins::print:11", align 8
  %132 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::structGet:12\00", ptr %132, align 1
  %133 = call ptr @make_candy_text(ptr %132)
  store ptr %133, ptr @"Builtins::structGet:12", align 8
  %134 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::structGet:14\00", ptr %134, align 1
  %135 = call ptr @make_candy_text(ptr %134)
  store ptr %135, ptr @"Builtins::structGet:14", align 8
  %136 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::structGet:21\00", ptr %136, align 1
  %137 = call ptr @make_candy_text(ptr %136)
  store ptr %137, ptr @"Builtins::structGet:21", align 8
  %138 = alloca i8, i64 22, align 1
  store [22 x i8] c"Builtins::structGet:5\00", ptr %138, align 1
  %139 = call ptr @make_candy_text(ptr %138)
  store ptr %139, ptr @"Builtins::structGet:5", align 8
  %140 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::tagGetValue:11\00", ptr %140, align 1
  %141 = call ptr @make_candy_text(ptr %140)
  store ptr %141, ptr @"Builtins::tagGetValue:11", align 8
  %142 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::tagGetValue:13\00", ptr %142, align 1
  %143 = call ptr @make_candy_text(ptr %142)
  store ptr %143, ptr @"Builtins::tagGetValue:13", align 8
  %144 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::tagGetValue:19\00", ptr %144, align 1
  %145 = call ptr @make_candy_text(ptr %144)
  store ptr %145, ptr @"Builtins::tagGetValue:19", align 8
  %146 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::tagGetValue:5\00", ptr %146, align 1
  %147 = call ptr @make_candy_text(ptr %146)
  store ptr %147, ptr @"Builtins::tagGetValue:5", align 8
  %148 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:11\00", ptr %148, align 1
  %149 = call ptr @make_candy_text(ptr %148)
  store ptr %149, ptr @"Builtins::textGetRange:11", align 8
  %150 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:14\00", ptr %150, align 1
  %151 = call ptr @make_candy_text(ptr %150)
  store ptr %151, ptr @"Builtins::textGetRange:14", align 8
  %152 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:16\00", ptr %152, align 1
  %153 = call ptr @make_candy_text(ptr %152)
  store ptr %153, ptr @"Builtins::textGetRange:16", align 8
  %154 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:24\00", ptr %154, align 1
  %155 = call ptr @make_candy_text(ptr %154)
  store ptr %155, ptr @"Builtins::textGetRange:24", align 8
  %156 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:25\00", ptr %156, align 1
  %157 = call ptr @make_candy_text(ptr %156)
  store ptr %157, ptr @"Builtins::textGetRange:25", align 8
  %158 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:27\00", ptr %158, align 1
  %159 = call ptr @make_candy_text(ptr %158)
  store ptr %159, ptr @"Builtins::textGetRange:27", align 8
  %160 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:33\00", ptr %160, align 1
  %161 = call ptr @make_candy_text(ptr %160)
  store ptr %161, ptr @"Builtins::textGetRange:33", align 8
  %162 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:36\00", ptr %162, align 1
  %163 = call ptr @make_candy_text(ptr %162)
  store ptr %163, ptr @"Builtins::textGetRange:36", align 8
  %164 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:38\00", ptr %164, align 1
  %165 = call ptr @make_candy_text(ptr %164)
  store ptr %165, ptr @"Builtins::textGetRange:38", align 8
  %166 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:46\00", ptr %166, align 1
  %167 = call ptr @make_candy_text(ptr %166)
  store ptr %167, ptr @"Builtins::textGetRange:46", align 8
  %168 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:47\00", ptr %168, align 1
  %169 = call ptr @make_candy_text(ptr %168)
  store ptr %169, ptr @"Builtins::textGetRange:47", align 8
  %170 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:49\00", ptr %170, align 1
  %171 = call ptr @make_candy_text(ptr %170)
  store ptr %171, ptr @"Builtins::textGetRange:49", align 8
  %172 = alloca i8, i64 25, align 1
  store [25 x i8] c"Builtins::textGetRange:5\00", ptr %172, align 1
  %173 = call ptr @make_candy_text(ptr %172)
  store ptr %173, ptr @"Builtins::textGetRange:5", align 8
  %174 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:53\00", ptr %174, align 1
  %175 = call ptr @make_candy_text(ptr %174)
  store ptr %175, ptr @"Builtins::textGetRange:53", align 8
  %176 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:55\00", ptr %176, align 1
  %177 = call ptr @make_candy_text(ptr %176)
  store ptr %177, ptr @"Builtins::textGetRange:55", align 8
  %178 = alloca i8, i64 26, align 1
  store [26 x i8] c"Builtins::textGetRange:63\00", ptr %178, align 1
  %179 = call ptr @make_candy_text(ptr %178)
  store ptr %179, ptr @"Builtins::textGetRange:63", align 8
  %180 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::textLength:11\00", ptr %180, align 1
  %181 = call ptr @make_candy_text(ptr %180)
  store ptr %181, ptr @"Builtins::textLength:11", align 8
  %182 = alloca i8, i64 23, align 1
  store [23 x i8] c"Builtins::textLength:5\00", ptr %182, align 1
  %183 = call ptr @make_candy_text(ptr %182)
  store ptr %183, ptr @"Builtins::textLength:5", align 8
  %184 = alloca i8, i64 28, align 1
  store [28 x i8] c"Builtins::textStartsWith:11\00", ptr %184, align 1
  %185 = call ptr @make_candy_text(ptr %184)
  store ptr %185, ptr @"Builtins::textStartsWith:11", align 8
  %186 = alloca i8, i64 28, align 1
  store [28 x i8] c"Builtins::textStartsWith:18\00", ptr %186, align 1
  %187 = call ptr @make_candy_text(ptr %186)
  store ptr %187, ptr @"Builtins::textStartsWith:18", align 8
  %188 = alloca i8, i64 27, align 1
  store [27 x i8] c"Builtins::textStartsWith:5\00", ptr %188, align 1
  %189 = call ptr @make_candy_text(ptr %188)
  store ptr %189, ptr @"Builtins::textStartsWith:5", align 8
  %190 = alloca i8, i64 24, align 1
  store [24 x i8] c"Builtins::toDebugText:5\00", ptr %190, align 1
  %191 = call ptr @make_candy_text(ptr %190)
  store ptr %191, ptr @"Builtins::toDebugText:5", align 8
  %192 = alloca i8, i64 20, align 1
  store [20 x i8] c"Builtins::typeIs:19\00", ptr %192, align 1
  %193 = call ptr @make_candy_text(ptr %192)
  store ptr %193, ptr @"Builtins::typeIs:19", align 8
  %194 = alloca i8, i64 20, align 1
  store [20 x i8] c"Builtins::typeIs:25\00", ptr %194, align 1
  %195 = call ptr @make_candy_text(ptr %194)
  store ptr %195, ptr @"Builtins::typeIs:25", align 8
  %196 = alloca i8, i64 19, align 1
  store [19 x i8] c"Builtins::typeOf:5\00", ptr %196, align 1
  %197 = call ptr @make_candy_text(ptr %196)
  store ptr %197, ptr @"Builtins::typeOf:5", align 8
  %198 = alloca i8, i64 21, align 1
  store [21 x i8] c"Core:bool:implies:12\00", ptr %198, align 1
  %199 = call ptr @make_candy_text(ptr %198)
  store ptr %199, ptr @"Core:bool:implies:12", align 8
  %200 = alloca i8, i64 21, align 1
  store [21 x i8] c"Core:bool:implies:15\00", ptr %200, align 1
  %201 = call ptr @make_candy_text(ptr %200)
  store ptr %201, ptr @"Core:bool:implies:15", align 8
  %202 = alloca i8, i64 20, align 1
  store [20 x i8] c"Core:bool:implies:4\00", ptr %202, align 1
  %203 = call ptr @make_candy_text(ptr %202)
  store ptr %203, ptr @"Core:bool:implies:4", align 8
  %204 = alloca i8, i64 20, align 1
  store [20 x i8] c"Core:bool:implies:9\00", ptr %204, align 1
  %205 = call ptr @make_candy_text(ptr %204)
  store ptr %205, ptr @"Core:bool:implies:9", align 8
  %206 = alloca i8, i64 15, align 1
  store [15 x i8] c"Core:bool:is:1\00", ptr %206, align 1
  %207 = call ptr @make_candy_text(ptr %206)
  store ptr %207, ptr @"Core:bool:is:1", align 8
  %208 = alloca i8, i64 21, align 1
  store [21 x i8] c"Core:bool:lazyAnd:16\00", ptr %208, align 1
  %209 = call ptr @make_candy_text(ptr %208)
  store ptr %209, ptr @"Core:bool:lazyAnd:16", align 8
  %210 = alloca i8, i64 21, align 1
  store [21 x i8] c"Core:bool:lazyAnd:18\00", ptr %210, align 1
  %211 = call ptr @make_candy_text(ptr %210)
  store ptr %211, ptr @"Core:bool:lazyAnd:18", align 8
  %212 = alloca i8, i64 24, align 1
  store [24 x i8] c"Core:bool:lazyAnd:18:13\00", ptr %212, align 1
  %213 = call ptr @make_candy_text(ptr %212)
  store ptr %213, ptr @"Core:bool:lazyAnd:18:13", align 8
  %214 = alloca i8, i64 24, align 1
  store [24 x i8] c"Core:bool:lazyAnd:18:21\00", ptr %214, align 1
  %215 = call ptr @make_candy_text(ptr %214)
  store ptr %215, ptr @"Core:bool:lazyAnd:18:21", align 8
  %216 = alloca i8, i64 23, align 1
  store [23 x i8] c"Core:bool:lazyAnd:18:9\00", ptr %216, align 1
  %217 = call ptr @make_candy_text(ptr %216)
  store ptr %217, ptr @"Core:bool:lazyAnd:18:9", align 8
  %218 = alloca i8, i64 20, align 1
  store [20 x i8] c"Core:bool:lazyAnd:4\00", ptr %218, align 1
  %219 = call ptr @make_candy_text(ptr %218)
  store ptr %219, ptr @"Core:bool:lazyAnd:4", align 8
  %220 = alloca i8, i64 20, align 1
  store [20 x i8] c"Core:bool:lazyOr:16\00", ptr %220, align 1
  %221 = call ptr @make_candy_text(ptr %220)
  store ptr %221, ptr @"Core:bool:lazyOr:16", align 8
  %222 = alloca i8, i64 20, align 1
  store [20 x i8] c"Core:bool:lazyOr:18\00", ptr %222, align 1
  %223 = call ptr @make_candy_text(ptr %222)
  store ptr %223, ptr @"Core:bool:lazyOr:18", align 8
  %224 = alloca i8, i64 23, align 1
  store [23 x i8] c"Core:bool:lazyOr:18:10\00", ptr %224, align 1
  %225 = call ptr @make_candy_text(ptr %224)
  store ptr %225, ptr @"Core:bool:lazyOr:18:10", align 8
  %226 = alloca i8, i64 23, align 1
  store [23 x i8] c"Core:bool:lazyOr:18:14\00", ptr %226, align 1
  %227 = call ptr @make_candy_text(ptr %226)
  store ptr %227, ptr @"Core:bool:lazyOr:18:14", align 8
  %228 = alloca i8, i64 23, align 1
  store [23 x i8] c"Core:bool:lazyOr:18:22\00", ptr %228, align 1
  %229 = call ptr @make_candy_text(ptr %228)
  store ptr %229, ptr @"Core:bool:lazyOr:18:22", align 8
  %230 = alloca i8, i64 19, align 1
  store [19 x i8] c"Core:bool:lazyOr:4\00", ptr %230, align 1
  %231 = call ptr @make_candy_text(ptr %230)
  store ptr %231, ptr @"Core:bool:lazyOr:4", align 8
  %232 = alloca i8, i64 16, align 1
  store [16 x i8] c"Core:bool:not:4\00", ptr %232, align 1
  %233 = call ptr @make_candy_text(ptr %232)
  store ptr %233, ptr @"Core:bool:not:4", align 8
  %234 = alloca i8, i64 16, align 1
  store [16 x i8] c"Core:bool:not:6\00", ptr %234, align 1
  %235 = call ptr @make_candy_text(ptr %234)
  store ptr %235, ptr @"Core:bool:not:6", align 8
  %236 = alloca i8, i64 16, align 1
  store [16 x i8] c"Core:bool:or:13\00", ptr %236, align 1
  %237 = call ptr @make_candy_text(ptr %236)
  store ptr %237, ptr @"Core:bool:or:13", align 8
  %238 = alloca i8, i64 15, align 1
  store [15 x i8] c"Core:bool:or:4\00", ptr %238, align 1
  %239 = call ptr @make_candy_text(ptr %238)
  store ptr %239, ptr @"Core:bool:or:4", align 8
  %240 = alloca i8, i64 15, align 1
  store [15 x i8] c"Core:bool:or:9\00", ptr %240, align 1
  %241 = call ptr @make_candy_text(ptr %240)
  store ptr %241, ptr @"Core:bool:or:9", align 8
  %242 = alloca i8, i64 19, align 1
  store [19 x i8] c"Core:check:check:1\00", ptr %242, align 1
  %243 = call ptr @make_candy_text(ptr %242)
  store ptr %243, ptr @"Core:check:check:1", align 8
  %244 = alloca i8, i64 20, align 1
  store [20 x i8] c"Core:check:check:14\00", ptr %244, align 1
  %245 = call ptr @make_candy_text(ptr %244)
  store ptr %245, ptr @"Core:check:check:14", align 8
  %246 = alloca i8, i64 19, align 1
  store [19 x i8] c"Core:check:check:5\00", ptr %246, align 1
  %247 = call ptr @make_candy_text(ptr %246)
  store ptr %247, ptr @"Core:check:check:5", align 8
  %248 = alloca i8, i64 30, align 1
  store [30 x i8] c"Core:controlFlow:recursive:17\00", ptr %248, align 1
  %249 = call ptr @make_candy_text(ptr %248)
  store ptr %249, ptr @"Core:controlFlow:recursive:17", align 8
  %250 = alloca i8, i64 34, align 1
  store [34 x i8] c"Core:controlFlow:recursive:18:0:3\00", ptr %250, align 1
  %251 = call ptr @make_candy_text(ptr %250)
  store ptr %251, ptr @"Core:controlFlow:recursive:18:0:3", align 8
  %252 = alloca i8, i64 32, align 1
  store [32 x i8] c"Core:controlFlow:recursive:18:5\00", ptr %252, align 1
  %253 = call ptr @make_candy_text(ptr %252)
  store ptr %253, ptr @"Core:controlFlow:recursive:18:5", align 8
  %254 = alloca i8, i64 30, align 1
  store [30 x i8] c"Core:controlFlow:recursive:23\00", ptr %254, align 1
  %255 = call ptr @make_candy_text(ptr %254)
  store ptr %255, ptr @"Core:controlFlow:recursive:23", align 8
  %256 = alloca i8, i64 30, align 1
  store [30 x i8] c"Core:fixedDecimal:absolute:11\00", ptr %256, align 1
  %257 = call ptr @make_candy_text(ptr %256)
  store ptr %257, ptr @"Core:fixedDecimal:absolute:11", align 8
  %258 = alloca i8, i64 29, align 1
  store [29 x i8] c"Core:fixedDecimal:absolute:4\00", ptr %258, align 1
  %259 = call ptr @make_candy_text(ptr %258)
  store ptr %259, ptr @"Core:fixedDecimal:absolute:4", align 8
  %260 = alloca i8, i64 29, align 1
  store [29 x i8] c"Core:fixedDecimal:absolute:8\00", ptr %260, align 1
  %261 = call ptr @make_candy_text(ptr %260)
  store ptr %261, ptr @"Core:fixedDecimal:absolute:8", align 8
  %262 = alloca i8, i64 31, align 1
  store [31 x i8] c"Core:fixedDecimal:absolute:9:2\00", ptr %262, align 1
  %263 = call ptr @make_candy_text(ptr %262)
  store ptr %263, ptr @"Core:fixedDecimal:absolute:9:2", align 8
  %264 = alloca i8, i64 25, align 1
  store [25 x i8] c"Core:fixedDecimal:add:13\00", ptr %264, align 1
  %265 = call ptr @make_candy_text(ptr %264)
  store ptr %265, ptr @"Core:fixedDecimal:add:13", align 8
  %266 = alloca i8, i64 25, align 1
  store [25 x i8] c"Core:fixedDecimal:add:27\00", ptr %266, align 1
  %267 = call ptr @make_candy_text(ptr %266)
  store ptr %267, ptr @"Core:fixedDecimal:add:27", align 8
  %268 = alloca i8, i64 25, align 1
  store [25 x i8] c"Core:fixedDecimal:add:29\00", ptr %268, align 1
  %269 = call ptr @make_candy_text(ptr %268)
  store ptr %269, ptr @"Core:fixedDecimal:add:29", align 8
  %270 = alloca i8, i64 24, align 1
  store [24 x i8] c"Core:fixedDecimal:add:4\00", ptr %270, align 1
  %271 = call ptr @make_candy_text(ptr %270)
  store ptr %271, ptr @"Core:fixedDecimal:add:4", align 8
  %272 = alloca i8, i64 24, align 1
  store [24 x i8] c"Core:fixedDecimal:add:9\00", ptr %272, align 1
  %273 = call ptr @make_candy_text(ptr %272)
  store ptr %273, ptr @"Core:fixedDecimal:add:9", align 8
  %274 = alloca i8, i64 34, align 1
  store [34 x i8] c"Core:fixedDecimal:approxEquals:14\00", ptr %274, align 1
  %275 = call ptr @make_candy_text(ptr %274)
  store ptr %275, ptr @"Core:fixedDecimal:approxEquals:14", align 8
  %276 = alloca i8, i64 34, align 1
  store [34 x i8] c"Core:fixedDecimal:approxEquals:17\00", ptr %276, align 1
  %277 = call ptr @make_candy_text(ptr %276)
  store ptr %277, ptr @"Core:fixedDecimal:approxEquals:17", align 8
  %278 = alloca i8, i64 34, align 1
  store [34 x i8] c"Core:fixedDecimal:approxEquals:19\00", ptr %278, align 1
  %279 = call ptr @make_candy_text(ptr %278)
  store ptr %279, ptr @"Core:fixedDecimal:approxEquals:19", align 8
  %280 = alloca i8, i64 34, align 1
  store [34 x i8] c"Core:fixedDecimal:approxEquals:23\00", ptr %280, align 1
  %281 = call ptr @make_candy_text(ptr %280)
  store ptr %281, ptr @"Core:fixedDecimal:approxEquals:23", align 8
  %282 = alloca i8, i64 34, align 1
  store [34 x i8] c"Core:fixedDecimal:approxEquals:25\00", ptr %282, align 1
  %283 = call ptr @make_candy_text(ptr %282)
  store ptr %283, ptr @"Core:fixedDecimal:approxEquals:25", align 8
  %284 = alloca i8, i64 34, align 1
  store [34 x i8] c"Core:fixedDecimal:approxEquals:28\00", ptr %284, align 1
  %285 = call ptr @make_candy_text(ptr %284)
  store ptr %285, ptr @"Core:fixedDecimal:approxEquals:28", align 8
  %286 = alloca i8, i64 33, align 1
  store [33 x i8] c"Core:fixedDecimal:approxEquals:4\00", ptr %286, align 1
  %287 = call ptr @make_candy_text(ptr %286)
  store ptr %287, ptr @"Core:fixedDecimal:approxEquals:4", align 8
  %288 = alloca i8, i64 33, align 1
  store [33 x i8] c"Core:fixedDecimal:approxEquals:9\00", ptr %288, align 1
  %289 = call ptr @make_candy_text(ptr %288)
  store ptr %289, ptr @"Core:fixedDecimal:approxEquals:9", align 8
  %290 = alloca i8, i64 42, align 1
  store [42 x i8] c"Core:fixedDecimal:comparableMinorUnits:20\00", ptr %290, align 1
  %291 = call ptr @make_candy_text(ptr %290)
  store ptr %291, ptr @"Core:fixedDecimal:comparableMinorUnits:20", align 8
  %292 = alloca i8, i64 42, align 1
  store [42 x i8] c"Core:fixedDecimal:comparableMinorUnits:23\00", ptr %292, align 1
  %293 = call ptr @make_candy_text(ptr %292)
  store ptr %293, ptr @"Core:fixedDecimal:comparableMinorUnits:23", align 8
  %294 = alloca i8, i64 42, align 1
  store [42 x i8] c"Core:fixedDecimal:comparableMinorUnits:24\00", ptr %294, align 1
  %295 = call ptr @make_candy_text(ptr %294)
  store ptr %295, ptr @"Core:fixedDecimal:comparableMinorUnits:24", align 8
  %296 = alloca i8, i64 42, align 1
  store [42 x i8] c"Core:fixedDecimal:comparableMinorUnits:30\00", ptr %296, align 1
  %297 = call ptr @make_candy_text(ptr %296)
  store ptr %297, ptr @"Core:fixedDecimal:comparableMinorUnits:30", align 8
  %298 = alloca i8, i64 42, align 1
  store [42 x i8] c"Core:fixedDecimal:comparableMinorUnits:35\00", ptr %298, align 1
  %299 = call ptr @make_candy_text(ptr %298)
  store ptr %299, ptr @"Core:fixedDecimal:comparableMinorUnits:35", align 8
  %300 = alloca i8, i64 41, align 1
  store [41 x i8] c"Core:fixedDecimal:comparableMinorUnits:4\00", ptr %300, align 1
  %301 = call ptr @make_candy_text(ptr %300)
  store ptr %301, ptr @"Core:fixedDecimal:comparableMinorUnits:4", align 8
  %302 = alloca i8, i64 41, align 1
  store [41 x i8] c"Core:fixedDecimal:comparableMinorUnits:9\00", ptr %302, align 1
  %303 = call ptr @make_candy_text(ptr %302)
  store ptr %303, ptr @"Core:fixedDecimal:comparableMinorUnits:9", align 8
  %304 = alloca i8, i64 31, align 1
  store [31 x i8] c"Core:fixedDecimal:compareTo:13\00", ptr %304, align 1
  %305 = call ptr @make_candy_text(ptr %304)
  store ptr %305, ptr @"Core:fixedDecimal:compareTo:13", align 8
  %306 = alloca i8, i64 31, align 1
  store [31 x i8] c"Core:fixedDecimal:compareTo:26\00", ptr %306, align 1
  %307 = call ptr @make_candy_text(ptr %306)
  store ptr %307, ptr @"Core:fixedDecimal:compareTo:26", align 8
  %308 = alloca i8, i64 30, align 1
  store [30 x i8] c"Core:fixedDecimal:compareTo:4\00", ptr %308, align 1
  %309 = call ptr @make_candy_text(ptr %308)
  store ptr %309, ptr @"Core:fixedDecimal:compareTo:4", align 8
  %310 = alloca i8, i64 31, align 1
  store [31 x i8] c"Core:fixedDecimal:compareTo:45\00", ptr %310, align 1
  %311 = call ptr @make_candy_text(ptr %310)
  store ptr %311, ptr @"Core:fixedDecimal:compareTo:45", align 8
  %312 = alloca i8, i64 31, align 1
  store [31 x i8] c"Core:fixedDecimal:compareTo:46\00", ptr %312, align 1
  %313 = call ptr @make_candy_text(ptr %312)
  store ptr %313, ptr @"Core:fixedDecimal:compareTo:46", align 8
  %314 = alloca i8, i64 30, align 1
  store [30 x i8] c"Core:fixedDecimal:compareTo:9\00", ptr %314, align 1
  %315 = call ptr @make_candy_text(ptr %314)
  store ptr %315, ptr @"Core:fixedDecimal:compareTo:9", align 8
  %316 = alloca i8, i64 45, align 1
  store [45 x i8] c"Core:fixedDecimal:divideTruncatingAtScale:14\00", ptr %316, align 1
  %317 = call ptr @make_candy_text(ptr %316)
  store ptr %317, ptr @"Core:fixedDecimal:divideTruncatingAtScale:14", align 8
  %318 = alloca i8, i64 45, align 1
  store [45 x i8] c"Core:fixedDecimal:divideTruncatingAtScale:17\00", ptr %318, align 1
  %319 = call ptr @make_candy_text(ptr %318)
  store ptr %319, ptr @"Core:fixedDecimal:divideTruncatingAtScale:17", align 8
  %320 = alloca i8, i64 45, align 1
  store [45 x i8] c"Core:fixedDecimal:divideTruncatingAtScale:29\00", ptr %320, align 1
  %321 = call ptr @make_candy_text(ptr %320)
  store ptr %321, ptr @"Core:fixedDecimal:divideTruncatingAtScale:29", align 8
  %322 = alloca i8, i64 45, align 1
  store [45 x i8] c"Core:fixedDecimal:divideTruncatingAtScale:37\00", ptr %322, align 1
  %323 = call ptr @make_candy_text(ptr %322)
  store ptr %323, ptr @"Core:fixedDecimal:divideTruncatingAtScale:37", align 8
  %324 = alloca i8, i64 44, align 1
  store [44 x i8] c"Core:fixedDecimal:divideTruncatingAtScale:4\00", ptr %324, align 1
  %325 = call ptr @make_candy_text(ptr %324)
  store ptr %325, ptr @"Core:fixedDecimal:divideTruncatingAtScale:4", align 8
  %326 = alloca i8, i64 45, align 1
  store [45 x i8] c"Core:fixedDecimal:divideTruncatingAtScale:41\00", ptr %326, align 1
  %327 = call ptr @make_candy_text(ptr %326)
  store ptr %327, ptr @"Core:fixedDecimal:divideTruncatingAtScale:41", align 8
  %328 = alloca i8, i64 45, align 1
  store [45 x i8] c"Core:fixedDecimal:divideTruncatingAtScale:56\00", ptr %328, align 1
  %329 = call ptr @make_candy_text(ptr %328)
  store ptr %329, ptr @"Core:fixedDecimal:divideTruncatingAtScale:56", align 8
  %330 = alloca i8, i64 45, align 1
  store [45 x i8] c"Core:fixedDecimal:divideTruncatingAtScale:57\00", ptr %330, align 1
  %331 = call ptr @make_candy_text(ptr %330)
  store ptr %331, ptr @"Core:fixedDecimal:divideTruncatingAtScale:57", align 8
  %332 = alloca i8, i64 45, align 1
  store [45 x i8] c"Core:fixedDecimal:divideTruncatingAtScale:67\00", ptr %332, align 1
  %333 = call ptr @make_candy_text(ptr %332)
  store ptr %333, ptr @"Core:fixedDecimal:divideTruncatingAtScale:67", align 8
  %334 = alloca i8, i64 45, align 1
  store [45 x i8] c"Core:fixedDecimal:divideTruncatingAtScale:69\00", ptr %334, align 1
  %335 = call ptr @make_candy_text(ptr %334)
  store ptr %335, ptr @"Core:fixedDecimal:divideTruncatingAtScale:69", align 8
  %336 = alloca i8, i64 44, align 1
  store [44 x i8] c"Core:fixedDecimal:divideTruncatingAtScale:9\00", ptr %336, align 1
  %337 = call ptr @make_candy_text(ptr %336)
  store ptr %337, ptr @"Core:fixedDecimal:divideTruncatingAtScale:9", align 8
  %338 = alloca i8, i64 32, align 1
  store [32 x i8] c"Core:fixedDecimal:floorToInt:18\00", ptr %338, align 1
  %339 = call ptr @make_candy_text(ptr %338)
  store ptr %339, ptr @"Core:fixedDecimal:floorToInt:18", align 8
  %340 = alloca i8, i64 32, align 1
  store [32 x i8] c"Core:fixedDecimal:floorToInt:20\00", ptr %340, align 1
  %341 = call ptr @make_candy_text(ptr %340)
  store ptr %341, ptr @"Core:fixedDecimal:floorToInt:20", align 8
  %342 = alloca i8, i64 32, align 1
  store [32 x i8] c"Core:fixedDecimal:floorToInt:21\00", ptr %342, align 1
  %343 = call ptr @make_candy_text(ptr %342)
  store ptr %343, ptr @"Core:fixedDecimal:floorToInt:21", align 8
  %344 = alloca i8, i64 31, align 1
  store [31 x i8] c"Core:fixedDecimal:floorToInt:4\00", ptr %344, align 1
  %345 = call ptr @make_candy_text(ptr %344)
  store ptr %345, ptr @"Core:fixedDecimal:floorToInt:4", align 8
  %346 = alloca i8, i64 31, align 1
  store [31 x i8] c"Core:fixedDecimal:floorToInt:7\00", ptr %346, align 1
  %347 = call ptr @make_candy_text(ptr %346)
  store ptr %347, ptr @"Core:fixedDecimal:floorToInt:7", align 8
  %348 = alloca i8, i64 35, align 1
  store [35 x i8] c"Core:fixedDecimal:fromIntScaled:11\00", ptr %348, align 1
  %349 = call ptr @make_candy_text(ptr %348)
  store ptr %349, ptr @"Core:fixedDecimal:fromIntScaled:11", align 8
  %350 = alloca i8, i64 35, align 1
  store [35 x i8] c"Core:fixedDecimal:fromIntScaled:16\00", ptr %350, align 1
  %351 = call ptr @make_candy_text(ptr %350)
  store ptr %351, ptr @"Core:fixedDecimal:fromIntScaled:16", align 8
  %352 = alloca i8, i64 23, align 1
  store [23 x i8] c"Core:fixedDecimal:is:1\00", ptr %352, align 1
  %353 = call ptr @make_candy_text(ptr %352)
  store ptr %353, ptr @"Core:fixedDecimal:is:1", align 8
  %354 = alloca i8, i64 28, align 1
  store [28 x i8] c"Core:fixedDecimal:is:1:18:2\00", ptr %354, align 1
  %355 = call ptr @make_candy_text(ptr %354)
  store ptr %355, ptr @"Core:fixedDecimal:is:1:18:2", align 8
  %356 = alloca i8, i64 26, align 1
  store [26 x i8] c"Core:fixedDecimal:is:1:19\00", ptr %356, align 1
  %357 = call ptr @make_candy_text(ptr %356)
  store ptr %357, ptr @"Core:fixedDecimal:is:1:19", align 8
  %358 = alloca i8, i64 34, align 1
  store [34 x i8] c"Core:fixedDecimal:is:1:minorUnits\00", ptr %358, align 1
  %359 = call ptr @make_candy_text(ptr %358)
  store ptr %359, ptr @"Core:fixedDecimal:is:1:minorUnits", align 8
  %360 = alloca i8, i64 29, align 1
  store [29 x i8] c"Core:fixedDecimal:is:1:scale\00", ptr %360, align 1
  %361 = call ptr @make_candy_text(ptr %360)
  store ptr %361, ptr @"Core:fixedDecimal:is:1:scale", align 8
  %362 = alloca i8, i64 35, align 1
  store [35 x i8] c"Core:fixedDecimal:isGreaterThan:14\00", ptr %362, align 1
  %363 = call ptr @make_candy_text(ptr %362)
  store ptr %363, ptr @"Core:fixedDecimal:isGreaterThan:14", align 8
  %364 = alloca i8, i64 34, align 1
  store [34 x i8] c"Core:fixedDecimal:isGreaterThan:4\00", ptr %364, align 1
  %365 = call ptr @make_candy_text(ptr %364)
  store ptr %365, ptr @"Core:fixedDecimal:isGreaterThan:4", align 8
  %366 = alloca i8, i64 34, align 1
  store [34 x i8] c"Core:fixedDecimal:isGreaterThan:9\00", ptr %366, align 1
  %367 = call ptr @make_candy_text(ptr %366)
  store ptr %367, ptr @"Core:fixedDecimal:isGreaterThan:9", align 8
  %368 = alloca i8, i64 41, align 1
  store [41 x i8] c"Core:fixedDecimal:isLessThanOrEqualTo:13\00", ptr %368, align 1
  %369 = call ptr @make_candy_text(ptr %368)
  store ptr %369, ptr @"Core:fixedDecimal:isLessThanOrEqualTo:13", align 8
  %370 = alloca i8, i64 41, align 1
  store [41 x i8] c"Core:fixedDecimal:isLessThanOrEqualTo:22\00", ptr %370, align 1
  %371 = call ptr @make_candy_text(ptr %370)
  store ptr %371, ptr @"Core:fixedDecimal:isLessThanOrEqualTo:22", align 8
  %372 = alloca i8, i64 40, align 1
  store [40 x i8] c"Core:fixedDecimal:isLessThanOrEqualTo:4\00", ptr %372, align 1
  %373 = call ptr @make_candy_text(ptr %372)
  store ptr %373, ptr @"Core:fixedDecimal:isLessThanOrEqualTo:4", align 8
  %374 = alloca i8, i64 40, align 1
  store [40 x i8] c"Core:fixedDecimal:isLessThanOrEqualTo:9\00", ptr %374, align 1
  %375 = call ptr @make_candy_text(ptr %374)
  store ptr %375, ptr @"Core:fixedDecimal:isLessThanOrEqualTo:9", align 8
  %376 = alloca i8, i64 32, align 1
  store [32 x i8] c"Core:fixedDecimal:isNegative:17\00", ptr %376, align 1
  %377 = call ptr @make_candy_text(ptr %376)
  store ptr %377, ptr @"Core:fixedDecimal:isNegative:17", align 8
  %378 = alloca i8, i64 31, align 1
  store [31 x i8] c"Core:fixedDecimal:isNegative:4\00", ptr %378, align 1
  %379 = call ptr @make_candy_text(ptr %378)
  store ptr %379, ptr @"Core:fixedDecimal:isNegative:4", align 8
  %380 = alloca i8, i64 31, align 1
  store [31 x i8] c"Core:fixedDecimal:isNegative:7\00", ptr %380, align 1
  %381 = call ptr @make_candy_text(ptr %380)
  store ptr %381, ptr @"Core:fixedDecimal:isNegative:7", align 8
  %382 = alloca i8, i64 35, align 1
  store [35 x i8] c"Core:fixedDecimal:isNonNegative:16\00", ptr %382, align 1
  %383 = call ptr @make_candy_text(ptr %382)
  store ptr %383, ptr @"Core:fixedDecimal:isNonNegative:16", align 8
  %384 = alloca i8, i64 34, align 1
  store [34 x i8] c"Core:fixedDecimal:isNonNegative:4\00", ptr %384, align 1
  %385 = call ptr @make_candy_text(ptr %384)
  store ptr %385, ptr @"Core:fixedDecimal:isNonNegative:4", align 8
  %386 = alloca i8, i64 34, align 1
  store [34 x i8] c"Core:fixedDecimal:isNonNegative:7\00", ptr %386, align 1
  %387 = call ptr @make_candy_text(ptr %386)
  store ptr %387, ptr @"Core:fixedDecimal:isNonNegative:7", align 8
  %388 = alloca i8, i64 31, align 1
  store [31 x i8] c"Core:fixedDecimal:isScale:18:9\00", ptr %388, align 1
  %389 = call ptr @make_candy_text(ptr %388)
  store ptr %389, ptr @"Core:fixedDecimal:isScale:18:9", align 8
  %390 = alloca i8, i64 29, align 1
  store [29 x i8] c"Core:fixedDecimal:isScale:19\00", ptr %390, align 1
  %391 = call ptr @make_candy_text(ptr %390)
  store ptr %391, ptr @"Core:fixedDecimal:isScale:19", align 8
  %392 = alloca i8, i64 32, align 1
  store [32 x i8] c"Core:fixedDecimal:minorUnits:19\00", ptr %392, align 1
  %393 = call ptr @make_candy_text(ptr %392)
  store ptr %393, ptr @"Core:fixedDecimal:minorUnits:19", align 8
  %394 = alloca i8, i64 32, align 1
  store [32 x i8] c"Core:fixedDecimal:minorUnits:21\00", ptr %394, align 1
  %395 = call ptr @make_candy_text(ptr %394)
  store ptr %395, ptr @"Core:fixedDecimal:minorUnits:21", align 8
  %396 = alloca i8, i64 31, align 1
  store [31 x i8] c"Core:fixedDecimal:minorUnits:4\00", ptr %396, align 1
  %397 = call ptr @make_candy_text(ptr %396)
  store ptr %397, ptr @"Core:fixedDecimal:minorUnits:4", align 8
  %398 = alloca i8, i64 28, align 1
  store [28 x i8] c"Core:fixedDecimal:negate:17\00", ptr %398, align 1
  %399 = call ptr @make_candy_text(ptr %398)
  store ptr %399, ptr @"Core:fixedDecimal:negate:17", align 8
  %400 = alloca i8, i64 28, align 1
  store [28 x i8] c"Core:fixedDecimal:negate:20\00", ptr %400, align 1
  %401 = call ptr @make_candy_text(ptr %400)
  store ptr %401, ptr @"Core:fixedDecimal:negate:20", align 8
  %402 = alloca i8, i64 28, align 1
  store [28 x i8] c"Core:fixedDecimal:negate:21\00", ptr %402, align 1
  %403 = call ptr @make_candy_text(ptr %402)
  store ptr %403, ptr @"Core:fixedDecimal:negate:21", align 8
  %404 = alloca i8, i64 27, align 1
  store [27 x i8] c"Core:fixedDecimal:negate:4\00", ptr %404, align 1
  %405 = call ptr @make_candy_text(ptr %404)
  store ptr %405, ptr @"Core:fixedDecimal:negate:4", align 8
  %406 = alloca i8, i64 27, align 1
  store [27 x i8] c"Core:fixedDecimal:negate:8\00", ptr %406, align 1
  %407 = call ptr @make_candy_text(ptr %406)
  store ptr %407, ptr @"Core:fixedDecimal:negate:8", align 8
  %408 = alloca i8, i64 40, align 1
  store [40 x i8] c"Core:fixedDecimal:rescaledMinorUnits:13\00", ptr %408, align 1
  %409 = call ptr @make_candy_text(ptr %408)
  store ptr %409, ptr @"Core:fixedDecimal:rescaledMinorUnits:13", align 8
  %410 = alloca i8, i64 40, align 1
  store [40 x i8] c"Core:fixedDecimal:rescaledMinorUnits:23\00", ptr %410, align 1
  %411 = call ptr @make_candy_text(ptr %410)
  store ptr %411, ptr @"Core:fixedDecimal:rescaledMinorUnits:23", align 8
  %412 = alloca i8, i64 43, align 1
  store [43 x i8] c"Core:fixedDecimal:rescaledMinorUnits:24:14\00", ptr %412, align 1
  %413 = call ptr @make_candy_text(ptr %412)
  store ptr %413, ptr @"Core:fixedDecimal:rescaledMinorUnits:24:14", align 8
  %414 = alloca i8, i64 42, align 1
  store [42 x i8] c"Core:fixedDecimal:rescaledMinorUnits:24:2\00", ptr %414, align 1
  %415 = call ptr @make_candy_text(ptr %414)
  store ptr %415, ptr @"Core:fixedDecimal:rescaledMinorUnits:24:2", align 8
  %416 = alloca i8, i64 43, align 1
  store [43 x i8] c"Core:fixedDecimal:rescaledMinorUnits:24:24\00", ptr %416, align 1
  %417 = call ptr @make_candy_text(ptr %416)
  store ptr %417, ptr @"Core:fixedDecimal:rescaledMinorUnits:24:24", align 8
  %418 = alloca i8, i64 43, align 1
  store [43 x i8] c"Core:fixedDecimal:rescaledMinorUnits:24:25\00", ptr %418, align 1
  %419 = call ptr @make_candy_text(ptr %418)
  store ptr %419, ptr @"Core:fixedDecimal:rescaledMinorUnits:24:25", align 8
  %420 = alloca i8, i64 43, align 1
  store [43 x i8] c"Core:fixedDecimal:rescaledMinorUnits:24:26\00", ptr %420, align 1
  %421 = call ptr @make_candy_text(ptr %420)
  store ptr %421, ptr @"Core:fixedDecimal:rescaledMinorUnits:24:26", align 8
  %422 = alloca i8, i64 42, align 1
  store [42 x i8] c"Core:fixedDecimal:rescaledMinorUnits:25:2\00", ptr %422, align 1
  %423 = call ptr @make_candy_text(ptr %422)
  store ptr %423, ptr @"Core:fixedDecimal:rescaledMinorUnits:25:2", align 8
  %424 = alloca i8, i64 43, align 1
  store [43 x i8] c"Core:fixedDecimal:rescaledMinorUnits:25:23\00", ptr %424, align 1
  %425 = call ptr @make_candy_text(ptr %424)
  store ptr %425, ptr @"Core:fixedDecimal:rescaledMinorUnits:25:23", align 8
  %426 = alloca i8, i64 43, align 1
  store [43 x i8] c"Core:fixedDecimal:rescaledMinorUnits:25:24\00", ptr %426, align 1
  %427 = call ptr @make_candy_text(ptr %426)
  store ptr %427, ptr @"Core:fixedDecimal:rescaledMinorUnits:25:24", align 8
  %428 = alloca i8, i64 43, align 1
  store [43 x i8] c"Core:fixedDecimal:rescaledMinorUnits:25:25\00", ptr %428, align 1
  %429 = call ptr @make_candy_text(ptr %428)
  store ptr %429, ptr @"Core:fixedDecimal:rescaledMinorUnits:25:25", align 8
  %430 = alloca i8, i64 43, align 1
  store [43 x i8] c"Core:fixedDecimal:rescaledMinorUnits:25:26\00", ptr %430, align 1
  %431 = call ptr @make_candy_text(ptr %430)
  store ptr %431, ptr @"Core:fixedDecimal:rescaledMinorUnits:25:26", align 8
  %432 = alloca i8, i64 40, align 1
  store [40 x i8] c"Core:fixedDecimal:rescaledMinorUnits:26\00", ptr %432, align 1
  %433 = call ptr @make_candy_text(ptr %432)
  store ptr %433, ptr @"Core:fixedDecimal:rescaledMinorUnits:26", align 8
  %434 = alloca i8, i64 39, align 1
  store [39 x i8] c"Core:fixedDecimal:rescaledMinorUnits:4\00", ptr %434, align 1
  %435 = call ptr @make_candy_text(ptr %434)
  store ptr %435, ptr @"Core:fixedDecimal:rescaledMinorUnits:4", align 8
  %436 = alloca i8, i64 39, align 1
  store [39 x i8] c"Core:fixedDecimal:rescaledMinorUnits:9\00", ptr %436, align 1
  %437 = call ptr @make_candy_text(ptr %436)
  store ptr %437, ptr @"Core:fixedDecimal:rescaledMinorUnits:9", align 8
  %438 = alloca i8, i64 27, align 1
  store [27 x i8] c"Core:fixedDecimal:scale:19\00", ptr %438, align 1
  %439 = call ptr @make_candy_text(ptr %438)
  store ptr %439, ptr @"Core:fixedDecimal:scale:19", align 8
  %440 = alloca i8, i64 27, align 1
  store [27 x i8] c"Core:fixedDecimal:scale:21\00", ptr %440, align 1
  %441 = call ptr @make_candy_text(ptr %440)
  store ptr %441, ptr @"Core:fixedDecimal:scale:21", align 8
  %442 = alloca i8, i64 26, align 1
  store [26 x i8] c"Core:fixedDecimal:scale:4\00", ptr %442, align 1
  %443 = call ptr @make_candy_text(ptr %442)
  store ptr %443, ptr @"Core:fixedDecimal:scale:4", align 8
  %444 = alloca i8, i64 33, align 1
  store [33 x i8] c"Core:fixedDecimal:scaleFactor:15\00", ptr %444, align 1
  %445 = call ptr @make_candy_text(ptr %444)
  store ptr %445, ptr @"Core:fixedDecimal:scaleFactor:15", align 8
  %446 = alloca i8, i64 32, align 1
  store [32 x i8] c"Core:fixedDecimal:scaleFactor:4\00", ptr %446, align 1
  %447 = call ptr @make_candy_text(ptr %446)
  store ptr %447, ptr @"Core:fixedDecimal:scaleFactor:4", align 8
  %448 = alloca i8, i64 30, align 1
  store [30 x i8] c"Core:fixedDecimal:subtract:13\00", ptr %448, align 1
  %449 = call ptr @make_candy_text(ptr %448)
  store ptr %449, ptr @"Core:fixedDecimal:subtract:13", align 8
  %450 = alloca i8, i64 30, align 1
  store [30 x i8] c"Core:fixedDecimal:subtract:27\00", ptr %450, align 1
  %451 = call ptr @make_candy_text(ptr %450)
  store ptr %451, ptr @"Core:fixedDecimal:subtract:27", align 8
  %452 = alloca i8, i64 30, align 1
  store [30 x i8] c"Core:fixedDecimal:subtract:29\00", ptr %452, align 1
  %453 = call ptr @make_candy_text(ptr %452)
  store ptr %453, ptr @"Core:fixedDecimal:subtract:29", align 8
  %454 = alloca i8, i64 29, align 1
  store [29 x i8] c"Core:fixedDecimal:subtract:4\00", ptr %454, align 1
  %455 = call ptr @make_candy_text(ptr %454)
  store ptr %455, ptr @"Core:fixedDecimal:subtract:4", align 8
  %456 = alloca i8, i64 29, align 1
  store [29 x i8] c"Core:fixedDecimal:subtract:9\00", ptr %456, align 1
  %457 = call ptr @make_candy_text(ptr %456)
  store ptr %457, ptr @"Core:fixedDecimal:subtract:9", align 8
  %458 = alloca i8, i64 31, align 1
  store [31 x i8] c"Core:fixedDecimal:toText:10:18\00", ptr %458, align 1
  %459 = call ptr @make_candy_text(ptr %458)
  store ptr %459, ptr @"Core:fixedDecimal:toText:10:18", align 8
  %460 = alloca i8, i64 30, align 1
  store [30 x i8] c"Core:fixedDecimal:toText:10:2\00", ptr %460, align 1
  %461 = call ptr @make_candy_text(ptr %460)
  store ptr %461, ptr @"Core:fixedDecimal:toText:10:2", align 8
  %462 = alloca i8, i64 31, align 1
  store [31 x i8] c"Core:fixedDecimal:toText:10:30\00", ptr %462, align 1
  %463 = call ptr @make_candy_text(ptr %462)
  store ptr %463, ptr @"Core:fixedDecimal:toText:10:30", align 8
  %464 = alloca i8, i64 34, align 1
  store [34 x i8] c"Core:fixedDecimal:toText:10:31:10\00", ptr %464, align 1
  %465 = call ptr @make_candy_text(ptr %464)
  store ptr %465, ptr @"Core:fixedDecimal:toText:10:31:10", align 8
  %466 = alloca i8, i64 34, align 1
  store [34 x i8] c"Core:fixedDecimal:toText:10:31:28\00", ptr %466, align 1
  %467 = call ptr @make_candy_text(ptr %466)
  store ptr %467, ptr @"Core:fixedDecimal:toText:10:31:28", align 8
  %468 = alloca i8, i64 34, align 1
  store [34 x i8] c"Core:fixedDecimal:toText:10:32:10\00", ptr %468, align 1
  %469 = call ptr @make_candy_text(ptr %468)
  store ptr %469, ptr @"Core:fixedDecimal:toText:10:32:10", align 8
  %470 = alloca i8, i64 34, align 1
  store [34 x i8] c"Core:fixedDecimal:toText:10:32:28\00", ptr %470, align 1
  %471 = call ptr @make_candy_text(ptr %470)
  store ptr %471, ptr @"Core:fixedDecimal:toText:10:32:28", align 8
  %472 = alloca i8, i64 31, align 1
  store [31 x i8] c"Core:fixedDecimal:toText:10:33\00", ptr %472, align 1
  %473 = call ptr @make_candy_text(ptr %472)
  store ptr %473, ptr @"Core:fixedDecimal:toText:10:33", align 8
  %474 = alloca i8, i64 30, align 1
  store [30 x i8] c"Core:fixedDecimal:toText:10:4\00", ptr %474, align 1
  %475 = call ptr @make_candy_text(ptr %474)
  store ptr %475, ptr @"Core:fixedDecimal:toText:10:4", align 8
  %476 = alloca i8, i64 30, align 1
  store [30 x i8] c"Core:fixedDecimal:toText:10:8\00", ptr %476, align 1
  %477 = call ptr @make_candy_text(ptr %476)
  store ptr %477, ptr @"Core:fixedDecimal:toText:10:8", align 8
  %478 = alloca i8, i64 28, align 1
  store [28 x i8] c"Core:fixedDecimal:toText:11\00", ptr %478, align 1
  %479 = call ptr @make_candy_text(ptr %478)
  store ptr %479, ptr @"Core:fixedDecimal:toText:11", align 8
  %480 = alloca i8, i64 28, align 1
  store [28 x i8] c"Core:fixedDecimal:toText:20\00", ptr %480, align 1
  %481 = call ptr @make_candy_text(ptr %480)
  store ptr %481, ptr @"Core:fixedDecimal:toText:20", align 8
  %482 = alloca i8, i64 28, align 1
  store [28 x i8] c"Core:fixedDecimal:toText:21\00", ptr %482, align 1
  %483 = call ptr @make_candy_text(ptr %482)
  store ptr %483, ptr @"Core:fixedDecimal:toText:21", align 8
  %484 = alloca i8, i64 30, align 1
  store [30 x i8] c"Core:fixedDecimal:toText:23:0\00", ptr %484, align 1
  %485 = call ptr @make_candy_text(ptr %484)
  store ptr %485, ptr @"Core:fixedDecimal:toText:23:0", align 8
  %486 = alloca i8, i64 28, align 1
  store [28 x i8] c"Core:fixedDecimal:toText:24\00", ptr %486, align 1
  %487 = call ptr @make_candy_text(ptr %486)
  store ptr %487, ptr @"Core:fixedDecimal:toText:24", align 8
  %488 = alloca i8, i64 28, align 1
  store [28 x i8] c"Core:fixedDecimal:toText:27\00", ptr %488, align 1
  %489 = call ptr @make_candy_text(ptr %488)
  store ptr %489, ptr @"Core:fixedDecimal:toText:27", align 8
  %490 = alloca i8, i64 28, align 1
  store [28 x i8] c"Core:fixedDecimal:toText:28\00", ptr %490, align 1
  %491 = call ptr @make_candy_text(ptr %490)
  store ptr %491, ptr @"Core:fixedDecimal:toText:28", align 8
  %492 = alloca i8, i64 30, align 1
  store [30 x i8] c"Core:fixedDecimal:toText:30:0\00", ptr %492, align 1
  %493 = call ptr @make_candy_text(ptr %492)
  store ptr %493, ptr @"Core:fixedDecimal:toText:30:0", align 8
  %494 = alloca i8, i64 28, align 1
  store [28 x i8] c"Core:fixedDecimal:toText:31\00", ptr %494, align 1
  %495 = call ptr @make_candy_text(ptr %494)
  store ptr %495, ptr @"Core:fixedDecimal:toText:31", align 8
  %496 = alloca i8, i64 28, align 1
  store [28 x i8] c"Core:fixedDecimal:toText:32\00", ptr %496, align 1
  %497 = call ptr @make_candy_text(ptr %496)
  store ptr %497, ptr @"Core:fixedDecimal:toText:32", align 8
  %498 = alloca i8, i64 28, align 1
  store [28 x i8] c"Core:fixedDecimal:toText:33\00", ptr %498, align 1
  %499 = call ptr @make_candy_text(ptr %498)
  store ptr %499, ptr @"Core:fixedDecimal:toText:33", align 8
  %500 = alloca i8, i64 27, align 1
  store [27 x i8] c"Core:fixedDecimal:toText:4\00", ptr %500, align 1
  %501 = call ptr @make_candy_text(ptr %500)
  store ptr %501, ptr @"Core:fixedDecimal:toText:4", align 8
  %502 = alloca i8, i64 27, align 1
  store [27 x i8] c"Core:fixedDecimal:toText:7\00", ptr %502, align 1
  %503 = call ptr @make_candy_text(ptr %502)
  store ptr %503, ptr @"Core:fixedDecimal:toText:7", align 8
  %504 = alloca i8, i64 23, align 1
  store [23 x i8] c"Core:function:is0:11:3\00", ptr %504, align 1
  %505 = call ptr @make_candy_text(ptr %504)
  store ptr %505, ptr @"Core:function:is0:11:3", align 8
  %506 = alloca i8, i64 21, align 1
  store [21 x i8] c"Core:function:is0:13\00", ptr %506, align 1
  %507 = call ptr @make_candy_text(ptr %506)
  store ptr %507, ptr @"Core:function:is0:13", align 8
  %508 = alloca i8, i64 23, align 1
  store [23 x i8] c"Core:function:is2:11:3\00", ptr %508, align 1
  %509 = call ptr @make_candy_text(ptr %508)
  store ptr %509, ptr @"Core:function:is2:11:3", align 8
  %510 = alloca i8, i64 21, align 1
  store [21 x i8] c"Core:function:is2:13\00", ptr %510, align 1
  %511 = call ptr @make_candy_text(ptr %510)
  store ptr %511, ptr @"Core:function:is2:13", align 8
  %512 = alloca i8, i64 21, align 1
  store [21 x i8] c"Core:function:run:14\00", ptr %512, align 1
  %513 = call ptr @make_candy_text(ptr %512)
  store ptr %513, ptr @"Core:function:run:14", align 8
  %514 = alloca i8, i64 20, align 1
  store [20 x i8] c"Core:function:run:4\00", ptr %514, align 1
  %515 = call ptr @make_candy_text(ptr %514)
  store ptr %515, ptr @"Core:function:run:4", align 8
  %516 = alloca i8, i64 22, align 1
  store [22 x i8] c"Core:int:compareTo:20\00", ptr %516, align 1
  %517 = call ptr @make_candy_text(ptr %516)
  store ptr %517, ptr @"Core:int:compareTo:20", align 8
  %518 = alloca i8, i64 21, align 1
  store [21 x i8] c"Core:int:compareTo:4\00", ptr %518, align 1
  %519 = call ptr @make_candy_text(ptr %518)
  store ptr %519, ptr @"Core:int:compareTo:4", align 8
  %520 = alloca i8, i64 21, align 1
  store [21 x i8] c"Core:int:compareTo:9\00", ptr %520, align 1
  %521 = call ptr @make_candy_text(ptr %520)
  store ptr %521, ptr @"Core:int:compareTo:9", align 8
  %522 = alloca i8, i64 18, align 1
  store [18 x i8] c"Core:int:isEven:4\00", ptr %522, align 1
  %523 = call ptr @make_candy_text(ptr %522)
  store ptr %523, ptr @"Core:int:isEven:4", align 8
  %524 = alloca i8, i64 18, align 1
  store [18 x i8] c"Core:int:isEven:8\00", ptr %524, align 1
  %525 = call ptr @make_candy_text(ptr %524)
  store ptr %525, ptr @"Core:int:isEven:8", align 8
  %526 = alloca i8, i64 26, align 1
  store [26 x i8] c"Core:int:isGreaterThan:13\00", ptr %526, align 1
  %527 = call ptr @make_candy_text(ptr %526)
  store ptr %527, ptr @"Core:int:isGreaterThan:13", align 8
  %528 = alloca i8, i64 25, align 1
  store [25 x i8] c"Core:int:isGreaterThan:4\00", ptr %528, align 1
  %529 = call ptr @make_candy_text(ptr %528)
  store ptr %529, ptr @"Core:int:isGreaterThan:4", align 8
  %530 = alloca i8, i64 25, align 1
  store [25 x i8] c"Core:int:isGreaterThan:9\00", ptr %530, align 1
  %531 = call ptr @make_candy_text(ptr %530)
  store ptr %531, ptr @"Core:int:isGreaterThan:9", align 8
  %532 = alloca i8, i64 35, align 1
  store [35 x i8] c"Core:int:isGreaterThanOrEqualTo:13\00", ptr %532, align 1
  %533 = call ptr @make_candy_text(ptr %532)
  store ptr %533, ptr @"Core:int:isGreaterThanOrEqualTo:13", align 8
  %534 = alloca i8, i64 35, align 1
  store [35 x i8] c"Core:int:isGreaterThanOrEqualTo:22\00", ptr %534, align 1
  %535 = call ptr @make_candy_text(ptr %534)
  store ptr %535, ptr @"Core:int:isGreaterThanOrEqualTo:22", align 8
  %536 = alloca i8, i64 34, align 1
  store [34 x i8] c"Core:int:isGreaterThanOrEqualTo:4\00", ptr %536, align 1
  %537 = call ptr @make_candy_text(ptr %536)
  store ptr %537, ptr @"Core:int:isGreaterThanOrEqualTo:4", align 8
  %538 = alloca i8, i64 34, align 1
  store [34 x i8] c"Core:int:isGreaterThanOrEqualTo:9\00", ptr %538, align 1
  %539 = call ptr @make_candy_text(ptr %538)
  store ptr %539, ptr @"Core:int:isGreaterThanOrEqualTo:9", align 8
  %540 = alloca i8, i64 23, align 1
  store [23 x i8] c"Core:int:isLessThan:13\00", ptr %540, align 1
  %541 = call ptr @make_candy_text(ptr %540)
  store ptr %541, ptr @"Core:int:isLessThan:13", align 8
  %542 = alloca i8, i64 22, align 1
  store [22 x i8] c"Core:int:isLessThan:4\00", ptr %542, align 1
  %543 = call ptr @make_candy_text(ptr %542)
  store ptr %543, ptr @"Core:int:isLessThan:4", align 8
  %544 = alloca i8, i64 22, align 1
  store [22 x i8] c"Core:int:isLessThan:9\00", ptr %544, align 1
  %545 = call ptr @make_candy_text(ptr %544)
  store ptr %545, ptr @"Core:int:isLessThan:9", align 8
  %546 = alloca i8, i64 22, align 1
  store [22 x i8] c"Core:int:isNegative:4\00", ptr %546, align 1
  %547 = call ptr @make_candy_text(ptr %546)
  store ptr %547, ptr @"Core:int:isNegative:4", align 8
  %548 = alloca i8, i64 22, align 1
  store [22 x i8] c"Core:int:isNegative:8\00", ptr %548, align 1
  %549 = call ptr @make_candy_text(ptr %548)
  store ptr %549, ptr @"Core:int:isNegative:8", align 8
  %550 = alloca i8, i64 26, align 1
  store [26 x i8] c"Core:int:isNonNegative:16\00", ptr %550, align 1
  %551 = call ptr @make_candy_text(ptr %550)
  store ptr %551, ptr @"Core:int:isNonNegative:16", align 8
  %552 = alloca i8, i64 25, align 1
  store [25 x i8] c"Core:int:isNonNegative:4\00", ptr %552, align 1
  %553 = call ptr @make_candy_text(ptr %552)
  store ptr %553, ptr @"Core:int:isNonNegative:4", align 8
  %554 = alloca i8, i64 25, align 1
  store [25 x i8] c"Core:int:isNonNegative:7\00", ptr %554, align 1
  %555 = call ptr @make_candy_text(ptr %554)
  store ptr %555, ptr @"Core:int:isNonNegative:7", align 8
  %556 = alloca i8, i64 16, align 1
  store [16 x i8] c"Core:int:max:14\00", ptr %556, align 1
  %557 = call ptr @make_candy_text(ptr %556)
  store ptr %557, ptr @"Core:int:max:14", align 8
  %558 = alloca i8, i64 16, align 1
  store [16 x i8] c"Core:int:max:17\00", ptr %558, align 1
  %559 = call ptr @make_candy_text(ptr %558)
  store ptr %559, ptr @"Core:int:max:17", align 8
  %560 = alloca i8, i64 15, align 1
  store [15 x i8] c"Core:int:max:4\00", ptr %560, align 1
  %561 = call ptr @make_candy_text(ptr %560)
  store ptr %561, ptr @"Core:int:max:4", align 8
  %562 = alloca i8, i64 15, align 1
  store [15 x i8] c"Core:int:max:9\00", ptr %562, align 1
  %563 = call ptr @make_candy_text(ptr %562)
  store ptr %563, ptr @"Core:int:max:9", align 8
  %564 = alloca i8, i64 18, align 1
  store [18 x i8] c"Core:int:negate:4\00", ptr %564, align 1
  %565 = call ptr @make_candy_text(ptr %564)
  store ptr %565, ptr @"Core:int:negate:4", align 8
  %566 = alloca i8, i64 18, align 1
  store [18 x i8] c"Core:int:negate:8\00", ptr %566, align 1
  %567 = call ptr @make_candy_text(ptr %566)
  store ptr %567, ptr @"Core:int:negate:8", align 8
  %568 = alloca i8, i64 16, align 1
  store [16 x i8] c"Core:int:pow:12\00", ptr %568, align 1
  %569 = call ptr @make_candy_text(ptr %568)
  store ptr %569, ptr @"Core:int:pow:12", align 8
  %570 = alloca i8, i64 16, align 1
  store [16 x i8] c"Core:int:pow:14\00", ptr %570, align 1
  %571 = call ptr @make_candy_text(ptr %570)
  store ptr %571, ptr @"Core:int:pow:14", align 8
  %572 = alloca i8, i64 18, align 1
  store [18 x i8] c"Core:int:pow:21:1\00", ptr %572, align 1
  %573 = call ptr @make_candy_text(ptr %572)
  store ptr %573, ptr @"Core:int:pow:21:1", align 8
  %574 = alloca i8, i64 18, align 1
  store [18 x i8] c"Core:int:pow:21:4\00", ptr %574, align 1
  %575 = call ptr @make_candy_text(ptr %574)
  store ptr %575, ptr @"Core:int:pow:21:4", align 8
  %576 = alloca i8, i64 20, align 1
  store [20 x i8] c"Core:int:pow:21:4:4\00", ptr %576, align 1
  %577 = call ptr @make_candy_text(ptr %576)
  store ptr %577, ptr @"Core:int:pow:21:4:4", align 8
  %578 = alloca i8, i64 23, align 1
  store [23 x i8] c"Core:int:pow:21:4:5:10\00", ptr %578, align 1
  %579 = call ptr @make_candy_text(ptr %578)
  store ptr %579, ptr @"Core:int:pow:21:4:5:10", align 8
  %580 = alloca i8, i64 23, align 1
  store [23 x i8] c"Core:int:pow:21:4:5:12\00", ptr %580, align 1
  %581 = call ptr @make_candy_text(ptr %580)
  store ptr %581, ptr @"Core:int:pow:21:4:5:12", align 8
  %582 = alloca i8, i64 22, align 1
  store [22 x i8] c"Core:int:pow:21:4:5:5\00", ptr %582, align 1
  %583 = call ptr @make_candy_text(ptr %582)
  store ptr %583, ptr @"Core:int:pow:21:4:5:5", align 8
  %584 = alloca i8, i64 23, align 1
  store [23 x i8] c"Core:int:pow:21:4:6:12\00", ptr %584, align 1
  %585 = call ptr @make_candy_text(ptr %584)
  store ptr %585, ptr @"Core:int:pow:21:4:6:12", align 8
  %586 = alloca i8, i64 23, align 1
  store [23 x i8] c"Core:int:pow:21:4:6:15\00", ptr %586, align 1
  %587 = call ptr @make_candy_text(ptr %586)
  store ptr %587, ptr @"Core:int:pow:21:4:6:15", align 8
  %588 = alloca i8, i64 23, align 1
  store [23 x i8] c"Core:int:pow:21:4:6:17\00", ptr %588, align 1
  %589 = call ptr @make_candy_text(ptr %588)
  store ptr %589, ptr @"Core:int:pow:21:4:6:17", align 8
  %590 = alloca i8, i64 23, align 1
  store [23 x i8] c"Core:int:pow:21:4:6:18\00", ptr %590, align 1
  %591 = call ptr @make_candy_text(ptr %590)
  store ptr %591, ptr @"Core:int:pow:21:4:6:18", align 8
  %592 = alloca i8, i64 22, align 1
  store [22 x i8] c"Core:int:pow:21:4:6:7\00", ptr %592, align 1
  %593 = call ptr @make_candy_text(ptr %592)
  store ptr %593, ptr @"Core:int:pow:21:4:6:7", align 8
  %594 = alloca i8, i64 20, align 1
  store [20 x i8] c"Core:int:pow:21:4:7\00", ptr %594, align 1
  %595 = call ptr @make_candy_text(ptr %594)
  store ptr %595, ptr @"Core:int:pow:21:4:7", align 8
  %596 = alloca i8, i64 21, align 1
  store [21 x i8] c"Core:int:pow:21:base\00", ptr %596, align 1
  %597 = call ptr @make_candy_text(ptr %596)
  store ptr %597, ptr @"Core:int:pow:21:base", align 8
  %598 = alloca i8, i64 25, align 1
  store [25 x i8] c"Core:int:pow:21:exponent\00", ptr %598, align 1
  %599 = call ptr @make_candy_text(ptr %598)
  store ptr %599, ptr @"Core:int:pow:21:exponent", align 8
  %600 = alloca i8, i64 16, align 1
  store [16 x i8] c"Core:int:pow:22\00", ptr %600, align 1
  %601 = call ptr @make_candy_text(ptr %600)
  store ptr %601, ptr @"Core:int:pow:22", align 8
  %602 = alloca i8, i64 15, align 1
  store [15 x i8] c"Core:int:pow:9\00", ptr %602, align 1
  %603 = call ptr @make_candy_text(ptr %602)
  store ptr %603, ptr @"Core:int:pow:9", align 8
  %604 = alloca i8, i64 26, align 1
  store [26 x i8] c"Core:text:removePrefix:14\00", ptr %604, align 1
  %605 = call ptr @make_candy_text(ptr %604)
  store ptr %605, ptr @"Core:text:removePrefix:14", align 8
  %606 = alloca i8, i64 28, align 1
  store [28 x i8] c"Core:text:removePrefix:15:4\00", ptr %606, align 1
  %607 = call ptr @make_candy_text(ptr %606)
  store ptr %607, ptr @"Core:text:removePrefix:15:4", align 8
  %608 = alloca i8, i64 28, align 1
  store [28 x i8] c"Core:text:removePrefix:15:7\00", ptr %608, align 1
  %609 = call ptr @make_candy_text(ptr %608)
  store ptr %609, ptr @"Core:text:removePrefix:15:7", align 8
  %610 = alloca i8, i64 28, align 1
  store [28 x i8] c"Core:text:removePrefix:15:8\00", ptr %610, align 1
  %611 = call ptr @make_candy_text(ptr %610)
  store ptr %611, ptr @"Core:text:removePrefix:15:8", align 8
  %612 = alloca i8, i64 26, align 1
  store [26 x i8] c"Core:text:removePrefix:17\00", ptr %612, align 1
  %613 = call ptr @make_candy_text(ptr %612)
  store ptr %613, ptr @"Core:text:removePrefix:17", align 8
  %614 = alloca i8, i64 25, align 1
  store [25 x i8] c"Core:text:removePrefix:4\00", ptr %614, align 1
  %615 = call ptr @make_candy_text(ptr %614)
  store ptr %615, ptr @"Core:text:removePrefix:4", align 8
  %616 = alloca i8, i64 25, align 1
  store [25 x i8] c"Core:text:removePrefix:9\00", ptr %616, align 1
  %617 = call ptr @make_candy_text(ptr %616)
  store ptr %617, ptr @"Core:text:removePrefix:9", align 8
  %618 = alloca i8, i64 22, align 1
  store [22 x i8] c"Examples:sqrt:main:47\00", ptr %618, align 1
  %619 = call ptr @make_candy_text(ptr %618)
  store ptr %619, ptr @"Examples:sqrt:main:47", align 8
  %620 = alloca i8, i64 22, align 1
  store [22 x i8] c"Examples:sqrt:main:48\00", ptr %620, align 1
  %621 = call ptr @make_candy_text(ptr %620)
  store ptr %621, ptr @"Examples:sqrt:main:48", align 8
  %622 = alloca i8, i64 22, align 1
  store [22 x i8] c"Examples:sqrt:main:49\00", ptr %622, align 1
  %623 = call ptr @make_candy_text(ptr %622)
  store ptr %623, ptr @"Examples:sqrt:main:49", align 8
  %624 = alloca i8, i64 24, align 1
  store [24 x i8] c"Examples:sqrt:main:51:0\00", ptr %624, align 1
  %625 = call ptr @make_candy_text(ptr %624)
  store ptr %625, ptr @"Examples:sqrt:main:51:0", align 8
  %626 = alloca i8, i64 22, align 1
  store [22 x i8] c"Examples:sqrt:main:52\00", ptr %626, align 1
  %627 = call ptr @make_candy_text(ptr %626)
  store ptr %627, ptr @"Examples:sqrt:main:52", align 8
  %628 = alloca i8, i64 22, align 1
  store [22 x i8] c"Examples:sqrt:main:55\00", ptr %628, align 1
  %629 = call ptr @make_candy_text(ptr %628)
  store ptr %629, ptr @"Examples:sqrt:main:55", align 8
  %630 = alloca i8, i64 25, align 1
  store [25 x i8] c"Examples:sqrt:sqrt:82:28\00", ptr %630, align 1
  %631 = call ptr @make_candy_text(ptr %630)
  store ptr %631, ptr @"Examples:sqrt:sqrt:82:28", align 8
  %632 = alloca i8, i64 25, align 1
  store [25 x i8] c"Examples:sqrt:sqrt:82:29\00", ptr %632, align 1
  %633 = call ptr @make_candy_text(ptr %632)
  store ptr %633, ptr @"Examples:sqrt:sqrt:82:29", align 8
  %634 = alloca i8, i64 25, align 1
  store [25 x i8] c"Examples:sqrt:sqrt:82:41\00", ptr %634, align 1
  %635 = call ptr @make_candy_text(ptr %634)
  store ptr %635, ptr @"Examples:sqrt:sqrt:82:41", align 8
  %636 = alloca i8, i64 25, align 1
  store [25 x i8] c"Examples:sqrt:sqrt:82:55\00", ptr %636, align 1
  %637 = call ptr @make_candy_text(ptr %636)
  store ptr %637, ptr @"Examples:sqrt:sqrt:82:55", align 8
  %638 = alloca i8, i64 27, align 1
  store [27 x i8] c"Examples:sqrt:sqrt:82:57:2\00", ptr %638, align 1
  %639 = call ptr @make_candy_text(ptr %638)
  store ptr %639, ptr @"Examples:sqrt:sqrt:82:57:2", align 8
  %640 = alloca i8, i64 25, align 1
  store [25 x i8] c"Examples:sqrt:sqrt:82:58\00", ptr %640, align 1
  %641 = call ptr @make_candy_text(ptr %640)
  store ptr %641, ptr @"Examples:sqrt:sqrt:82:58", align 8
  %642 = alloca i8, i64 22, align 1
  store [22 x i8] c"Examples:sqrt:sqrt:83\00", ptr %642, align 1
  %643 = call ptr @make_candy_text(ptr %642)
  store ptr %643, ptr @"Examples:sqrt:sqrt:83", align 8
  %644 = alloca i8, i64 28, align 1
  store [28 x i8] c"anonymous:$generated::needs\00", ptr %644, align 1
  %645 = call ptr @make_candy_text(ptr %644)
  store ptr %645, ptr @"anonymous:$generated::needs", align 8
  %646 = call ptr @make_candy_function(ptr @candy_builtin_equals, ptr null, i64 0)
  store ptr %646, ptr @fun_candy_builtin_equals, align 8
  %647 = call ptr @make_candy_function(ptr @candy_builtin_get_argument_count, ptr null, i64 0)
  store ptr %647, ptr @fun_candy_builtin_get_argument_count, align 8
  %648 = call ptr @make_candy_function(ptr @candy_builtin_if_else, ptr null, i64 0)
  store ptr %648, ptr @fun_candy_builtin_if_else, align 8
  %649 = call ptr @make_candy_function(ptr @candy_builtin_int_add, ptr null, i64 0)
  store ptr %649, ptr @fun_candy_builtin_int_add, align 8
  %650 = call ptr @make_candy_function(ptr @candy_builtin_int_bitwise_and, ptr null, i64 0)
  store ptr %650, ptr @fun_candy_builtin_int_bitwise_and, align 8
  %651 = call ptr @make_candy_function(ptr @candy_builtin_int_compare_to, ptr null, i64 0)
  store ptr %651, ptr @fun_candy_builtin_int_compare_to, align 8
  %652 = call ptr @make_candy_function(ptr @candy_builtin_int_divide_truncating, ptr null, i64 0)
  store ptr %652, ptr @fun_candy_builtin_int_divide_truncating, align 8
  %653 = call ptr @make_candy_function(ptr @candy_builtin_int_multiply, ptr null, i64 0)
  store ptr %653, ptr @fun_candy_builtin_int_multiply, align 8
  %654 = call ptr @make_candy_function(ptr @candy_builtin_int_remainder, ptr null, i64 0)
  store ptr %654, ptr @fun_candy_builtin_int_remainder, align 8
  %655 = call ptr @make_candy_function(ptr @candy_builtin_int_shift_right, ptr null, i64 0)
  store ptr %655, ptr @fun_candy_builtin_int_shift_right, align 8
  %656 = call ptr @make_candy_function(ptr @candy_builtin_int_subtract, ptr null, i64 0)
  store ptr %656, ptr @fun_candy_builtin_int_subtract, align 8
  %657 = call ptr @make_candy_function(ptr @candy_builtin_list_get, ptr null, i64 0)
  store ptr %657, ptr @fun_candy_builtin_list_get, align 8
  %658 = call ptr @make_candy_function(ptr @candy_builtin_print, ptr null, i64 0)
  store ptr %658, ptr @fun_candy_builtin_print, align 8
  %659 = call ptr @make_candy_function(ptr @candy_builtin_struct_get, ptr null, i64 0)
  store ptr %659, ptr @fun_candy_builtin_struct_get, align 8
  %660 = call ptr @make_candy_function(ptr @candy_builtin_struct_has_key, ptr null, i64 0)
  store ptr %660, ptr @fun_candy_builtin_struct_has_key, align 8
  %661 = call ptr @make_candy_function(ptr @candy_builtin_tag_get_value, ptr null, i64 0)
  store ptr %661, ptr @fun_candy_builtin_tag_get_value, align 8
  %662 = call ptr @make_candy_function(ptr @candy_builtin_tag_has_value, ptr null, i64 0)
  store ptr %662, ptr @fun_candy_builtin_tag_has_value, align 8
  %663 = call ptr @make_candy_function(ptr @candy_builtin_tag_without_value, ptr null, i64 0)
  store ptr %663, ptr @fun_candy_builtin_tag_without_value, align 8
  %664 = call ptr @make_candy_function(ptr @candy_builtin_text_concatenate, ptr null, i64 0)
  store ptr %664, ptr @fun_candy_builtin_text_concatenate, align 8
  %665 = call ptr @make_candy_function(ptr @candy_builtin_text_get_range, ptr null, i64 0)
  store ptr %665, ptr @fun_candy_builtin_text_get_range, align 8
  %666 = call ptr @make_candy_function(ptr @candy_builtin_text_length, ptr null, i64 0)
  store ptr %666, ptr @fun_candy_builtin_text_length, align 8
  %667 = call ptr @make_candy_function(ptr @candy_builtin_text_starts_with, ptr null, i64 0)
  store ptr %667, ptr @fun_candy_builtin_text_starts_with, align 8
  %668 = call ptr @make_candy_function(ptr @candy_builtin_to_debug_text, ptr null, i64 0)
  store ptr %668, ptr @fun_candy_builtin_to_debug_text, align 8
  %669 = call ptr @make_candy_function(ptr @candy_builtin_type_of, ptr null, i64 0)
  store ptr %669, ptr @fun_candy_builtin_type_of, align 8
  %670 = alloca i8, i64 5, align 1
  store [5 x i8] c"Base\00", ptr %670, align 1
  %671 = call ptr @make_candy_tag(ptr %670, ptr null)
  store ptr %671, ptr @tag_Base, align 8
  %672 = alloca i8, i64 6, align 1
  store [6 x i8] c"Equal\00", ptr %672, align 1
  %673 = call ptr @make_candy_tag(ptr %672, ptr null)
  store ptr %673, ptr @tag_Equal, align 8
  %674 = alloca i8, i64 9, align 1
  store [9 x i8] c"Exponent\00", ptr %674, align 1
  %675 = call ptr @make_candy_tag(ptr %674, ptr null)
  store ptr %675, ptr @tag_Exponent, align 8
  %676 = alloca i8, i64 6, align 1
  store [6 x i8] c"False\00", ptr %676, align 1
  %677 = call ptr @make_candy_tag(ptr %676, ptr null)
  store ptr %677, ptr @tag_False, align 8
  %678 = alloca i8, i64 13, align 1
  store [13 x i8] c"FixedDecimal\00", ptr %678, align 1
  %679 = call ptr @make_candy_tag(ptr %678, ptr null)
  store ptr %679, ptr @tag_FixedDecimal, align 8
  %680 = alloca i8, i64 9, align 1
  store [9 x i8] c"Function\00", ptr %680, align 1
  %681 = call ptr @make_candy_tag(ptr %680, ptr null)
  store ptr %681, ptr @tag_Function, align 8
  %682 = alloca i8, i64 8, align 1
  store [8 x i8] c"Greater\00", ptr %682, align 1
  %683 = call ptr @make_candy_tag(ptr %682, ptr null)
  store ptr %683, ptr @tag_Greater, align 8
  %684 = alloca i8, i64 4, align 1
  store [4 x i8] c"Int\00", ptr %684, align 1
  %685 = call ptr @make_candy_tag(ptr %684, ptr null)
  store ptr %685, ptr @tag_Int, align 8
  %686 = alloca i8, i64 5, align 1
  store [5 x i8] c"Less\00", ptr %686, align 1
  %687 = call ptr @make_candy_tag(ptr %686, ptr null)
  store ptr %687, ptr @tag_Less, align 8
  %688 = alloca i8, i64 6, align 1
  store [6 x i8] c"Match\00", ptr %688, align 1
  %689 = call ptr @make_candy_tag(ptr %688, ptr null)
  store ptr %689, ptr @tag_Match, align 8
  %690 = alloca i8, i64 11, align 1
  store [11 x i8] c"MinorUnits\00", ptr %690, align 1
  %691 = call ptr @make_candy_tag(ptr %690, ptr null)
  store ptr %691, ptr @tag_MinorUnits, align 8
  %692 = alloca i8, i64 8, align 1
  store [8 x i8] c"NoMatch\00", ptr %692, align 1
  %693 = call ptr @make_candy_tag(ptr %692, ptr null)
  store ptr %693, ptr @tag_NoMatch, align 8
  %694 = alloca i8, i64 8, align 1
  store [8 x i8] c"Nothing\00", ptr %694, align 1
  %695 = call ptr @make_candy_tag(ptr %694, ptr null)
  store ptr %695, ptr @tag_Nothing, align 8
  %696 = alloca i8, i64 6, align 1
  store [6 x i8] c"Scale\00", ptr %696, align 1
  %697 = call ptr @make_candy_tag(ptr %696, ptr null)
  store ptr %697, ptr @tag_Scale, align 8
  %698 = alloca i8, i64 7, align 1
  store [7 x i8] c"Struct\00", ptr %698, align 1
  %699 = call ptr @make_candy_tag(ptr %698, ptr null)
  store ptr %699, ptr @tag_Struct, align 8
  %700 = alloca i8, i64 4, align 1
  store [4 x i8] c"Tag\00", ptr %700, align 1
  %701 = call ptr @make_candy_tag(ptr %700, ptr null)
  store ptr %701, ptr @tag_Tag, align 8
  %702 = alloca i8, i64 5, align 1
  store [5 x i8] c"Text\00", ptr %702, align 1
  %703 = call ptr @make_candy_tag(ptr %702, ptr null)
  store ptr %703, ptr @tag_Text, align 8
  %704 = alloca i8, i64 5, align 1
  store [5 x i8] c"True\00", ptr %704, align 1
  %705 = call ptr @make_candy_tag(ptr %704, ptr null)
  store ptr %705, ptr @tag_True, align 8
  %706 = call ptr @make_candy_int(i64 0)
  store ptr %706, ptr @num_0, align 8
  %707 = call ptr @make_candy_int(i64 1)
  store ptr %707, ptr @num_1, align 8
  %708 = call ptr @make_candy_int(i64 2)
  store ptr %708, ptr @num_2, align 8
  %709 = call ptr @make_candy_int(i64 10)
  store ptr %709, ptr @num_10, align 8
  %710 = call ptr @make_candy_int(i64 65)
  store ptr %710, ptr @num_65, align 8
  %711 = call ptr @make_candy_int(i64 -1)
  store ptr %711, ptr @num_340282366920938463463374607431768211455, align 8
  %712 = alloca i8, i64 3, align 1
  store [3 x i8] c"-1\00", ptr %712, align 1
  %713 = call ptr @make_candy_text(ptr %712)
  store ptr %713, ptr @text_-1, align 8
  %714 = alloca i8, i64 2, align 1
  store [2 x i8] c".\00", ptr %714, align 1
  %715 = call ptr @make_candy_text(ptr %714)
  store ptr %715, ptr @text_., align 8
  %716 = alloca i8, i64 46, align 1
  store [46 x i8] c". You might want to call `shiftLeft` instead.\00", ptr %716, align 1
  %717 = call ptr @make_candy_text(ptr %716)
  store ptr %717, ptr @"text_. You might want to call `shiftLeft` instead.", align 8
  %718 = alloca i8, i64 2, align 1
  store [2 x i8] c"1\00", ptr %718, align 1
  %719 = call ptr @make_candy_text(ptr %718)
  store ptr %719, ptr @text_1, align 8
  %720 = alloca i8, i64 16, align 1
  store [16 x i8] c"A check failed.\00", ptr %720, align 1
  %721 = call ptr @make_candy_text(ptr %720)
  store ptr %721, ptr @"text_A check failed.", align 8
  %722 = alloca i8, i64 21, align 1
  store [21 x i8] c"Expected Equal, got \00", ptr %722, align 1
  %723 = call ptr @make_candy_text(ptr %722)
  store ptr %723, ptr @"text_Expected Equal, got ", align 8
  %724 = alloca i8, i64 21, align 1
  store [21 x i8] c"Expected False, got \00", ptr %724, align 1
  %725 = call ptr @make_candy_text(ptr %724)
  store ptr %725, ptr @"text_Expected False, got ", align 8
  %726 = alloca i8, i64 28, align 1
  store [28 x i8] c"Expected FixedDecimal, got \00", ptr %726, align 1
  %727 = call ptr @make_candy_text(ptr %726)
  store ptr %727, ptr @"text_Expected FixedDecimal, got ", align 8
  %728 = alloca i8, i64 23, align 1
  store [23 x i8] c"Expected Greater, got \00", ptr %728, align 1
  %729 = call ptr @make_candy_text(ptr %728)
  store ptr %729, ptr @"text_Expected Greater, got ", align 8
  %730 = alloca i8, i64 20, align 1
  store [20 x i8] c"Expected Less, got \00", ptr %730, align 1
  %731 = call ptr @make_candy_text(ptr %730)
  store ptr %731, ptr @"text_Expected Less, got ", align 8
  %732 = alloca i8, i64 20, align 1
  store [20 x i8] c"Expected True, got \00", ptr %732, align 1
  %733 = call ptr @make_candy_text(ptr %732)
  store ptr %733, ptr @"text_Expected True, got ", align 8
  %734 = alloca i8, i64 20, align 1
  store [20 x i8] c"Expected `0`, got `\00", ptr %734, align 1
  %735 = call ptr @make_candy_text(ptr %734)
  store ptr %735, ptr @"text_Expected `0`, got `", align 8
  %736 = alloca i8, i64 25, align 1
  store [25 x i8] c"Expected a Struct, got `\00", ptr %736, align 1
  %737 = call ptr @make_candy_text(ptr %736)
  store ptr %737, ptr @"text_Expected a Struct, got `", align 8
  %738 = alloca i8, i64 22, align 1
  store [22 x i8] c"Expected a Tag, got `\00", ptr %738, align 1
  %739 = call ptr @make_candy_text(ptr %738)
  store ptr %739, ptr @"text_Expected a Tag, got `", align 8
  %740 = alloca i8, i64 55, align 1
  store [55 x i8] c"Expected tag to have a value, but it doesn't have any.\00", ptr %740, align 1
  %741 = call ptr @make_candy_text(ptr %740)
  store ptr %741, ptr @"text_Expected tag to have a value, but it doesn't have any.", align 8
  %742 = alloca i8, i64 52, align 1
  store [52 x i8] c"Expected tag to not have a value, but it has one: `\00", ptr %742, align 1
  %743 = call ptr @make_candy_text(ptr %742)
  store ptr %743, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %744 = alloca i8, i64 38, align 1
  store [38 x i8] c"No case matched the given expression.\00", ptr %744, align 1
  %745 = call ptr @make_candy_text(ptr %744)
  store ptr %745, ptr @"text_No case matched the given expression.", align 8
  %746 = alloca i8, i64 43, align 1
  store [43 x i8] c"Shifts by that much are not yet supported.\00", ptr %746, align 1
  %747 = call ptr @make_candy_text(ptr %746)
  store ptr %747, ptr @"text_Shifts by that much are not yet supported.", align 8
  %748 = alloca i8, i64 37, align 1
  store [37 x i8] c"Struct doesn't contain key `Base`: `\00", ptr %748, align 1
  %749 = call ptr @make_candy_text(ptr %748)
  store ptr %749, ptr @"text_Struct doesn't contain key `Base`: `", align 8
  %750 = alloca i8, i64 41, align 1
  store [41 x i8] c"Struct doesn't contain key `Exponent`: `\00", ptr %750, align 1
  %751 = call ptr @make_candy_text(ptr %750)
  store ptr %751, ptr @"text_Struct doesn't contain key `Exponent`: `", align 8
  %752 = alloca i8, i64 43, align 1
  store [43 x i8] c"Struct doesn't contain key `MinorUnits`: `\00", ptr %752, align 1
  %753 = call ptr @make_candy_text(ptr %752)
  store ptr %753, ptr @"text_Struct doesn't contain key `MinorUnits`: `", align 8
  %754 = alloca i8, i64 38, align 1
  store [38 x i8] c"Struct doesn't contain key `Scale`: `\00", ptr %754, align 1
  %755 = call ptr @make_candy_text(ptr %754)
  store ptr %755, ptr @"text_Struct doesn't contain key `Scale`: `", align 8
  %756 = alloca i8, i64 64, align 1
  store [64 x i8] c"The `body` should take the recursive function and the argument.\00", ptr %756, align 1
  %757 = call ptr @make_candy_text(ptr %756)
  store ptr %757, ptr @"text_The `body` should take the recursive function and the argument.", align 8
  %758 = alloca i8, i64 50, align 1
  store [50 x i8] c"The `condition` must be either `True` or `False`.\00", ptr %758, align 1
  %759 = call ptr @make_candy_text(ptr %758)
  store ptr %759, ptr @"text_The `condition` must be either `True` or `False`.", align 8
  %760 = alloca i8, i64 29, align 1
  store [29 x i8] c"The `reason` must be a text.\00", ptr %760, align 1
  %761 = call ptr @make_candy_text(ptr %760)
  store ptr %761, ptr @"text_The `reason` must be a text.", align 8
  %762 = alloca i8, i64 18, align 1
  store [18 x i8] c"The root of 2 is \00", ptr %762, align 1
  %763 = call ptr @make_candy_text(ptr %762)
  store ptr %763, ptr @"text_The root of 2 is ", align 8
  %764 = alloca i8, i64 33, align 1
  store [33 x i8] c"The shift `amount` is negative: \00", ptr %764, align 1
  %765 = call ptr @make_candy_text(ptr %764)
  store ptr %765, ptr @"text_The shift `amount` is negative: ", align 8
  %766 = alloca i8, i64 26, align 1
  store [26 x i8] c"You can't divide by zero.\00", ptr %766, align 1
  %767 = call ptr @make_candy_text(ptr %766)
  store ptr %767, ptr @"text_You can't divide by zero.", align 8
  %768 = alloca i8, i64 3, align 1
  store [3 x i8] c"`.\00", ptr %768, align 1
  %769 = call ptr @make_candy_text(ptr %768)
  store ptr %769, ptr @"text_`.", align 8
  %770 = alloca i8, i64 26, align 1
  store [26 x i8] c"`False` was not satisfied\00", ptr %770, align 1
  %771 = call ptr @make_candy_text(ptr %770)
  store ptr %771, ptr @"text_`False` was not satisfied", align 8
  %772 = alloca i8, i64 35, align 1
  store [35 x i8] c"`a | typeIs Int` was not satisfied\00", ptr %772, align 1
  %773 = call ptr @make_candy_text(ptr %772)
  store ptr %773, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %774 = alloca i8, i64 40, align 1
  store [40 x i8] c"`amount | typeIs Int` was not satisfied\00", ptr %774, align 1
  %775 = call ptr @make_candy_text(ptr %774)
  store ptr %775, ptr @"text_`amount | typeIs Int` was not satisfied", align 8
  %776 = alloca i8, i64 35, align 1
  store [35 x i8] c"`b | typeIs Int` was not satisfied\00", ptr %776, align 1
  %777 = call ptr @make_candy_text(ptr %776)
  store ptr %777, ptr @"text_`b | typeIs Int` was not satisfied", align 8
  %778 = alloca i8, i64 26, align 1
  store [26 x i8] c"`b` didn't return a bool.\00", ptr %778, align 1
  %779 = call ptr @make_candy_text(ptr %778)
  store ptr %779, ptr @"text_`b` didn't return a bool.", align 8
  %780 = alloca i8, i64 36, align 1
  store [36 x i8] c"`conditionIsBool` was not satisfied\00", ptr %780, align 1
  %781 = call ptr @make_candy_text(ptr %780)
  store ptr %781, ptr @"text_`conditionIsBool` was not satisfied", align 8
  %782 = alloca i8, i64 42, align 1
  store [42 x i8] c"`dividend | typeIs Int` was not satisfied\00", ptr %782, align 1
  %783 = call ptr @make_candy_text(ptr %782)
  store ptr %783, ptr @"text_`dividend | typeIs Int` was not satisfied", align 8
  %784 = alloca i8, i64 41, align 1
  store [41 x i8] c"`divisor | typeIs Int` was not satisfied\00", ptr %784, align 1
  %785 = call ptr @make_candy_text(ptr %784)
  store ptr %785, ptr @"text_`divisor | typeIs Int` was not satisfied", align 8
  %786 = alloca i8, i64 55, align 1
  store [55 x i8] c"`else | getArgumentCount | equals 0` was not satisfied\00", ptr %786, align 1
  %787 = call ptr @make_candy_text(ptr %786)
  store ptr %787, ptr @"text_`else | getArgumentCount | equals 0` was not satisfied", align 8
  %788 = alloca i8, i64 43, align 1
  store [43 x i8] c"`else | typeIs Function` was not satisfied\00", ptr %788, align 1
  %789 = call ptr @make_candy_text(ptr %788)
  store ptr %789, ptr @"text_`else | typeIs Function` was not satisfied", align 8
  %790 = alloca i8, i64 79, align 1
  store [77 x i8] c"`endExclusive | isLessThanOrEqualTo (text | (.textLength)` was not satisfied\00", ptr %790, align 1
  %791 = call ptr @make_candy_text(ptr %790)
  store ptr %791, ptr @"text_`endExclusive | isLessThanOrEqualTo (text | \E2\9C\A8.textLength)` was not satisfied", align 8
  %792 = alloca i8, i64 49, align 1
  store [49 x i8] c"`endExclusive | isNonNegative` was not satisfied\00", ptr %792, align 1
  %793 = call ptr @make_candy_text(ptr %792)
  store ptr %793, ptr @"text_`endExclusive | isNonNegative` was not satisfied", align 8
  %794 = alloca i8, i64 46, align 1
  store [46 x i8] c"`endExclusive | typeIs Int` was not satisfied\00", ptr %794, align 1
  %795 = call ptr @make_candy_text(ptr %794)
  store ptr %795, ptr @"text_`endExclusive | typeIs Int` was not satisfied", align 8
  %796 = alloca i8, i64 41, align 1
  store [41 x i8] c"`factorA | typeIs Int` was not satisfied\00", ptr %796, align 1
  %797 = call ptr @make_candy_text(ptr %796)
  store ptr %797, ptr @"text_`factorA | typeIs Int` was not satisfied", align 8
  %798 = alloca i8, i64 41, align 1
  store [41 x i8] c"`factorB | typeIs Int` was not satisfied\00", ptr %798, align 1
  %799 = call ptr @make_candy_text(ptr %798)
  store ptr %799, ptr @"text_`factorB | typeIs Int` was not satisfied", align 8
  %800 = alloca i8, i64 47, align 1
  store [47 x i8] c"`function | typeIs Function` was not satisfied\00", ptr %800, align 1
  %801 = call ptr @make_candy_text(ptr %800)
  store ptr %801, ptr @"text_`function | typeIs Function` was not satisfied", align 8
  %802 = alloca i8, i64 63, align 1
  store [61 x i8] c"`function | (.getArgumentCount | equals 0` was not satisfied\00", ptr %802, align 1
  %803 = call ptr @make_candy_text(ptr %802)
  store ptr %803, ptr @"text_`function | \E2\9C\A8.getArgumentCount | equals 0` was not satisfied", align 8
  %804 = alloca i8, i64 35, align 1
  store [35 x i8] c"`function.is0 b` was not satisfied\00", ptr %804, align 1
  %805 = call ptr @make_candy_text(ptr %804)
  store ptr %805, ptr @"text_`function.is0 b` was not satisfied", align 8
  %806 = alloca i8, i64 37, align 1
  store [37 x i8] c"`int | typeIs Int` was not satisfied\00", ptr %806, align 1
  %807 = call ptr @make_candy_text(ptr %806)
  store ptr %807, ptr @"text_`int | typeIs Int` was not satisfied", align 8
  %808 = alloca i8, i64 38, align 1
  store [38 x i8] c"`int.is minorUnits` was not satisfied\00", ptr %808, align 1
  %809 = call ptr @make_candy_text(ptr %808)
  store ptr %809, ptr @"text_`int.is minorUnits` was not satisfied", align 8
  %810 = alloca i8, i64 25, align 1
  store [25 x i8] c"`is a` was not satisfied\00", ptr %810, align 1
  %811 = call ptr @make_candy_text(ptr %810)
  store ptr %811, ptr @"text_`is a` was not satisfied", align 8
  %812 = alloca i8, i64 25, align 1
  store [25 x i8] c"`is b` was not satisfied\00", ptr %812, align 1
  %813 = call ptr @make_candy_text(ptr %812)
  store ptr %813, ptr @"text_`is b` was not satisfied", align 8
  %814 = alloca i8, i64 29, align 1
  store [29 x i8] c"`is delta` was not satisfied\00", ptr %814, align 1
  %815 = call ptr @make_candy_text(ptr %814)
  store ptr %815, ptr @"text_`is delta` was not satisfied", align 8
  %816 = alloca i8, i64 32, align 1
  store [32 x i8] c"`is dividend` was not satisfied\00", ptr %816, align 1
  %817 = call ptr @make_candy_text(ptr %816)
  store ptr %817, ptr @"text_`is dividend` was not satisfied", align 8
  %818 = alloca i8, i64 31, align 1
  store [31 x i8] c"`is divisor` was not satisfied\00", ptr %818, align 1
  %819 = call ptr @make_candy_text(ptr %818)
  store ptr %819, ptr @"text_`is divisor` was not satisfied", align 8
  %820 = alloca i8, i64 32, align 1
  store [32 x i8] c"`is exponent` was not satisfied\00", ptr %820, align 1
  %821 = call ptr @make_candy_text(ptr %820)
  store ptr %821, ptr @"text_`is exponent` was not satisfied", align 8
  %822 = alloca i8, i64 31, align 1
  store [31 x i8] c"`is minuend` was not satisfied\00", ptr %822, align 1
  %823 = call ptr @make_candy_text(ptr %822)
  store ptr %823, ptr @"text_`is minuend` was not satisfied", align 8
  %824 = alloca i8, i64 30, align 1
  store [30 x i8] c"`is prefix` was not satisfied\00", ptr %824, align 1
  %825 = call ptr @make_candy_text(ptr %824)
  store ptr %825, ptr @"text_`is prefix` was not satisfied", align 8
  %826 = alloca i8, i64 34, align 1
  store [34 x i8] c"`is subtrahend` was not satisfied\00", ptr %826, align 1
  %827 = call ptr @make_candy_text(ptr %826)
  store ptr %827, ptr @"text_`is subtrahend` was not satisfied", align 8
  %828 = alloca i8, i64 32, align 1
  store [32 x i8] c"`is summandA` was not satisfied\00", ptr %828, align 1
  %829 = call ptr @make_candy_text(ptr %828)
  store ptr %829, ptr @"text_`is summandA` was not satisfied", align 8
  %830 = alloca i8, i64 32, align 1
  store [32 x i8] c"`is summandB` was not satisfied\00", ptr %830, align 1
  %831 = call ptr @make_candy_text(ptr %830)
  store ptr %831, ptr @"text_`is summandB` was not satisfied", align 8
  %832 = alloca i8, i64 28, align 1
  store [28 x i8] c"`is text` was not satisfied\00", ptr %832, align 1
  %833 = call ptr @make_candy_text(ptr %832)
  store ptr %833, ptr @"text_`is text` was not satisfied", align 8
  %834 = alloca i8, i64 30, align 1
  store [30 x i8] c"`is valueA` was not satisfied\00", ptr %834, align 1
  %835 = call ptr @make_candy_text(ptr %834)
  store ptr %835, ptr @"text_`is valueA` was not satisfied", align 8
  %836 = alloca i8, i64 30, align 1
  store [30 x i8] c"`is valueB` was not satisfied\00", ptr %836, align 1
  %837 = call ptr @make_candy_text(ptr %836)
  store ptr %837, ptr @"text_`is valueB` was not satisfied", align 8
  %838 = alloca i8, i64 29, align 1
  store [29 x i8] c"`is value` was not satisfied\00", ptr %838, align 1
  %839 = call ptr @make_candy_text(ptr %838)
  store ptr %839, ptr @"text_`is value` was not satisfied", align 8
  %840 = alloca i8, i64 29, align 1
  store [29 x i8] c"`is0 body` was not satisfied\00", ptr %840, align 1
  %841 = call ptr @make_candy_text(ptr %840)
  store ptr %841, ptr @"text_`is0 body` was not satisfied", align 8
  %842 = alloca i8, i64 36, align 1
  store [36 x i8] c"`isConditionBool` was not satisfied\00", ptr %842, align 1
  %843 = call ptr @make_candy_text(ptr %842)
  store ptr %843, ptr @"text_`isConditionBool` was not satisfied", align 8
  %844 = alloca i8, i64 40, align 1
  store [40 x i8] c"`isNonNegative delta` was not satisfied\00", ptr %844, align 1
  %845 = call ptr @make_candy_text(ptr %844)
  store ptr %845, ptr @"text_`isNonNegative delta` was not satisfied", align 8
  %846 = alloca i8, i64 43, align 1
  store [43 x i8] c"`isNonNegative exponent` was not satisfied\00", ptr %846, align 1
  %847 = call ptr @make_candy_text(ptr %846)
  store ptr %847, ptr @"text_`isNonNegative exponent` was not satisfied", align 8
  %848 = alloca i8, i64 34, align 1
  store [34 x i8] c"`isScale scale` was not satisfied\00", ptr %848, align 1
  %849 = call ptr @make_candy_text(ptr %848)
  store ptr %849, ptr @"text_`isScale scale` was not satisfied", align 8
  %850 = alloca i8, i64 40, align 1
  store [40 x i8] c"`isScale targetScale` was not satisfied\00", ptr %850, align 1
  %851 = call ptr @make_candy_text(ptr %850)
  store ptr %851, ptr @"text_`isScale targetScale` was not satisfied", align 8
  %852 = alloca i8, i64 41, align 1
  store [41 x i8] c"`minuend | typeIs Int` was not satisfied\00", ptr %852, align 1
  %853 = call ptr @make_candy_text(ptr %852)
  store ptr %853, ptr @"text_`minuend | typeIs Int` was not satisfied", align 8
  %854 = alloca i8, i64 41, align 1
  store [41 x i8] c"`prefix | typeIs Text` was not satisfied\00", ptr %854, align 1
  %855 = call ptr @make_candy_text(ptr %854)
  store ptr %855, ptr @"text_`prefix | typeIs Text` was not satisfied", align 8
  %856 = alloca i8, i64 81, align 1
  store [79 x i8] c"`startInclusive | isLessThanOrEqualTo (text | (.textLength)` was not satisfied\00", ptr %856, align 1
  %857 = call ptr @make_candy_text(ptr %856)
  store ptr %857, ptr @"text_`startInclusive | isLessThanOrEqualTo (text | \E2\9C\A8.textLength)` was not satisfied", align 8
  %858 = alloca i8, i64 70, align 1
  store [70 x i8] c"`startInclusive | isLessThanOrEqualTo endExclusive` was not satisfied\00", ptr %858, align 1
  %859 = call ptr @make_candy_text(ptr %858)
  store ptr %859, ptr @"text_`startInclusive | isLessThanOrEqualTo endExclusive` was not satisfied", align 8
  %860 = alloca i8, i64 51, align 1
  store [51 x i8] c"`startInclusive | isNonNegative` was not satisfied\00", ptr %860, align 1
  %861 = call ptr @make_candy_text(ptr %860)
  store ptr %861, ptr @"text_`startInclusive | isNonNegative` was not satisfied", align 8
  %862 = alloca i8, i64 48, align 1
  store [48 x i8] c"`startInclusive | typeIs Int` was not satisfied\00", ptr %862, align 1
  %863 = call ptr @make_candy_text(ptr %862)
  store ptr %863, ptr @"text_`startInclusive | typeIs Int` was not satisfied", align 8
  %864 = alloca i8, i64 43, align 1
  store [43 x i8] c"`struct | typeIs Struct` was not satisfied\00", ptr %864, align 1
  %865 = call ptr @make_candy_text(ptr %864)
  store ptr %865, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %866 = alloca i8, i64 50, align 1
  store [48 x i8] c"`struct | (.structHasKey key` was not satisfied\00", ptr %866, align 1
  %867 = call ptr @make_candy_text(ptr %866)
  store ptr %867, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  %868 = alloca i8, i64 44, align 1
  store [44 x i8] c"`subtrahend | typeIs Int` was not satisfied\00", ptr %868, align 1
  %869 = call ptr @make_candy_text(ptr %868)
  store ptr %869, ptr @"text_`subtrahend | typeIs Int` was not satisfied", align 8
  %870 = alloca i8, i64 37, align 1
  store [37 x i8] c"`tag | typeIs Tag` was not satisfied\00", ptr %870, align 1
  %871 = call ptr @make_candy_text(ptr %870)
  store ptr %871, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %872 = alloca i8, i64 42, align 1
  store [40 x i8] c"`tag | (.tagHasValue` was not satisfied\00", ptr %872, align 1
  %873 = call ptr @make_candy_text(ptr %872)
  store ptr %873, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %874 = alloca i8, i64 39, align 1
  store [39 x i8] c"`text | typeIs Text` was not satisfied\00", ptr %874, align 1
  %875 = call ptr @make_candy_text(ptr %874)
  store ptr %875, ptr @"text_`text | typeIs Text` was not satisfied", align 8
  %876 = alloca i8, i64 55, align 1
  store [55 x i8] c"`then | getArgumentCount | equals 0` was not satisfied\00", ptr %876, align 1
  %877 = call ptr @make_candy_text(ptr %876)
  store ptr %877, ptr @"text_`then | getArgumentCount | equals 0` was not satisfied", align 8
  %878 = alloca i8, i64 43, align 1
  store [43 x i8] c"`then | typeIs Function` was not satisfied\00", ptr %878, align 1
  %879 = call ptr @make_candy_text(ptr %878)
  store ptr %879, ptr @"text_`then | typeIs Function` was not satisfied", align 8
  %880 = alloca i8, i64 42, align 1
  store [42 x i8] c"`value | isNonNegative` was not satisfied\00", ptr %880, align 1
  %881 = call ptr @make_candy_text(ptr %880)
  store ptr %881, ptr @"text_`value | isNonNegative` was not satisfied", align 8
  %882 = alloca i8, i64 39, align 1
  store [39 x i8] c"`value | typeIs Int` was not satisfied\00", ptr %882, align 1
  %883 = call ptr @make_candy_text(ptr %882)
  store ptr %883, ptr @"text_`value | typeIs Int` was not satisfied", align 8
  %884 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %885 = call ptr @make_candy_function(ptr @"Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", ptr %884, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %885, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %886 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %887 = call ptr @make_candy_function(ptr @"Core__19_isMatch_then, Core__30_isMatch_then, Core__41_isMatch_then, Core__102_isMatch_then, Core__153_isMatch_then, Core__164_isMatch_then, Core_bool_9_isMatch_then, Core_check_9_isMatch_then, Core_controlFlow_if_27, Core_controlFlow_29_isMatch_then, Core_controlFlow_50_isMatch_then, Core_fixedDecimal_19_isMatch_then, Core_fixedDecimal_30_isMatch_then, Core_fixedDecimal_41_isMatch_then, Core_fixedDecimal_52_isMatch_then, Core_fixedDecimal_103_isMatch_then, Core_function_19_isMatch_then, Core_int_pow_21_1_isMatch_then, Core_int_29_isMatch_then, Core_int_40_isMatch_then, Core_iterable_generateWithState_14_0_11_1_isMatch_then, Core_iterable_map_19_11_1_isMatch_then, Core_iterable_reduceLeft_38_1_isMatch_then, Core_iterable_take_33_1_isMatch_then, Core_iterable_takeWhile_2_11_1_isMatch_then, Core_iterable_withIndex_11_1_isMatch_then, Core_iterable_withIndex_11_14_1_isMatch_then, Core_iterable_19_isMatch_then, Core_iterable_30_isMatch_then, Core_iterable_82_11_1_isMatch_then, Core_iterable_84_2_11_1_isMatch_then, Core_iterable_84_2_11_7_15_1_isMatch_then, Core_list_generate_59_1_isMatch_then, Core_list_29_isMatch_then, Core_list_40_isMatch_then, Core_result_19_isMatch_then, Core_result_30_isMatch_then, Core_struct_19_isMatch_then, Core_tag_29_isMatch_then, Core_text_29_isMatch_then, Core_text_40_isMatch_then, Core_type_19_isMatch_then, Examples_sqrt_then, Examples_sqrt_19_isMatch_then, anonymous_$generated__needs_condition_then, anonymous_$generated__needs_isConditionBool_then, anonymous_$generated__needs_isReasonText_then", ptr %886, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %887, ptr @"fun_Core__19_isMatch_then, Core__30_isMatch_then, Core__41_isMatch_then, Core__102_isMatch_then, Core__153_isMatch_then, Core__164_isMatch_then, Core_bool_9_isMatch_then, Core_check_9_isMatch_then, Core_controlFlow_if_27, Core_controlFlow_29_isMatch_then, Core_controlFlow_50_isMatch_then, Core_fixedDecimal_19_isMatch_then, Core_fixedDecimal_30_isMatch_then, Core_fixedDecimal_41_isMatch_then, Core_fixedDecimal_52_isMatch_then, Core_fixedDecimal_103_isMatch_then, Core_function_19_isMatch_then, Core_int_pow_21_1_isMatch_then, Core_int_29_isMatch_then, Core_int_40_isMatch_then, Core_iterable_generateWithState_14_0_11_1_isMatch_then, Core_iterable_map_19_11_1_isMatch_then, Core_iterable_reduceLeft_38_1_isMatch_then, Core_iterable_take_33_1_isMatch_then, Core_iterable_takeWhile_2_11_1_isMatch_then, Core_iterable_withIndex_11_1_isMatch_then, Core_iterable_withIndex_11_14_1_isMatch_then, Core_iterable_19_isMatch_then, Core_iterable_30_isMatch_then, Core_iterable_82_11_1_isMatch_then, Core_iterable_84_2_11_1_isMatch_then, Core_iterable_84_2_11_7_15_1_isMatch_then, Core_list_generate_59_1_isMatch_then, Core_list_29_isMatch_then, Core_list_40_isMatch_then, Core_result_19_isMatch_then, Core_result_30_isMatch_then, Core_struct_19_isMatch_then, Core_tag_29_isMatch_then, Core_text_29_isMatch_then, Core_text_40_isMatch_then, Core_type_19_isMatch_then, Examples_sqrt_then, Examples_sqrt_19_isMatch_then, anonymous_$generated__needs_condition_then, anonymous_$generated__needs_isConditionBool_then, anonymous_$generated__needs_isReasonText_then", align 8
  %888 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %889 = call ptr @make_candy_function(ptr @"anonymous_$generated__needs", ptr %888, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %889, ptr @"fun_anonymous_$generated__needs", align 8
  %890 = alloca ptr, i64 2, align 8
  %891 = load ptr, ptr @tag_Match, align 8
  %892 = getelementptr ptr, ptr %890, i64 0
  store ptr %891, ptr %892, align 8
  %893 = getelementptr ptr, ptr %890, i64 1
  store ptr null, ptr %893, align 8
  %894 = call ptr @make_candy_list(ptr %890)
  store ptr %894, ptr @0, align 8
  %895 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %896 = call ptr @make_candy_function(ptr @"Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", ptr %895, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %896, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %897 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %898 = call ptr @make_candy_function(ptr @"Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", ptr %897, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %898, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %899 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %900 = call ptr @make_candy_function(ptr @Builtins__not, ptr %899, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %900, ptr @fun_Builtins__not, align 8
  %901 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %902 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_case-1_didNotMatch, ptr %901, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %902, ptr @fun_Builtins__isNonNegative_13_case-1_didNotMatch, align 8
  %903 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %904 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_case-1_didNotMatch, ptr %903, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %904, ptr @fun_Builtins__isLessThanOrEqualTo_19_case-1_didNotMatch, align 8
  %905 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %906 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo, ptr %905, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %906, ptr @fun_Builtins__isLessThanOrEqualTo, align 8
  %907 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %908 = call ptr @make_candy_function(ptr @Builtins__ifElse, ptr %907, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %908, ptr @fun_Builtins__ifElse, align 8
  %909 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %910 = call ptr @make_candy_function(ptr @Builtins__intDivideTruncating, ptr %909, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %910, ptr @fun_Builtins__intDivideTruncating, align 8
  %911 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %912 = call ptr @make_candy_function(ptr @Builtins__intRemainder, ptr %911, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %912, ptr @fun_Builtins__intRemainder, align 8
  %913 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %914 = call ptr @make_candy_function(ptr @Builtins__intShiftRight, ptr %913, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %914, ptr @fun_Builtins__intShiftRight, align 8
  %915 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %916 = call ptr @make_candy_function(ptr @Builtins__textGetRange, ptr %915, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %916, ptr @fun_Builtins__textGetRange, align 8
  %917 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %918 = call ptr @make_candy_function(ptr @Core_bool_is, ptr %917, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %918, ptr @fun_Core_bool_is, align 8
  %919 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %920 = call ptr @make_candy_function(ptr @Core_bool_not_6_case-1_didNotMatch, ptr %919, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %920, ptr @fun_Core_bool_not_6_case-1_didNotMatch, align 8
  %921 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %922 = call ptr @make_candy_function(ptr @Core_bool_not, ptr %921, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %922, ptr @fun_Core_bool_not, align 8
  %923 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %924 = call ptr @make_candy_function(ptr @Core_bool_lazyAnd_18_case-1_didNotMatch, ptr %923, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %924, ptr @fun_Core_bool_lazyAnd_18_case-1_didNotMatch, align 8
  %925 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %926 = call ptr @make_candy_function(ptr @Core_bool_lazyAnd, ptr %925, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %926, ptr @fun_Core_bool_lazyAnd, align 8
  %927 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %928 = call ptr @make_candy_function(ptr @Core_bool_lazyOr_18_case-1_didNotMatch, ptr %927, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %928, ptr @fun_Core_bool_lazyOr_18_case-1_didNotMatch, align 8
  %929 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %930 = call ptr @make_candy_function(ptr @Core_bool_lazyOr, ptr %929, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %930, ptr @fun_Core_bool_lazyOr, align 8
  %931 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %932 = call ptr @make_candy_function(ptr @Core_bool_or, ptr %931, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %932, ptr @fun_Core_bool_or, align 8
  %933 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %934 = call ptr @make_candy_function(ptr @Core_bool_implies, ptr %933, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %934, ptr @fun_Core_bool_implies, align 8
  %935 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %936 = call ptr @make_candy_function(ptr @"anonymous_$generated__needs_isConditionBool_else.421", ptr %935, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %936, ptr @"fun_anonymous_$generated__needs_isConditionBool_else.422", align 8
  %937 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %938 = call ptr @make_candy_function(ptr @Core_check_check, ptr %937, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %938, ptr @fun_Core_check_check, align 8
  %939 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %940 = call ptr @make_candy_function(ptr @Core_controlFlow_recursive, ptr %939, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %940, ptr @fun_Core_controlFlow_recursive, align 8
  %941 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %942 = call ptr @make_candy_function(ptr @Core_function_run, ptr %941, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %942, ptr @fun_Core_function_run, align 8
  %943 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %944 = call ptr @make_candy_function(ptr @Core_int_compareTo, ptr %943, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %944, ptr @fun_Core_int_compareTo, align 8
  %945 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %946 = call ptr @make_candy_function(ptr @Core_int_isLessThan, ptr %945, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %946, ptr @fun_Core_int_isLessThan, align 8
  %947 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %948 = call ptr @make_candy_function(ptr @Core_int_isGreaterThan, ptr %947, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %948, ptr @fun_Core_int_isGreaterThan, align 8
  %949 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %950 = call ptr @make_candy_function(ptr @Core_int_isNonNegative, ptr %949, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %950, ptr @fun_Core_int_isNonNegative, align 8
  %951 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %952 = call ptr @make_candy_function(ptr @Core_int_isEven, ptr %951, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %952, ptr @fun_Core_int_isEven, align 8
  %953 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %954 = call ptr @make_candy_function(ptr @Core_int_max, ptr %953, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %954, ptr @fun_Core_int_max, align 8
  %955 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %956 = call ptr @make_candy_function(ptr @Core_int_pow_21_4_case-0_matched, ptr %955, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %956, ptr @fun_Core_int_pow_21_4_case-0_matched, align 8
  %957 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %958 = call ptr @make_candy_function(ptr @Core_int_pow_21, ptr %957, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %958, ptr @fun_Core_int_pow_21, align 8
  %959 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %960 = call ptr @make_candy_function(ptr @Core_text_removePrefix, ptr %959, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %960, ptr @fun_Core_text_removePrefix, align 8
  %961 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %962 = call ptr @make_candy_function(ptr @Core_fixedDecimal_isScale, ptr %961, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %962, ptr @fun_Core_fixedDecimal_isScale, align 8
  %963 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %964 = call ptr @make_candy_function(ptr @Core_fixedDecimal_scaleFactor, ptr %963, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %964, ptr @fun_Core_fixedDecimal_scaleFactor, align 8
  %965 = alloca ptr, i64 3, align 8
  %966 = load ptr, ptr @tag_NoMatch, align 8
  %967 = getelementptr ptr, ptr %965, i64 0
  store ptr %966, ptr %967, align 8
  %968 = load ptr, ptr @"text_Expected tag to have a value, but it doesn't have any.", align 8
  %969 = getelementptr ptr, ptr %965, i64 1
  store ptr %968, ptr %969, align 8
  %970 = getelementptr ptr, ptr %965, i64 2
  store ptr null, ptr %970, align 8
  %971 = call ptr @make_candy_list(ptr %965)
  store ptr %971, ptr @134, align 8
  %972 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %973 = call ptr @make_candy_function(ptr @"Core_fixedDecimal_is_1_equals_else, Core_result_is_1_equals_else, Core_result_mapOrElse_30_equals_else", ptr %972, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %973, ptr @"fun_Core_fixedDecimal_is_1_equals_else, Core_result_is_1_equals_else, Core_result_mapOrElse_30_equals_else", align 8
  %974 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %975 = call ptr @make_candy_function(ptr @Core_fixedDecimal_fromIntScaled, ptr %974, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %975, ptr @fun_Core_fixedDecimal_fromIntScaled, align 8
  %976 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %977 = call ptr @make_candy_function(ptr @Core_fixedDecimal_rescaledMinorUnits, ptr %976, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %977, ptr @fun_Core_fixedDecimal_rescaledMinorUnits, align 8
  %978 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %979 = call ptr @make_candy_function(ptr @Core_fixedDecimal_add, ptr %978, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %979, ptr @fun_Core_fixedDecimal_add, align 8
  %980 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %981 = call ptr @make_candy_function(ptr @Core_fixedDecimal_divideTruncatingAtScale, ptr %980, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %981, ptr @fun_Core_fixedDecimal_divideTruncatingAtScale, align 8
  %982 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %983 = call ptr @make_candy_function(ptr @Core_fixedDecimal_isLessThanOrEqualTo, ptr %982, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %983, ptr @fun_Core_fixedDecimal_isLessThanOrEqualTo, align 8
  %984 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %985 = call ptr @make_candy_function(ptr @Core_fixedDecimal_absolute, ptr %984, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %985, ptr @fun_Core_fixedDecimal_absolute, align 8
  %986 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %987 = call ptr @make_candy_function(ptr @Core_fixedDecimal_approxEquals, ptr %986, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %987, ptr @fun_Core_fixedDecimal_approxEquals, align 8
  %988 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %989 = call ptr @make_candy_function(ptr @Core_fixedDecimal_toText, ptr %988, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %989, ptr @fun_Core_fixedDecimal_toText, align 8
  %990 = alloca ptr, i64 3, align 8
  %991 = alloca ptr, i64 3, align 8
  %992 = load ptr, ptr @tag_Scale, align 8
  %993 = load ptr, ptr @num_0, align 8
  %994 = getelementptr ptr, ptr %990, i64 0
  store ptr %992, ptr %994, align 8
  %995 = getelementptr ptr, ptr %991, i64 0
  store ptr %993, ptr %995, align 8
  %996 = load ptr, ptr @tag_MinorUnits, align 8
  %997 = load ptr, ptr @num_2, align 8
  %998 = getelementptr ptr, ptr %990, i64 1
  store ptr %996, ptr %998, align 8
  %999 = getelementptr ptr, ptr %991, i64 1
  store ptr %997, ptr %999, align 8
  %1000 = getelementptr ptr, ptr %990, i64 2
  store ptr null, ptr %1000, align 8
  %1001 = getelementptr ptr, ptr %991, i64 2
  store ptr null, ptr %1001, align 8
  %1002 = call ptr @make_candy_struct(ptr %990, ptr %991)
  %1003 = alloca i8, i64 13, align 1
  store [13 x i8] c"FixedDecimal\00", ptr %1003, align 1
  %1004 = call ptr @make_candy_tag(ptr %1003, ptr %1002)
  store ptr %1004, ptr @tag_FixedDecimal.1140, align 8
  %1005 = alloca ptr, i64 3, align 8
  %1006 = alloca ptr, i64 3, align 8
  %1007 = load ptr, ptr @tag_Scale, align 8
  %1008 = load ptr, ptr @num_65, align 8
  %1009 = getelementptr ptr, ptr %1005, i64 0
  store ptr %1007, ptr %1009, align 8
  %1010 = getelementptr ptr, ptr %1006, i64 0
  store ptr %1008, ptr %1010, align 8
  %1011 = load ptr, ptr @tag_MinorUnits, align 8
  %1012 = load ptr, ptr @num_10, align 8
  %1013 = getelementptr ptr, ptr %1005, i64 1
  store ptr %1011, ptr %1013, align 8
  %1014 = getelementptr ptr, ptr %1006, i64 1
  store ptr %1012, ptr %1014, align 8
  %1015 = getelementptr ptr, ptr %1005, i64 2
  store ptr null, ptr %1015, align 8
  %1016 = getelementptr ptr, ptr %1006, i64 2
  store ptr null, ptr %1016, align 8
  %1017 = call ptr @make_candy_struct(ptr %1005, ptr %1006)
  %1018 = alloca i8, i64 13, align 1
  store [13 x i8] c"FixedDecimal\00", ptr %1018, align 1
  %1019 = call ptr @make_candy_tag(ptr %1018, ptr %1017)
  store ptr %1019, ptr @tag_FixedDecimal.1141, align 8
  %1020 = alloca ptr, i64 3, align 8
  %1021 = alloca ptr, i64 3, align 8
  %1022 = load ptr, ptr @tag_Exponent, align 8
  %1023 = load ptr, ptr @num_0, align 8
  %1024 = getelementptr ptr, ptr %1020, i64 0
  store ptr %1022, ptr %1024, align 8
  %1025 = getelementptr ptr, ptr %1021, i64 0
  store ptr %1023, ptr %1025, align 8
  %1026 = load ptr, ptr @tag_Base, align 8
  %1027 = load ptr, ptr @num_10, align 8
  %1028 = getelementptr ptr, ptr %1020, i64 1
  store ptr %1026, ptr %1028, align 8
  %1029 = getelementptr ptr, ptr %1021, i64 1
  store ptr %1027, ptr %1029, align 8
  %1030 = getelementptr ptr, ptr %1020, i64 2
  store ptr null, ptr %1030, align 8
  %1031 = getelementptr ptr, ptr %1021, i64 2
  store ptr null, ptr %1031, align 8
  %1032 = call ptr @make_candy_struct(ptr %1020, ptr %1021)
  %1033 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %1034 = call ptr @make_candy_function(ptr @Core_controlFlow_recursive_18.1142, ptr %1033, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %1034, ptr @fun_Core_controlFlow_recursive_18.1143, align 8
  %1035 = alloca ptr, i64 3, align 8
  %1036 = alloca ptr, i64 3, align 8
  %1037 = load ptr, ptr @tag_Exponent, align 8
  %1038 = load ptr, ptr @num_65, align 8
  %1039 = getelementptr ptr, ptr %1035, i64 0
  store ptr %1037, ptr %1039, align 8
  %1040 = getelementptr ptr, ptr %1036, i64 0
  store ptr %1038, ptr %1040, align 8
  %1041 = load ptr, ptr @tag_Base, align 8
  %1042 = load ptr, ptr @num_10, align 8
  %1043 = getelementptr ptr, ptr %1035, i64 1
  store ptr %1041, ptr %1043, align 8
  %1044 = getelementptr ptr, ptr %1036, i64 1
  store ptr %1042, ptr %1044, align 8
  %1045 = getelementptr ptr, ptr %1035, i64 2
  store ptr null, ptr %1045, align 8
  %1046 = getelementptr ptr, ptr %1036, i64 2
  store ptr null, ptr %1046, align 8
  %1047 = call ptr @make_candy_struct(ptr %1035, ptr %1036)
  %1048 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %1049 = getelementptr inbounds { ptr }, ptr %1048, i32 0, i32 0
  store ptr %1047, ptr %1049, align 8
  %1050 = call ptr @make_candy_function(ptr @Examples_sqrt_sqrt_82, ptr %1048, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %1050, ptr @fun_Examples_sqrt_sqrt_82, align 8
  %1051 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %1052 = getelementptr inbounds { ptr, ptr }, ptr %1051, i32 0, i32 0
  store ptr %1047, ptr %1052, align 8
  %1053 = getelementptr inbounds { ptr, ptr }, ptr %1051, i32 0, i32 1
  store ptr %1032, ptr %1053, align 8
  %1054 = call ptr @make_candy_function(ptr @Examples_sqrt_main, ptr %1051, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %1054, ptr @fun_Examples_sqrt_main, align 8
  %1055 = call ptr @run_candy_main(ptr @fun_Examples_sqrt_main, ptr @candy_environment)
  call void @print_candy_value(ptr %1055)
  %1056 = load ptr, ptr @"Builtins::equals:6", align 8
  call void @free_candy_value(ptr %1056)
  %1057 = load ptr, ptr @"Builtins::fitsInRustU128:10", align 8
  call void @free_candy_value(ptr %1057)
  %1058 = load ptr, ptr @"Builtins::fitsInRustU128:16", align 8
  call void @free_candy_value(ptr %1058)
  %1059 = load ptr, ptr @"Builtins::fitsInRustU128:5", align 8
  call void @free_candy_value(ptr %1059)
  %1060 = load ptr, ptr @"Builtins::fitsInRustU128:8", align 8
  call void @free_candy_value(ptr %1060)
  %1061 = load ptr, ptr @"Builtins::functionRun:11", align 8
  call void @free_candy_value(ptr %1061)
  %1062 = load ptr, ptr @"Builtins::functionRun:16", align 8
  call void @free_candy_value(ptr %1062)
  %1063 = load ptr, ptr @"Builtins::functionRun:22", align 8
  call void @free_candy_value(ptr %1063)
  %1064 = load ptr, ptr @"Builtins::functionRun:5", align 8
  call void @free_candy_value(ptr %1064)
  %1065 = load ptr, ptr @"Builtins::getArgumentCount:11", align 8
  call void @free_candy_value(ptr %1065)
  %1066 = load ptr, ptr @"Builtins::getArgumentCount:5", align 8
  call void @free_candy_value(ptr %1066)
  %1067 = load ptr, ptr @"Builtins::ifElse:1", align 8
  call void @free_candy_value(ptr %1067)
  %1068 = load ptr, ptr @"Builtins::ifElse:11", align 8
  call void @free_candy_value(ptr %1068)
  %1069 = load ptr, ptr @"Builtins::ifElse:14", align 8
  call void @free_candy_value(ptr %1069)
  %1070 = load ptr, ptr @"Builtins::ifElse:19", align 8
  call void @free_candy_value(ptr %1070)
  %1071 = load ptr, ptr @"Builtins::ifElse:25", align 8
  call void @free_candy_value(ptr %1071)
  %1072 = load ptr, ptr @"Builtins::ifElse:28", align 8
  call void @free_candy_value(ptr %1072)
  %1073 = load ptr, ptr @"Builtins::ifElse:33", align 8
  call void @free_candy_value(ptr %1073)
  %1074 = load ptr, ptr @"Builtins::ifElse:41", align 8
  call void @free_candy_value(ptr %1074)
  %1075 = load ptr, ptr @"Builtins::ifElse:5", align 8
  call void @free_candy_value(ptr %1075)
  %1076 = load ptr, ptr @"Builtins::intAdd:11", align 8
  call void @free_candy_value(ptr %1076)
  %1077 = load ptr, ptr @"Builtins::intAdd:18", align 8
  call void @free_candy_value(ptr %1077)
  %1078 = load ptr, ptr @"Builtins::intAdd:5", align 8
  call void @free_candy_value(ptr %1078)
  %1079 = load ptr, ptr @"Builtins::intBitwiseAnd:18", align 8
  call void @free_candy_value(ptr %1079)
  %1080 = load ptr, ptr @"Builtins::intBitwiseAnd:5", align 8
  call void @free_candy_value(ptr %1080)
  %1081 = load ptr, ptr @"Builtins::intCompareTo:11", align 8
  call void @free_candy_value(ptr %1081)
  %1082 = load ptr, ptr @"Builtins::intCompareTo:18", align 8
  call void @free_candy_value(ptr %1082)
  %1083 = load ptr, ptr @"Builtins::intCompareTo:5", align 8
  call void @free_candy_value(ptr %1083)
  %1084 = load ptr, ptr @"Builtins::intDivideTruncating:11", align 8
  call void @free_candy_value(ptr %1084)
  %1085 = load ptr, ptr @"Builtins::intDivideTruncating:17", align 8
  call void @free_candy_value(ptr %1085)
  %1086 = load ptr, ptr @"Builtins::intDivideTruncating:25", align 8
  call void @free_candy_value(ptr %1086)
  %1087 = load ptr, ptr @"Builtins::intDivideTruncating:32", align 8
  call void @free_candy_value(ptr %1087)
  %1088 = load ptr, ptr @"Builtins::intDivideTruncating:5", align 8
  call void @free_candy_value(ptr %1088)
  %1089 = load ptr, ptr @"Builtins::intMultiply:11", align 8
  call void @free_candy_value(ptr %1089)
  %1090 = load ptr, ptr @"Builtins::intMultiply:18", align 8
  call void @free_candy_value(ptr %1090)
  %1091 = load ptr, ptr @"Builtins::intMultiply:5", align 8
  call void @free_candy_value(ptr %1091)
  %1092 = load ptr, ptr @"Builtins::intRemainder:11", align 8
  call void @free_candy_value(ptr %1092)
  %1093 = load ptr, ptr @"Builtins::intRemainder:17", align 8
  call void @free_candy_value(ptr %1093)
  %1094 = load ptr, ptr @"Builtins::intRemainder:25", align 8
  call void @free_candy_value(ptr %1094)
  %1095 = load ptr, ptr @"Builtins::intRemainder:32", align 8
  call void @free_candy_value(ptr %1095)
  %1096 = load ptr, ptr @"Builtins::intRemainder:5", align 8
  call void @free_candy_value(ptr %1096)
  %1097 = load ptr, ptr @"Builtins::intShiftRight:11", align 8
  call void @free_candy_value(ptr %1097)
  %1098 = load ptr, ptr @"Builtins::intShiftRight:14", align 8
  call void @free_candy_value(ptr %1098)
  %1099 = load ptr, ptr @"Builtins::intShiftRight:23", align 8
  call void @free_candy_value(ptr %1099)
  %1100 = load ptr, ptr @"Builtins::intShiftRight:24", align 8
  call void @free_candy_value(ptr %1100)
  %1101 = load ptr, ptr @"Builtins::intShiftRight:26:0", align 8
  call void @free_candy_value(ptr %1101)
  %1102 = load ptr, ptr @"Builtins::intShiftRight:27", align 8
  call void @free_candy_value(ptr %1102)
  %1103 = load ptr, ptr @"Builtins::intShiftRight:29", align 8
  call void @free_candy_value(ptr %1103)
  %1104 = load ptr, ptr @"Builtins::intShiftRight:30", align 8
  call void @free_candy_value(ptr %1104)
  %1105 = load ptr, ptr @"Builtins::intShiftRight:31", align 8
  call void @free_candy_value(ptr %1105)
  %1106 = load ptr, ptr @"Builtins::intShiftRight:34", align 8
  call void @free_candy_value(ptr %1106)
  %1107 = load ptr, ptr @"Builtins::intShiftRight:42", align 8
  call void @free_candy_value(ptr %1107)
  %1108 = load ptr, ptr @"Builtins::intShiftRight:49", align 8
  call void @free_candy_value(ptr %1108)
  %1109 = load ptr, ptr @"Builtins::intShiftRight:5", align 8
  call void @free_candy_value(ptr %1109)
  %1110 = load ptr, ptr @"Builtins::intSubtract:11", align 8
  call void @free_candy_value(ptr %1110)
  %1111 = load ptr, ptr @"Builtins::intSubtract:18", align 8
  call void @free_candy_value(ptr %1111)
  %1112 = load ptr, ptr @"Builtins::intSubtract:5", align 8
  call void @free_candy_value(ptr %1112)
  %1113 = load ptr, ptr @"Builtins::isLessThanOrEqualTo:11", align 8
  call void @free_candy_value(ptr %1113)
  %1114 = load ptr, ptr @"Builtins::isLessThanOrEqualTo:18", align 8
  call void @free_candy_value(ptr %1114)
  %1115 = load ptr, ptr @"Builtins::isLessThanOrEqualTo:19", align 8
  call void @free_candy_value(ptr %1115)
  %1116 = load ptr, ptr @"Builtins::isLessThanOrEqualTo:5", align 8
  call void @free_candy_value(ptr %1116)
  %1117 = load ptr, ptr @"Builtins::isNonNegative:12", align 8
  call void @free_candy_value(ptr %1117)
  %1118 = load ptr, ptr @"Builtins::isNonNegative:13", align 8
  call void @free_candy_value(ptr %1118)
  %1119 = load ptr, ptr @"Builtins::isNonNegative:5", align 8
  call void @free_candy_value(ptr %1119)
  %1120 = load ptr, ptr @"Builtins::not:1", align 8
  call void @free_candy_value(ptr %1120)
  %1121 = load ptr, ptr @"Builtins::print:11", align 8
  call void @free_candy_value(ptr %1121)
  %1122 = load ptr, ptr @"Builtins::structGet:12", align 8
  call void @free_candy_value(ptr %1122)
  %1123 = load ptr, ptr @"Builtins::structGet:14", align 8
  call void @free_candy_value(ptr %1123)
  %1124 = load ptr, ptr @"Builtins::structGet:21", align 8
  call void @free_candy_value(ptr %1124)
  %1125 = load ptr, ptr @"Builtins::structGet:5", align 8
  call void @free_candy_value(ptr %1125)
  %1126 = load ptr, ptr @"Builtins::tagGetValue:11", align 8
  call void @free_candy_value(ptr %1126)
  %1127 = load ptr, ptr @"Builtins::tagGetValue:13", align 8
  call void @free_candy_value(ptr %1127)
  %1128 = load ptr, ptr @"Builtins::tagGetValue:19", align 8
  call void @free_candy_value(ptr %1128)
  %1129 = load ptr, ptr @"Builtins::tagGetValue:5", align 8
  call void @free_candy_value(ptr %1129)
  %1130 = load ptr, ptr @"Builtins::textGetRange:11", align 8
  call void @free_candy_value(ptr %1130)
  %1131 = load ptr, ptr @"Builtins::textGetRange:14", align 8
  call void @free_candy_value(ptr %1131)
  %1132 = load ptr, ptr @"Builtins::textGetRange:16", align 8
  call void @free_candy_value(ptr %1132)
  %1133 = load ptr, ptr @"Builtins::textGetRange:24", align 8
  call void @free_candy_value(ptr %1133)
  %1134 = load ptr, ptr @"Builtins::textGetRange:25", align 8
  call void @free_candy_value(ptr %1134)
  %1135 = load ptr, ptr @"Builtins::textGetRange:27", align 8
  call void @free_candy_value(ptr %1135)
  %1136 = load ptr, ptr @"Builtins::textGetRange:33", align 8
  call void @free_candy_value(ptr %1136)
  %1137 = load ptr, ptr @"Builtins::textGetRange:36", align 8
  call void @free_candy_value(ptr %1137)
  %1138 = load ptr, ptr @"Builtins::textGetRange:38", align 8
  call void @free_candy_value(ptr %1138)
  %1139 = load ptr, ptr @"Builtins::textGetRange:46", align 8
  call void @free_candy_value(ptr %1139)
  %1140 = load ptr, ptr @"Builtins::textGetRange:47", align 8
  call void @free_candy_value(ptr %1140)
  %1141 = load ptr, ptr @"Builtins::textGetRange:49", align 8
  call void @free_candy_value(ptr %1141)
  %1142 = load ptr, ptr @"Builtins::textGetRange:5", align 8
  call void @free_candy_value(ptr %1142)
  %1143 = load ptr, ptr @"Builtins::textGetRange:53", align 8
  call void @free_candy_value(ptr %1143)
  %1144 = load ptr, ptr @"Builtins::textGetRange:55", align 8
  call void @free_candy_value(ptr %1144)
  %1145 = load ptr, ptr @"Builtins::textGetRange:63", align 8
  call void @free_candy_value(ptr %1145)
  %1146 = load ptr, ptr @"Builtins::textLength:11", align 8
  call void @free_candy_value(ptr %1146)
  %1147 = load ptr, ptr @"Builtins::textLength:5", align 8
  call void @free_candy_value(ptr %1147)
  %1148 = load ptr, ptr @"Builtins::textStartsWith:11", align 8
  call void @free_candy_value(ptr %1148)
  %1149 = load ptr, ptr @"Builtins::textStartsWith:18", align 8
  call void @free_candy_value(ptr %1149)
  %1150 = load ptr, ptr @"Builtins::textStartsWith:5", align 8
  call void @free_candy_value(ptr %1150)
  %1151 = load ptr, ptr @"Builtins::toDebugText:5", align 8
  call void @free_candy_value(ptr %1151)
  %1152 = load ptr, ptr @"Builtins::typeIs:19", align 8
  call void @free_candy_value(ptr %1152)
  %1153 = load ptr, ptr @"Builtins::typeIs:25", align 8
  call void @free_candy_value(ptr %1153)
  %1154 = load ptr, ptr @"Builtins::typeOf:5", align 8
  call void @free_candy_value(ptr %1154)
  %1155 = load ptr, ptr @"Core:bool:implies:12", align 8
  call void @free_candy_value(ptr %1155)
  %1156 = load ptr, ptr @"Core:bool:implies:15", align 8
  call void @free_candy_value(ptr %1156)
  %1157 = load ptr, ptr @"Core:bool:implies:4", align 8
  call void @free_candy_value(ptr %1157)
  %1158 = load ptr, ptr @"Core:bool:implies:9", align 8
  call void @free_candy_value(ptr %1158)
  %1159 = load ptr, ptr @"Core:bool:is:1", align 8
  call void @free_candy_value(ptr %1159)
  %1160 = load ptr, ptr @"Core:bool:lazyAnd:16", align 8
  call void @free_candy_value(ptr %1160)
  %1161 = load ptr, ptr @"Core:bool:lazyAnd:18", align 8
  call void @free_candy_value(ptr %1161)
  %1162 = load ptr, ptr @"Core:bool:lazyAnd:18:13", align 8
  call void @free_candy_value(ptr %1162)
  %1163 = load ptr, ptr @"Core:bool:lazyAnd:18:21", align 8
  call void @free_candy_value(ptr %1163)
  %1164 = load ptr, ptr @"Core:bool:lazyAnd:18:9", align 8
  call void @free_candy_value(ptr %1164)
  %1165 = load ptr, ptr @"Core:bool:lazyAnd:4", align 8
  call void @free_candy_value(ptr %1165)
  %1166 = load ptr, ptr @"Core:bool:lazyOr:16", align 8
  call void @free_candy_value(ptr %1166)
  %1167 = load ptr, ptr @"Core:bool:lazyOr:18", align 8
  call void @free_candy_value(ptr %1167)
  %1168 = load ptr, ptr @"Core:bool:lazyOr:18:10", align 8
  call void @free_candy_value(ptr %1168)
  %1169 = load ptr, ptr @"Core:bool:lazyOr:18:14", align 8
  call void @free_candy_value(ptr %1169)
  %1170 = load ptr, ptr @"Core:bool:lazyOr:18:22", align 8
  call void @free_candy_value(ptr %1170)
  %1171 = load ptr, ptr @"Core:bool:lazyOr:4", align 8
  call void @free_candy_value(ptr %1171)
  %1172 = load ptr, ptr @"Core:bool:not:4", align 8
  call void @free_candy_value(ptr %1172)
  %1173 = load ptr, ptr @"Core:bool:not:6", align 8
  call void @free_candy_value(ptr %1173)
  %1174 = load ptr, ptr @"Core:bool:or:13", align 8
  call void @free_candy_value(ptr %1174)
  %1175 = load ptr, ptr @"Core:bool:or:4", align 8
  call void @free_candy_value(ptr %1175)
  %1176 = load ptr, ptr @"Core:bool:or:9", align 8
  call void @free_candy_value(ptr %1176)
  %1177 = load ptr, ptr @"Core:check:check:1", align 8
  call void @free_candy_value(ptr %1177)
  %1178 = load ptr, ptr @"Core:check:check:14", align 8
  call void @free_candy_value(ptr %1178)
  %1179 = load ptr, ptr @"Core:check:check:5", align 8
  call void @free_candy_value(ptr %1179)
  %1180 = load ptr, ptr @"Core:controlFlow:recursive:17", align 8
  call void @free_candy_value(ptr %1180)
  %1181 = load ptr, ptr @"Core:controlFlow:recursive:18:0:3", align 8
  call void @free_candy_value(ptr %1181)
  %1182 = load ptr, ptr @"Core:controlFlow:recursive:18:5", align 8
  call void @free_candy_value(ptr %1182)
  %1183 = load ptr, ptr @"Core:controlFlow:recursive:23", align 8
  call void @free_candy_value(ptr %1183)
  %1184 = load ptr, ptr @"Core:fixedDecimal:absolute:11", align 8
  call void @free_candy_value(ptr %1184)
  %1185 = load ptr, ptr @"Core:fixedDecimal:absolute:4", align 8
  call void @free_candy_value(ptr %1185)
  %1186 = load ptr, ptr @"Core:fixedDecimal:absolute:8", align 8
  call void @free_candy_value(ptr %1186)
  %1187 = load ptr, ptr @"Core:fixedDecimal:absolute:9:2", align 8
  call void @free_candy_value(ptr %1187)
  %1188 = load ptr, ptr @"Core:fixedDecimal:add:13", align 8
  call void @free_candy_value(ptr %1188)
  %1189 = load ptr, ptr @"Core:fixedDecimal:add:27", align 8
  call void @free_candy_value(ptr %1189)
  %1190 = load ptr, ptr @"Core:fixedDecimal:add:29", align 8
  call void @free_candy_value(ptr %1190)
  %1191 = load ptr, ptr @"Core:fixedDecimal:add:4", align 8
  call void @free_candy_value(ptr %1191)
  %1192 = load ptr, ptr @"Core:fixedDecimal:add:9", align 8
  call void @free_candy_value(ptr %1192)
  %1193 = load ptr, ptr @"Core:fixedDecimal:approxEquals:14", align 8
  call void @free_candy_value(ptr %1193)
  %1194 = load ptr, ptr @"Core:fixedDecimal:approxEquals:17", align 8
  call void @free_candy_value(ptr %1194)
  %1195 = load ptr, ptr @"Core:fixedDecimal:approxEquals:19", align 8
  call void @free_candy_value(ptr %1195)
  %1196 = load ptr, ptr @"Core:fixedDecimal:approxEquals:23", align 8
  call void @free_candy_value(ptr %1196)
  %1197 = load ptr, ptr @"Core:fixedDecimal:approxEquals:25", align 8
  call void @free_candy_value(ptr %1197)
  %1198 = load ptr, ptr @"Core:fixedDecimal:approxEquals:28", align 8
  call void @free_candy_value(ptr %1198)
  %1199 = load ptr, ptr @"Core:fixedDecimal:approxEquals:4", align 8
  call void @free_candy_value(ptr %1199)
  %1200 = load ptr, ptr @"Core:fixedDecimal:approxEquals:9", align 8
  call void @free_candy_value(ptr %1200)
  %1201 = load ptr, ptr @"Core:fixedDecimal:comparableMinorUnits:20", align 8
  call void @free_candy_value(ptr %1201)
  %1202 = load ptr, ptr @"Core:fixedDecimal:comparableMinorUnits:23", align 8
  call void @free_candy_value(ptr %1202)
  %1203 = load ptr, ptr @"Core:fixedDecimal:comparableMinorUnits:24", align 8
  call void @free_candy_value(ptr %1203)
  %1204 = load ptr, ptr @"Core:fixedDecimal:comparableMinorUnits:30", align 8
  call void @free_candy_value(ptr %1204)
  %1205 = load ptr, ptr @"Core:fixedDecimal:comparableMinorUnits:35", align 8
  call void @free_candy_value(ptr %1205)
  %1206 = load ptr, ptr @"Core:fixedDecimal:comparableMinorUnits:4", align 8
  call void @free_candy_value(ptr %1206)
  %1207 = load ptr, ptr @"Core:fixedDecimal:comparableMinorUnits:9", align 8
  call void @free_candy_value(ptr %1207)
  %1208 = load ptr, ptr @"Core:fixedDecimal:compareTo:13", align 8
  call void @free_candy_value(ptr %1208)
  %1209 = load ptr, ptr @"Core:fixedDecimal:compareTo:26", align 8
  call void @free_candy_value(ptr %1209)
  %1210 = load ptr, ptr @"Core:fixedDecimal:compareTo:4", align 8
  call void @free_candy_value(ptr %1210)
  %1211 = load ptr, ptr @"Core:fixedDecimal:compareTo:45", align 8
  call void @free_candy_value(ptr %1211)
  %1212 = load ptr, ptr @"Core:fixedDecimal:compareTo:46", align 8
  call void @free_candy_value(ptr %1212)
  %1213 = load ptr, ptr @"Core:fixedDecimal:compareTo:9", align 8
  call void @free_candy_value(ptr %1213)
  %1214 = load ptr, ptr @"Core:fixedDecimal:divideTruncatingAtScale:14", align 8
  call void @free_candy_value(ptr %1214)
  %1215 = load ptr, ptr @"Core:fixedDecimal:divideTruncatingAtScale:17", align 8
  call void @free_candy_value(ptr %1215)
  %1216 = load ptr, ptr @"Core:fixedDecimal:divideTruncatingAtScale:29", align 8
  call void @free_candy_value(ptr %1216)
  %1217 = load ptr, ptr @"Core:fixedDecimal:divideTruncatingAtScale:37", align 8
  call void @free_candy_value(ptr %1217)
  %1218 = load ptr, ptr @"Core:fixedDecimal:divideTruncatingAtScale:4", align 8
  call void @free_candy_value(ptr %1218)
  %1219 = load ptr, ptr @"Core:fixedDecimal:divideTruncatingAtScale:41", align 8
  call void @free_candy_value(ptr %1219)
  %1220 = load ptr, ptr @"Core:fixedDecimal:divideTruncatingAtScale:56", align 8
  call void @free_candy_value(ptr %1220)
  %1221 = load ptr, ptr @"Core:fixedDecimal:divideTruncatingAtScale:57", align 8
  call void @free_candy_value(ptr %1221)
  %1222 = load ptr, ptr @"Core:fixedDecimal:divideTruncatingAtScale:67", align 8
  call void @free_candy_value(ptr %1222)
  %1223 = load ptr, ptr @"Core:fixedDecimal:divideTruncatingAtScale:69", align 8
  call void @free_candy_value(ptr %1223)
  %1224 = load ptr, ptr @"Core:fixedDecimal:divideTruncatingAtScale:9", align 8
  call void @free_candy_value(ptr %1224)
  %1225 = load ptr, ptr @"Core:fixedDecimal:floorToInt:18", align 8
  call void @free_candy_value(ptr %1225)
  %1226 = load ptr, ptr @"Core:fixedDecimal:floorToInt:20", align 8
  call void @free_candy_value(ptr %1226)
  %1227 = load ptr, ptr @"Core:fixedDecimal:floorToInt:21", align 8
  call void @free_candy_value(ptr %1227)
  %1228 = load ptr, ptr @"Core:fixedDecimal:floorToInt:4", align 8
  call void @free_candy_value(ptr %1228)
  %1229 = load ptr, ptr @"Core:fixedDecimal:floorToInt:7", align 8
  call void @free_candy_value(ptr %1229)
  %1230 = load ptr, ptr @"Core:fixedDecimal:fromIntScaled:11", align 8
  call void @free_candy_value(ptr %1230)
  %1231 = load ptr, ptr @"Core:fixedDecimal:fromIntScaled:16", align 8
  call void @free_candy_value(ptr %1231)
  %1232 = load ptr, ptr @"Core:fixedDecimal:is:1", align 8
  call void @free_candy_value(ptr %1232)
  %1233 = load ptr, ptr @"Core:fixedDecimal:is:1:18:2", align 8
  call void @free_candy_value(ptr %1233)
  %1234 = load ptr, ptr @"Core:fixedDecimal:is:1:19", align 8
  call void @free_candy_value(ptr %1234)
  %1235 = load ptr, ptr @"Core:fixedDecimal:is:1:minorUnits", align 8
  call void @free_candy_value(ptr %1235)
  %1236 = load ptr, ptr @"Core:fixedDecimal:is:1:scale", align 8
  call void @free_candy_value(ptr %1236)
  %1237 = load ptr, ptr @"Core:fixedDecimal:isGreaterThan:14", align 8
  call void @free_candy_value(ptr %1237)
  %1238 = load ptr, ptr @"Core:fixedDecimal:isGreaterThan:4", align 8
  call void @free_candy_value(ptr %1238)
  %1239 = load ptr, ptr @"Core:fixedDecimal:isGreaterThan:9", align 8
  call void @free_candy_value(ptr %1239)
  %1240 = load ptr, ptr @"Core:fixedDecimal:isLessThanOrEqualTo:13", align 8
  call void @free_candy_value(ptr %1240)
  %1241 = load ptr, ptr @"Core:fixedDecimal:isLessThanOrEqualTo:22", align 8
  call void @free_candy_value(ptr %1241)
  %1242 = load ptr, ptr @"Core:fixedDecimal:isLessThanOrEqualTo:4", align 8
  call void @free_candy_value(ptr %1242)
  %1243 = load ptr, ptr @"Core:fixedDecimal:isLessThanOrEqualTo:9", align 8
  call void @free_candy_value(ptr %1243)
  %1244 = load ptr, ptr @"Core:fixedDecimal:isNegative:17", align 8
  call void @free_candy_value(ptr %1244)
  %1245 = load ptr, ptr @"Core:fixedDecimal:isNegative:4", align 8
  call void @free_candy_value(ptr %1245)
  %1246 = load ptr, ptr @"Core:fixedDecimal:isNegative:7", align 8
  call void @free_candy_value(ptr %1246)
  %1247 = load ptr, ptr @"Core:fixedDecimal:isNonNegative:16", align 8
  call void @free_candy_value(ptr %1247)
  %1248 = load ptr, ptr @"Core:fixedDecimal:isNonNegative:4", align 8
  call void @free_candy_value(ptr %1248)
  %1249 = load ptr, ptr @"Core:fixedDecimal:isNonNegative:7", align 8
  call void @free_candy_value(ptr %1249)
  %1250 = load ptr, ptr @"Core:fixedDecimal:isScale:18:9", align 8
  call void @free_candy_value(ptr %1250)
  %1251 = load ptr, ptr @"Core:fixedDecimal:isScale:19", align 8
  call void @free_candy_value(ptr %1251)
  %1252 = load ptr, ptr @"Core:fixedDecimal:minorUnits:19", align 8
  call void @free_candy_value(ptr %1252)
  %1253 = load ptr, ptr @"Core:fixedDecimal:minorUnits:21", align 8
  call void @free_candy_value(ptr %1253)
  %1254 = load ptr, ptr @"Core:fixedDecimal:minorUnits:4", align 8
  call void @free_candy_value(ptr %1254)
  %1255 = load ptr, ptr @"Core:fixedDecimal:negate:17", align 8
  call void @free_candy_value(ptr %1255)
  %1256 = load ptr, ptr @"Core:fixedDecimal:negate:20", align 8
  call void @free_candy_value(ptr %1256)
  %1257 = load ptr, ptr @"Core:fixedDecimal:negate:21", align 8
  call void @free_candy_value(ptr %1257)
  %1258 = load ptr, ptr @"Core:fixedDecimal:negate:4", align 8
  call void @free_candy_value(ptr %1258)
  %1259 = load ptr, ptr @"Core:fixedDecimal:negate:8", align 8
  call void @free_candy_value(ptr %1259)
  %1260 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:13", align 8
  call void @free_candy_value(ptr %1260)
  %1261 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:23", align 8
  call void @free_candy_value(ptr %1261)
  %1262 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:24:14", align 8
  call void @free_candy_value(ptr %1262)
  %1263 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:24:2", align 8
  call void @free_candy_value(ptr %1263)
  %1264 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:24:24", align 8
  call void @free_candy_value(ptr %1264)
  %1265 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:24:25", align 8
  call void @free_candy_value(ptr %1265)
  %1266 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:24:26", align 8
  call void @free_candy_value(ptr %1266)
  %1267 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:25:2", align 8
  call void @free_candy_value(ptr %1267)
  %1268 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:25:23", align 8
  call void @free_candy_value(ptr %1268)
  %1269 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:25:24", align 8
  call void @free_candy_value(ptr %1269)
  %1270 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:25:25", align 8
  call void @free_candy_value(ptr %1270)
  %1271 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:25:26", align 8
  call void @free_candy_value(ptr %1271)
  %1272 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:26", align 8
  call void @free_candy_value(ptr %1272)
  %1273 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:4", align 8
  call void @free_candy_value(ptr %1273)
  %1274 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:9", align 8
  call void @free_candy_value(ptr %1274)
  %1275 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  call void @free_candy_value(ptr %1275)
  %1276 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  call void @free_candy_value(ptr %1276)
  %1277 = load ptr, ptr @"Core:fixedDecimal:scale:4", align 8
  call void @free_candy_value(ptr %1277)
  %1278 = load ptr, ptr @"Core:fixedDecimal:scaleFactor:15", align 8
  call void @free_candy_value(ptr %1278)
  %1279 = load ptr, ptr @"Core:fixedDecimal:scaleFactor:4", align 8
  call void @free_candy_value(ptr %1279)
  %1280 = load ptr, ptr @"Core:fixedDecimal:subtract:13", align 8
  call void @free_candy_value(ptr %1280)
  %1281 = load ptr, ptr @"Core:fixedDecimal:subtract:27", align 8
  call void @free_candy_value(ptr %1281)
  %1282 = load ptr, ptr @"Core:fixedDecimal:subtract:29", align 8
  call void @free_candy_value(ptr %1282)
  %1283 = load ptr, ptr @"Core:fixedDecimal:subtract:4", align 8
  call void @free_candy_value(ptr %1283)
  %1284 = load ptr, ptr @"Core:fixedDecimal:subtract:9", align 8
  call void @free_candy_value(ptr %1284)
  %1285 = load ptr, ptr @"Core:fixedDecimal:toText:10:18", align 8
  call void @free_candy_value(ptr %1285)
  %1286 = load ptr, ptr @"Core:fixedDecimal:toText:10:2", align 8
  call void @free_candy_value(ptr %1286)
  %1287 = load ptr, ptr @"Core:fixedDecimal:toText:10:30", align 8
  call void @free_candy_value(ptr %1287)
  %1288 = load ptr, ptr @"Core:fixedDecimal:toText:10:31:10", align 8
  call void @free_candy_value(ptr %1288)
  %1289 = load ptr, ptr @"Core:fixedDecimal:toText:10:31:28", align 8
  call void @free_candy_value(ptr %1289)
  %1290 = load ptr, ptr @"Core:fixedDecimal:toText:10:32:10", align 8
  call void @free_candy_value(ptr %1290)
  %1291 = load ptr, ptr @"Core:fixedDecimal:toText:10:32:28", align 8
  call void @free_candy_value(ptr %1291)
  %1292 = load ptr, ptr @"Core:fixedDecimal:toText:10:33", align 8
  call void @free_candy_value(ptr %1292)
  %1293 = load ptr, ptr @"Core:fixedDecimal:toText:10:4", align 8
  call void @free_candy_value(ptr %1293)
  %1294 = load ptr, ptr @"Core:fixedDecimal:toText:10:8", align 8
  call void @free_candy_value(ptr %1294)
  %1295 = load ptr, ptr @"Core:fixedDecimal:toText:11", align 8
  call void @free_candy_value(ptr %1295)
  %1296 = load ptr, ptr @"Core:fixedDecimal:toText:20", align 8
  call void @free_candy_value(ptr %1296)
  %1297 = load ptr, ptr @"Core:fixedDecimal:toText:21", align 8
  call void @free_candy_value(ptr %1297)
  %1298 = load ptr, ptr @"Core:fixedDecimal:toText:23:0", align 8
  call void @free_candy_value(ptr %1298)
  %1299 = load ptr, ptr @"Core:fixedDecimal:toText:24", align 8
  call void @free_candy_value(ptr %1299)
  %1300 = load ptr, ptr @"Core:fixedDecimal:toText:27", align 8
  call void @free_candy_value(ptr %1300)
  %1301 = load ptr, ptr @"Core:fixedDecimal:toText:28", align 8
  call void @free_candy_value(ptr %1301)
  %1302 = load ptr, ptr @"Core:fixedDecimal:toText:30:0", align 8
  call void @free_candy_value(ptr %1302)
  %1303 = load ptr, ptr @"Core:fixedDecimal:toText:31", align 8
  call void @free_candy_value(ptr %1303)
  %1304 = load ptr, ptr @"Core:fixedDecimal:toText:32", align 8
  call void @free_candy_value(ptr %1304)
  %1305 = load ptr, ptr @"Core:fixedDecimal:toText:33", align 8
  call void @free_candy_value(ptr %1305)
  %1306 = load ptr, ptr @"Core:fixedDecimal:toText:4", align 8
  call void @free_candy_value(ptr %1306)
  %1307 = load ptr, ptr @"Core:fixedDecimal:toText:7", align 8
  call void @free_candy_value(ptr %1307)
  %1308 = load ptr, ptr @"Core:function:is0:11:3", align 8
  call void @free_candy_value(ptr %1308)
  %1309 = load ptr, ptr @"Core:function:is0:13", align 8
  call void @free_candy_value(ptr %1309)
  %1310 = load ptr, ptr @"Core:function:is2:11:3", align 8
  call void @free_candy_value(ptr %1310)
  %1311 = load ptr, ptr @"Core:function:is2:13", align 8
  call void @free_candy_value(ptr %1311)
  %1312 = load ptr, ptr @"Core:function:run:14", align 8
  call void @free_candy_value(ptr %1312)
  %1313 = load ptr, ptr @"Core:function:run:4", align 8
  call void @free_candy_value(ptr %1313)
  %1314 = load ptr, ptr @"Core:int:compareTo:20", align 8
  call void @free_candy_value(ptr %1314)
  %1315 = load ptr, ptr @"Core:int:compareTo:4", align 8
  call void @free_candy_value(ptr %1315)
  %1316 = load ptr, ptr @"Core:int:compareTo:9", align 8
  call void @free_candy_value(ptr %1316)
  %1317 = load ptr, ptr @"Core:int:isEven:4", align 8
  call void @free_candy_value(ptr %1317)
  %1318 = load ptr, ptr @"Core:int:isEven:8", align 8
  call void @free_candy_value(ptr %1318)
  %1319 = load ptr, ptr @"Core:int:isGreaterThan:13", align 8
  call void @free_candy_value(ptr %1319)
  %1320 = load ptr, ptr @"Core:int:isGreaterThan:4", align 8
  call void @free_candy_value(ptr %1320)
  %1321 = load ptr, ptr @"Core:int:isGreaterThan:9", align 8
  call void @free_candy_value(ptr %1321)
  %1322 = load ptr, ptr @"Core:int:isGreaterThanOrEqualTo:13", align 8
  call void @free_candy_value(ptr %1322)
  %1323 = load ptr, ptr @"Core:int:isGreaterThanOrEqualTo:22", align 8
  call void @free_candy_value(ptr %1323)
  %1324 = load ptr, ptr @"Core:int:isGreaterThanOrEqualTo:4", align 8
  call void @free_candy_value(ptr %1324)
  %1325 = load ptr, ptr @"Core:int:isGreaterThanOrEqualTo:9", align 8
  call void @free_candy_value(ptr %1325)
  %1326 = load ptr, ptr @"Core:int:isLessThan:13", align 8
  call void @free_candy_value(ptr %1326)
  %1327 = load ptr, ptr @"Core:int:isLessThan:4", align 8
  call void @free_candy_value(ptr %1327)
  %1328 = load ptr, ptr @"Core:int:isLessThan:9", align 8
  call void @free_candy_value(ptr %1328)
  %1329 = load ptr, ptr @"Core:int:isNegative:4", align 8
  call void @free_candy_value(ptr %1329)
  %1330 = load ptr, ptr @"Core:int:isNegative:8", align 8
  call void @free_candy_value(ptr %1330)
  %1331 = load ptr, ptr @"Core:int:isNonNegative:16", align 8
  call void @free_candy_value(ptr %1331)
  %1332 = load ptr, ptr @"Core:int:isNonNegative:4", align 8
  call void @free_candy_value(ptr %1332)
  %1333 = load ptr, ptr @"Core:int:isNonNegative:7", align 8
  call void @free_candy_value(ptr %1333)
  %1334 = load ptr, ptr @"Core:int:max:14", align 8
  call void @free_candy_value(ptr %1334)
  %1335 = load ptr, ptr @"Core:int:max:17", align 8
  call void @free_candy_value(ptr %1335)
  %1336 = load ptr, ptr @"Core:int:max:4", align 8
  call void @free_candy_value(ptr %1336)
  %1337 = load ptr, ptr @"Core:int:max:9", align 8
  call void @free_candy_value(ptr %1337)
  %1338 = load ptr, ptr @"Core:int:negate:4", align 8
  call void @free_candy_value(ptr %1338)
  %1339 = load ptr, ptr @"Core:int:negate:8", align 8
  call void @free_candy_value(ptr %1339)
  %1340 = load ptr, ptr @"Core:int:pow:12", align 8
  call void @free_candy_value(ptr %1340)
  %1341 = load ptr, ptr @"Core:int:pow:14", align 8
  call void @free_candy_value(ptr %1341)
  %1342 = load ptr, ptr @"Core:int:pow:21:1", align 8
  call void @free_candy_value(ptr %1342)
  %1343 = load ptr, ptr @"Core:int:pow:21:4", align 8
  call void @free_candy_value(ptr %1343)
  %1344 = load ptr, ptr @"Core:int:pow:21:4:4", align 8
  call void @free_candy_value(ptr %1344)
  %1345 = load ptr, ptr @"Core:int:pow:21:4:5:10", align 8
  call void @free_candy_value(ptr %1345)
  %1346 = load ptr, ptr @"Core:int:pow:21:4:5:12", align 8
  call void @free_candy_value(ptr %1346)
  %1347 = load ptr, ptr @"Core:int:pow:21:4:5:5", align 8
  call void @free_candy_value(ptr %1347)
  %1348 = load ptr, ptr @"Core:int:pow:21:4:6:12", align 8
  call void @free_candy_value(ptr %1348)
  %1349 = load ptr, ptr @"Core:int:pow:21:4:6:15", align 8
  call void @free_candy_value(ptr %1349)
  %1350 = load ptr, ptr @"Core:int:pow:21:4:6:17", align 8
  call void @free_candy_value(ptr %1350)
  %1351 = load ptr, ptr @"Core:int:pow:21:4:6:18", align 8
  call void @free_candy_value(ptr %1351)
  %1352 = load ptr, ptr @"Core:int:pow:21:4:6:7", align 8
  call void @free_candy_value(ptr %1352)
  %1353 = load ptr, ptr @"Core:int:pow:21:4:7", align 8
  call void @free_candy_value(ptr %1353)
  %1354 = load ptr, ptr @"Core:int:pow:21:base", align 8
  call void @free_candy_value(ptr %1354)
  %1355 = load ptr, ptr @"Core:int:pow:21:exponent", align 8
  call void @free_candy_value(ptr %1355)
  %1356 = load ptr, ptr @"Core:int:pow:22", align 8
  call void @free_candy_value(ptr %1356)
  %1357 = load ptr, ptr @"Core:int:pow:9", align 8
  call void @free_candy_value(ptr %1357)
  %1358 = load ptr, ptr @"Core:text:removePrefix:14", align 8
  call void @free_candy_value(ptr %1358)
  %1359 = load ptr, ptr @"Core:text:removePrefix:15:4", align 8
  call void @free_candy_value(ptr %1359)
  %1360 = load ptr, ptr @"Core:text:removePrefix:15:7", align 8
  call void @free_candy_value(ptr %1360)
  %1361 = load ptr, ptr @"Core:text:removePrefix:15:8", align 8
  call void @free_candy_value(ptr %1361)
  %1362 = load ptr, ptr @"Core:text:removePrefix:17", align 8
  call void @free_candy_value(ptr %1362)
  %1363 = load ptr, ptr @"Core:text:removePrefix:4", align 8
  call void @free_candy_value(ptr %1363)
  %1364 = load ptr, ptr @"Core:text:removePrefix:9", align 8
  call void @free_candy_value(ptr %1364)
  %1365 = load ptr, ptr @"Examples:sqrt:main:47", align 8
  call void @free_candy_value(ptr %1365)
  %1366 = load ptr, ptr @"Examples:sqrt:main:48", align 8
  call void @free_candy_value(ptr %1366)
  %1367 = load ptr, ptr @"Examples:sqrt:main:49", align 8
  call void @free_candy_value(ptr %1367)
  %1368 = load ptr, ptr @"Examples:sqrt:main:51:0", align 8
  call void @free_candy_value(ptr %1368)
  %1369 = load ptr, ptr @"Examples:sqrt:main:52", align 8
  call void @free_candy_value(ptr %1369)
  %1370 = load ptr, ptr @"Examples:sqrt:main:55", align 8
  call void @free_candy_value(ptr %1370)
  %1371 = load ptr, ptr @"Examples:sqrt:sqrt:82:28", align 8
  call void @free_candy_value(ptr %1371)
  %1372 = load ptr, ptr @"Examples:sqrt:sqrt:82:29", align 8
  call void @free_candy_value(ptr %1372)
  %1373 = load ptr, ptr @"Examples:sqrt:sqrt:82:41", align 8
  call void @free_candy_value(ptr %1373)
  %1374 = load ptr, ptr @"Examples:sqrt:sqrt:82:55", align 8
  call void @free_candy_value(ptr %1374)
  %1375 = load ptr, ptr @"Examples:sqrt:sqrt:82:57:2", align 8
  call void @free_candy_value(ptr %1375)
  %1376 = load ptr, ptr @"Examples:sqrt:sqrt:82:58", align 8
  call void @free_candy_value(ptr %1376)
  %1377 = load ptr, ptr @"Examples:sqrt:sqrt:83", align 8
  call void @free_candy_value(ptr %1377)
  %1378 = load ptr, ptr @"anonymous:$generated::needs", align 8
  call void @free_candy_value(ptr %1378)
  %1379 = load ptr, ptr @fun_candy_builtin_equals, align 8
  call void @free_candy_value(ptr %1379)
  %1380 = load ptr, ptr @fun_candy_builtin_get_argument_count, align 8
  call void @free_candy_value(ptr %1380)
  %1381 = load ptr, ptr @fun_candy_builtin_if_else, align 8
  call void @free_candy_value(ptr %1381)
  %1382 = load ptr, ptr @fun_candy_builtin_int_add, align 8
  call void @free_candy_value(ptr %1382)
  %1383 = load ptr, ptr @fun_candy_builtin_int_bitwise_and, align 8
  call void @free_candy_value(ptr %1383)
  %1384 = load ptr, ptr @fun_candy_builtin_int_compare_to, align 8
  call void @free_candy_value(ptr %1384)
  %1385 = load ptr, ptr @fun_candy_builtin_int_divide_truncating, align 8
  call void @free_candy_value(ptr %1385)
  %1386 = load ptr, ptr @fun_candy_builtin_int_multiply, align 8
  call void @free_candy_value(ptr %1386)
  %1387 = load ptr, ptr @fun_candy_builtin_int_remainder, align 8
  call void @free_candy_value(ptr %1387)
  %1388 = load ptr, ptr @fun_candy_builtin_int_shift_right, align 8
  call void @free_candy_value(ptr %1388)
  %1389 = load ptr, ptr @fun_candy_builtin_int_subtract, align 8
  call void @free_candy_value(ptr %1389)
  %1390 = load ptr, ptr @fun_candy_builtin_list_get, align 8
  call void @free_candy_value(ptr %1390)
  %1391 = load ptr, ptr @fun_candy_builtin_print, align 8
  call void @free_candy_value(ptr %1391)
  %1392 = load ptr, ptr @fun_candy_builtin_struct_get, align 8
  call void @free_candy_value(ptr %1392)
  %1393 = load ptr, ptr @fun_candy_builtin_struct_has_key, align 8
  call void @free_candy_value(ptr %1393)
  %1394 = load ptr, ptr @fun_candy_builtin_tag_get_value, align 8
  call void @free_candy_value(ptr %1394)
  %1395 = load ptr, ptr @fun_candy_builtin_tag_has_value, align 8
  call void @free_candy_value(ptr %1395)
  %1396 = load ptr, ptr @fun_candy_builtin_tag_without_value, align 8
  call void @free_candy_value(ptr %1396)
  %1397 = load ptr, ptr @fun_candy_builtin_text_concatenate, align 8
  call void @free_candy_value(ptr %1397)
  %1398 = load ptr, ptr @fun_candy_builtin_text_get_range, align 8
  call void @free_candy_value(ptr %1398)
  %1399 = load ptr, ptr @fun_candy_builtin_text_length, align 8
  call void @free_candy_value(ptr %1399)
  %1400 = load ptr, ptr @fun_candy_builtin_text_starts_with, align 8
  call void @free_candy_value(ptr %1400)
  %1401 = load ptr, ptr @fun_candy_builtin_to_debug_text, align 8
  call void @free_candy_value(ptr %1401)
  %1402 = load ptr, ptr @fun_candy_builtin_type_of, align 8
  call void @free_candy_value(ptr %1402)
  %1403 = load ptr, ptr @tag_Base, align 8
  call void @free_candy_value(ptr %1403)
  %1404 = load ptr, ptr @tag_Equal, align 8
  call void @free_candy_value(ptr %1404)
  %1405 = load ptr, ptr @tag_Exponent, align 8
  call void @free_candy_value(ptr %1405)
  %1406 = load ptr, ptr @tag_False, align 8
  call void @free_candy_value(ptr %1406)
  %1407 = load ptr, ptr @tag_FixedDecimal, align 8
  call void @free_candy_value(ptr %1407)
  %1408 = load ptr, ptr @tag_Function, align 8
  call void @free_candy_value(ptr %1408)
  %1409 = load ptr, ptr @tag_Greater, align 8
  call void @free_candy_value(ptr %1409)
  %1410 = load ptr, ptr @tag_Int, align 8
  call void @free_candy_value(ptr %1410)
  %1411 = load ptr, ptr @tag_Less, align 8
  call void @free_candy_value(ptr %1411)
  %1412 = load ptr, ptr @tag_Match, align 8
  call void @free_candy_value(ptr %1412)
  %1413 = load ptr, ptr @tag_MinorUnits, align 8
  call void @free_candy_value(ptr %1413)
  %1414 = load ptr, ptr @tag_NoMatch, align 8
  call void @free_candy_value(ptr %1414)
  %1415 = load ptr, ptr @tag_Nothing, align 8
  call void @free_candy_value(ptr %1415)
  %1416 = load ptr, ptr @tag_Scale, align 8
  call void @free_candy_value(ptr %1416)
  %1417 = load ptr, ptr @tag_Struct, align 8
  call void @free_candy_value(ptr %1417)
  %1418 = load ptr, ptr @tag_Tag, align 8
  call void @free_candy_value(ptr %1418)
  %1419 = load ptr, ptr @tag_Text, align 8
  call void @free_candy_value(ptr %1419)
  %1420 = load ptr, ptr @tag_True, align 8
  call void @free_candy_value(ptr %1420)
  %1421 = load ptr, ptr @num_0, align 8
  call void @free_candy_value(ptr %1421)
  %1422 = load ptr, ptr @num_1, align 8
  call void @free_candy_value(ptr %1422)
  %1423 = load ptr, ptr @num_2, align 8
  call void @free_candy_value(ptr %1423)
  %1424 = load ptr, ptr @num_10, align 8
  call void @free_candy_value(ptr %1424)
  %1425 = load ptr, ptr @num_65, align 8
  call void @free_candy_value(ptr %1425)
  %1426 = load ptr, ptr @num_340282366920938463463374607431768211455, align 8
  call void @free_candy_value(ptr %1426)
  %1427 = load ptr, ptr @text_-1, align 8
  call void @free_candy_value(ptr %1427)
  %1428 = load ptr, ptr @text_., align 8
  call void @free_candy_value(ptr %1428)
  %1429 = load ptr, ptr @"text_. You might want to call `shiftLeft` instead.", align 8
  call void @free_candy_value(ptr %1429)
  %1430 = load ptr, ptr @text_1, align 8
  call void @free_candy_value(ptr %1430)
  %1431 = load ptr, ptr @"text_A check failed.", align 8
  call void @free_candy_value(ptr %1431)
  %1432 = load ptr, ptr @"text_Expected Equal, got ", align 8
  call void @free_candy_value(ptr %1432)
  %1433 = load ptr, ptr @"text_Expected False, got ", align 8
  call void @free_candy_value(ptr %1433)
  %1434 = load ptr, ptr @"text_Expected FixedDecimal, got ", align 8
  call void @free_candy_value(ptr %1434)
  %1435 = load ptr, ptr @"text_Expected Greater, got ", align 8
  call void @free_candy_value(ptr %1435)
  %1436 = load ptr, ptr @"text_Expected Less, got ", align 8
  call void @free_candy_value(ptr %1436)
  %1437 = load ptr, ptr @"text_Expected True, got ", align 8
  call void @free_candy_value(ptr %1437)
  %1438 = load ptr, ptr @"text_Expected `0`, got `", align 8
  call void @free_candy_value(ptr %1438)
  %1439 = load ptr, ptr @"text_Expected a Struct, got `", align 8
  call void @free_candy_value(ptr %1439)
  %1440 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  call void @free_candy_value(ptr %1440)
  %1441 = load ptr, ptr @"text_Expected tag to have a value, but it doesn't have any.", align 8
  call void @free_candy_value(ptr %1441)
  %1442 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  call void @free_candy_value(ptr %1442)
  %1443 = load ptr, ptr @"text_No case matched the given expression.", align 8
  call void @free_candy_value(ptr %1443)
  %1444 = load ptr, ptr @"text_Shifts by that much are not yet supported.", align 8
  call void @free_candy_value(ptr %1444)
  %1445 = load ptr, ptr @"text_Struct doesn't contain key `Base`: `", align 8
  call void @free_candy_value(ptr %1445)
  %1446 = load ptr, ptr @"text_Struct doesn't contain key `Exponent`: `", align 8
  call void @free_candy_value(ptr %1446)
  %1447 = load ptr, ptr @"text_Struct doesn't contain key `MinorUnits`: `", align 8
  call void @free_candy_value(ptr %1447)
  %1448 = load ptr, ptr @"text_Struct doesn't contain key `Scale`: `", align 8
  call void @free_candy_value(ptr %1448)
  %1449 = load ptr, ptr @"text_The `body` should take the recursive function and the argument.", align 8
  call void @free_candy_value(ptr %1449)
  %1450 = load ptr, ptr @"text_The `condition` must be either `True` or `False`.", align 8
  call void @free_candy_value(ptr %1450)
  %1451 = load ptr, ptr @"text_The `reason` must be a text.", align 8
  call void @free_candy_value(ptr %1451)
  %1452 = load ptr, ptr @"text_The root of 2 is ", align 8
  call void @free_candy_value(ptr %1452)
  %1453 = load ptr, ptr @"text_The shift `amount` is negative: ", align 8
  call void @free_candy_value(ptr %1453)
  %1454 = load ptr, ptr @"text_You can't divide by zero.", align 8
  call void @free_candy_value(ptr %1454)
  %1455 = load ptr, ptr @"text_`.", align 8
  call void @free_candy_value(ptr %1455)
  %1456 = load ptr, ptr @"text_`False` was not satisfied", align 8
  call void @free_candy_value(ptr %1456)
  %1457 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1457)
  %1458 = load ptr, ptr @"text_`amount | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1458)
  %1459 = load ptr, ptr @"text_`b | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1459)
  %1460 = load ptr, ptr @"text_`b` didn't return a bool.", align 8
  call void @free_candy_value(ptr %1460)
  %1461 = load ptr, ptr @"text_`conditionIsBool` was not satisfied", align 8
  call void @free_candy_value(ptr %1461)
  %1462 = load ptr, ptr @"text_`dividend | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1462)
  %1463 = load ptr, ptr @"text_`divisor | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1463)
  %1464 = load ptr, ptr @"text_`else | getArgumentCount | equals 0` was not satisfied", align 8
  call void @free_candy_value(ptr %1464)
  %1465 = load ptr, ptr @"text_`else | typeIs Function` was not satisfied", align 8
  call void @free_candy_value(ptr %1465)
  %1466 = load ptr, ptr @"text_`endExclusive | isLessThanOrEqualTo (text | \E2\9C\A8.textLength)` was not satisfied", align 8
  call void @free_candy_value(ptr %1466)
  %1467 = load ptr, ptr @"text_`endExclusive | isNonNegative` was not satisfied", align 8
  call void @free_candy_value(ptr %1467)
  %1468 = load ptr, ptr @"text_`endExclusive | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1468)
  %1469 = load ptr, ptr @"text_`factorA | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1469)
  %1470 = load ptr, ptr @"text_`factorB | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1470)
  %1471 = load ptr, ptr @"text_`function | typeIs Function` was not satisfied", align 8
  call void @free_candy_value(ptr %1471)
  %1472 = load ptr, ptr @"text_`function | \E2\9C\A8.getArgumentCount | equals 0` was not satisfied", align 8
  call void @free_candy_value(ptr %1472)
  %1473 = load ptr, ptr @"text_`function.is0 b` was not satisfied", align 8
  call void @free_candy_value(ptr %1473)
  %1474 = load ptr, ptr @"text_`int | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1474)
  %1475 = load ptr, ptr @"text_`int.is minorUnits` was not satisfied", align 8
  call void @free_candy_value(ptr %1475)
  %1476 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  call void @free_candy_value(ptr %1476)
  %1477 = load ptr, ptr @"text_`is b` was not satisfied", align 8
  call void @free_candy_value(ptr %1477)
  %1478 = load ptr, ptr @"text_`is delta` was not satisfied", align 8
  call void @free_candy_value(ptr %1478)
  %1479 = load ptr, ptr @"text_`is dividend` was not satisfied", align 8
  call void @free_candy_value(ptr %1479)
  %1480 = load ptr, ptr @"text_`is divisor` was not satisfied", align 8
  call void @free_candy_value(ptr %1480)
  %1481 = load ptr, ptr @"text_`is exponent` was not satisfied", align 8
  call void @free_candy_value(ptr %1481)
  %1482 = load ptr, ptr @"text_`is minuend` was not satisfied", align 8
  call void @free_candy_value(ptr %1482)
  %1483 = load ptr, ptr @"text_`is prefix` was not satisfied", align 8
  call void @free_candy_value(ptr %1483)
  %1484 = load ptr, ptr @"text_`is subtrahend` was not satisfied", align 8
  call void @free_candy_value(ptr %1484)
  %1485 = load ptr, ptr @"text_`is summandA` was not satisfied", align 8
  call void @free_candy_value(ptr %1485)
  %1486 = load ptr, ptr @"text_`is summandB` was not satisfied", align 8
  call void @free_candy_value(ptr %1486)
  %1487 = load ptr, ptr @"text_`is text` was not satisfied", align 8
  call void @free_candy_value(ptr %1487)
  %1488 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  call void @free_candy_value(ptr %1488)
  %1489 = load ptr, ptr @"text_`is valueB` was not satisfied", align 8
  call void @free_candy_value(ptr %1489)
  %1490 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  call void @free_candy_value(ptr %1490)
  %1491 = load ptr, ptr @"text_`is0 body` was not satisfied", align 8
  call void @free_candy_value(ptr %1491)
  %1492 = load ptr, ptr @"text_`isConditionBool` was not satisfied", align 8
  call void @free_candy_value(ptr %1492)
  %1493 = load ptr, ptr @"text_`isNonNegative delta` was not satisfied", align 8
  call void @free_candy_value(ptr %1493)
  %1494 = load ptr, ptr @"text_`isNonNegative exponent` was not satisfied", align 8
  call void @free_candy_value(ptr %1494)
  %1495 = load ptr, ptr @"text_`isScale scale` was not satisfied", align 8
  call void @free_candy_value(ptr %1495)
  %1496 = load ptr, ptr @"text_`isScale targetScale` was not satisfied", align 8
  call void @free_candy_value(ptr %1496)
  %1497 = load ptr, ptr @"text_`minuend | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1497)
  %1498 = load ptr, ptr @"text_`prefix | typeIs Text` was not satisfied", align 8
  call void @free_candy_value(ptr %1498)
  %1499 = load ptr, ptr @"text_`startInclusive | isLessThanOrEqualTo (text | \E2\9C\A8.textLength)` was not satisfied", align 8
  call void @free_candy_value(ptr %1499)
  %1500 = load ptr, ptr @"text_`startInclusive | isLessThanOrEqualTo endExclusive` was not satisfied", align 8
  call void @free_candy_value(ptr %1500)
  %1501 = load ptr, ptr @"text_`startInclusive | isNonNegative` was not satisfied", align 8
  call void @free_candy_value(ptr %1501)
  %1502 = load ptr, ptr @"text_`startInclusive | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1502)
  %1503 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  call void @free_candy_value(ptr %1503)
  %1504 = load ptr, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  call void @free_candy_value(ptr %1504)
  %1505 = load ptr, ptr @"text_`subtrahend | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1505)
  %1506 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  call void @free_candy_value(ptr %1506)
  %1507 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  call void @free_candy_value(ptr %1507)
  %1508 = load ptr, ptr @"text_`text | typeIs Text` was not satisfied", align 8
  call void @free_candy_value(ptr %1508)
  %1509 = load ptr, ptr @"text_`then | getArgumentCount | equals 0` was not satisfied", align 8
  call void @free_candy_value(ptr %1509)
  %1510 = load ptr, ptr @"text_`then | typeIs Function` was not satisfied", align 8
  call void @free_candy_value(ptr %1510)
  %1511 = load ptr, ptr @"text_`value | isNonNegative` was not satisfied", align 8
  call void @free_candy_value(ptr %1511)
  %1512 = load ptr, ptr @"text_`value | typeIs Int` was not satisfied", align 8
  call void @free_candy_value(ptr %1512)
  %1513 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  call void @free_candy_value(ptr %1513)
  %1514 = load ptr, ptr @"fun_Core__19_isMatch_then, Core__30_isMatch_then, Core__41_isMatch_then, Core__102_isMatch_then, Core__153_isMatch_then, Core__164_isMatch_then, Core_bool_9_isMatch_then, Core_check_9_isMatch_then, Core_controlFlow_if_27, Core_controlFlow_29_isMatch_then, Core_controlFlow_50_isMatch_then, Core_fixedDecimal_19_isMatch_then, Core_fixedDecimal_30_isMatch_then, Core_fixedDecimal_41_isMatch_then, Core_fixedDecimal_52_isMatch_then, Core_fixedDecimal_103_isMatch_then, Core_function_19_isMatch_then, Core_int_pow_21_1_isMatch_then, Core_int_29_isMatch_then, Core_int_40_isMatch_then, Core_iterable_generateWithState_14_0_11_1_isMatch_then, Core_iterable_map_19_11_1_isMatch_then, Core_iterable_reduceLeft_38_1_isMatch_then, Core_iterable_take_33_1_isMatch_then, Core_iterable_takeWhile_2_11_1_isMatch_then, Core_iterable_withIndex_11_1_isMatch_then, Core_iterable_withIndex_11_14_1_isMatch_then, Core_iterable_19_isMatch_then, Core_iterable_30_isMatch_then, Core_iterable_82_11_1_isMatch_then, Core_iterable_84_2_11_1_isMatch_then, Core_iterable_84_2_11_7_15_1_isMatch_then, Core_list_generate_59_1_isMatch_then, Core_list_29_isMatch_then, Core_list_40_isMatch_then, Core_result_19_isMatch_then, Core_result_30_isMatch_then, Core_struct_19_isMatch_then, Core_tag_29_isMatch_then, Core_text_29_isMatch_then, Core_text_40_isMatch_then, Core_type_19_isMatch_then, Examples_sqrt_then, Examples_sqrt_19_isMatch_then, anonymous_$generated__needs_condition_then, anonymous_$generated__needs_isConditionBool_then, anonymous_$generated__needs_isReasonText_then", align 8
  call void @free_candy_value(ptr %1514)
  %1515 = load ptr, ptr @"fun_anonymous_$generated__needs", align 8
  call void @free_candy_value(ptr %1515)
  %1516 = load ptr, ptr @"fun_anonymous_$generated__needs_isConditionTrue_else", align 8
  call void @free_candy_value(ptr %1516)
  %1517 = load ptr, ptr @"fun_anonymous_$generated__needs_isConditionBool_else", align 8
  call void @free_candy_value(ptr %1517)
  %1518 = load ptr, ptr @"fun_anonymous_$generated__needs_isReasonText_else", align 8
  call void @free_candy_value(ptr %1518)
  %1519 = load ptr, ptr @"fun_anonymous_$generated__needs_condition_else", align 8
  call void @free_candy_value(ptr %1519)
  %1520 = load ptr, ptr @0, align 8
  call void @free_candy_value(ptr %1520)
  %1521 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  call void @free_candy_value(ptr %1521)
  %1522 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  call void @free_candy_value(ptr %1522)
  %1523 = load ptr, ptr @fun_Builtins__not, align 8
  call void @free_candy_value(ptr %1523)
  %1524 = load ptr, ptr @fun_Builtins__not_1_equals_then, align 8
  call void @free_candy_value(ptr %1524)
  %1525 = load ptr, ptr @fun_Builtins__not_1_equals_then.2, align 8
  call void @free_candy_value(ptr %1525)
  %1526 = load ptr, ptr @fun_Builtins__not_1_equals_else, align 8
  call void @free_candy_value(ptr %1526)
  %1527 = load ptr, ptr @1, align 8
  call void @free_candy_value(ptr %1527)
  %1528 = load ptr, ptr @fun_Builtins__not_1_equals_else.4, align 8
  call void @free_candy_value(ptr %1528)
  %1529 = load ptr, ptr @2, align 8
  call void @free_candy_value(ptr %1529)
  %1530 = load ptr, ptr @fun_Builtins__not_1_equals_else.6, align 8
  call void @free_candy_value(ptr %1530)
  %1531 = load ptr, ptr @3, align 8
  call void @free_candy_value(ptr %1531)
  %1532 = load ptr, ptr @fun_Builtins__not_1_case-0_didNotMatch, align 8
  call void @free_candy_value(ptr %1532)
  %1533 = load ptr, ptr @fun_Builtins__not_1_equals_then.8, align 8
  call void @free_candy_value(ptr %1533)
  %1534 = load ptr, ptr @fun_Builtins__not_1_equals_then.10, align 8
  call void @free_candy_value(ptr %1534)
  %1535 = load ptr, ptr @fun_Builtins__not_1_equals_else.12, align 8
  call void @free_candy_value(ptr %1535)
  %1536 = load ptr, ptr @4, align 8
  call void @free_candy_value(ptr %1536)
  %1537 = load ptr, ptr @fun_Builtins__not_1_equals_else.14, align 8
  call void @free_candy_value(ptr %1537)
  %1538 = load ptr, ptr @5, align 8
  call void @free_candy_value(ptr %1538)
  %1539 = load ptr, ptr @fun_Builtins__not_1_equals_else.16, align 8
  call void @free_candy_value(ptr %1539)
  %1540 = load ptr, ptr @6, align 8
  call void @free_candy_value(ptr %1540)
  %1541 = load ptr, ptr @fun_Builtins__not_1_case-1_didNotMatch, align 8
  call void @free_candy_value(ptr %1541)
  %1542 = load ptr, ptr @fun_Builtins__isNonNegative_13_case-1_didNotMatch, align 8
  call void @free_candy_value(ptr %1542)
  %1543 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_case-1_didNotMatch, align 8
  call void @free_candy_value(ptr %1543)
  %1544 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo, align 8
  call void @free_candy_value(ptr %1544)
  %1545 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then, align 8
  call void @free_candy_value(ptr %1545)
  %1546 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else, align 8
  call void @free_candy_value(ptr %1546)
  %1547 = load ptr, ptr @7, align 8
  call void @free_candy_value(ptr %1547)
  %1548 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.18, align 8
  call void @free_candy_value(ptr %1548)
  %1549 = load ptr, ptr @8, align 8
  call void @free_candy_value(ptr %1549)
  %1550 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_isMatch_then, align 8
  call void @free_candy_value(ptr %1550)
  %1551 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_isMatch_else, align 8
  call void @free_candy_value(ptr %1551)
  %1552 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.20, align 8
  call void @free_candy_value(ptr %1552)
  %1553 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.22, align 8
  call void @free_candy_value(ptr %1553)
  %1554 = load ptr, ptr @9, align 8
  call void @free_candy_value(ptr %1554)
  %1555 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.24, align 8
  call void @free_candy_value(ptr %1555)
  %1556 = load ptr, ptr @10, align 8
  call void @free_candy_value(ptr %1556)
  %1557 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch, align 8
  call void @free_candy_value(ptr %1557)
  %1558 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.26, align 8
  call void @free_candy_value(ptr %1558)
  %1559 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.28, align 8
  call void @free_candy_value(ptr %1559)
  %1560 = load ptr, ptr @11, align 8
  call void @free_candy_value(ptr %1560)
  %1561 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.30, align 8
  call void @free_candy_value(ptr %1561)
  %1562 = load ptr, ptr @12, align 8
  call void @free_candy_value(ptr %1562)
  %1563 = load ptr, ptr @fun_Builtins__ifElse, align 8
  call void @free_candy_value(ptr %1563)
  %1564 = load ptr, ptr @fun_Builtins__ifElse_1_equals_then, align 8
  call void @free_candy_value(ptr %1564)
  %1565 = load ptr, ptr @fun_Builtins__ifElse_1_equals_then.32, align 8
  call void @free_candy_value(ptr %1565)
  %1566 = load ptr, ptr @fun_Builtins__ifElse_1_equals_else, align 8
  call void @free_candy_value(ptr %1566)
  %1567 = load ptr, ptr @13, align 8
  call void @free_candy_value(ptr %1567)
  %1568 = load ptr, ptr @fun_Builtins__ifElse_1_equals_else.34, align 8
  call void @free_candy_value(ptr %1568)
  %1569 = load ptr, ptr @14, align 8
  call void @free_candy_value(ptr %1569)
  %1570 = load ptr, ptr @fun_Builtins__ifElse_1_equals_else.36, align 8
  call void @free_candy_value(ptr %1570)
  %1571 = load ptr, ptr @15, align 8
  call void @free_candy_value(ptr %1571)
  %1572 = load ptr, ptr @fun_Builtins__ifElse_1_isMatch_then, align 8
  call void @free_candy_value(ptr %1572)
  %1573 = load ptr, ptr @fun_Builtins__ifElse_1_isMatch_else, align 8
  call void @free_candy_value(ptr %1573)
  %1574 = load ptr, ptr @fun_Builtins__ifElse_1_equals_then.38, align 8
  call void @free_candy_value(ptr %1574)
  %1575 = load ptr, ptr @fun_Builtins__ifElse_1_equals_then.40, align 8
  call void @free_candy_value(ptr %1575)
  %1576 = load ptr, ptr @fun_Builtins__ifElse_1_equals_else.42, align 8
  call void @free_candy_value(ptr %1576)
  %1577 = load ptr, ptr @16, align 8
  call void @free_candy_value(ptr %1577)
  %1578 = load ptr, ptr @fun_Builtins__ifElse_1_equals_else.44, align 8
  call void @free_candy_value(ptr %1578)
  %1579 = load ptr, ptr @17, align 8
  call void @free_candy_value(ptr %1579)
  %1580 = load ptr, ptr @fun_Builtins__ifElse_1_equals_else.46, align 8
  call void @free_candy_value(ptr %1580)
  %1581 = load ptr, ptr @18, align 8
  call void @free_candy_value(ptr %1581)
  %1582 = load ptr, ptr @fun_Builtins__intDivideTruncating, align 8
  call void @free_candy_value(ptr %1582)
  %1583 = load ptr, ptr @fun_Builtins__intRemainder, align 8
  call void @free_candy_value(ptr %1583)
  %1584 = load ptr, ptr @fun_Builtins__intShiftRight, align 8
  call void @free_candy_value(ptr %1584)
  %1585 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then, align 8
  call void @free_candy_value(ptr %1585)
  %1586 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else, align 8
  call void @free_candy_value(ptr %1586)
  %1587 = load ptr, ptr @19, align 8
  call void @free_candy_value(ptr %1587)
  %1588 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.48, align 8
  call void @free_candy_value(ptr %1588)
  %1589 = load ptr, ptr @20, align 8
  call void @free_candy_value(ptr %1589)
  %1590 = load ptr, ptr @fun_Builtins__isNonNegative_13_isMatch_then, align 8
  call void @free_candy_value(ptr %1590)
  %1591 = load ptr, ptr @fun_Builtins__isNonNegative_13_isMatch_else, align 8
  call void @free_candy_value(ptr %1591)
  %1592 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then.50, align 8
  call void @free_candy_value(ptr %1592)
  %1593 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.52, align 8
  call void @free_candy_value(ptr %1593)
  %1594 = load ptr, ptr @21, align 8
  call void @free_candy_value(ptr %1594)
  %1595 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.54, align 8
  call void @free_candy_value(ptr %1595)
  %1596 = load ptr, ptr @22, align 8
  call void @free_candy_value(ptr %1596)
  %1597 = load ptr, ptr @fun_Builtins__isNonNegative_13_case-0_didNotMatch, align 8
  call void @free_candy_value(ptr %1597)
  %1598 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then.56, align 8
  call void @free_candy_value(ptr %1598)
  %1599 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.58, align 8
  call void @free_candy_value(ptr %1599)
  %1600 = load ptr, ptr @23, align 8
  call void @free_candy_value(ptr %1600)
  %1601 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.60, align 8
  call void @free_candy_value(ptr %1601)
  %1602 = load ptr, ptr @24, align 8
  call void @free_candy_value(ptr %1602)
  %1603 = load ptr, ptr @fun_Builtins__intShiftRight_25, align 8
  call void @free_candy_value(ptr %1603)
  %1604 = load ptr, ptr @fun_Builtins__intShiftRight_26, align 8
  call void @free_candy_value(ptr %1604)
  %1605 = load ptr, ptr @fun_Builtins__isNonNegative_13_isMatch_then.62, align 8
  call void @free_candy_value(ptr %1605)
  %1606 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.64, align 8
  call void @free_candy_value(ptr %1606)
  %1607 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.66, align 8
  call void @free_candy_value(ptr %1607)
  %1608 = load ptr, ptr @25, align 8
  call void @free_candy_value(ptr %1608)
  %1609 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.68, align 8
  call void @free_candy_value(ptr %1609)
  %1610 = load ptr, ptr @26, align 8
  call void @free_candy_value(ptr %1610)
  %1611 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_isMatch_then.70, align 8
  call void @free_candy_value(ptr %1611)
  %1612 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_isMatch_else.72, align 8
  call void @free_candy_value(ptr %1612)
  %1613 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.74, align 8
  call void @free_candy_value(ptr %1613)
  %1614 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.76, align 8
  call void @free_candy_value(ptr %1614)
  %1615 = load ptr, ptr @27, align 8
  call void @free_candy_value(ptr %1615)
  %1616 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.78, align 8
  call void @free_candy_value(ptr %1616)
  %1617 = load ptr, ptr @28, align 8
  call void @free_candy_value(ptr %1617)
  %1618 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch.80, align 8
  call void @free_candy_value(ptr %1618)
  %1619 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.82, align 8
  call void @free_candy_value(ptr %1619)
  %1620 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.84, align 8
  call void @free_candy_value(ptr %1620)
  %1621 = load ptr, ptr @29, align 8
  call void @free_candy_value(ptr %1621)
  %1622 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.86, align 8
  call void @free_candy_value(ptr %1622)
  %1623 = load ptr, ptr @30, align 8
  call void @free_candy_value(ptr %1623)
  %1624 = load ptr, ptr @fun_Builtins__textGetRange, align 8
  call void @free_candy_value(ptr %1624)
  %1625 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then.88, align 8
  call void @free_candy_value(ptr %1625)
  %1626 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.90, align 8
  call void @free_candy_value(ptr %1626)
  %1627 = load ptr, ptr @31, align 8
  call void @free_candy_value(ptr %1627)
  %1628 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.92, align 8
  call void @free_candy_value(ptr %1628)
  %1629 = load ptr, ptr @32, align 8
  call void @free_candy_value(ptr %1629)
  %1630 = load ptr, ptr @fun_Builtins__isNonNegative_13_isMatch_then.94, align 8
  call void @free_candy_value(ptr %1630)
  %1631 = load ptr, ptr @fun_Builtins__isNonNegative_13_isMatch_else.96, align 8
  call void @free_candy_value(ptr %1631)
  %1632 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then.98, align 8
  call void @free_candy_value(ptr %1632)
  %1633 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.100, align 8
  call void @free_candy_value(ptr %1633)
  %1634 = load ptr, ptr @33, align 8
  call void @free_candy_value(ptr %1634)
  %1635 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.102, align 8
  call void @free_candy_value(ptr %1635)
  %1636 = load ptr, ptr @34, align 8
  call void @free_candy_value(ptr %1636)
  %1637 = load ptr, ptr @fun_Builtins__isNonNegative_13_case-0_didNotMatch.104, align 8
  call void @free_candy_value(ptr %1637)
  %1638 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then.106, align 8
  call void @free_candy_value(ptr %1638)
  %1639 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.108, align 8
  call void @free_candy_value(ptr %1639)
  %1640 = load ptr, ptr @35, align 8
  call void @free_candy_value(ptr %1640)
  %1641 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.110, align 8
  call void @free_candy_value(ptr %1641)
  %1642 = load ptr, ptr @36, align 8
  call void @free_candy_value(ptr %1642)
  %1643 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then.112, align 8
  call void @free_candy_value(ptr %1643)
  %1644 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.114, align 8
  call void @free_candy_value(ptr %1644)
  %1645 = load ptr, ptr @37, align 8
  call void @free_candy_value(ptr %1645)
  %1646 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.116, align 8
  call void @free_candy_value(ptr %1646)
  %1647 = load ptr, ptr @38, align 8
  call void @free_candy_value(ptr %1647)
  %1648 = load ptr, ptr @fun_Builtins__isNonNegative_13_isMatch_then.118, align 8
  call void @free_candy_value(ptr %1648)
  %1649 = load ptr, ptr @fun_Builtins__isNonNegative_13_isMatch_else.120, align 8
  call void @free_candy_value(ptr %1649)
  %1650 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then.122, align 8
  call void @free_candy_value(ptr %1650)
  %1651 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.124, align 8
  call void @free_candy_value(ptr %1651)
  %1652 = load ptr, ptr @39, align 8
  call void @free_candy_value(ptr %1652)
  %1653 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.126, align 8
  call void @free_candy_value(ptr %1653)
  %1654 = load ptr, ptr @40, align 8
  call void @free_candy_value(ptr %1654)
  %1655 = load ptr, ptr @fun_Builtins__isNonNegative_13_case-0_didNotMatch.128, align 8
  call void @free_candy_value(ptr %1655)
  %1656 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then.130, align 8
  call void @free_candy_value(ptr %1656)
  %1657 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.132, align 8
  call void @free_candy_value(ptr %1657)
  %1658 = load ptr, ptr @41, align 8
  call void @free_candy_value(ptr %1658)
  %1659 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.134, align 8
  call void @free_candy_value(ptr %1659)
  %1660 = load ptr, ptr @42, align 8
  call void @free_candy_value(ptr %1660)
  %1661 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.136, align 8
  call void @free_candy_value(ptr %1661)
  %1662 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.138, align 8
  call void @free_candy_value(ptr %1662)
  %1663 = load ptr, ptr @43, align 8
  call void @free_candy_value(ptr %1663)
  %1664 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.140, align 8
  call void @free_candy_value(ptr %1664)
  %1665 = load ptr, ptr @44, align 8
  call void @free_candy_value(ptr %1665)
  %1666 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_isMatch_then.142, align 8
  call void @free_candy_value(ptr %1666)
  %1667 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_isMatch_else.144, align 8
  call void @free_candy_value(ptr %1667)
  %1668 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.146, align 8
  call void @free_candy_value(ptr %1668)
  %1669 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.148, align 8
  call void @free_candy_value(ptr %1669)
  %1670 = load ptr, ptr @45, align 8
  call void @free_candy_value(ptr %1670)
  %1671 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.150, align 8
  call void @free_candy_value(ptr %1671)
  %1672 = load ptr, ptr @46, align 8
  call void @free_candy_value(ptr %1672)
  %1673 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch.152, align 8
  call void @free_candy_value(ptr %1673)
  %1674 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.154, align 8
  call void @free_candy_value(ptr %1674)
  %1675 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.156, align 8
  call void @free_candy_value(ptr %1675)
  %1676 = load ptr, ptr @47, align 8
  call void @free_candy_value(ptr %1676)
  %1677 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.158, align 8
  call void @free_candy_value(ptr %1677)
  %1678 = load ptr, ptr @48, align 8
  call void @free_candy_value(ptr %1678)
  %1679 = load ptr, ptr @fun_Core_bool_is, align 8
  call void @free_candy_value(ptr %1679)
  %1680 = load ptr, ptr @fun_Core_bool_is_1_equals_then, align 8
  call void @free_candy_value(ptr %1680)
  %1681 = load ptr, ptr @fun_Core_bool_is_1_equals_then.160, align 8
  call void @free_candy_value(ptr %1681)
  %1682 = load ptr, ptr @fun_Core_bool_is_1_equals_else, align 8
  call void @free_candy_value(ptr %1682)
  %1683 = load ptr, ptr @49, align 8
  call void @free_candy_value(ptr %1683)
  %1684 = load ptr, ptr @fun_Core_bool_is_1_equals_else.162, align 8
  call void @free_candy_value(ptr %1684)
  %1685 = load ptr, ptr @50, align 8
  call void @free_candy_value(ptr %1685)
  %1686 = load ptr, ptr @fun_Core_bool_is_1_equals_else.164, align 8
  call void @free_candy_value(ptr %1686)
  %1687 = load ptr, ptr @51, align 8
  call void @free_candy_value(ptr %1687)
  %1688 = load ptr, ptr @fun_Core_bool_is_1_isMatch_then, align 8
  call void @free_candy_value(ptr %1688)
  %1689 = load ptr, ptr @fun_Core_bool_is_1_isMatch_else, align 8
  call void @free_candy_value(ptr %1689)
  %1690 = load ptr, ptr @fun_Core_bool_is_1_equals_then.166, align 8
  call void @free_candy_value(ptr %1690)
  %1691 = load ptr, ptr @fun_Core_bool_is_1_equals_then.168, align 8
  call void @free_candy_value(ptr %1691)
  %1692 = load ptr, ptr @fun_Core_bool_is_1_equals_else.170, align 8
  call void @free_candy_value(ptr %1692)
  %1693 = load ptr, ptr @52, align 8
  call void @free_candy_value(ptr %1693)
  %1694 = load ptr, ptr @fun_Core_bool_is_1_equals_else.172, align 8
  call void @free_candy_value(ptr %1694)
  %1695 = load ptr, ptr @53, align 8
  call void @free_candy_value(ptr %1695)
  %1696 = load ptr, ptr @fun_Core_bool_is_1_equals_else.174, align 8
  call void @free_candy_value(ptr %1696)
  %1697 = load ptr, ptr @54, align 8
  call void @free_candy_value(ptr %1697)
  %1698 = load ptr, ptr @fun_Core_bool_not_6_case-1_didNotMatch, align 8
  call void @free_candy_value(ptr %1698)
  %1699 = load ptr, ptr @fun_Core_bool_not, align 8
  call void @free_candy_value(ptr %1699)
  %1700 = load ptr, ptr @fun_Core_bool_is_1_equals_then.176, align 8
  call void @free_candy_value(ptr %1700)
  %1701 = load ptr, ptr @fun_Core_bool_is_1_equals_then.178, align 8
  call void @free_candy_value(ptr %1701)
  %1702 = load ptr, ptr @fun_Core_bool_is_1_equals_else.180, align 8
  call void @free_candy_value(ptr %1702)
  %1703 = load ptr, ptr @55, align 8
  call void @free_candy_value(ptr %1703)
  %1704 = load ptr, ptr @fun_Core_bool_is_1_equals_else.182, align 8
  call void @free_candy_value(ptr %1704)
  %1705 = load ptr, ptr @56, align 8
  call void @free_candy_value(ptr %1705)
  %1706 = load ptr, ptr @fun_Core_bool_is_1_equals_else.184, align 8
  call void @free_candy_value(ptr %1706)
  %1707 = load ptr, ptr @57, align 8
  call void @free_candy_value(ptr %1707)
  %1708 = load ptr, ptr @fun_Core_bool_is_1_isMatch_then.186, align 8
  call void @free_candy_value(ptr %1708)
  %1709 = load ptr, ptr @fun_Core_bool_is_1_isMatch_else.188, align 8
  call void @free_candy_value(ptr %1709)
  %1710 = load ptr, ptr @fun_Core_bool_is_1_equals_then.190, align 8
  call void @free_candy_value(ptr %1710)
  %1711 = load ptr, ptr @fun_Core_bool_is_1_equals_then.192, align 8
  call void @free_candy_value(ptr %1711)
  %1712 = load ptr, ptr @fun_Core_bool_is_1_equals_else.194, align 8
  call void @free_candy_value(ptr %1712)
  %1713 = load ptr, ptr @58, align 8
  call void @free_candy_value(ptr %1713)
  %1714 = load ptr, ptr @fun_Core_bool_is_1_equals_else.196, align 8
  call void @free_candy_value(ptr %1714)
  %1715 = load ptr, ptr @59, align 8
  call void @free_candy_value(ptr %1715)
  %1716 = load ptr, ptr @fun_Core_bool_is_1_equals_else.198, align 8
  call void @free_candy_value(ptr %1716)
  %1717 = load ptr, ptr @60, align 8
  call void @free_candy_value(ptr %1717)
  %1718 = load ptr, ptr @fun_Core_bool_not_6_equals_then, align 8
  call void @free_candy_value(ptr %1718)
  %1719 = load ptr, ptr @fun_Core_bool_not_6_equals_then.200, align 8
  call void @free_candy_value(ptr %1719)
  %1720 = load ptr, ptr @fun_Core_bool_not_6_equals_else, align 8
  call void @free_candy_value(ptr %1720)
  %1721 = load ptr, ptr @61, align 8
  call void @free_candy_value(ptr %1721)
  %1722 = load ptr, ptr @fun_Core_bool_not_6_equals_else.202, align 8
  call void @free_candy_value(ptr %1722)
  %1723 = load ptr, ptr @62, align 8
  call void @free_candy_value(ptr %1723)
  %1724 = load ptr, ptr @fun_Core_bool_not_6_equals_else.204, align 8
  call void @free_candy_value(ptr %1724)
  %1725 = load ptr, ptr @63, align 8
  call void @free_candy_value(ptr %1725)
  %1726 = load ptr, ptr @fun_Core_bool_not_6_case-0_didNotMatch, align 8
  call void @free_candy_value(ptr %1726)
  %1727 = load ptr, ptr @fun_Core_bool_not_6_equals_then.206, align 8
  call void @free_candy_value(ptr %1727)
  %1728 = load ptr, ptr @fun_Core_bool_not_6_equals_then.208, align 8
  call void @free_candy_value(ptr %1728)
  %1729 = load ptr, ptr @fun_Core_bool_not_6_equals_else.210, align 8
  call void @free_candy_value(ptr %1729)
  %1730 = load ptr, ptr @64, align 8
  call void @free_candy_value(ptr %1730)
  %1731 = load ptr, ptr @fun_Core_bool_not_6_equals_else.212, align 8
  call void @free_candy_value(ptr %1731)
  %1732 = load ptr, ptr @65, align 8
  call void @free_candy_value(ptr %1732)
  %1733 = load ptr, ptr @fun_Core_bool_not_6_equals_else.214, align 8
  call void @free_candy_value(ptr %1733)
  %1734 = load ptr, ptr @66, align 8
  call void @free_candy_value(ptr %1734)
  %1735 = load ptr, ptr @fun_Core_bool_lazyAnd_18_case-1_didNotMatch, align 8
  call void @free_candy_value(ptr %1735)
  %1736 = load ptr, ptr @fun_Core_bool_lazyAnd, align 8
  call void @free_candy_value(ptr %1736)
  %1737 = load ptr, ptr @fun_Core_bool_is_1_equals_then.216, align 8
  call void @free_candy_value(ptr %1737)
  %1738 = load ptr, ptr @fun_Core_bool_is_1_equals_then.218, align 8
  call void @free_candy_value(ptr %1738)
  %1739 = load ptr, ptr @fun_Core_bool_is_1_equals_else.220, align 8
  call void @free_candy_value(ptr %1739)
  %1740 = load ptr, ptr @67, align 8
  call void @free_candy_value(ptr %1740)
  %1741 = load ptr, ptr @fun_Core_bool_is_1_equals_else.222, align 8
  call void @free_candy_value(ptr %1741)
  %1742 = load ptr, ptr @68, align 8
  call void @free_candy_value(ptr %1742)
  %1743 = load ptr, ptr @fun_Core_bool_is_1_equals_else.224, align 8
  call void @free_candy_value(ptr %1743)
  %1744 = load ptr, ptr @69, align 8
  call void @free_candy_value(ptr %1744)
  %1745 = load ptr, ptr @fun_Core_bool_is_1_isMatch_then.226, align 8
  call void @free_candy_value(ptr %1745)
  %1746 = load ptr, ptr @fun_Core_bool_is_1_isMatch_else.228, align 8
  call void @free_candy_value(ptr %1746)
  %1747 = load ptr, ptr @fun_Core_bool_is_1_equals_then.230, align 8
  call void @free_candy_value(ptr %1747)
  %1748 = load ptr, ptr @fun_Core_bool_is_1_equals_then.232, align 8
  call void @free_candy_value(ptr %1748)
  %1749 = load ptr, ptr @fun_Core_bool_is_1_equals_else.234, align 8
  call void @free_candy_value(ptr %1749)
  %1750 = load ptr, ptr @70, align 8
  call void @free_candy_value(ptr %1750)
  %1751 = load ptr, ptr @fun_Core_bool_is_1_equals_else.236, align 8
  call void @free_candy_value(ptr %1751)
  %1752 = load ptr, ptr @71, align 8
  call void @free_candy_value(ptr %1752)
  %1753 = load ptr, ptr @fun_Core_bool_is_1_equals_else.238, align 8
  call void @free_candy_value(ptr %1753)
  %1754 = load ptr, ptr @72, align 8
  call void @free_candy_value(ptr %1754)
  %1755 = load ptr, ptr @fun_Core_function_is0_11, align 8
  call void @free_candy_value(ptr %1755)
  %1756 = load ptr, ptr @fun_Core_bool_lazyAnd_18_equals_then, align 8
  call void @free_candy_value(ptr %1756)
  %1757 = load ptr, ptr @fun_Core_bool_lazyAnd_18_equals_then.240, align 8
  call void @free_candy_value(ptr %1757)
  %1758 = load ptr, ptr @fun_Core_bool_lazyAnd_18_equals_else, align 8
  call void @free_candy_value(ptr %1758)
  %1759 = load ptr, ptr @73, align 8
  call void @free_candy_value(ptr %1759)
  %1760 = load ptr, ptr @fun_Core_bool_lazyAnd_18_equals_else.242, align 8
  call void @free_candy_value(ptr %1760)
  %1761 = load ptr, ptr @74, align 8
  call void @free_candy_value(ptr %1761)
  %1762 = load ptr, ptr @fun_Core_bool_lazyAnd_18_equals_else.244, align 8
  call void @free_candy_value(ptr %1762)
  %1763 = load ptr, ptr @75, align 8
  call void @free_candy_value(ptr %1763)
  %1764 = load ptr, ptr @fun_Core_bool_lazyAnd_18_case-0_matched, align 8
  call void @free_candy_value(ptr %1764)
  %1765 = load ptr, ptr @fun_Core_function_is0_11.246, align 8
  call void @free_candy_value(ptr %1765)
  %1766 = load ptr, ptr @fun_Core_bool_lazyAnd_18_case-0_didNotMatch, align 8
  call void @free_candy_value(ptr %1766)
  %1767 = load ptr, ptr @fun_Core_bool_lazyAnd_18_equals_then.248, align 8
  call void @free_candy_value(ptr %1767)
  %1768 = load ptr, ptr @fun_Core_bool_lazyAnd_18_equals_then.250, align 8
  call void @free_candy_value(ptr %1768)
  %1769 = load ptr, ptr @fun_Core_bool_lazyAnd_18_equals_else.252, align 8
  call void @free_candy_value(ptr %1769)
  %1770 = load ptr, ptr @76, align 8
  call void @free_candy_value(ptr %1770)
  %1771 = load ptr, ptr @fun_Core_bool_lazyAnd_18_equals_else.254, align 8
  call void @free_candy_value(ptr %1771)
  %1772 = load ptr, ptr @77, align 8
  call void @free_candy_value(ptr %1772)
  %1773 = load ptr, ptr @fun_Core_bool_lazyAnd_18_equals_else.256, align 8
  call void @free_candy_value(ptr %1773)
  %1774 = load ptr, ptr @78, align 8
  call void @free_candy_value(ptr %1774)
  %1775 = load ptr, ptr @fun_Core_bool_lazyOr_18_case-1_didNotMatch, align 8
  call void @free_candy_value(ptr %1775)
  %1776 = load ptr, ptr @fun_Core_bool_lazyOr, align 8
  call void @free_candy_value(ptr %1776)
  %1777 = load ptr, ptr @fun_Core_bool_is_1_equals_then.258, align 8
  call void @free_candy_value(ptr %1777)
  %1778 = load ptr, ptr @fun_Core_bool_is_1_equals_then.260, align 8
  call void @free_candy_value(ptr %1778)
  %1779 = load ptr, ptr @fun_Core_bool_is_1_equals_else.262, align 8
  call void @free_candy_value(ptr %1779)
  %1780 = load ptr, ptr @79, align 8
  call void @free_candy_value(ptr %1780)
  %1781 = load ptr, ptr @fun_Core_bool_is_1_equals_else.264, align 8
  call void @free_candy_value(ptr %1781)
  %1782 = load ptr, ptr @80, align 8
  call void @free_candy_value(ptr %1782)
  %1783 = load ptr, ptr @fun_Core_bool_is_1_equals_else.266, align 8
  call void @free_candy_value(ptr %1783)
  %1784 = load ptr, ptr @81, align 8
  call void @free_candy_value(ptr %1784)
  %1785 = load ptr, ptr @fun_Core_bool_is_1_isMatch_then.268, align 8
  call void @free_candy_value(ptr %1785)
  %1786 = load ptr, ptr @fun_Core_bool_is_1_isMatch_else.270, align 8
  call void @free_candy_value(ptr %1786)
  %1787 = load ptr, ptr @fun_Core_bool_is_1_equals_then.272, align 8
  call void @free_candy_value(ptr %1787)
  %1788 = load ptr, ptr @fun_Core_bool_is_1_equals_then.274, align 8
  call void @free_candy_value(ptr %1788)
  %1789 = load ptr, ptr @fun_Core_bool_is_1_equals_else.276, align 8
  call void @free_candy_value(ptr %1789)
  %1790 = load ptr, ptr @82, align 8
  call void @free_candy_value(ptr %1790)
  %1791 = load ptr, ptr @fun_Core_bool_is_1_equals_else.278, align 8
  call void @free_candy_value(ptr %1791)
  %1792 = load ptr, ptr @83, align 8
  call void @free_candy_value(ptr %1792)
  %1793 = load ptr, ptr @fun_Core_bool_is_1_equals_else.280, align 8
  call void @free_candy_value(ptr %1793)
  %1794 = load ptr, ptr @84, align 8
  call void @free_candy_value(ptr %1794)
  %1795 = load ptr, ptr @fun_Core_function_is0_11.282, align 8
  call void @free_candy_value(ptr %1795)
  %1796 = load ptr, ptr @fun_Core_bool_lazyOr_18_equals_then, align 8
  call void @free_candy_value(ptr %1796)
  %1797 = load ptr, ptr @fun_Core_bool_lazyOr_18_equals_then.284, align 8
  call void @free_candy_value(ptr %1797)
  %1798 = load ptr, ptr @fun_Core_bool_lazyOr_18_equals_else, align 8
  call void @free_candy_value(ptr %1798)
  %1799 = load ptr, ptr @85, align 8
  call void @free_candy_value(ptr %1799)
  %1800 = load ptr, ptr @fun_Core_bool_lazyOr_18_equals_else.286, align 8
  call void @free_candy_value(ptr %1800)
  %1801 = load ptr, ptr @86, align 8
  call void @free_candy_value(ptr %1801)
  %1802 = load ptr, ptr @fun_Core_bool_lazyOr_18_equals_else.288, align 8
  call void @free_candy_value(ptr %1802)
  %1803 = load ptr, ptr @87, align 8
  call void @free_candy_value(ptr %1803)
  %1804 = load ptr, ptr @fun_Core_bool_lazyOr_18_case-0_didNotMatch, align 8
  call void @free_candy_value(ptr %1804)
  %1805 = load ptr, ptr @fun_Core_bool_lazyOr_18_equals_then.290, align 8
  call void @free_candy_value(ptr %1805)
  %1806 = load ptr, ptr @fun_Core_bool_lazyOr_18_equals_then.292, align 8
  call void @free_candy_value(ptr %1806)
  %1807 = load ptr, ptr @fun_Core_bool_lazyOr_18_equals_else.294, align 8
  call void @free_candy_value(ptr %1807)
  %1808 = load ptr, ptr @88, align 8
  call void @free_candy_value(ptr %1808)
  %1809 = load ptr, ptr @fun_Core_bool_lazyOr_18_equals_else.296, align 8
  call void @free_candy_value(ptr %1809)
  %1810 = load ptr, ptr @89, align 8
  call void @free_candy_value(ptr %1810)
  %1811 = load ptr, ptr @fun_Core_bool_lazyOr_18_equals_else.298, align 8
  call void @free_candy_value(ptr %1811)
  %1812 = load ptr, ptr @90, align 8
  call void @free_candy_value(ptr %1812)
  %1813 = load ptr, ptr @fun_Core_bool_lazyOr_18_case-1_matched, align 8
  call void @free_candy_value(ptr %1813)
  %1814 = load ptr, ptr @fun_Core_function_is0_11.300, align 8
  call void @free_candy_value(ptr %1814)
  %1815 = load ptr, ptr @fun_Core_bool_or, align 8
  call void @free_candy_value(ptr %1815)
  %1816 = load ptr, ptr @fun_Core_bool_is_1_equals_then.302, align 8
  call void @free_candy_value(ptr %1816)
  %1817 = load ptr, ptr @fun_Core_bool_is_1_equals_then.304, align 8
  call void @free_candy_value(ptr %1817)
  %1818 = load ptr, ptr @fun_Core_bool_is_1_equals_else.306, align 8
  call void @free_candy_value(ptr %1818)
  %1819 = load ptr, ptr @91, align 8
  call void @free_candy_value(ptr %1819)
  %1820 = load ptr, ptr @fun_Core_bool_is_1_equals_else.308, align 8
  call void @free_candy_value(ptr %1820)
  %1821 = load ptr, ptr @92, align 8
  call void @free_candy_value(ptr %1821)
  %1822 = load ptr, ptr @fun_Core_bool_is_1_equals_else.310, align 8
  call void @free_candy_value(ptr %1822)
  %1823 = load ptr, ptr @93, align 8
  call void @free_candy_value(ptr %1823)
  %1824 = load ptr, ptr @fun_Core_bool_is_1_isMatch_then.312, align 8
  call void @free_candy_value(ptr %1824)
  %1825 = load ptr, ptr @fun_Core_bool_is_1_isMatch_else.314, align 8
  call void @free_candy_value(ptr %1825)
  %1826 = load ptr, ptr @fun_Core_bool_is_1_equals_then.316, align 8
  call void @free_candy_value(ptr %1826)
  %1827 = load ptr, ptr @fun_Core_bool_is_1_equals_then.318, align 8
  call void @free_candy_value(ptr %1827)
  %1828 = load ptr, ptr @fun_Core_bool_is_1_equals_else.320, align 8
  call void @free_candy_value(ptr %1828)
  %1829 = load ptr, ptr @94, align 8
  call void @free_candy_value(ptr %1829)
  %1830 = load ptr, ptr @fun_Core_bool_is_1_equals_else.322, align 8
  call void @free_candy_value(ptr %1830)
  %1831 = load ptr, ptr @95, align 8
  call void @free_candy_value(ptr %1831)
  %1832 = load ptr, ptr @fun_Core_bool_is_1_equals_else.324, align 8
  call void @free_candy_value(ptr %1832)
  %1833 = load ptr, ptr @96, align 8
  call void @free_candy_value(ptr %1833)
  %1834 = load ptr, ptr @fun_Core_bool_is_1_equals_then.326, align 8
  call void @free_candy_value(ptr %1834)
  %1835 = load ptr, ptr @fun_Core_bool_is_1_equals_then.328, align 8
  call void @free_candy_value(ptr %1835)
  %1836 = load ptr, ptr @fun_Core_bool_is_1_equals_else.330, align 8
  call void @free_candy_value(ptr %1836)
  %1837 = load ptr, ptr @97, align 8
  call void @free_candy_value(ptr %1837)
  %1838 = load ptr, ptr @fun_Core_bool_is_1_equals_else.332, align 8
  call void @free_candy_value(ptr %1838)
  %1839 = load ptr, ptr @98, align 8
  call void @free_candy_value(ptr %1839)
  %1840 = load ptr, ptr @fun_Core_bool_is_1_equals_else.334, align 8
  call void @free_candy_value(ptr %1840)
  %1841 = load ptr, ptr @99, align 8
  call void @free_candy_value(ptr %1841)
  %1842 = load ptr, ptr @fun_Core_bool_is_1_isMatch_then.336, align 8
  call void @free_candy_value(ptr %1842)
  %1843 = load ptr, ptr @fun_Core_bool_is_1_isMatch_else.338, align 8
  call void @free_candy_value(ptr %1843)
  %1844 = load ptr, ptr @fun_Core_bool_is_1_equals_then.340, align 8
  call void @free_candy_value(ptr %1844)
  %1845 = load ptr, ptr @fun_Core_bool_is_1_equals_then.342, align 8
  call void @free_candy_value(ptr %1845)
  %1846 = load ptr, ptr @fun_Core_bool_is_1_equals_else.344, align 8
  call void @free_candy_value(ptr %1846)
  %1847 = load ptr, ptr @100, align 8
  call void @free_candy_value(ptr %1847)
  %1848 = load ptr, ptr @fun_Core_bool_is_1_equals_else.346, align 8
  call void @free_candy_value(ptr %1848)
  %1849 = load ptr, ptr @101, align 8
  call void @free_candy_value(ptr %1849)
  %1850 = load ptr, ptr @fun_Core_bool_is_1_equals_else.348, align 8
  call void @free_candy_value(ptr %1850)
  %1851 = load ptr, ptr @102, align 8
  call void @free_candy_value(ptr %1851)
  %1852 = load ptr, ptr @fun_Core_bool_or_12, align 8
  call void @free_candy_value(ptr %1852)
  %1853 = load ptr, ptr @fun_Core_bool_implies, align 8
  call void @free_candy_value(ptr %1853)
  %1854 = load ptr, ptr @fun_Core_bool_is_1_equals_then.350, align 8
  call void @free_candy_value(ptr %1854)
  %1855 = load ptr, ptr @fun_Core_bool_is_1_equals_then.352, align 8
  call void @free_candy_value(ptr %1855)
  %1856 = load ptr, ptr @fun_Core_bool_is_1_equals_else.354, align 8
  call void @free_candy_value(ptr %1856)
  %1857 = load ptr, ptr @103, align 8
  call void @free_candy_value(ptr %1857)
  %1858 = load ptr, ptr @fun_Core_bool_is_1_equals_else.356, align 8
  call void @free_candy_value(ptr %1858)
  %1859 = load ptr, ptr @104, align 8
  call void @free_candy_value(ptr %1859)
  %1860 = load ptr, ptr @fun_Core_bool_is_1_equals_else.358, align 8
  call void @free_candy_value(ptr %1860)
  %1861 = load ptr, ptr @105, align 8
  call void @free_candy_value(ptr %1861)
  %1862 = load ptr, ptr @fun_Core_bool_is_1_isMatch_then.360, align 8
  call void @free_candy_value(ptr %1862)
  %1863 = load ptr, ptr @fun_Core_bool_is_1_isMatch_else.362, align 8
  call void @free_candy_value(ptr %1863)
  %1864 = load ptr, ptr @fun_Core_bool_is_1_equals_then.364, align 8
  call void @free_candy_value(ptr %1864)
  %1865 = load ptr, ptr @fun_Core_bool_is_1_equals_then.366, align 8
  call void @free_candy_value(ptr %1865)
  %1866 = load ptr, ptr @fun_Core_bool_is_1_equals_else.368, align 8
  call void @free_candy_value(ptr %1866)
  %1867 = load ptr, ptr @106, align 8
  call void @free_candy_value(ptr %1867)
  %1868 = load ptr, ptr @fun_Core_bool_is_1_equals_else.370, align 8
  call void @free_candy_value(ptr %1868)
  %1869 = load ptr, ptr @107, align 8
  call void @free_candy_value(ptr %1869)
  %1870 = load ptr, ptr @fun_Core_bool_is_1_equals_else.372, align 8
  call void @free_candy_value(ptr %1870)
  %1871 = load ptr, ptr @108, align 8
  call void @free_candy_value(ptr %1871)
  %1872 = load ptr, ptr @fun_Core_bool_is_1_equals_then.374, align 8
  call void @free_candy_value(ptr %1872)
  %1873 = load ptr, ptr @fun_Core_bool_is_1_equals_then.376, align 8
  call void @free_candy_value(ptr %1873)
  %1874 = load ptr, ptr @fun_Core_bool_is_1_equals_else.378, align 8
  call void @free_candy_value(ptr %1874)
  %1875 = load ptr, ptr @109, align 8
  call void @free_candy_value(ptr %1875)
  %1876 = load ptr, ptr @fun_Core_bool_is_1_equals_else.380, align 8
  call void @free_candy_value(ptr %1876)
  %1877 = load ptr, ptr @110, align 8
  call void @free_candy_value(ptr %1877)
  %1878 = load ptr, ptr @fun_Core_bool_is_1_equals_else.382, align 8
  call void @free_candy_value(ptr %1878)
  %1879 = load ptr, ptr @111, align 8
  call void @free_candy_value(ptr %1879)
  %1880 = load ptr, ptr @fun_Core_bool_is_1_isMatch_then.384, align 8
  call void @free_candy_value(ptr %1880)
  %1881 = load ptr, ptr @fun_Core_bool_is_1_isMatch_else.386, align 8
  call void @free_candy_value(ptr %1881)
  %1882 = load ptr, ptr @fun_Core_bool_is_1_equals_then.388, align 8
  call void @free_candy_value(ptr %1882)
  %1883 = load ptr, ptr @fun_Core_bool_is_1_equals_then.390, align 8
  call void @free_candy_value(ptr %1883)
  %1884 = load ptr, ptr @fun_Core_bool_is_1_equals_else.392, align 8
  call void @free_candy_value(ptr %1884)
  %1885 = load ptr, ptr @112, align 8
  call void @free_candy_value(ptr %1885)
  %1886 = load ptr, ptr @fun_Core_bool_is_1_equals_else.394, align 8
  call void @free_candy_value(ptr %1886)
  %1887 = load ptr, ptr @113, align 8
  call void @free_candy_value(ptr %1887)
  %1888 = load ptr, ptr @fun_Core_bool_is_1_equals_else.396, align 8
  call void @free_candy_value(ptr %1888)
  %1889 = load ptr, ptr @114, align 8
  call void @free_candy_value(ptr %1889)
  %1890 = load ptr, ptr @fun_Core_bool_is_1_isMatch_then.398, align 8
  call void @free_candy_value(ptr %1890)
  %1891 = load ptr, ptr @fun_Core_bool_not_6_equals_then.400, align 8
  call void @free_candy_value(ptr %1891)
  %1892 = load ptr, ptr @fun_Core_bool_not_6_equals_then.402, align 8
  call void @free_candy_value(ptr %1892)
  %1893 = load ptr, ptr @fun_Core_bool_not_6_equals_else.404, align 8
  call void @free_candy_value(ptr %1893)
  %1894 = load ptr, ptr @115, align 8
  call void @free_candy_value(ptr %1894)
  %1895 = load ptr, ptr @fun_Core_bool_not_6_equals_else.406, align 8
  call void @free_candy_value(ptr %1895)
  %1896 = load ptr, ptr @116, align 8
  call void @free_candy_value(ptr %1896)
  %1897 = load ptr, ptr @fun_Core_bool_not_6_equals_else.408, align 8
  call void @free_candy_value(ptr %1897)
  %1898 = load ptr, ptr @117, align 8
  call void @free_candy_value(ptr %1898)
  %1899 = load ptr, ptr @fun_Core_bool_not_6_case-0_didNotMatch.410, align 8
  call void @free_candy_value(ptr %1899)
  %1900 = load ptr, ptr @fun_Core_bool_not_6_equals_then.412, align 8
  call void @free_candy_value(ptr %1900)
  %1901 = load ptr, ptr @fun_Core_bool_not_6_equals_then.414, align 8
  call void @free_candy_value(ptr %1901)
  %1902 = load ptr, ptr @fun_Core_bool_not_6_equals_else.416, align 8
  call void @free_candy_value(ptr %1902)
  %1903 = load ptr, ptr @118, align 8
  call void @free_candy_value(ptr %1903)
  %1904 = load ptr, ptr @fun_Core_bool_not_6_equals_else.418, align 8
  call void @free_candy_value(ptr %1904)
  %1905 = load ptr, ptr @119, align 8
  call void @free_candy_value(ptr %1905)
  %1906 = load ptr, ptr @fun_Core_bool_not_6_equals_else.420, align 8
  call void @free_candy_value(ptr %1906)
  %1907 = load ptr, ptr @120, align 8
  call void @free_candy_value(ptr %1907)
  %1908 = load ptr, ptr @"fun_anonymous_$generated__needs_isConditionBool_else.422", align 8
  call void @free_candy_value(ptr %1908)
  %1909 = load ptr, ptr @fun_Core_check_check, align 8
  call void @free_candy_value(ptr %1909)
  %1910 = load ptr, ptr @fun_Core_check_check_1_equals_then, align 8
  call void @free_candy_value(ptr %1910)
  %1911 = load ptr, ptr @fun_Core_check_check_1_equals_then.424, align 8
  call void @free_candy_value(ptr %1911)
  %1912 = load ptr, ptr @fun_Core_check_check_1_equals_else, align 8
  call void @free_candy_value(ptr %1912)
  %1913 = load ptr, ptr @121, align 8
  call void @free_candy_value(ptr %1913)
  %1914 = load ptr, ptr @fun_Core_check_check_1_equals_else.426, align 8
  call void @free_candy_value(ptr %1914)
  %1915 = load ptr, ptr @122, align 8
  call void @free_candy_value(ptr %1915)
  %1916 = load ptr, ptr @fun_Core_check_check_1_equals_else.428, align 8
  call void @free_candy_value(ptr %1916)
  %1917 = load ptr, ptr @123, align 8
  call void @free_candy_value(ptr %1917)
  %1918 = load ptr, ptr @fun_Core_check_check_1_isMatch_then, align 8
  call void @free_candy_value(ptr %1918)
  %1919 = load ptr, ptr @fun_Core_check_check_1_isMatch_else, align 8
  call void @free_candy_value(ptr %1919)
  %1920 = load ptr, ptr @fun_Core_check_check_1_equals_then.430, align 8
  call void @free_candy_value(ptr %1920)
  %1921 = load ptr, ptr @fun_Core_check_check_1_equals_then.432, align 8
  call void @free_candy_value(ptr %1921)
  %1922 = load ptr, ptr @fun_Core_check_check_1_equals_else.434, align 8
  call void @free_candy_value(ptr %1922)
  %1923 = load ptr, ptr @124, align 8
  call void @free_candy_value(ptr %1923)
  %1924 = load ptr, ptr @fun_Core_check_check_1_equals_else.436, align 8
  call void @free_candy_value(ptr %1924)
  %1925 = load ptr, ptr @125, align 8
  call void @free_candy_value(ptr %1925)
  %1926 = load ptr, ptr @fun_Core_check_check_1_equals_else.438, align 8
  call void @free_candy_value(ptr %1926)
  %1927 = load ptr, ptr @126, align 8
  call void @free_candy_value(ptr %1927)
  %1928 = load ptr, ptr @"fun_anonymous_$generated__needs_isConditionTrue_else.440", align 8
  call void @free_candy_value(ptr %1928)
  %1929 = load ptr, ptr @"fun_anonymous_$generated__needs_condition_else.442", align 8
  call void @free_candy_value(ptr %1929)
  %1930 = load ptr, ptr @fun_Core_controlFlow_recursive, align 8
  call void @free_candy_value(ptr %1930)
  %1931 = load ptr, ptr @fun_Core_function_is2_11, align 8
  call void @free_candy_value(ptr %1931)
  %1932 = load ptr, ptr @fun_Core_controlFlow_recursive_18, align 8
  call void @free_candy_value(ptr %1932)
  %1933 = load ptr, ptr @fun_Core_controlFlow_recursive_18_0, align 8
  call void @free_candy_value(ptr %1933)
  %1934 = load ptr, ptr @fun_Core_function_run, align 8
  call void @free_candy_value(ptr %1934)
  %1935 = load ptr, ptr @fun_Core_function_is0_11.444, align 8
  call void @free_candy_value(ptr %1935)
  %1936 = load ptr, ptr @fun_Core_int_compareTo, align 8
  call void @free_candy_value(ptr %1936)
  %1937 = load ptr, ptr @fun_Core_int_isLessThan, align 8
  call void @free_candy_value(ptr %1937)
  %1938 = load ptr, ptr @fun_Core_int_isGreaterThan, align 8
  call void @free_candy_value(ptr %1938)
  %1939 = load ptr, ptr @fun_Core_int_isNonNegative, align 8
  call void @free_candy_value(ptr %1939)
  %1940 = load ptr, ptr @fun_Core_int_isEven, align 8
  call void @free_candy_value(ptr %1940)
  %1941 = load ptr, ptr @fun_Core_int_max, align 8
  call void @free_candy_value(ptr %1941)
  %1942 = load ptr, ptr @fun_Core_int_max_15, align 8
  call void @free_candy_value(ptr %1942)
  %1943 = load ptr, ptr @fun_Core_int_max_16, align 8
  call void @free_candy_value(ptr %1943)
  %1944 = load ptr, ptr @fun_Core_int_pow_21_4_case-0_matched, align 8
  call void @free_candy_value(ptr %1944)
  %1945 = load ptr, ptr @fun_Core_int_pow_21, align 8
  call void @free_candy_value(ptr %1945)
  %1946 = load ptr, ptr @fun_Core_int_pow_21_1_equals_then, align 8
  call void @free_candy_value(ptr %1946)
  %1947 = load ptr, ptr @fun_Core_int_pow_21_1_hasKey_then, align 8
  call void @free_candy_value(ptr %1947)
  %1948 = load ptr, ptr @127, align 8
  call void @free_candy_value(ptr %1948)
  %1949 = load ptr, ptr @fun_Core_int_pow_21_1_hasKey_else, align 8
  call void @free_candy_value(ptr %1949)
  %1950 = load ptr, ptr @128, align 8
  call void @free_candy_value(ptr %1950)
  %1951 = load ptr, ptr @fun_Core_int_pow_21_1_isMatch_then, align 8
  call void @free_candy_value(ptr %1951)
  %1952 = load ptr, ptr @fun_Core_int_pow_21_1_hasKey_then.446, align 8
  call void @free_candy_value(ptr %1952)
  %1953 = load ptr, ptr @129, align 8
  call void @free_candy_value(ptr %1953)
  %1954 = load ptr, ptr @fun_Core_int_pow_21_1_hasKey_else.448, align 8
  call void @free_candy_value(ptr %1954)
  %1955 = load ptr, ptr @130, align 8
  call void @free_candy_value(ptr %1955)
  %1956 = load ptr, ptr @fun_Core_int_pow_21_1_isMatch_then.450, align 8
  call void @free_candy_value(ptr %1956)
  %1957 = load ptr, ptr @131, align 8
  call void @free_candy_value(ptr %1957)
  %1958 = load ptr, ptr @fun_Core_int_pow_21_1_isMatch_else, align 8
  call void @free_candy_value(ptr %1958)
  %1959 = load ptr, ptr @fun_Core_int_pow_21_1_isMatch_else.452, align 8
  call void @free_candy_value(ptr %1959)
  %1960 = load ptr, ptr @fun_Core_int_pow_21_1_equals_else, align 8
  call void @free_candy_value(ptr %1960)
  %1961 = load ptr, ptr @132, align 8
  call void @free_candy_value(ptr %1961)
  %1962 = load ptr, ptr @fun_Core_int_pow_21_1_isMatch_else.454, align 8
  call void @free_candy_value(ptr %1962)
  %1963 = load ptr, ptr @fun_Core_int_pow_21_4_equals_else, align 8
  call void @free_candy_value(ptr %1963)
  %1964 = load ptr, ptr @133, align 8
  call void @free_candy_value(ptr %1964)
  %1965 = load ptr, ptr @fun_Core_int_pow_21_4_case-0_didNotMatch, align 8
  call void @free_candy_value(ptr %1965)
  %1966 = load ptr, ptr @fun_Core_int_pow_21_4_5, align 8
  call void @free_candy_value(ptr %1966)
  %1967 = load ptr, ptr @fun_Core_int_pow_21_4_6, align 8
  call void @free_candy_value(ptr %1967)
  %1968 = load ptr, ptr @fun_Core_text_removePrefix, align 8
  call void @free_candy_value(ptr %1968)
  %1969 = load ptr, ptr @fun_Core_text_removePrefix_15, align 8
  call void @free_candy_value(ptr %1969)
  %1970 = load ptr, ptr @fun_Core_text_removePrefix_16, align 8
  call void @free_candy_value(ptr %1970)
  %1971 = load ptr, ptr @fun_Core_fixedDecimal_isScale, align 8
  call void @free_candy_value(ptr %1971)
  %1972 = load ptr, ptr @fun_Core_fixedDecimal_isScale_18, align 8
  call void @free_candy_value(ptr %1972)
  %1973 = load ptr, ptr @fun_Core_fixedDecimal_scaleFactor, align 8
  call void @free_candy_value(ptr %1973)
  %1974 = load ptr, ptr @fun_Core_fixedDecimal_isScale_18.456, align 8
  call void @free_candy_value(ptr %1974)
  %1975 = load ptr, ptr @134, align 8
  call void @free_candy_value(ptr %1975)
  %1976 = load ptr, ptr @"fun_Core_fixedDecimal_is_1_equals_else, Core_result_is_1_equals_else, Core_result_mapOrElse_30_equals_else", align 8
  call void @free_candy_value(ptr %1976)
  %1977 = load ptr, ptr @fun_Core_fixedDecimal_fromIntScaled, align 8
  call void @free_candy_value(ptr %1977)
  %1978 = load ptr, ptr @fun_Core_fixedDecimal_isScale_18.458, align 8
  call void @free_candy_value(ptr %1978)
  %1979 = load ptr, ptr @tag_FixedDecimal.459, align 8
  call void @free_candy_value(ptr %1979)
  %1980 = load ptr, ptr @fun_Core_fixedDecimal_rescaledMinorUnits, align 8
  call void @free_candy_value(ptr %1980)
  %1981 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then, align 8
  call void @free_candy_value(ptr %1981)
  %1982 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.461, align 8
  call void @free_candy_value(ptr %1982)
  %1983 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.463, align 8
  call void @free_candy_value(ptr %1983)
  %1984 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.465, align 8
  call void @free_candy_value(ptr %1984)
  %1985 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then, align 8
  call void @free_candy_value(ptr %1985)
  %1986 = load ptr, ptr @135, align 8
  call void @free_candy_value(ptr %1986)
  %1987 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else, align 8
  call void @free_candy_value(ptr %1987)
  %1988 = load ptr, ptr @136, align 8
  call void @free_candy_value(ptr %1988)
  %1989 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then, align 8
  call void @free_candy_value(ptr %1989)
  %1990 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.467, align 8
  call void @free_candy_value(ptr %1990)
  %1991 = load ptr, ptr @137, align 8
  call void @free_candy_value(ptr %1991)
  %1992 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.469, align 8
  call void @free_candy_value(ptr %1992)
  %1993 = load ptr, ptr @138, align 8
  call void @free_candy_value(ptr %1993)
  %1994 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.471, align 8
  call void @free_candy_value(ptr %1994)
  %1995 = load ptr, ptr @139, align 8
  call void @free_candy_value(ptr %1995)
  %1996 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else, align 8
  call void @free_candy_value(ptr %1996)
  %1997 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.473, align 8
  call void @free_candy_value(ptr %1997)
  %1998 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else, align 8
  call void @free_candy_value(ptr %1998)
  %1999 = load ptr, ptr @140, align 8
  call void @free_candy_value(ptr %1999)
  %2000 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.475, align 8
  call void @free_candy_value(ptr %2000)
  %2001 = load ptr, ptr @141, align 8
  call void @free_candy_value(ptr %2001)
  %2002 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.477, align 8
  call void @free_candy_value(ptr %2002)
  %2003 = load ptr, ptr @142, align 8
  call void @free_candy_value(ptr %2003)
  %2004 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched, align 8
  call void @free_candy_value(ptr %2004)
  %2005 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18, align 8
  call void @free_candy_value(ptr %2005)
  %2006 = load ptr, ptr @fun_Core_fixedDecimal_isScale_18.479, align 8
  call void @free_candy_value(ptr %2006)
  %2007 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.481, align 8
  call void @free_candy_value(ptr %2007)
  %2008 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.483, align 8
  call void @free_candy_value(ptr %2008)
  %2009 = load ptr, ptr @fun_Core_fixedDecimal_rescaledMinorUnits_24, align 8
  call void @free_candy_value(ptr %2009)
  %2010 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.485, align 8
  call void @free_candy_value(ptr %2010)
  %2011 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.487, align 8
  call void @free_candy_value(ptr %2011)
  %2012 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.489, align 8
  call void @free_candy_value(ptr %2012)
  %2013 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.491, align 8
  call void @free_candy_value(ptr %2013)
  %2014 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.493, align 8
  call void @free_candy_value(ptr %2014)
  %2015 = load ptr, ptr @143, align 8
  call void @free_candy_value(ptr %2015)
  %2016 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.495, align 8
  call void @free_candy_value(ptr %2016)
  %2017 = load ptr, ptr @144, align 8
  call void @free_candy_value(ptr %2017)
  %2018 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.497, align 8
  call void @free_candy_value(ptr %2018)
  %2019 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.499, align 8
  call void @free_candy_value(ptr %2019)
  %2020 = load ptr, ptr @145, align 8
  call void @free_candy_value(ptr %2020)
  %2021 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.501, align 8
  call void @free_candy_value(ptr %2021)
  %2022 = load ptr, ptr @146, align 8
  call void @free_candy_value(ptr %2022)
  %2023 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.503, align 8
  call void @free_candy_value(ptr %2023)
  %2024 = load ptr, ptr @147, align 8
  call void @free_candy_value(ptr %2024)
  %2025 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.505, align 8
  call void @free_candy_value(ptr %2025)
  %2026 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.507, align 8
  call void @free_candy_value(ptr %2026)
  %2027 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.509, align 8
  call void @free_candy_value(ptr %2027)
  %2028 = load ptr, ptr @148, align 8
  call void @free_candy_value(ptr %2028)
  %2029 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.511, align 8
  call void @free_candy_value(ptr %2029)
  %2030 = load ptr, ptr @149, align 8
  call void @free_candy_value(ptr %2030)
  %2031 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.513, align 8
  call void @free_candy_value(ptr %2031)
  %2032 = load ptr, ptr @150, align 8
  call void @free_candy_value(ptr %2032)
  %2033 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.515, align 8
  call void @free_candy_value(ptr %2033)
  %2034 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.517, align 8
  call void @free_candy_value(ptr %2034)
  %2035 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.519, align 8
  call void @free_candy_value(ptr %2035)
  %2036 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.521, align 8
  call void @free_candy_value(ptr %2036)
  %2037 = load ptr, ptr @fun_Core_fixedDecimal_rescaledMinorUnits_25, align 8
  call void @free_candy_value(ptr %2037)
  %2038 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.523, align 8
  call void @free_candy_value(ptr %2038)
  %2039 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.525, align 8
  call void @free_candy_value(ptr %2039)
  %2040 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.527, align 8
  call void @free_candy_value(ptr %2040)
  %2041 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.529, align 8
  call void @free_candy_value(ptr %2041)
  %2042 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.531, align 8
  call void @free_candy_value(ptr %2042)
  %2043 = load ptr, ptr @151, align 8
  call void @free_candy_value(ptr %2043)
  %2044 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.533, align 8
  call void @free_candy_value(ptr %2044)
  %2045 = load ptr, ptr @152, align 8
  call void @free_candy_value(ptr %2045)
  %2046 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.535, align 8
  call void @free_candy_value(ptr %2046)
  %2047 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.537, align 8
  call void @free_candy_value(ptr %2047)
  %2048 = load ptr, ptr @153, align 8
  call void @free_candy_value(ptr %2048)
  %2049 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.539, align 8
  call void @free_candy_value(ptr %2049)
  %2050 = load ptr, ptr @154, align 8
  call void @free_candy_value(ptr %2050)
  %2051 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.541, align 8
  call void @free_candy_value(ptr %2051)
  %2052 = load ptr, ptr @155, align 8
  call void @free_candy_value(ptr %2052)
  %2053 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.543, align 8
  call void @free_candy_value(ptr %2053)
  %2054 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.545, align 8
  call void @free_candy_value(ptr %2054)
  %2055 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.547, align 8
  call void @free_candy_value(ptr %2055)
  %2056 = load ptr, ptr @156, align 8
  call void @free_candy_value(ptr %2056)
  %2057 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.549, align 8
  call void @free_candy_value(ptr %2057)
  %2058 = load ptr, ptr @157, align 8
  call void @free_candy_value(ptr %2058)
  %2059 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.551, align 8
  call void @free_candy_value(ptr %2059)
  %2060 = load ptr, ptr @158, align 8
  call void @free_candy_value(ptr %2060)
  %2061 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.553, align 8
  call void @free_candy_value(ptr %2061)
  %2062 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.555, align 8
  call void @free_candy_value(ptr %2062)
  %2063 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.557, align 8
  call void @free_candy_value(ptr %2063)
  %2064 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.559, align 8
  call void @free_candy_value(ptr %2064)
  %2065 = load ptr, ptr @fun_Core_fixedDecimal_add, align 8
  call void @free_candy_value(ptr %2065)
  %2066 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.561, align 8
  call void @free_candy_value(ptr %2066)
  %2067 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.563, align 8
  call void @free_candy_value(ptr %2067)
  %2068 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.565, align 8
  call void @free_candy_value(ptr %2068)
  %2069 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.567, align 8
  call void @free_candy_value(ptr %2069)
  %2070 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.569, align 8
  call void @free_candy_value(ptr %2070)
  %2071 = load ptr, ptr @159, align 8
  call void @free_candy_value(ptr %2071)
  %2072 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.571, align 8
  call void @free_candy_value(ptr %2072)
  %2073 = load ptr, ptr @160, align 8
  call void @free_candy_value(ptr %2073)
  %2074 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.573, align 8
  call void @free_candy_value(ptr %2074)
  %2075 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.575, align 8
  call void @free_candy_value(ptr %2075)
  %2076 = load ptr, ptr @161, align 8
  call void @free_candy_value(ptr %2076)
  %2077 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.577, align 8
  call void @free_candy_value(ptr %2077)
  %2078 = load ptr, ptr @162, align 8
  call void @free_candy_value(ptr %2078)
  %2079 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.579, align 8
  call void @free_candy_value(ptr %2079)
  %2080 = load ptr, ptr @163, align 8
  call void @free_candy_value(ptr %2080)
  %2081 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.581, align 8
  call void @free_candy_value(ptr %2081)
  %2082 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.583, align 8
  call void @free_candy_value(ptr %2082)
  %2083 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.585, align 8
  call void @free_candy_value(ptr %2083)
  %2084 = load ptr, ptr @164, align 8
  call void @free_candy_value(ptr %2084)
  %2085 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.587, align 8
  call void @free_candy_value(ptr %2085)
  %2086 = load ptr, ptr @165, align 8
  call void @free_candy_value(ptr %2086)
  %2087 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.589, align 8
  call void @free_candy_value(ptr %2087)
  %2088 = load ptr, ptr @166, align 8
  call void @free_candy_value(ptr %2088)
  %2089 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.591, align 8
  call void @free_candy_value(ptr %2089)
  %2090 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.593, align 8
  call void @free_candy_value(ptr %2090)
  %2091 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.595, align 8
  call void @free_candy_value(ptr %2091)
  %2092 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.597, align 8
  call void @free_candy_value(ptr %2092)
  %2093 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.599, align 8
  call void @free_candy_value(ptr %2093)
  %2094 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.601, align 8
  call void @free_candy_value(ptr %2094)
  %2095 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.603, align 8
  call void @free_candy_value(ptr %2095)
  %2096 = load ptr, ptr @167, align 8
  call void @free_candy_value(ptr %2096)
  %2097 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.605, align 8
  call void @free_candy_value(ptr %2097)
  %2098 = load ptr, ptr @168, align 8
  call void @free_candy_value(ptr %2098)
  %2099 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.607, align 8
  call void @free_candy_value(ptr %2099)
  %2100 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.609, align 8
  call void @free_candy_value(ptr %2100)
  %2101 = load ptr, ptr @169, align 8
  call void @free_candy_value(ptr %2101)
  %2102 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.611, align 8
  call void @free_candy_value(ptr %2102)
  %2103 = load ptr, ptr @170, align 8
  call void @free_candy_value(ptr %2103)
  %2104 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.613, align 8
  call void @free_candy_value(ptr %2104)
  %2105 = load ptr, ptr @171, align 8
  call void @free_candy_value(ptr %2105)
  %2106 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.615, align 8
  call void @free_candy_value(ptr %2106)
  %2107 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.617, align 8
  call void @free_candy_value(ptr %2107)
  %2108 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.619, align 8
  call void @free_candy_value(ptr %2108)
  %2109 = load ptr, ptr @172, align 8
  call void @free_candy_value(ptr %2109)
  %2110 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.621, align 8
  call void @free_candy_value(ptr %2110)
  %2111 = load ptr, ptr @173, align 8
  call void @free_candy_value(ptr %2111)
  %2112 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.623, align 8
  call void @free_candy_value(ptr %2112)
  %2113 = load ptr, ptr @174, align 8
  call void @free_candy_value(ptr %2113)
  %2114 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.625, align 8
  call void @free_candy_value(ptr %2114)
  %2115 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.627, align 8
  call void @free_candy_value(ptr %2115)
  %2116 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.629, align 8
  call void @free_candy_value(ptr %2116)
  %2117 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.631, align 8
  call void @free_candy_value(ptr %2117)
  %2118 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.633, align 8
  call void @free_candy_value(ptr %2118)
  %2119 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.635, align 8
  call void @free_candy_value(ptr %2119)
  %2120 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.637, align 8
  call void @free_candy_value(ptr %2120)
  %2121 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.639, align 8
  call void @free_candy_value(ptr %2121)
  %2122 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.641, align 8
  call void @free_candy_value(ptr %2122)
  %2123 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.643, align 8
  call void @free_candy_value(ptr %2123)
  %2124 = load ptr, ptr @fun_Core_fixedDecimal_divideTruncatingAtScale, align 8
  call void @free_candy_value(ptr %2124)
  %2125 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.645, align 8
  call void @free_candy_value(ptr %2125)
  %2126 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.647, align 8
  call void @free_candy_value(ptr %2126)
  %2127 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.649, align 8
  call void @free_candy_value(ptr %2127)
  %2128 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.651, align 8
  call void @free_candy_value(ptr %2128)
  %2129 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.653, align 8
  call void @free_candy_value(ptr %2129)
  %2130 = load ptr, ptr @175, align 8
  call void @free_candy_value(ptr %2130)
  %2131 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.655, align 8
  call void @free_candy_value(ptr %2131)
  %2132 = load ptr, ptr @176, align 8
  call void @free_candy_value(ptr %2132)
  %2133 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.657, align 8
  call void @free_candy_value(ptr %2133)
  %2134 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.659, align 8
  call void @free_candy_value(ptr %2134)
  %2135 = load ptr, ptr @177, align 8
  call void @free_candy_value(ptr %2135)
  %2136 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.661, align 8
  call void @free_candy_value(ptr %2136)
  %2137 = load ptr, ptr @178, align 8
  call void @free_candy_value(ptr %2137)
  %2138 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.663, align 8
  call void @free_candy_value(ptr %2138)
  %2139 = load ptr, ptr @179, align 8
  call void @free_candy_value(ptr %2139)
  %2140 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.665, align 8
  call void @free_candy_value(ptr %2140)
  %2141 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.667, align 8
  call void @free_candy_value(ptr %2141)
  %2142 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.669, align 8
  call void @free_candy_value(ptr %2142)
  %2143 = load ptr, ptr @180, align 8
  call void @free_candy_value(ptr %2143)
  %2144 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.671, align 8
  call void @free_candy_value(ptr %2144)
  %2145 = load ptr, ptr @181, align 8
  call void @free_candy_value(ptr %2145)
  %2146 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.673, align 8
  call void @free_candy_value(ptr %2146)
  %2147 = load ptr, ptr @182, align 8
  call void @free_candy_value(ptr %2147)
  %2148 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.675, align 8
  call void @free_candy_value(ptr %2148)
  %2149 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.677, align 8
  call void @free_candy_value(ptr %2149)
  %2150 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.679, align 8
  call void @free_candy_value(ptr %2150)
  %2151 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.681, align 8
  call void @free_candy_value(ptr %2151)
  %2152 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.683, align 8
  call void @free_candy_value(ptr %2152)
  %2153 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.685, align 8
  call void @free_candy_value(ptr %2153)
  %2154 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.687, align 8
  call void @free_candy_value(ptr %2154)
  %2155 = load ptr, ptr @183, align 8
  call void @free_candy_value(ptr %2155)
  %2156 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.689, align 8
  call void @free_candy_value(ptr %2156)
  %2157 = load ptr, ptr @184, align 8
  call void @free_candy_value(ptr %2157)
  %2158 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.691, align 8
  call void @free_candy_value(ptr %2158)
  %2159 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.693, align 8
  call void @free_candy_value(ptr %2159)
  %2160 = load ptr, ptr @185, align 8
  call void @free_candy_value(ptr %2160)
  %2161 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.695, align 8
  call void @free_candy_value(ptr %2161)
  %2162 = load ptr, ptr @186, align 8
  call void @free_candy_value(ptr %2162)
  %2163 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.697, align 8
  call void @free_candy_value(ptr %2163)
  %2164 = load ptr, ptr @187, align 8
  call void @free_candy_value(ptr %2164)
  %2165 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.699, align 8
  call void @free_candy_value(ptr %2165)
  %2166 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.701, align 8
  call void @free_candy_value(ptr %2166)
  %2167 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.703, align 8
  call void @free_candy_value(ptr %2167)
  %2168 = load ptr, ptr @188, align 8
  call void @free_candy_value(ptr %2168)
  %2169 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.705, align 8
  call void @free_candy_value(ptr %2169)
  %2170 = load ptr, ptr @189, align 8
  call void @free_candy_value(ptr %2170)
  %2171 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.707, align 8
  call void @free_candy_value(ptr %2171)
  %2172 = load ptr, ptr @190, align 8
  call void @free_candy_value(ptr %2172)
  %2173 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.709, align 8
  call void @free_candy_value(ptr %2173)
  %2174 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.711, align 8
  call void @free_candy_value(ptr %2174)
  %2175 = load ptr, ptr @fun_Core_fixedDecimal_isScale_18.713, align 8
  call void @free_candy_value(ptr %2175)
  %2176 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.715, align 8
  call void @free_candy_value(ptr %2176)
  %2177 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.717, align 8
  call void @free_candy_value(ptr %2177)
  %2178 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.719, align 8
  call void @free_candy_value(ptr %2178)
  %2179 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.721, align 8
  call void @free_candy_value(ptr %2179)
  %2180 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.723, align 8
  call void @free_candy_value(ptr %2180)
  %2181 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.725, align 8
  call void @free_candy_value(ptr %2181)
  %2182 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.727, align 8
  call void @free_candy_value(ptr %2182)
  %2183 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.729, align 8
  call void @free_candy_value(ptr %2183)
  %2184 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.731, align 8
  call void @free_candy_value(ptr %2184)
  %2185 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.733, align 8
  call void @free_candy_value(ptr %2185)
  %2186 = load ptr, ptr @fun_Core_fixedDecimal_isLessThanOrEqualTo, align 8
  call void @free_candy_value(ptr %2186)
  %2187 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.735, align 8
  call void @free_candy_value(ptr %2187)
  %2188 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.737, align 8
  call void @free_candy_value(ptr %2188)
  %2189 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.739, align 8
  call void @free_candy_value(ptr %2189)
  %2190 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.741, align 8
  call void @free_candy_value(ptr %2190)
  %2191 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.743, align 8
  call void @free_candy_value(ptr %2191)
  %2192 = load ptr, ptr @191, align 8
  call void @free_candy_value(ptr %2192)
  %2193 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.745, align 8
  call void @free_candy_value(ptr %2193)
  %2194 = load ptr, ptr @192, align 8
  call void @free_candy_value(ptr %2194)
  %2195 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.747, align 8
  call void @free_candy_value(ptr %2195)
  %2196 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.749, align 8
  call void @free_candy_value(ptr %2196)
  %2197 = load ptr, ptr @193, align 8
  call void @free_candy_value(ptr %2197)
  %2198 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.751, align 8
  call void @free_candy_value(ptr %2198)
  %2199 = load ptr, ptr @194, align 8
  call void @free_candy_value(ptr %2199)
  %2200 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.753, align 8
  call void @free_candy_value(ptr %2200)
  %2201 = load ptr, ptr @195, align 8
  call void @free_candy_value(ptr %2201)
  %2202 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.755, align 8
  call void @free_candy_value(ptr %2202)
  %2203 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.757, align 8
  call void @free_candy_value(ptr %2203)
  %2204 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.759, align 8
  call void @free_candy_value(ptr %2204)
  %2205 = load ptr, ptr @196, align 8
  call void @free_candy_value(ptr %2205)
  %2206 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.761, align 8
  call void @free_candy_value(ptr %2206)
  %2207 = load ptr, ptr @197, align 8
  call void @free_candy_value(ptr %2207)
  %2208 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.763, align 8
  call void @free_candy_value(ptr %2208)
  %2209 = load ptr, ptr @198, align 8
  call void @free_candy_value(ptr %2209)
  %2210 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.765, align 8
  call void @free_candy_value(ptr %2210)
  %2211 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.767, align 8
  call void @free_candy_value(ptr %2211)
  %2212 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.769, align 8
  call void @free_candy_value(ptr %2212)
  %2213 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.771, align 8
  call void @free_candy_value(ptr %2213)
  %2214 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.773, align 8
  call void @free_candy_value(ptr %2214)
  %2215 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.775, align 8
  call void @free_candy_value(ptr %2215)
  %2216 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.777, align 8
  call void @free_candy_value(ptr %2216)
  %2217 = load ptr, ptr @199, align 8
  call void @free_candy_value(ptr %2217)
  %2218 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.779, align 8
  call void @free_candy_value(ptr %2218)
  %2219 = load ptr, ptr @200, align 8
  call void @free_candy_value(ptr %2219)
  %2220 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.781, align 8
  call void @free_candy_value(ptr %2220)
  %2221 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.783, align 8
  call void @free_candy_value(ptr %2221)
  %2222 = load ptr, ptr @201, align 8
  call void @free_candy_value(ptr %2222)
  %2223 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.785, align 8
  call void @free_candy_value(ptr %2223)
  %2224 = load ptr, ptr @202, align 8
  call void @free_candy_value(ptr %2224)
  %2225 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.787, align 8
  call void @free_candy_value(ptr %2225)
  %2226 = load ptr, ptr @203, align 8
  call void @free_candy_value(ptr %2226)
  %2227 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.789, align 8
  call void @free_candy_value(ptr %2227)
  %2228 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.791, align 8
  call void @free_candy_value(ptr %2228)
  %2229 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.793, align 8
  call void @free_candy_value(ptr %2229)
  %2230 = load ptr, ptr @204, align 8
  call void @free_candy_value(ptr %2230)
  %2231 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.795, align 8
  call void @free_candy_value(ptr %2231)
  %2232 = load ptr, ptr @205, align 8
  call void @free_candy_value(ptr %2232)
  %2233 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.797, align 8
  call void @free_candy_value(ptr %2233)
  %2234 = load ptr, ptr @206, align 8
  call void @free_candy_value(ptr %2234)
  %2235 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.799, align 8
  call void @free_candy_value(ptr %2235)
  %2236 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.801, align 8
  call void @free_candy_value(ptr %2236)
  %2237 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.803, align 8
  call void @free_candy_value(ptr %2237)
  %2238 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.805, align 8
  call void @free_candy_value(ptr %2238)
  %2239 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.807, align 8
  call void @free_candy_value(ptr %2239)
  %2240 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.809, align 8
  call void @free_candy_value(ptr %2240)
  %2241 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.811, align 8
  call void @free_candy_value(ptr %2241)
  %2242 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.813, align 8
  call void @free_candy_value(ptr %2242)
  %2243 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.815, align 8
  call void @free_candy_value(ptr %2243)
  %2244 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.817, align 8
  call void @free_candy_value(ptr %2244)
  %2245 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.819, align 8
  call void @free_candy_value(ptr %2245)
  %2246 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.821, align 8
  call void @free_candy_value(ptr %2246)
  %2247 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.823, align 8
  call void @free_candy_value(ptr %2247)
  %2248 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.825, align 8
  call void @free_candy_value(ptr %2248)
  %2249 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.827, align 8
  call void @free_candy_value(ptr %2249)
  %2250 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.829, align 8
  call void @free_candy_value(ptr %2250)
  %2251 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.831, align 8
  call void @free_candy_value(ptr %2251)
  %2252 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.833, align 8
  call void @free_candy_value(ptr %2252)
  %2253 = load ptr, ptr @fun_Core_fixedDecimal_absolute, align 8
  call void @free_candy_value(ptr %2253)
  %2254 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.835, align 8
  call void @free_candy_value(ptr %2254)
  %2255 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.837, align 8
  call void @free_candy_value(ptr %2255)
  %2256 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.839, align 8
  call void @free_candy_value(ptr %2256)
  %2257 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.841, align 8
  call void @free_candy_value(ptr %2257)
  %2258 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.843, align 8
  call void @free_candy_value(ptr %2258)
  %2259 = load ptr, ptr @207, align 8
  call void @free_candy_value(ptr %2259)
  %2260 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.845, align 8
  call void @free_candy_value(ptr %2260)
  %2261 = load ptr, ptr @208, align 8
  call void @free_candy_value(ptr %2261)
  %2262 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.847, align 8
  call void @free_candy_value(ptr %2262)
  %2263 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.849, align 8
  call void @free_candy_value(ptr %2263)
  %2264 = load ptr, ptr @209, align 8
  call void @free_candy_value(ptr %2264)
  %2265 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.851, align 8
  call void @free_candy_value(ptr %2265)
  %2266 = load ptr, ptr @210, align 8
  call void @free_candy_value(ptr %2266)
  %2267 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.853, align 8
  call void @free_candy_value(ptr %2267)
  %2268 = load ptr, ptr @211, align 8
  call void @free_candy_value(ptr %2268)
  %2269 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.855, align 8
  call void @free_candy_value(ptr %2269)
  %2270 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.857, align 8
  call void @free_candy_value(ptr %2270)
  %2271 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.859, align 8
  call void @free_candy_value(ptr %2271)
  %2272 = load ptr, ptr @212, align 8
  call void @free_candy_value(ptr %2272)
  %2273 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.861, align 8
  call void @free_candy_value(ptr %2273)
  %2274 = load ptr, ptr @213, align 8
  call void @free_candy_value(ptr %2274)
  %2275 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.863, align 8
  call void @free_candy_value(ptr %2275)
  %2276 = load ptr, ptr @214, align 8
  call void @free_candy_value(ptr %2276)
  %2277 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.865, align 8
  call void @free_candy_value(ptr %2277)
  %2278 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.867, align 8
  call void @free_candy_value(ptr %2278)
  %2279 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.869, align 8
  call void @free_candy_value(ptr %2279)
  %2280 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.871, align 8
  call void @free_candy_value(ptr %2280)
  %2281 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.873, align 8
  call void @free_candy_value(ptr %2281)
  %2282 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.875, align 8
  call void @free_candy_value(ptr %2282)
  %2283 = load ptr, ptr @fun_Core_fixedDecimal_absolute_9, align 8
  call void @free_candy_value(ptr %2283)
  %2284 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.877, align 8
  call void @free_candy_value(ptr %2284)
  %2285 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.879, align 8
  call void @free_candy_value(ptr %2285)
  %2286 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.881, align 8
  call void @free_candy_value(ptr %2286)
  %2287 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.883, align 8
  call void @free_candy_value(ptr %2287)
  %2288 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.885, align 8
  call void @free_candy_value(ptr %2288)
  %2289 = load ptr, ptr @215, align 8
  call void @free_candy_value(ptr %2289)
  %2290 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.887, align 8
  call void @free_candy_value(ptr %2290)
  %2291 = load ptr, ptr @216, align 8
  call void @free_candy_value(ptr %2291)
  %2292 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.889, align 8
  call void @free_candy_value(ptr %2292)
  %2293 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.891, align 8
  call void @free_candy_value(ptr %2293)
  %2294 = load ptr, ptr @217, align 8
  call void @free_candy_value(ptr %2294)
  %2295 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.893, align 8
  call void @free_candy_value(ptr %2295)
  %2296 = load ptr, ptr @218, align 8
  call void @free_candy_value(ptr %2296)
  %2297 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.895, align 8
  call void @free_candy_value(ptr %2297)
  %2298 = load ptr, ptr @219, align 8
  call void @free_candy_value(ptr %2298)
  %2299 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.897, align 8
  call void @free_candy_value(ptr %2299)
  %2300 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.899, align 8
  call void @free_candy_value(ptr %2300)
  %2301 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.901, align 8
  call void @free_candy_value(ptr %2301)
  %2302 = load ptr, ptr @220, align 8
  call void @free_candy_value(ptr %2302)
  %2303 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.903, align 8
  call void @free_candy_value(ptr %2303)
  %2304 = load ptr, ptr @221, align 8
  call void @free_candy_value(ptr %2304)
  %2305 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.905, align 8
  call void @free_candy_value(ptr %2305)
  %2306 = load ptr, ptr @222, align 8
  call void @free_candy_value(ptr %2306)
  %2307 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.907, align 8
  call void @free_candy_value(ptr %2307)
  %2308 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.909, align 8
  call void @free_candy_value(ptr %2308)
  %2309 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.911, align 8
  call void @free_candy_value(ptr %2309)
  %2310 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.913, align 8
  call void @free_candy_value(ptr %2310)
  %2311 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.915, align 8
  call void @free_candy_value(ptr %2311)
  %2312 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.917, align 8
  call void @free_candy_value(ptr %2312)
  %2313 = load ptr, ptr @fun_Core_fixedDecimal_absolute_10, align 8
  call void @free_candy_value(ptr %2313)
  %2314 = load ptr, ptr @fun_Core_fixedDecimal_approxEquals, align 8
  call void @free_candy_value(ptr %2314)
  %2315 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.919, align 8
  call void @free_candy_value(ptr %2315)
  %2316 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.921, align 8
  call void @free_candy_value(ptr %2316)
  %2317 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.923, align 8
  call void @free_candy_value(ptr %2317)
  %2318 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.925, align 8
  call void @free_candy_value(ptr %2318)
  %2319 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.927, align 8
  call void @free_candy_value(ptr %2319)
  %2320 = load ptr, ptr @223, align 8
  call void @free_candy_value(ptr %2320)
  %2321 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.929, align 8
  call void @free_candy_value(ptr %2321)
  %2322 = load ptr, ptr @224, align 8
  call void @free_candy_value(ptr %2322)
  %2323 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.931, align 8
  call void @free_candy_value(ptr %2323)
  %2324 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.933, align 8
  call void @free_candy_value(ptr %2324)
  %2325 = load ptr, ptr @225, align 8
  call void @free_candy_value(ptr %2325)
  %2326 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.935, align 8
  call void @free_candy_value(ptr %2326)
  %2327 = load ptr, ptr @226, align 8
  call void @free_candy_value(ptr %2327)
  %2328 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.937, align 8
  call void @free_candy_value(ptr %2328)
  %2329 = load ptr, ptr @227, align 8
  call void @free_candy_value(ptr %2329)
  %2330 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.939, align 8
  call void @free_candy_value(ptr %2330)
  %2331 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.941, align 8
  call void @free_candy_value(ptr %2331)
  %2332 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.943, align 8
  call void @free_candy_value(ptr %2332)
  %2333 = load ptr, ptr @228, align 8
  call void @free_candy_value(ptr %2333)
  %2334 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.945, align 8
  call void @free_candy_value(ptr %2334)
  %2335 = load ptr, ptr @229, align 8
  call void @free_candy_value(ptr %2335)
  %2336 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.947, align 8
  call void @free_candy_value(ptr %2336)
  %2337 = load ptr, ptr @230, align 8
  call void @free_candy_value(ptr %2337)
  %2338 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.949, align 8
  call void @free_candy_value(ptr %2338)
  %2339 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.951, align 8
  call void @free_candy_value(ptr %2339)
  %2340 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.953, align 8
  call void @free_candy_value(ptr %2340)
  %2341 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.955, align 8
  call void @free_candy_value(ptr %2341)
  %2342 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.957, align 8
  call void @free_candy_value(ptr %2342)
  %2343 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.959, align 8
  call void @free_candy_value(ptr %2343)
  %2344 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.961, align 8
  call void @free_candy_value(ptr %2344)
  %2345 = load ptr, ptr @231, align 8
  call void @free_candy_value(ptr %2345)
  %2346 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.963, align 8
  call void @free_candy_value(ptr %2346)
  %2347 = load ptr, ptr @232, align 8
  call void @free_candy_value(ptr %2347)
  %2348 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.965, align 8
  call void @free_candy_value(ptr %2348)
  %2349 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.967, align 8
  call void @free_candy_value(ptr %2349)
  %2350 = load ptr, ptr @233, align 8
  call void @free_candy_value(ptr %2350)
  %2351 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.969, align 8
  call void @free_candy_value(ptr %2351)
  %2352 = load ptr, ptr @234, align 8
  call void @free_candy_value(ptr %2352)
  %2353 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.971, align 8
  call void @free_candy_value(ptr %2353)
  %2354 = load ptr, ptr @235, align 8
  call void @free_candy_value(ptr %2354)
  %2355 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.973, align 8
  call void @free_candy_value(ptr %2355)
  %2356 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.975, align 8
  call void @free_candy_value(ptr %2356)
  %2357 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.977, align 8
  call void @free_candy_value(ptr %2357)
  %2358 = load ptr, ptr @236, align 8
  call void @free_candy_value(ptr %2358)
  %2359 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.979, align 8
  call void @free_candy_value(ptr %2359)
  %2360 = load ptr, ptr @237, align 8
  call void @free_candy_value(ptr %2360)
  %2361 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.981, align 8
  call void @free_candy_value(ptr %2361)
  %2362 = load ptr, ptr @238, align 8
  call void @free_candy_value(ptr %2362)
  %2363 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.983, align 8
  call void @free_candy_value(ptr %2363)
  %2364 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.985, align 8
  call void @free_candy_value(ptr %2364)
  %2365 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.987, align 8
  call void @free_candy_value(ptr %2365)
  %2366 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.989, align 8
  call void @free_candy_value(ptr %2366)
  %2367 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.991, align 8
  call void @free_candy_value(ptr %2367)
  %2368 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.993, align 8
  call void @free_candy_value(ptr %2368)
  %2369 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.995, align 8
  call void @free_candy_value(ptr %2369)
  %2370 = load ptr, ptr @239, align 8
  call void @free_candy_value(ptr %2370)
  %2371 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.997, align 8
  call void @free_candy_value(ptr %2371)
  %2372 = load ptr, ptr @240, align 8
  call void @free_candy_value(ptr %2372)
  %2373 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.999, align 8
  call void @free_candy_value(ptr %2373)
  %2374 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.1001, align 8
  call void @free_candy_value(ptr %2374)
  %2375 = load ptr, ptr @241, align 8
  call void @free_candy_value(ptr %2375)
  %2376 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.1003, align 8
  call void @free_candy_value(ptr %2376)
  %2377 = load ptr, ptr @242, align 8
  call void @free_candy_value(ptr %2377)
  %2378 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.1005, align 8
  call void @free_candy_value(ptr %2378)
  %2379 = load ptr, ptr @243, align 8
  call void @free_candy_value(ptr %2379)
  %2380 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.1007, align 8
  call void @free_candy_value(ptr %2380)
  %2381 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.1009, align 8
  call void @free_candy_value(ptr %2381)
  %2382 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1011, align 8
  call void @free_candy_value(ptr %2382)
  %2383 = load ptr, ptr @244, align 8
  call void @free_candy_value(ptr %2383)
  %2384 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1013, align 8
  call void @free_candy_value(ptr %2384)
  %2385 = load ptr, ptr @245, align 8
  call void @free_candy_value(ptr %2385)
  %2386 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1015, align 8
  call void @free_candy_value(ptr %2386)
  %2387 = load ptr, ptr @246, align 8
  call void @free_candy_value(ptr %2387)
  %2388 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1017, align 8
  call void @free_candy_value(ptr %2388)
  %2389 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1019, align 8
  call void @free_candy_value(ptr %2389)
  %2390 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1021, align 8
  call void @free_candy_value(ptr %2390)
  %2391 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1023, align 8
  call void @free_candy_value(ptr %2391)
  %2392 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1025, align 8
  call void @free_candy_value(ptr %2392)
  %2393 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1027, align 8
  call void @free_candy_value(ptr %2393)
  %2394 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1029, align 8
  call void @free_candy_value(ptr %2394)
  %2395 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1031, align 8
  call void @free_candy_value(ptr %2395)
  %2396 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1033, align 8
  call void @free_candy_value(ptr %2396)
  %2397 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1035, align 8
  call void @free_candy_value(ptr %2397)
  %2398 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1037, align 8
  call void @free_candy_value(ptr %2398)
  %2399 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1039, align 8
  call void @free_candy_value(ptr %2399)
  %2400 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1041, align 8
  call void @free_candy_value(ptr %2400)
  %2401 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1043, align 8
  call void @free_candy_value(ptr %2401)
  %2402 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1045, align 8
  call void @free_candy_value(ptr %2402)
  %2403 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1047, align 8
  call void @free_candy_value(ptr %2403)
  %2404 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1049, align 8
  call void @free_candy_value(ptr %2404)
  %2405 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1051, align 8
  call void @free_candy_value(ptr %2405)
  %2406 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1053, align 8
  call void @free_candy_value(ptr %2406)
  %2407 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1055, align 8
  call void @free_candy_value(ptr %2407)
  %2408 = load ptr, ptr @fun_Core_fixedDecimal_toText, align 8
  call void @free_candy_value(ptr %2408)
  %2409 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1057, align 8
  call void @free_candy_value(ptr %2409)
  %2410 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1059, align 8
  call void @free_candy_value(ptr %2410)
  %2411 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1061, align 8
  call void @free_candy_value(ptr %2411)
  %2412 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1063, align 8
  call void @free_candy_value(ptr %2412)
  %2413 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.1065, align 8
  call void @free_candy_value(ptr %2413)
  %2414 = load ptr, ptr @247, align 8
  call void @free_candy_value(ptr %2414)
  %2415 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.1067, align 8
  call void @free_candy_value(ptr %2415)
  %2416 = load ptr, ptr @248, align 8
  call void @free_candy_value(ptr %2416)
  %2417 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.1069, align 8
  call void @free_candy_value(ptr %2417)
  %2418 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.1071, align 8
  call void @free_candy_value(ptr %2418)
  %2419 = load ptr, ptr @249, align 8
  call void @free_candy_value(ptr %2419)
  %2420 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.1073, align 8
  call void @free_candy_value(ptr %2420)
  %2421 = load ptr, ptr @250, align 8
  call void @free_candy_value(ptr %2421)
  %2422 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.1075, align 8
  call void @free_candy_value(ptr %2422)
  %2423 = load ptr, ptr @251, align 8
  call void @free_candy_value(ptr %2423)
  %2424 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.1077, align 8
  call void @free_candy_value(ptr %2424)
  %2425 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.1079, align 8
  call void @free_candy_value(ptr %2425)
  %2426 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1081, align 8
  call void @free_candy_value(ptr %2426)
  %2427 = load ptr, ptr @252, align 8
  call void @free_candy_value(ptr %2427)
  %2428 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1083, align 8
  call void @free_candy_value(ptr %2428)
  %2429 = load ptr, ptr @253, align 8
  call void @free_candy_value(ptr %2429)
  %2430 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1085, align 8
  call void @free_candy_value(ptr %2430)
  %2431 = load ptr, ptr @254, align 8
  call void @free_candy_value(ptr %2431)
  %2432 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1087, align 8
  call void @free_candy_value(ptr %2432)
  %2433 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1089, align 8
  call void @free_candy_value(ptr %2433)
  %2434 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1091, align 8
  call void @free_candy_value(ptr %2434)
  %2435 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1093, align 8
  call void @free_candy_value(ptr %2435)
  %2436 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1095, align 8
  call void @free_candy_value(ptr %2436)
  %2437 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1097, align 8
  call void @free_candy_value(ptr %2437)
  %2438 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1099, align 8
  call void @free_candy_value(ptr %2438)
  %2439 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1101, align 8
  call void @free_candy_value(ptr %2439)
  %2440 = load ptr, ptr @fun_Core_fixedDecimal_toText_10, align 8
  call void @free_candy_value(ptr %2440)
  %2441 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1103, align 8
  call void @free_candy_value(ptr %2441)
  %2442 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1105, align 8
  call void @free_candy_value(ptr %2442)
  %2443 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1107, align 8
  call void @free_candy_value(ptr %2443)
  %2444 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1109, align 8
  call void @free_candy_value(ptr %2444)
  %2445 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.1111, align 8
  call void @free_candy_value(ptr %2445)
  %2446 = load ptr, ptr @255, align 8
  call void @free_candy_value(ptr %2446)
  %2447 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.1113, align 8
  call void @free_candy_value(ptr %2447)
  %2448 = load ptr, ptr @256, align 8
  call void @free_candy_value(ptr %2448)
  %2449 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.1115, align 8
  call void @free_candy_value(ptr %2449)
  %2450 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.1117, align 8
  call void @free_candy_value(ptr %2450)
  %2451 = load ptr, ptr @257, align 8
  call void @free_candy_value(ptr %2451)
  %2452 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.1119, align 8
  call void @free_candy_value(ptr %2452)
  %2453 = load ptr, ptr @258, align 8
  call void @free_candy_value(ptr %2453)
  %2454 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.1121, align 8
  call void @free_candy_value(ptr %2454)
  %2455 = load ptr, ptr @259, align 8
  call void @free_candy_value(ptr %2455)
  %2456 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.1123, align 8
  call void @free_candy_value(ptr %2456)
  %2457 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.1125, align 8
  call void @free_candy_value(ptr %2457)
  %2458 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1127, align 8
  call void @free_candy_value(ptr %2458)
  %2459 = load ptr, ptr @260, align 8
  call void @free_candy_value(ptr %2459)
  %2460 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1129, align 8
  call void @free_candy_value(ptr %2460)
  %2461 = load ptr, ptr @261, align 8
  call void @free_candy_value(ptr %2461)
  %2462 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1131, align 8
  call void @free_candy_value(ptr %2462)
  %2463 = load ptr, ptr @262, align 8
  call void @free_candy_value(ptr %2463)
  %2464 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1133, align 8
  call void @free_candy_value(ptr %2464)
  %2465 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1135, align 8
  call void @free_candy_value(ptr %2465)
  %2466 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1137, align 8
  call void @free_candy_value(ptr %2466)
  %2467 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1139, align 8
  call void @free_candy_value(ptr %2467)
  %2468 = load ptr, ptr @fun_Core_fixedDecimal_toText_10_31, align 8
  call void @free_candy_value(ptr %2468)
  %2469 = load ptr, ptr @fun_Core_fixedDecimal_toText_10_32, align 8
  call void @free_candy_value(ptr %2469)
  %2470 = load ptr, ptr @fun_Core_fixedDecimal_toText_22, align 8
  call void @free_candy_value(ptr %2470)
  %2471 = load ptr, ptr @fun_Core_fixedDecimal_toText_23, align 8
  call void @free_candy_value(ptr %2471)
  %2472 = load ptr, ptr @fun_Core_fixedDecimal_toText_29, align 8
  call void @free_candy_value(ptr %2472)
  %2473 = load ptr, ptr @fun_Core_fixedDecimal_toText_30, align 8
  call void @free_candy_value(ptr %2473)
  %2474 = load ptr, ptr @tag_FixedDecimal.1140, align 8
  call void @free_candy_value(ptr %2474)
  %2475 = load ptr, ptr @tag_FixedDecimal.1141, align 8
  call void @free_candy_value(ptr %2475)
  %2476 = load ptr, ptr @fun_Core_controlFlow_recursive_18.1143, align 8
  call void @free_candy_value(ptr %2476)
  %2477 = load ptr, ptr @fun_Core_controlFlow_recursive_18_0.1145, align 8
  call void @free_candy_value(ptr %2477)
  %2478 = load ptr, ptr @fun_Examples_sqrt_sqrt_82, align 8
  call void @free_candy_value(ptr %2478)
  %2479 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1147, align 8
  call void @free_candy_value(ptr %2479)
  %2480 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1149, align 8
  call void @free_candy_value(ptr %2480)
  %2481 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1151, align 8
  call void @free_candy_value(ptr %2481)
  %2482 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1153, align 8
  call void @free_candy_value(ptr %2482)
  %2483 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.1155, align 8
  call void @free_candy_value(ptr %2483)
  %2484 = load ptr, ptr @263, align 8
  call void @free_candy_value(ptr %2484)
  %2485 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.1157, align 8
  call void @free_candy_value(ptr %2485)
  %2486 = load ptr, ptr @264, align 8
  call void @free_candy_value(ptr %2486)
  %2487 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.1159, align 8
  call void @free_candy_value(ptr %2487)
  %2488 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.1161, align 8
  call void @free_candy_value(ptr %2488)
  %2489 = load ptr, ptr @265, align 8
  call void @free_candy_value(ptr %2489)
  %2490 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.1163, align 8
  call void @free_candy_value(ptr %2490)
  %2491 = load ptr, ptr @266, align 8
  call void @free_candy_value(ptr %2491)
  %2492 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.1165, align 8
  call void @free_candy_value(ptr %2492)
  %2493 = load ptr, ptr @267, align 8
  call void @free_candy_value(ptr %2493)
  %2494 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.1167, align 8
  call void @free_candy_value(ptr %2494)
  %2495 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.1169, align 8
  call void @free_candy_value(ptr %2495)
  %2496 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1171, align 8
  call void @free_candy_value(ptr %2496)
  %2497 = load ptr, ptr @268, align 8
  call void @free_candy_value(ptr %2497)
  %2498 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1173, align 8
  call void @free_candy_value(ptr %2498)
  %2499 = load ptr, ptr @269, align 8
  call void @free_candy_value(ptr %2499)
  %2500 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1175, align 8
  call void @free_candy_value(ptr %2500)
  %2501 = load ptr, ptr @270, align 8
  call void @free_candy_value(ptr %2501)
  %2502 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1177, align 8
  call void @free_candy_value(ptr %2502)
  %2503 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1179, align 8
  call void @free_candy_value(ptr %2503)
  %2504 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1181, align 8
  call void @free_candy_value(ptr %2504)
  %2505 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1183, align 8
  call void @free_candy_value(ptr %2505)
  %2506 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1185, align 8
  call void @free_candy_value(ptr %2506)
  %2507 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1187, align 8
  call void @free_candy_value(ptr %2507)
  %2508 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1189, align 8
  call void @free_candy_value(ptr %2508)
  %2509 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1191, align 8
  call void @free_candy_value(ptr %2509)
  %2510 = load ptr, ptr @fun_Examples_sqrt_sqrt_82_56, align 8
  call void @free_candy_value(ptr %2510)
  %2511 = load ptr, ptr @fun_Examples_sqrt_sqrt_82_57, align 8
  call void @free_candy_value(ptr %2511)
  %2512 = load ptr, ptr @fun_Examples_sqrt_main, align 8
  call void @free_candy_value(ptr %2512)
  %2513 = load ptr, ptr @fun_Examples_sqrt_main_50, align 8
  call void @free_candy_value(ptr %2513)
  %2514 = load ptr, ptr @fun_Examples_sqrt_main_51, align 8
  call void @free_candy_value(ptr %2514)
  ret i32 0
}

declare ptr @run_candy_main(ptr, ptr)

declare ptr @candy_builtin_equals(ptr, ptr)

declare ptr @candy_builtin_get_argument_count(ptr)

declare ptr @candy_builtin_if_else(ptr, ptr, ptr)

declare ptr @candy_builtin_int_add(ptr, ptr)

declare ptr @candy_builtin_int_bitwise_and(ptr, ptr)

declare ptr @candy_builtin_int_compare_to(ptr, ptr)

declare ptr @candy_builtin_int_divide_truncating(ptr, ptr)

declare ptr @candy_builtin_int_multiply(ptr, ptr)

declare ptr @candy_builtin_int_remainder(ptr, ptr)

declare ptr @candy_builtin_int_shift_right(ptr, ptr)

declare ptr @candy_builtin_int_subtract(ptr, ptr)

declare ptr @candy_builtin_list_get(ptr, ptr)

declare ptr @candy_builtin_print(ptr)

declare ptr @candy_builtin_struct_get(ptr, ptr)

declare ptr @candy_builtin_struct_has_key(ptr, ptr)

declare ptr @candy_builtin_tag_get_value(ptr)

declare ptr @candy_builtin_tag_has_value(ptr)

declare ptr @candy_builtin_tag_without_value(ptr)

declare ptr @candy_builtin_text_concatenate(ptr, ptr)

declare ptr @candy_builtin_text_get_range(ptr, ptr, ptr)

declare ptr @candy_builtin_text_length(ptr)

declare ptr @candy_builtin_text_starts_with(ptr, ptr)

declare ptr @candy_builtin_to_debug_text(ptr)

declare ptr @candy_builtin_type_of(ptr)

declare noalias ptr @malloc(i32)

define ptr @"Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then"() {
"Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then":
  %0 = load ptr, ptr @tag_True, align 8
  ret ptr %0
}

define ptr @"Core__19_isMatch_then, Core__30_isMatch_then, Core__41_isMatch_then, Core__102_isMatch_then, Core__153_isMatch_then, Core__164_isMatch_then, Core_bool_9_isMatch_then, Core_check_9_isMatch_then, Core_controlFlow_if_27, Core_controlFlow_29_isMatch_then, Core_controlFlow_50_isMatch_then, Core_fixedDecimal_19_isMatch_then, Core_fixedDecimal_30_isMatch_then, Core_fixedDecimal_41_isMatch_then, Core_fixedDecimal_52_isMatch_then, Core_fixedDecimal_103_isMatch_then, Core_function_19_isMatch_then, Core_int_pow_21_1_isMatch_then, Core_int_29_isMatch_then, Core_int_40_isMatch_then, Core_iterable_generateWithState_14_0_11_1_isMatch_then, Core_iterable_map_19_11_1_isMatch_then, Core_iterable_reduceLeft_38_1_isMatch_then, Core_iterable_take_33_1_isMatch_then, Core_iterable_takeWhile_2_11_1_isMatch_then, Core_iterable_withIndex_11_1_isMatch_then, Core_iterable_withIndex_11_14_1_isMatch_then, Core_iterable_19_isMatch_then, Core_iterable_30_isMatch_then, Core_iterable_82_11_1_isMatch_then, Core_iterable_84_2_11_1_isMatch_then, Core_iterable_84_2_11_7_15_1_isMatch_then, Core_list_generate_59_1_isMatch_then, Core_list_29_isMatch_then, Core_list_40_isMatch_then, Core_result_19_isMatch_then, Core_result_30_isMatch_then, Core_struct_19_isMatch_then, Core_tag_29_isMatch_then, Core_text_29_isMatch_then, Core_text_40_isMatch_then, Core_type_19_isMatch_then, Examples_sqrt_then, Examples_sqrt_19_isMatch_then, anonymous_$generated__needs_condition_then, anonymous_$generated__needs_isConditionBool_then, anonymous_$generated__needs_isReasonText_then"() {
"Core__19_isMatch_then, Core__30_isMatch_then, Core__41_isMatch_then, Core__102_isMatch_then, Core__153_isMatch_then, Core__164_isMatch_then, Core_bool_9_isMatch_then, Core_check_9_isMatch_then, Core_controlFlow_if_27, Core_controlFlow_29_isMatch_then, Core_controlFlow_50_isMatch_then, Core_fixedDecimal_19_isMatch_then, Core_fixedDecimal_30_isMatch_then, Core_fixedDecimal_41_isMatch_then, Core_fixedDecimal_52_isMatch_then, Core_fixedDecimal_103_isMatch_then, Core_function_19_isMatch_then, Core_int_pow_21_1_isMatch_then, Core_int_29_isMatch_then, Core_int_40_isMatch_then, Core_iterable_generateWithState_14_0_11_1_isMatch_then, Core_iterable_map_19_11_1_isMatch_then, Core_iterable_reduceLeft_38_1_isMatch_then, Core_iterable_take_33_1_isMatch_then, Core_iterable_takeWhile_2_11_1_isMatch_then, Core_iterable_withIndex_11_1_isMatch_then, Core_iterable_withIndex_11_14_1_isMatch_then, Core_iterable_19_isMatch_then, Core_iterable_30_isMatch_then, Core_iterable_82_11_1_isMatch_then, Core_iterable_84_2_11_1_isMatch_then,":
  %0 = load ptr, ptr @tag_Nothing, align 8
  ret ptr %0
}

define ptr @"anonymous_$generated__needs"(ptr %0, ptr %1, ptr %2) {
"anonymous_$generated__needs":
  %3 = load ptr, ptr @tag_True, align 8
  %4 = call ptr @candy_builtin_equals(ptr %0, ptr %3)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %0, ptr %6, align 8
  %7 = call ptr @make_candy_function(ptr @"anonymous_$generated__needs_isConditionTrue_else", ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %7, ptr @"fun_anonymous_$generated__needs_isConditionTrue_else", align 8
  %8 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %9 = load ptr, ptr @"fun_anonymous_$generated__needs_isConditionTrue_else", align 8
  %10 = call ptr @candy_builtin_if_else(ptr %4, ptr %8, ptr %9)
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %12 = call ptr @make_candy_function(ptr @"anonymous_$generated__needs_isConditionBool_else", ptr %11, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %12, ptr @"fun_anonymous_$generated__needs_isConditionBool_else", align 8
  %13 = load ptr, ptr @"fun_Core__19_isMatch_then, Core__30_isMatch_then, Core__41_isMatch_then, Core__102_isMatch_then, Core__153_isMatch_then, Core__164_isMatch_then, Core_bool_9_isMatch_then, Core_check_9_isMatch_then, Core_controlFlow_if_27, Core_controlFlow_29_isMatch_then, Core_controlFlow_50_isMatch_then, Core_fixedDecimal_19_isMatch_then, Core_fixedDecimal_30_isMatch_then, Core_fixedDecimal_41_isMatch_then, Core_fixedDecimal_52_isMatch_then, Core_fixedDecimal_103_isMatch_then, Core_function_19_isMatch_then, Core_int_pow_21_1_isMatch_then, Core_int_29_isMatch_then, Core_int_40_isMatch_then, Core_iterable_generateWithState_14_0_11_1_isMatch_then, Core_iterable_map_19_11_1_isMatch_then, Core_iterable_reduceLeft_38_1_isMatch_then, Core_iterable_take_33_1_isMatch_then, Core_iterable_takeWhile_2_11_1_isMatch_then, Core_iterable_withIndex_11_1_isMatch_then, Core_iterable_withIndex_11_14_1_isMatch_then, Core_iterable_19_isMatch_then, Core_iterable_30_isMatch_then, Core_iterable_82_11_1_isMatch_then, Core_iterable_84_2_11_1_isMatch_then, Core_iterable_84_2_11_7_15_1_isMatch_then, Core_list_generate_59_1_isMatch_then, Core_list_29_isMatch_then, Core_list_40_isMatch_then, Core_result_19_isMatch_then, Core_result_30_isMatch_then, Core_struct_19_isMatch_then, Core_tag_29_isMatch_then, Core_text_29_isMatch_then, Core_text_40_isMatch_then, Core_type_19_isMatch_then, Examples_sqrt_then, Examples_sqrt_19_isMatch_then, anonymous_$generated__needs_condition_then, anonymous_$generated__needs_isConditionBool_then, anonymous_$generated__needs_isReasonText_then", align 8
  %14 = load ptr, ptr @"fun_anonymous_$generated__needs_isConditionBool_else", align 8
  %15 = call ptr @candy_builtin_if_else(ptr %10, ptr %13, ptr %14)
  %16 = call ptr @candy_builtin_type_of(ptr %1)
  %17 = load ptr, ptr @tag_Text, align 8
  %18 = call ptr @candy_builtin_equals(ptr %16, ptr %17)
  %19 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %20 = call ptr @make_candy_function(ptr @"anonymous_$generated__needs_isReasonText_else", ptr %19, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %20, ptr @"fun_anonymous_$generated__needs_isReasonText_else", align 8
  %21 = load ptr, ptr @"fun_Core__19_isMatch_then, Core__30_isMatch_then, Core__41_isMatch_then, Core__102_isMatch_then, Core__153_isMatch_then, Core__164_isMatch_then, Core_bool_9_isMatch_then, Core_check_9_isMatch_then, Core_controlFlow_if_27, Core_controlFlow_29_isMatch_then, Core_controlFlow_50_isMatch_then, Core_fixedDecimal_19_isMatch_then, Core_fixedDecimal_30_isMatch_then, Core_fixedDecimal_41_isMatch_then, Core_fixedDecimal_52_isMatch_then, Core_fixedDecimal_103_isMatch_then, Core_function_19_isMatch_then, Core_int_pow_21_1_isMatch_then, Core_int_29_isMatch_then, Core_int_40_isMatch_then, Core_iterable_generateWithState_14_0_11_1_isMatch_then, Core_iterable_map_19_11_1_isMatch_then, Core_iterable_reduceLeft_38_1_isMatch_then, Core_iterable_take_33_1_isMatch_then, Core_iterable_takeWhile_2_11_1_isMatch_then, Core_iterable_withIndex_11_1_isMatch_then, Core_iterable_withIndex_11_14_1_isMatch_then, Core_iterable_19_isMatch_then, Core_iterable_30_isMatch_then, Core_iterable_82_11_1_isMatch_then, Core_iterable_84_2_11_1_isMatch_then, Core_iterable_84_2_11_7_15_1_isMatch_then, Core_list_generate_59_1_isMatch_then, Core_list_29_isMatch_then, Core_list_40_isMatch_then, Core_result_19_isMatch_then, Core_result_30_isMatch_then, Core_struct_19_isMatch_then, Core_tag_29_isMatch_then, Core_text_29_isMatch_then, Core_text_40_isMatch_then, Core_type_19_isMatch_then, Examples_sqrt_then, Examples_sqrt_19_isMatch_then, anonymous_$generated__needs_condition_then, anonymous_$generated__needs_isConditionBool_then, anonymous_$generated__needs_isReasonText_then", align 8
  %22 = load ptr, ptr @"fun_anonymous_$generated__needs_isReasonText_else", align 8
  %23 = call ptr @candy_builtin_if_else(ptr %18, ptr %21, ptr %22)
  %24 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %25 = getelementptr inbounds { ptr, ptr }, ptr %24, i32 0, i32 0
  store ptr %1, ptr %25, align 8
  %26 = getelementptr inbounds { ptr, ptr }, ptr %24, i32 0, i32 1
  store ptr %2, ptr %26, align 8
  %27 = call ptr @make_candy_function(ptr @"anonymous_$generated__needs_condition_else", ptr %24, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %27, ptr @"fun_anonymous_$generated__needs_condition_else", align 8
  %28 = load ptr, ptr @"fun_Core__19_isMatch_then, Core__30_isMatch_then, Core__41_isMatch_then, Core__102_isMatch_then, Core__153_isMatch_then, Core__164_isMatch_then, Core_bool_9_isMatch_then, Core_check_9_isMatch_then, Core_controlFlow_if_27, Core_controlFlow_29_isMatch_then, Core_controlFlow_50_isMatch_then, Core_fixedDecimal_19_isMatch_then, Core_fixedDecimal_30_isMatch_then, Core_fixedDecimal_41_isMatch_then, Core_fixedDecimal_52_isMatch_then, Core_fixedDecimal_103_isMatch_then, Core_function_19_isMatch_then, Core_int_pow_21_1_isMatch_then, Core_int_29_isMatch_then, Core_int_40_isMatch_then, Core_iterable_generateWithState_14_0_11_1_isMatch_then, Core_iterable_map_19_11_1_isMatch_then, Core_iterable_reduceLeft_38_1_isMatch_then, Core_iterable_take_33_1_isMatch_then, Core_iterable_takeWhile_2_11_1_isMatch_then, Core_iterable_withIndex_11_1_isMatch_then, Core_iterable_withIndex_11_14_1_isMatch_then, Core_iterable_19_isMatch_then, Core_iterable_30_isMatch_then, Core_iterable_82_11_1_isMatch_then, Core_iterable_84_2_11_1_isMatch_then, Core_iterable_84_2_11_7_15_1_isMatch_then, Core_list_generate_59_1_isMatch_then, Core_list_29_isMatch_then, Core_list_40_isMatch_then, Core_result_19_isMatch_then, Core_result_30_isMatch_then, Core_struct_19_isMatch_then, Core_tag_29_isMatch_then, Core_text_29_isMatch_then, Core_text_40_isMatch_then, Core_type_19_isMatch_then, Examples_sqrt_then, Examples_sqrt_19_isMatch_then, anonymous_$generated__needs_condition_then, anonymous_$generated__needs_isConditionBool_then, anonymous_$generated__needs_isReasonText_then", align 8
  %29 = load ptr, ptr @"fun_anonymous_$generated__needs_condition_else", align 8
  %30 = call ptr @candy_builtin_if_else(ptr %0, ptr %28, ptr %29)
  ret ptr %30
}

define ptr @"anonymous_$generated__needs_isConditionTrue_else"(ptr %0) {
"anonymous_$generated__needs_isConditionTrue_else":
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_False, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  ret ptr %4
}

define ptr @"anonymous_$generated__needs_isConditionBool_else"() {
"anonymous_$generated__needs_isConditionBool_else":
  %0 = load ptr, ptr @"text_The `condition` must be either `True` or `False`.", align 8
  call void @candy_panic(ptr %0)
  unreachable
}

define ptr @"anonymous_$generated__needs_isReasonText_else"() {
"anonymous_$generated__needs_isReasonText_else":
  %0 = load ptr, ptr @"text_The `reason` must be a text.", align 8
  call void @candy_panic(ptr %0)
  unreachable
}

define ptr @"anonymous_$generated__needs_condition_else"(ptr %0) {
"anonymous_$generated__needs_condition_else":
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  call void @candy_panic(ptr %2)
  unreachable
}

define ptr @"Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then"() {
"Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then":
  %0 = load ptr, ptr @0, align 8
  ret ptr %0
}

define ptr @"Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else"() {
"Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else":
  %0 = load ptr, ptr @tag_False, align 8
  ret ptr %0
}

define ptr @Builtins__not(ptr %0) {
Builtins__not:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Tag, align 8
  %3 = call ptr @candy_builtin_equals(ptr %2, ptr %1)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %5 = getelementptr inbounds { ptr }, ptr %4, i32 0, i32 0
  store ptr %0, ptr %5, align 8
  %6 = call ptr @make_candy_function(ptr @Builtins__not_1_equals_then, ptr %4, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %6, ptr @fun_Builtins__not_1_equals_then, align 8
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %8 = getelementptr inbounds { ptr }, ptr %7, i32 0, i32 0
  store ptr %1, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Builtins__not_1_equals_else.5, ptr %7, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Builtins__not_1_equals_else.6, align 8
  %10 = load ptr, ptr @fun_Builtins__not_1_equals_then, align 8
  %11 = load ptr, ptr @fun_Builtins__not_1_equals_else.6, align 8
  %12 = call ptr @candy_builtin_if_else(ptr %3, ptr %10, ptr %11)
  %13 = load ptr, ptr @num_0, align 8
  %14 = call ptr @candy_builtin_list_get(ptr %12, ptr %13)
  %15 = load ptr, ptr @tag_Match, align 8
  %16 = call ptr @candy_builtin_equals(ptr %14, ptr %15)
  %17 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %18 = getelementptr inbounds { ptr }, ptr %17, i32 0, i32 0
  store ptr %0, ptr %18, align 8
  %19 = call ptr @make_candy_function(ptr @Builtins__not_1_case-0_didNotMatch, ptr %17, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %19, ptr @fun_Builtins__not_1_case-0_didNotMatch, align 8
  %20 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %21 = load ptr, ptr @fun_Builtins__not_1_case-0_didNotMatch, align 8
  %22 = call ptr @candy_builtin_if_else(ptr %16, ptr %20, ptr %21)
  ret ptr %22
}

define ptr @Builtins__not_1_equals_then(ptr %0) {
Builtins__not_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__not_1_equals_then.1, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__not_1_equals_then.2, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__not_1_equals_else.3, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__not_1_equals_else.4, align 8
  %14 = load ptr, ptr @fun_Builtins__not_1_equals_then.2, align 8
  %15 = load ptr, ptr @fun_Builtins__not_1_equals_else.4, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Builtins__not_1_equals_then.1(ptr %0) {
Builtins__not_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__not_1_equals_else, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__not_1_equals_else, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Builtins__not_1_equals_else, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Builtins__not_1_equals_else(ptr %0) {
Builtins__not_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @1, align 8
  ret ptr @1
}

define ptr @Builtins__not_1_equals_else.3(ptr %0) {
Builtins__not_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected True, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @2, align 8
  ret ptr @2
}

define ptr @Builtins__not_1_equals_else.5(ptr %0) {
Builtins__not_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @3, align 8
  ret ptr @3
}

define ptr @Builtins__not_1_case-0_didNotMatch(ptr %0) {
Builtins__not_1_case-0_didNotMatch:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Tag, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__not_1_equals_then.7, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__not_1_equals_then.8, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__not_1_equals_else.15, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__not_1_equals_else.16, align 8
  %14 = load ptr, ptr @fun_Builtins__not_1_equals_then.8, align 8
  %15 = load ptr, ptr @fun_Builtins__not_1_equals_else.16, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  %17 = load ptr, ptr @num_0, align 8
  %18 = call ptr @candy_builtin_list_get(ptr %16, ptr %17)
  %19 = load ptr, ptr @tag_Match, align 8
  %20 = call ptr @candy_builtin_equals(ptr %18, ptr %19)
  %21 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %22 = call ptr @make_candy_function(ptr @Builtins__not_1_case-1_didNotMatch, ptr %21, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %22, ptr @fun_Builtins__not_1_case-1_didNotMatch, align 8
  %23 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %24 = load ptr, ptr @fun_Builtins__not_1_case-1_didNotMatch, align 8
  %25 = call ptr @candy_builtin_if_else(ptr %20, ptr %23, ptr %24)
  ret ptr %25
}

define ptr @Builtins__not_1_equals_then.7(ptr %0) {
Builtins__not_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__not_1_equals_then.9, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__not_1_equals_then.10, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__not_1_equals_else.13, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__not_1_equals_else.14, align 8
  %14 = load ptr, ptr @fun_Builtins__not_1_equals_then.10, align 8
  %15 = load ptr, ptr @fun_Builtins__not_1_equals_else.14, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Builtins__not_1_equals_then.9(ptr %0) {
Builtins__not_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__not_1_equals_else.11, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__not_1_equals_else.12, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Builtins__not_1_equals_else.12, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Builtins__not_1_equals_else.11(ptr %0) {
Builtins__not_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @4, align 8
  ret ptr @4
}

define ptr @Builtins__not_1_equals_else.13(ptr %0) {
Builtins__not_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected False, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @5, align 8
  ret ptr @5
}

define ptr @Builtins__not_1_equals_else.15(ptr %0) {
Builtins__not_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @6, align 8
  ret ptr @6
}

define ptr @Builtins__not_1_case-1_didNotMatch() {
Builtins__not_1_case-1_didNotMatch:
  %0 = load ptr, ptr @"text_`False` was not satisfied", align 8
  call void @candy_panic(ptr %0)
  unreachable
}

define ptr @Builtins__isNonNegative_13_case-1_didNotMatch() {
Builtins__isNonNegative_13_case-1_didNotMatch:
  %0 = load ptr, ptr @"text_No case matched the given expression.", align 8
  call void @candy_panic(ptr %0)
  unreachable
}

define ptr @Builtins__isLessThanOrEqualTo_19_case-1_didNotMatch() {
Builtins__isLessThanOrEqualTo_19_case-1_didNotMatch:
  %0 = load ptr, ptr @"text_No case matched the given expression.", align 8
  call void @candy_panic(ptr %0)
  unreachable
}

define ptr @Builtins__isLessThanOrEqualTo(ptr %0, ptr %1) {
Builtins__isLessThanOrEqualTo:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Int, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Int, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`b | typeIs Int` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = call ptr @candy_builtin_int_compare_to(ptr %0, ptr %1)
  %13 = call ptr @candy_builtin_tag_without_value(ptr %12)
  %14 = load ptr, ptr @tag_Less, align 8
  %15 = call ptr @candy_builtin_equals(ptr %14, ptr %13)
  %16 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %17 = getelementptr inbounds { ptr }, ptr %16, i32 0, i32 0
  store ptr %12, ptr %17, align 8
  %18 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_then, ptr %16, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %18, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then, align 8
  %19 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %20 = getelementptr inbounds { ptr }, ptr %19, i32 0, i32 0
  store ptr %13, ptr %20, align 8
  %21 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_else.17, ptr %19, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %21, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.18, align 8
  %22 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then, align 8
  %23 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.18, align 8
  %24 = call ptr @candy_builtin_if_else(ptr %15, ptr %22, ptr %23)
  %25 = load ptr, ptr @num_0, align 8
  %26 = call ptr @candy_builtin_list_get(ptr %24, ptr %25)
  %27 = load ptr, ptr @tag_Match, align 8
  %28 = call ptr @candy_builtin_equals(ptr %26, ptr %27)
  %29 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %30 = getelementptr inbounds { ptr }, ptr %29, i32 0, i32 0
  store ptr %24, ptr %30, align 8
  %31 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_isMatch_then, ptr %29, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %31, ptr @fun_Builtins__isLessThanOrEqualTo_19_isMatch_then, align 8
  %32 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %33 = getelementptr inbounds { ptr }, ptr %32, i32 0, i32 0
  store ptr %12, ptr %33, align 8
  %34 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_isMatch_else, ptr %32, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %34, ptr @fun_Builtins__isLessThanOrEqualTo_19_isMatch_else, align 8
  %35 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_isMatch_then, align 8
  %36 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_isMatch_else, align 8
  %37 = call ptr @candy_builtin_if_else(ptr %28, ptr %35, ptr %36)
  %38 = load ptr, ptr @num_0, align 8
  %39 = call ptr @candy_builtin_list_get(ptr %37, ptr %38)
  %40 = load ptr, ptr @tag_Match, align 8
  %41 = call ptr @candy_builtin_equals(ptr %39, ptr %40)
  %42 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %43 = getelementptr inbounds { ptr }, ptr %42, i32 0, i32 0
  store ptr %12, ptr %43, align 8
  %44 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch, ptr %42, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %44, ptr @fun_Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch, align 8
  %45 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %46 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch, align 8
  %47 = call ptr @candy_builtin_if_else(ptr %41, ptr %45, ptr %46)
  ret ptr %47
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_then(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_else, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_else(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @7, align 8
  ret ptr @7
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_else.17(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected Less, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @8, align 8
  ret ptr @8
}

define ptr @Builtins__isLessThanOrEqualTo_19_isMatch_then(ptr %0) {
Builtins__isLessThanOrEqualTo_19_isMatch_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Builtins__isLessThanOrEqualTo_19_isMatch_else(ptr %0) {
Builtins__isLessThanOrEqualTo_19_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_Equal, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_then.19, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.20, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_else.23, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.24, align 8
  %14 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.20, align 8
  %15 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.24, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_then.19(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_else.21, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.22, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.22, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_else.21(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @9, align 8
  ret ptr @9
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_else.23(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected Equal, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @10, align 8
  ret ptr @10
}

define ptr @Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch(ptr %0) {
Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_Greater, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_then.25, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.26, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_else.29, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.30, align 8
  %14 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.26, align 8
  %15 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.30, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  %17 = load ptr, ptr @num_0, align 8
  %18 = call ptr @candy_builtin_list_get(ptr %16, ptr %17)
  %19 = load ptr, ptr @tag_Match, align 8
  %20 = call ptr @candy_builtin_equals(ptr %18, ptr %19)
  %21 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %22 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_case-1_didNotMatch, align 8
  %23 = call ptr @candy_builtin_if_else(ptr %20, ptr %21, ptr %22)
  ret ptr %23
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_then.25(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_else.27, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.28, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.28, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_else.27(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @11, align 8
  ret ptr @11
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_else.29(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected Greater, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @12, align 8
  ret ptr @12
}

define ptr @Builtins__ifElse(ptr %0, ptr %1, ptr %2) {
Builtins__ifElse:
  %3 = call ptr @candy_builtin_type_of(ptr %0)
  %4 = load ptr, ptr @tag_Tag, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %0, ptr %7, align 8
  %8 = call ptr @make_candy_function(ptr @Builtins__ifElse_1_equals_then, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %8, ptr @fun_Builtins__ifElse_1_equals_then, align 8
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %10 = getelementptr inbounds { ptr }, ptr %9, i32 0, i32 0
  store ptr %3, ptr %10, align 8
  %11 = call ptr @make_candy_function(ptr @Builtins__ifElse_1_equals_else.35, ptr %9, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %11, ptr @fun_Builtins__ifElse_1_equals_else.36, align 8
  %12 = load ptr, ptr @fun_Builtins__ifElse_1_equals_then, align 8
  %13 = load ptr, ptr @fun_Builtins__ifElse_1_equals_else.36, align 8
  %14 = call ptr @candy_builtin_if_else(ptr %5, ptr %12, ptr %13)
  %15 = load ptr, ptr @num_0, align 8
  %16 = call ptr @candy_builtin_list_get(ptr %14, ptr %15)
  %17 = load ptr, ptr @tag_Match, align 8
  %18 = call ptr @candy_builtin_equals(ptr %16, ptr %17)
  %19 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %20 = getelementptr inbounds { ptr }, ptr %19, i32 0, i32 0
  store ptr %14, ptr %20, align 8
  %21 = call ptr @make_candy_function(ptr @Builtins__ifElse_1_isMatch_then, ptr %19, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %21, ptr @fun_Builtins__ifElse_1_isMatch_then, align 8
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %23 = getelementptr inbounds { ptr }, ptr %22, i32 0, i32 0
  store ptr %0, ptr %23, align 8
  %24 = call ptr @make_candy_function(ptr @Builtins__ifElse_1_isMatch_else, ptr %22, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %24, ptr @fun_Builtins__ifElse_1_isMatch_else, align 8
  %25 = load ptr, ptr @fun_Builtins__ifElse_1_isMatch_then, align 8
  %26 = load ptr, ptr @fun_Builtins__ifElse_1_isMatch_else, align 8
  %27 = call ptr @candy_builtin_if_else(ptr %18, ptr %25, ptr %26)
  %28 = load ptr, ptr @num_0, align 8
  %29 = call ptr @candy_builtin_list_get(ptr %27, ptr %28)
  %30 = load ptr, ptr @tag_Match, align 8
  %31 = call ptr @candy_builtin_equals(ptr %29, ptr %30)
  %32 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %33 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %34 = call ptr @candy_builtin_if_else(ptr %31, ptr %32, ptr %33)
  %35 = load ptr, ptr @"text_`conditionIsBool` was not satisfied", align 8
  %36 = call ptr @"anonymous_$generated__needs"(ptr %34, ptr %35, ptr null)
  %37 = call ptr @candy_builtin_type_of(ptr %1)
  %38 = load ptr, ptr @tag_Function, align 8
  %39 = call ptr @candy_builtin_equals(ptr %37, ptr %38)
  %40 = load ptr, ptr @"text_`then | typeIs Function` was not satisfied", align 8
  %41 = call ptr @"anonymous_$generated__needs"(ptr %39, ptr %40, ptr null)
  %42 = load ptr, ptr @tag_Function, align 8
  %43 = call ptr @candy_builtin_equals(ptr %37, ptr %42)
  %44 = load ptr, ptr @"text_`function | typeIs Function` was not satisfied", align 8
  %45 = load ptr, ptr @"Builtins::ifElse:14", align 8
  %46 = call ptr @"anonymous_$generated__needs"(ptr %43, ptr %44, ptr %45)
  %47 = call ptr @candy_builtin_get_argument_count(ptr %1)
  %48 = load ptr, ptr @num_0, align 8
  %49 = call ptr @candy_builtin_equals(ptr %47, ptr %48)
  %50 = load ptr, ptr @"text_`then | getArgumentCount | equals 0` was not satisfied", align 8
  %51 = call ptr @"anonymous_$generated__needs"(ptr %49, ptr %50, ptr null)
  %52 = call ptr @candy_builtin_type_of(ptr %2)
  %53 = load ptr, ptr @tag_Function, align 8
  %54 = call ptr @candy_builtin_equals(ptr %52, ptr %53)
  %55 = load ptr, ptr @"text_`else | typeIs Function` was not satisfied", align 8
  %56 = call ptr @"anonymous_$generated__needs"(ptr %54, ptr %55, ptr null)
  %57 = load ptr, ptr @tag_Function, align 8
  %58 = call ptr @candy_builtin_equals(ptr %52, ptr %57)
  %59 = load ptr, ptr @"text_`function | typeIs Function` was not satisfied", align 8
  %60 = load ptr, ptr @"Builtins::ifElse:28", align 8
  %61 = call ptr @"anonymous_$generated__needs"(ptr %58, ptr %59, ptr %60)
  %62 = call ptr @candy_builtin_get_argument_count(ptr %2)
  %63 = load ptr, ptr @num_0, align 8
  %64 = call ptr @candy_builtin_equals(ptr %62, ptr %63)
  %65 = load ptr, ptr @"text_`else | getArgumentCount | equals 0` was not satisfied", align 8
  %66 = call ptr @"anonymous_$generated__needs"(ptr %64, ptr %65, ptr null)
  %67 = call ptr @candy_builtin_if_else(ptr %0, ptr %1, ptr %2)
  ret ptr %67
}

define ptr @Builtins__ifElse_1_equals_then(ptr %0) {
Builtins__ifElse_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__ifElse_1_equals_then.31, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__ifElse_1_equals_then.32, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__ifElse_1_equals_else.33, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__ifElse_1_equals_else.34, align 8
  %14 = load ptr, ptr @fun_Builtins__ifElse_1_equals_then.32, align 8
  %15 = load ptr, ptr @fun_Builtins__ifElse_1_equals_else.34, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Builtins__ifElse_1_equals_then.31(ptr %0) {
Builtins__ifElse_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__ifElse_1_equals_else, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__ifElse_1_equals_else, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Builtins__ifElse_1_equals_else, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Builtins__ifElse_1_equals_else(ptr %0) {
Builtins__ifElse_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @13, align 8
  ret ptr @13
}

define ptr @Builtins__ifElse_1_equals_else.33(ptr %0) {
Builtins__ifElse_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected True, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @14, align 8
  ret ptr @14
}

define ptr @Builtins__ifElse_1_equals_else.35(ptr %0) {
Builtins__ifElse_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @15, align 8
  ret ptr @15
}

define ptr @Builtins__ifElse_1_isMatch_then(ptr %0) {
Builtins__ifElse_1_isMatch_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Builtins__ifElse_1_isMatch_else(ptr %0) {
Builtins__ifElse_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Tag, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__ifElse_1_equals_then.37, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__ifElse_1_equals_then.38, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__ifElse_1_equals_else.45, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__ifElse_1_equals_else.46, align 8
  %14 = load ptr, ptr @fun_Builtins__ifElse_1_equals_then.38, align 8
  %15 = load ptr, ptr @fun_Builtins__ifElse_1_equals_else.46, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Builtins__ifElse_1_equals_then.37(ptr %0) {
Builtins__ifElse_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__ifElse_1_equals_then.39, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__ifElse_1_equals_then.40, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__ifElse_1_equals_else.43, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__ifElse_1_equals_else.44, align 8
  %14 = load ptr, ptr @fun_Builtins__ifElse_1_equals_then.40, align 8
  %15 = load ptr, ptr @fun_Builtins__ifElse_1_equals_else.44, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Builtins__ifElse_1_equals_then.39(ptr %0) {
Builtins__ifElse_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__ifElse_1_equals_else.41, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__ifElse_1_equals_else.42, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Builtins__ifElse_1_equals_else.42, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Builtins__ifElse_1_equals_else.41(ptr %0) {
Builtins__ifElse_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @16, align 8
  ret ptr @16
}

define ptr @Builtins__ifElse_1_equals_else.43(ptr %0) {
Builtins__ifElse_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected False, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @17, align 8
  ret ptr @17
}

define ptr @Builtins__ifElse_1_equals_else.45(ptr %0) {
Builtins__ifElse_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @18, align 8
  ret ptr @18
}

define ptr @Builtins__intDivideTruncating(ptr %0, ptr %1) {
Builtins__intDivideTruncating:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Int, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`dividend | typeIs Int` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Int, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`divisor | typeIs Int` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = load ptr, ptr @num_0, align 8
  %13 = call ptr @candy_builtin_equals(ptr %1, ptr %12)
  %14 = call ptr @Builtins__not(ptr %13)
  %15 = load ptr, ptr @"text_You can't divide by zero.", align 8
  %16 = call ptr @"anonymous_$generated__needs"(ptr %14, ptr %15, ptr null)
  %17 = call ptr @candy_builtin_int_divide_truncating(ptr %0, ptr %1)
  ret ptr %17
}

define ptr @Builtins__intRemainder(ptr %0, ptr %1) {
Builtins__intRemainder:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Int, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`dividend | typeIs Int` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Int, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`divisor | typeIs Int` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = load ptr, ptr @num_0, align 8
  %13 = call ptr @candy_builtin_equals(ptr %1, ptr %12)
  %14 = call ptr @Builtins__not(ptr %13)
  %15 = load ptr, ptr @"text_You can't divide by zero.", align 8
  %16 = call ptr @"anonymous_$generated__needs"(ptr %14, ptr %15, ptr null)
  %17 = call ptr @candy_builtin_int_remainder(ptr %0, ptr %1)
  ret ptr %17
}

define ptr @Builtins__intShiftRight(ptr %0, ptr %1) {
Builtins__intShiftRight:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Int, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`value | typeIs Int` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Int, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`amount | typeIs Int` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = load ptr, ptr @tag_Int, align 8
  %13 = call ptr @candy_builtin_equals(ptr %7, ptr %12)
  %14 = load ptr, ptr @"text_`int | typeIs Int` was not satisfied", align 8
  %15 = load ptr, ptr @"Builtins::intShiftRight:14", align 8
  %16 = call ptr @"anonymous_$generated__needs"(ptr %13, ptr %14, ptr %15)
  %17 = load ptr, ptr @num_0, align 8
  %18 = call ptr @candy_builtin_int_compare_to(ptr %1, ptr %17)
  %19 = call ptr @candy_builtin_tag_without_value(ptr %18)
  %20 = load ptr, ptr @tag_Greater, align 8
  %21 = call ptr @candy_builtin_equals(ptr %20, ptr %19)
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %23 = getelementptr inbounds { ptr }, ptr %22, i32 0, i32 0
  store ptr %18, ptr %23, align 8
  %24 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_then, ptr %22, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %24, ptr @fun_Builtins__isNonNegative_13_equals_then, align 8
  %25 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %26 = getelementptr inbounds { ptr }, ptr %25, i32 0, i32 0
  store ptr %19, ptr %26, align 8
  %27 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_else.47, ptr %25, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %27, ptr @fun_Builtins__isNonNegative_13_equals_else.48, align 8
  %28 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then, align 8
  %29 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.48, align 8
  %30 = call ptr @candy_builtin_if_else(ptr %21, ptr %28, ptr %29)
  %31 = load ptr, ptr @num_0, align 8
  %32 = call ptr @candy_builtin_list_get(ptr %30, ptr %31)
  %33 = load ptr, ptr @tag_Match, align 8
  %34 = call ptr @candy_builtin_equals(ptr %32, ptr %33)
  %35 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %36 = getelementptr inbounds { ptr }, ptr %35, i32 0, i32 0
  store ptr %30, ptr %36, align 8
  %37 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_isMatch_then, ptr %35, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %37, ptr @fun_Builtins__isNonNegative_13_isMatch_then, align 8
  %38 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %39 = getelementptr inbounds { ptr }, ptr %38, i32 0, i32 0
  store ptr %18, ptr %39, align 8
  %40 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_isMatch_else, ptr %38, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %40, ptr @fun_Builtins__isNonNegative_13_isMatch_else, align 8
  %41 = load ptr, ptr @fun_Builtins__isNonNegative_13_isMatch_then, align 8
  %42 = load ptr, ptr @fun_Builtins__isNonNegative_13_isMatch_else, align 8
  %43 = call ptr @candy_builtin_if_else(ptr %34, ptr %41, ptr %42)
  %44 = load ptr, ptr @num_0, align 8
  %45 = call ptr @candy_builtin_list_get(ptr %43, ptr %44)
  %46 = load ptr, ptr @tag_Match, align 8
  %47 = call ptr @candy_builtin_equals(ptr %45, ptr %46)
  %48 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %49 = getelementptr inbounds { ptr }, ptr %48, i32 0, i32 0
  store ptr %18, ptr %49, align 8
  %50 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_case-0_didNotMatch, ptr %48, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %50, ptr @fun_Builtins__isNonNegative_13_case-0_didNotMatch, align 8
  %51 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %52 = load ptr, ptr @fun_Builtins__isNonNegative_13_case-0_didNotMatch, align 8
  %53 = call ptr @candy_builtin_if_else(ptr %47, ptr %51, ptr %52)
  %54 = call ptr @candy_builtin_type_of(ptr %1)
  %55 = load ptr, ptr @tag_Text, align 8
  %56 = call ptr @candy_builtin_equals(ptr %54, ptr %55)
  %57 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %58 = getelementptr inbounds { ptr }, ptr %57, i32 0, i32 0
  store ptr %1, ptr %58, align 8
  %59 = call ptr @make_candy_function(ptr @Builtins__intShiftRight_25, ptr %57, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %59, ptr @fun_Builtins__intShiftRight_25, align 8
  %60 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %61 = getelementptr inbounds { ptr }, ptr %60, i32 0, i32 0
  store ptr %1, ptr %61, align 8
  %62 = call ptr @make_candy_function(ptr @Builtins__intShiftRight_26, ptr %60, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %62, ptr @fun_Builtins__intShiftRight_26, align 8
  %63 = load ptr, ptr @fun_Builtins__intShiftRight_25, align 8
  %64 = load ptr, ptr @fun_Builtins__intShiftRight_26, align 8
  %65 = call ptr @candy_builtin_if_else(ptr %56, ptr %63, ptr %64)
  %66 = load ptr, ptr @"text_The shift `amount` is negative: ", align 8
  %67 = call ptr @candy_builtin_text_concatenate(ptr %66, ptr %65)
  %68 = load ptr, ptr @"text_. You might want to call `shiftLeft` instead.", align 8
  %69 = call ptr @candy_builtin_text_concatenate(ptr %67, ptr %68)
  %70 = call ptr @"anonymous_$generated__needs"(ptr %53, ptr %69, ptr null)
  %71 = load ptr, ptr @tag_Int, align 8
  %72 = call ptr @candy_builtin_equals(ptr %7, ptr %71)
  %73 = load ptr, ptr @"text_`value | typeIs Int` was not satisfied", align 8
  %74 = load ptr, ptr @"Builtins::intShiftRight:34", align 8
  %75 = call ptr @"anonymous_$generated__needs"(ptr %72, ptr %73, ptr %74)
  %76 = load ptr, ptr @"text_`int | typeIs Int` was not satisfied", align 8
  %77 = load ptr, ptr @"Builtins::fitsInRustU128:8", align 8
  %78 = call ptr @"anonymous_$generated__needs"(ptr %13, ptr %76, ptr %77)
  %79 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then, align 8
  %80 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.48, align 8
  %81 = call ptr @candy_builtin_if_else(ptr %21, ptr %79, ptr %80)
  %82 = load ptr, ptr @num_0, align 8
  %83 = call ptr @candy_builtin_list_get(ptr %81, ptr %82)
  %84 = load ptr, ptr @tag_Match, align 8
  %85 = call ptr @candy_builtin_equals(ptr %83, ptr %84)
  %86 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %87 = getelementptr inbounds { ptr }, ptr %86, i32 0, i32 0
  store ptr %81, ptr %87, align 8
  %88 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_isMatch_then.61, ptr %86, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %88, ptr @fun_Builtins__isNonNegative_13_isMatch_then.62, align 8
  %89 = load ptr, ptr @fun_Builtins__isNonNegative_13_isMatch_then.62, align 8
  %90 = load ptr, ptr @fun_Builtins__isNonNegative_13_isMatch_else, align 8
  %91 = call ptr @candy_builtin_if_else(ptr %85, ptr %89, ptr %90)
  %92 = load ptr, ptr @num_0, align 8
  %93 = call ptr @candy_builtin_list_get(ptr %91, ptr %92)
  %94 = load ptr, ptr @tag_Match, align 8
  %95 = call ptr @candy_builtin_equals(ptr %93, ptr %94)
  %96 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %97 = load ptr, ptr @fun_Builtins__isNonNegative_13_case-0_didNotMatch, align 8
  %98 = call ptr @candy_builtin_if_else(ptr %95, ptr %96, ptr %97)
  %99 = load ptr, ptr @"text_`value | isNonNegative` was not satisfied", align 8
  %100 = load ptr, ptr @"Builtins::intShiftRight:34", align 8
  %101 = call ptr @"anonymous_$generated__needs"(ptr %98, ptr %99, ptr %100)
  %102 = load ptr, ptr @tag_Int, align 8
  %103 = call ptr @candy_builtin_equals(ptr %7, ptr %102)
  %104 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %105 = load ptr, ptr @"Builtins::fitsInRustU128:16", align 8
  %106 = call ptr @"anonymous_$generated__needs"(ptr %103, ptr %104, ptr %105)
  %107 = load ptr, ptr @num_340282366920938463463374607431768211455, align 8
  %108 = call ptr @candy_builtin_int_compare_to(ptr %1, ptr %107)
  %109 = call ptr @candy_builtin_tag_without_value(ptr %108)
  %110 = load ptr, ptr @tag_Less, align 8
  %111 = call ptr @candy_builtin_equals(ptr %110, ptr %109)
  %112 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %113 = getelementptr inbounds { ptr }, ptr %112, i32 0, i32 0
  store ptr %108, ptr %113, align 8
  %114 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_then.63, ptr %112, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %114, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.64, align 8
  %115 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %116 = getelementptr inbounds { ptr }, ptr %115, i32 0, i32 0
  store ptr %109, ptr %116, align 8
  %117 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_else.67, ptr %115, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %117, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.68, align 8
  %118 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.64, align 8
  %119 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.68, align 8
  %120 = call ptr @candy_builtin_if_else(ptr %111, ptr %118, ptr %119)
  %121 = load ptr, ptr @num_0, align 8
  %122 = call ptr @candy_builtin_list_get(ptr %120, ptr %121)
  %123 = load ptr, ptr @tag_Match, align 8
  %124 = call ptr @candy_builtin_equals(ptr %122, ptr %123)
  %125 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %126 = getelementptr inbounds { ptr }, ptr %125, i32 0, i32 0
  store ptr %120, ptr %126, align 8
  %127 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_isMatch_then.69, ptr %125, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %127, ptr @fun_Builtins__isLessThanOrEqualTo_19_isMatch_then.70, align 8
  %128 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %129 = getelementptr inbounds { ptr }, ptr %128, i32 0, i32 0
  store ptr %108, ptr %129, align 8
  %130 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_isMatch_else.71, ptr %128, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %130, ptr @fun_Builtins__isLessThanOrEqualTo_19_isMatch_else.72, align 8
  %131 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_isMatch_then.70, align 8
  %132 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_isMatch_else.72, align 8
  %133 = call ptr @candy_builtin_if_else(ptr %124, ptr %131, ptr %132)
  %134 = load ptr, ptr @num_0, align 8
  %135 = call ptr @candy_builtin_list_get(ptr %133, ptr %134)
  %136 = load ptr, ptr @tag_Match, align 8
  %137 = call ptr @candy_builtin_equals(ptr %135, ptr %136)
  %138 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %139 = getelementptr inbounds { ptr }, ptr %138, i32 0, i32 0
  store ptr %108, ptr %139, align 8
  %140 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch.79, ptr %138, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %140, ptr @fun_Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch.80, align 8
  %141 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %142 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch.80, align 8
  %143 = call ptr @candy_builtin_if_else(ptr %137, ptr %141, ptr %142)
  %144 = load ptr, ptr @"text_Shifts by that much are not yet supported.", align 8
  %145 = call ptr @"anonymous_$generated__needs"(ptr %143, ptr %144, ptr null)
  %146 = call ptr @candy_builtin_int_shift_right(ptr %0, ptr %1)
  ret ptr %146
}

define ptr @Builtins__isNonNegative_13_equals_then(ptr %0) {
Builtins__isNonNegative_13_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_else, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isNonNegative_13_equals_else, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Builtins__isNonNegative_13_equals_else(ptr %0) {
Builtins__isNonNegative_13_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @19, align 8
  ret ptr @19
}

define ptr @Builtins__isNonNegative_13_equals_else.47(ptr %0) {
Builtins__isNonNegative_13_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected Greater, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @20, align 8
  ret ptr @20
}

define ptr @Builtins__isNonNegative_13_isMatch_then(ptr %0) {
Builtins__isNonNegative_13_isMatch_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Builtins__isNonNegative_13_isMatch_else(ptr %0) {
Builtins__isNonNegative_13_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_Equal, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_then.49, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isNonNegative_13_equals_then.50, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_else.53, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__isNonNegative_13_equals_else.54, align 8
  %14 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then.50, align 8
  %15 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.54, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Builtins__isNonNegative_13_equals_then.49(ptr %0) {
Builtins__isNonNegative_13_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_else.51, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isNonNegative_13_equals_else.52, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.52, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Builtins__isNonNegative_13_equals_else.51(ptr %0) {
Builtins__isNonNegative_13_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @21, align 8
  ret ptr @21
}

define ptr @Builtins__isNonNegative_13_equals_else.53(ptr %0) {
Builtins__isNonNegative_13_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected Equal, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @22, align 8
  ret ptr @22
}

define ptr @Builtins__isNonNegative_13_case-0_didNotMatch(ptr %0) {
Builtins__isNonNegative_13_case-0_didNotMatch:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_Less, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_then.55, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isNonNegative_13_equals_then.56, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_else.59, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__isNonNegative_13_equals_else.60, align 8
  %14 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then.56, align 8
  %15 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.60, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  %17 = load ptr, ptr @num_0, align 8
  %18 = call ptr @candy_builtin_list_get(ptr %16, ptr %17)
  %19 = load ptr, ptr @tag_Match, align 8
  %20 = call ptr @candy_builtin_equals(ptr %18, ptr %19)
  %21 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %22 = load ptr, ptr @fun_Builtins__isNonNegative_13_case-1_didNotMatch, align 8
  %23 = call ptr @candy_builtin_if_else(ptr %20, ptr %21, ptr %22)
  ret ptr %23
}

define ptr @Builtins__isNonNegative_13_equals_then.55(ptr %0) {
Builtins__isNonNegative_13_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_else.57, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isNonNegative_13_equals_else.58, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.58, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Builtins__isNonNegative_13_equals_else.57(ptr %0) {
Builtins__isNonNegative_13_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @23, align 8
  ret ptr @23
}

define ptr @Builtins__isNonNegative_13_equals_else.59(ptr %0) {
Builtins__isNonNegative_13_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected Less, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @24, align 8
  ret ptr @24
}

define ptr @Builtins__intShiftRight_25(ptr %0) {
Builtins__intShiftRight_25:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Builtins__intShiftRight_26(ptr %0) {
Builtins__intShiftRight_26:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  ret ptr %3
}

define ptr @Builtins__isNonNegative_13_isMatch_then.61(ptr %0) {
Builtins__isNonNegative_13_isMatch_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_then.63(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_else.65, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.66, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.66, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_else.65(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @25, align 8
  ret ptr @25
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_else.67(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected Less, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @26, align 8
  ret ptr @26
}

define ptr @Builtins__isLessThanOrEqualTo_19_isMatch_then.69(ptr %0) {
Builtins__isLessThanOrEqualTo_19_isMatch_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Builtins__isLessThanOrEqualTo_19_isMatch_else.71(ptr %0) {
Builtins__isLessThanOrEqualTo_19_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_Equal, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_then.73, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.74, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_else.77, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.78, align 8
  %14 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.74, align 8
  %15 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.78, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_then.73(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_else.75, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.76, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.76, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_else.75(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @27, align 8
  ret ptr @27
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_else.77(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected Equal, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @28, align 8
  ret ptr @28
}

define ptr @Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch.79(ptr %0) {
Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_Greater, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_then.81, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.82, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_else.85, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.86, align 8
  %14 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.82, align 8
  %15 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.86, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  %17 = load ptr, ptr @num_0, align 8
  %18 = call ptr @candy_builtin_list_get(ptr %16, ptr %17)
  %19 = load ptr, ptr @tag_Match, align 8
  %20 = call ptr @candy_builtin_equals(ptr %18, ptr %19)
  %21 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %22 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_case-1_didNotMatch, align 8
  %23 = call ptr @candy_builtin_if_else(ptr %20, ptr %21, ptr %22)
  ret ptr %23
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_then.81(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_else.83, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.84, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.84, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_else.83(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @29, align 8
  ret ptr @29
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_else.85(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected Greater, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @30, align 8
  ret ptr @30
}

define ptr @Builtins__textGetRange(ptr %0, ptr %1, ptr %2) {
Builtins__textGetRange:
  %3 = call ptr @candy_builtin_type_of(ptr %0)
  %4 = load ptr, ptr @tag_Text, align 8
  %5 = call ptr @candy_builtin_equals(ptr %3, ptr %4)
  %6 = load ptr, ptr @"text_`text | typeIs Text` was not satisfied", align 8
  %7 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %6, ptr null)
  %8 = call ptr @candy_builtin_type_of(ptr %1)
  %9 = load ptr, ptr @tag_Int, align 8
  %10 = call ptr @candy_builtin_equals(ptr %8, ptr %9)
  %11 = load ptr, ptr @"text_`startInclusive | typeIs Int` was not satisfied", align 8
  %12 = call ptr @"anonymous_$generated__needs"(ptr %10, ptr %11, ptr null)
  %13 = load ptr, ptr @tag_Int, align 8
  %14 = call ptr @candy_builtin_equals(ptr %8, ptr %13)
  %15 = load ptr, ptr @"text_`int | typeIs Int` was not satisfied", align 8
  %16 = load ptr, ptr @"Builtins::textGetRange:14", align 8
  %17 = call ptr @"anonymous_$generated__needs"(ptr %14, ptr %15, ptr %16)
  %18 = load ptr, ptr @num_0, align 8
  %19 = call ptr @candy_builtin_int_compare_to(ptr %1, ptr %18)
  %20 = call ptr @candy_builtin_tag_without_value(ptr %19)
  %21 = load ptr, ptr @tag_Greater, align 8
  %22 = call ptr @candy_builtin_equals(ptr %21, ptr %20)
  %23 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %24 = getelementptr inbounds { ptr }, ptr %23, i32 0, i32 0
  store ptr %19, ptr %24, align 8
  %25 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_then.87, ptr %23, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %25, ptr @fun_Builtins__isNonNegative_13_equals_then.88, align 8
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %27 = getelementptr inbounds { ptr }, ptr %26, i32 0, i32 0
  store ptr %20, ptr %27, align 8
  %28 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_else.91, ptr %26, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %28, ptr @fun_Builtins__isNonNegative_13_equals_else.92, align 8
  %29 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then.88, align 8
  %30 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.92, align 8
  %31 = call ptr @candy_builtin_if_else(ptr %22, ptr %29, ptr %30)
  %32 = load ptr, ptr @num_0, align 8
  %33 = call ptr @candy_builtin_list_get(ptr %31, ptr %32)
  %34 = load ptr, ptr @tag_Match, align 8
  %35 = call ptr @candy_builtin_equals(ptr %33, ptr %34)
  %36 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %37 = getelementptr inbounds { ptr }, ptr %36, i32 0, i32 0
  store ptr %31, ptr %37, align 8
  %38 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_isMatch_then.93, ptr %36, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %38, ptr @fun_Builtins__isNonNegative_13_isMatch_then.94, align 8
  %39 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %40 = getelementptr inbounds { ptr }, ptr %39, i32 0, i32 0
  store ptr %19, ptr %40, align 8
  %41 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_isMatch_else.95, ptr %39, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %41, ptr @fun_Builtins__isNonNegative_13_isMatch_else.96, align 8
  %42 = load ptr, ptr @fun_Builtins__isNonNegative_13_isMatch_then.94, align 8
  %43 = load ptr, ptr @fun_Builtins__isNonNegative_13_isMatch_else.96, align 8
  %44 = call ptr @candy_builtin_if_else(ptr %35, ptr %42, ptr %43)
  %45 = load ptr, ptr @num_0, align 8
  %46 = call ptr @candy_builtin_list_get(ptr %44, ptr %45)
  %47 = load ptr, ptr @tag_Match, align 8
  %48 = call ptr @candy_builtin_equals(ptr %46, ptr %47)
  %49 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %50 = getelementptr inbounds { ptr }, ptr %49, i32 0, i32 0
  store ptr %19, ptr %50, align 8
  %51 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_case-0_didNotMatch.103, ptr %49, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %51, ptr @fun_Builtins__isNonNegative_13_case-0_didNotMatch.104, align 8
  %52 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %53 = load ptr, ptr @fun_Builtins__isNonNegative_13_case-0_didNotMatch.104, align 8
  %54 = call ptr @candy_builtin_if_else(ptr %48, ptr %52, ptr %53)
  %55 = load ptr, ptr @"text_`startInclusive | isNonNegative` was not satisfied", align 8
  %56 = call ptr @"anonymous_$generated__needs"(ptr %54, ptr %55, ptr null)
  %57 = call ptr @candy_builtin_text_length(ptr %0)
  %58 = call ptr @Builtins__isLessThanOrEqualTo(ptr %1, ptr %57)
  %59 = load ptr, ptr @"text_`startInclusive | isLessThanOrEqualTo (text | \E2\9C\A8.textLength)` was not satisfied", align 8
  %60 = call ptr @"anonymous_$generated__needs"(ptr %58, ptr %59, ptr null)
  %61 = call ptr @candy_builtin_type_of(ptr %2)
  %62 = load ptr, ptr @tag_Int, align 8
  %63 = call ptr @candy_builtin_equals(ptr %61, ptr %62)
  %64 = load ptr, ptr @"text_`endExclusive | typeIs Int` was not satisfied", align 8
  %65 = call ptr @"anonymous_$generated__needs"(ptr %63, ptr %64, ptr null)
  %66 = load ptr, ptr @tag_Int, align 8
  %67 = call ptr @candy_builtin_equals(ptr %61, ptr %66)
  %68 = load ptr, ptr @"text_`int | typeIs Int` was not satisfied", align 8
  %69 = load ptr, ptr @"Builtins::textGetRange:36", align 8
  %70 = call ptr @"anonymous_$generated__needs"(ptr %67, ptr %68, ptr %69)
  %71 = load ptr, ptr @num_0, align 8
  %72 = call ptr @candy_builtin_int_compare_to(ptr %2, ptr %71)
  %73 = call ptr @candy_builtin_tag_without_value(ptr %72)
  %74 = load ptr, ptr @tag_Greater, align 8
  %75 = call ptr @candy_builtin_equals(ptr %74, ptr %73)
  %76 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %77 = getelementptr inbounds { ptr }, ptr %76, i32 0, i32 0
  store ptr %72, ptr %77, align 8
  %78 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_then.111, ptr %76, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %78, ptr @fun_Builtins__isNonNegative_13_equals_then.112, align 8
  %79 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %80 = getelementptr inbounds { ptr }, ptr %79, i32 0, i32 0
  store ptr %73, ptr %80, align 8
  %81 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_else.115, ptr %79, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %81, ptr @fun_Builtins__isNonNegative_13_equals_else.116, align 8
  %82 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then.112, align 8
  %83 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.116, align 8
  %84 = call ptr @candy_builtin_if_else(ptr %75, ptr %82, ptr %83)
  %85 = load ptr, ptr @num_0, align 8
  %86 = call ptr @candy_builtin_list_get(ptr %84, ptr %85)
  %87 = load ptr, ptr @tag_Match, align 8
  %88 = call ptr @candy_builtin_equals(ptr %86, ptr %87)
  %89 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %90 = getelementptr inbounds { ptr }, ptr %89, i32 0, i32 0
  store ptr %84, ptr %90, align 8
  %91 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_isMatch_then.117, ptr %89, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %91, ptr @fun_Builtins__isNonNegative_13_isMatch_then.118, align 8
  %92 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %93 = getelementptr inbounds { ptr }, ptr %92, i32 0, i32 0
  store ptr %72, ptr %93, align 8
  %94 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_isMatch_else.119, ptr %92, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %94, ptr @fun_Builtins__isNonNegative_13_isMatch_else.120, align 8
  %95 = load ptr, ptr @fun_Builtins__isNonNegative_13_isMatch_then.118, align 8
  %96 = load ptr, ptr @fun_Builtins__isNonNegative_13_isMatch_else.120, align 8
  %97 = call ptr @candy_builtin_if_else(ptr %88, ptr %95, ptr %96)
  %98 = load ptr, ptr @num_0, align 8
  %99 = call ptr @candy_builtin_list_get(ptr %97, ptr %98)
  %100 = load ptr, ptr @tag_Match, align 8
  %101 = call ptr @candy_builtin_equals(ptr %99, ptr %100)
  %102 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %103 = getelementptr inbounds { ptr }, ptr %102, i32 0, i32 0
  store ptr %72, ptr %103, align 8
  %104 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_case-0_didNotMatch.127, ptr %102, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %104, ptr @fun_Builtins__isNonNegative_13_case-0_didNotMatch.128, align 8
  %105 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %106 = load ptr, ptr @fun_Builtins__isNonNegative_13_case-0_didNotMatch.128, align 8
  %107 = call ptr @candy_builtin_if_else(ptr %101, ptr %105, ptr %106)
  %108 = load ptr, ptr @"text_`endExclusive | isNonNegative` was not satisfied", align 8
  %109 = call ptr @"anonymous_$generated__needs"(ptr %107, ptr %108, ptr null)
  %110 = call ptr @candy_builtin_text_length(ptr %0)
  %111 = call ptr @Builtins__isLessThanOrEqualTo(ptr %2, ptr %110)
  %112 = load ptr, ptr @"text_`endExclusive | isLessThanOrEqualTo (text | \E2\9C\A8.textLength)` was not satisfied", align 8
  %113 = call ptr @"anonymous_$generated__needs"(ptr %111, ptr %112, ptr null)
  %114 = load ptr, ptr @tag_Int, align 8
  %115 = call ptr @candy_builtin_equals(ptr %8, ptr %114)
  %116 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %117 = load ptr, ptr @"Builtins::textGetRange:53", align 8
  %118 = call ptr @"anonymous_$generated__needs"(ptr %115, ptr %116, ptr %117)
  %119 = load ptr, ptr @tag_Int, align 8
  %120 = call ptr @candy_builtin_equals(ptr %61, ptr %119)
  %121 = load ptr, ptr @"text_`b | typeIs Int` was not satisfied", align 8
  %122 = load ptr, ptr @"Builtins::textGetRange:53", align 8
  %123 = call ptr @"anonymous_$generated__needs"(ptr %120, ptr %121, ptr %122)
  %124 = call ptr @candy_builtin_int_compare_to(ptr %1, ptr %2)
  %125 = call ptr @candy_builtin_tag_without_value(ptr %124)
  %126 = load ptr, ptr @tag_Less, align 8
  %127 = call ptr @candy_builtin_equals(ptr %126, ptr %125)
  %128 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %129 = getelementptr inbounds { ptr }, ptr %128, i32 0, i32 0
  store ptr %124, ptr %129, align 8
  %130 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_then.135, ptr %128, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %130, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.136, align 8
  %131 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %132 = getelementptr inbounds { ptr }, ptr %131, i32 0, i32 0
  store ptr %125, ptr %132, align 8
  %133 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_else.139, ptr %131, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %133, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.140, align 8
  %134 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.136, align 8
  %135 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.140, align 8
  %136 = call ptr @candy_builtin_if_else(ptr %127, ptr %134, ptr %135)
  %137 = load ptr, ptr @num_0, align 8
  %138 = call ptr @candy_builtin_list_get(ptr %136, ptr %137)
  %139 = load ptr, ptr @tag_Match, align 8
  %140 = call ptr @candy_builtin_equals(ptr %138, ptr %139)
  %141 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %142 = getelementptr inbounds { ptr }, ptr %141, i32 0, i32 0
  store ptr %136, ptr %142, align 8
  %143 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_isMatch_then.141, ptr %141, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %143, ptr @fun_Builtins__isLessThanOrEqualTo_19_isMatch_then.142, align 8
  %144 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %145 = getelementptr inbounds { ptr }, ptr %144, i32 0, i32 0
  store ptr %124, ptr %145, align 8
  %146 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_isMatch_else.143, ptr %144, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %146, ptr @fun_Builtins__isLessThanOrEqualTo_19_isMatch_else.144, align 8
  %147 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_isMatch_then.142, align 8
  %148 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_isMatch_else.144, align 8
  %149 = call ptr @candy_builtin_if_else(ptr %140, ptr %147, ptr %148)
  %150 = load ptr, ptr @num_0, align 8
  %151 = call ptr @candy_builtin_list_get(ptr %149, ptr %150)
  %152 = load ptr, ptr @tag_Match, align 8
  %153 = call ptr @candy_builtin_equals(ptr %151, ptr %152)
  %154 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %155 = getelementptr inbounds { ptr }, ptr %154, i32 0, i32 0
  store ptr %124, ptr %155, align 8
  %156 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch.151, ptr %154, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %156, ptr @fun_Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch.152, align 8
  %157 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %158 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch.152, align 8
  %159 = call ptr @candy_builtin_if_else(ptr %153, ptr %157, ptr %158)
  %160 = load ptr, ptr @"text_`startInclusive | isLessThanOrEqualTo endExclusive` was not satisfied", align 8
  %161 = call ptr @"anonymous_$generated__needs"(ptr %159, ptr %160, ptr null)
  %162 = call ptr @candy_builtin_text_get_range(ptr %0, ptr %1, ptr %2)
  ret ptr %162
}

define ptr @Builtins__isNonNegative_13_equals_then.87(ptr %0) {
Builtins__isNonNegative_13_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_else.89, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isNonNegative_13_equals_else.90, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.90, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Builtins__isNonNegative_13_equals_else.89(ptr %0) {
Builtins__isNonNegative_13_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @31, align 8
  ret ptr @31
}

define ptr @Builtins__isNonNegative_13_equals_else.91(ptr %0) {
Builtins__isNonNegative_13_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected Greater, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @32, align 8
  ret ptr @32
}

define ptr @Builtins__isNonNegative_13_isMatch_then.93(ptr %0) {
Builtins__isNonNegative_13_isMatch_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Builtins__isNonNegative_13_isMatch_else.95(ptr %0) {
Builtins__isNonNegative_13_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_Equal, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_then.97, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isNonNegative_13_equals_then.98, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_else.101, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__isNonNegative_13_equals_else.102, align 8
  %14 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then.98, align 8
  %15 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.102, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Builtins__isNonNegative_13_equals_then.97(ptr %0) {
Builtins__isNonNegative_13_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_else.99, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isNonNegative_13_equals_else.100, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.100, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Builtins__isNonNegative_13_equals_else.99(ptr %0) {
Builtins__isNonNegative_13_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @33, align 8
  ret ptr @33
}

define ptr @Builtins__isNonNegative_13_equals_else.101(ptr %0) {
Builtins__isNonNegative_13_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected Equal, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @34, align 8
  ret ptr @34
}

define ptr @Builtins__isNonNegative_13_case-0_didNotMatch.103(ptr %0) {
Builtins__isNonNegative_13_case-0_didNotMatch:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_Less, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_then.105, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isNonNegative_13_equals_then.106, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_else.109, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__isNonNegative_13_equals_else.110, align 8
  %14 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then.106, align 8
  %15 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.110, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  %17 = load ptr, ptr @num_0, align 8
  %18 = call ptr @candy_builtin_list_get(ptr %16, ptr %17)
  %19 = load ptr, ptr @tag_Match, align 8
  %20 = call ptr @candy_builtin_equals(ptr %18, ptr %19)
  %21 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %22 = load ptr, ptr @fun_Builtins__isNonNegative_13_case-1_didNotMatch, align 8
  %23 = call ptr @candy_builtin_if_else(ptr %20, ptr %21, ptr %22)
  ret ptr %23
}

define ptr @Builtins__isNonNegative_13_equals_then.105(ptr %0) {
Builtins__isNonNegative_13_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_else.107, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isNonNegative_13_equals_else.108, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.108, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Builtins__isNonNegative_13_equals_else.107(ptr %0) {
Builtins__isNonNegative_13_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @35, align 8
  ret ptr @35
}

define ptr @Builtins__isNonNegative_13_equals_else.109(ptr %0) {
Builtins__isNonNegative_13_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected Less, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @36, align 8
  ret ptr @36
}

define ptr @Builtins__isNonNegative_13_equals_then.111(ptr %0) {
Builtins__isNonNegative_13_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_else.113, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isNonNegative_13_equals_else.114, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.114, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Builtins__isNonNegative_13_equals_else.113(ptr %0) {
Builtins__isNonNegative_13_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @37, align 8
  ret ptr @37
}

define ptr @Builtins__isNonNegative_13_equals_else.115(ptr %0) {
Builtins__isNonNegative_13_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected Greater, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @38, align 8
  ret ptr @38
}

define ptr @Builtins__isNonNegative_13_isMatch_then.117(ptr %0) {
Builtins__isNonNegative_13_isMatch_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Builtins__isNonNegative_13_isMatch_else.119(ptr %0) {
Builtins__isNonNegative_13_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_Equal, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_then.121, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isNonNegative_13_equals_then.122, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_else.125, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__isNonNegative_13_equals_else.126, align 8
  %14 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then.122, align 8
  %15 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.126, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Builtins__isNonNegative_13_equals_then.121(ptr %0) {
Builtins__isNonNegative_13_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_else.123, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isNonNegative_13_equals_else.124, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.124, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Builtins__isNonNegative_13_equals_else.123(ptr %0) {
Builtins__isNonNegative_13_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @39, align 8
  ret ptr @39
}

define ptr @Builtins__isNonNegative_13_equals_else.125(ptr %0) {
Builtins__isNonNegative_13_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected Equal, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @40, align 8
  ret ptr @40
}

define ptr @Builtins__isNonNegative_13_case-0_didNotMatch.127(ptr %0) {
Builtins__isNonNegative_13_case-0_didNotMatch:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_Less, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_then.129, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isNonNegative_13_equals_then.130, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_else.133, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__isNonNegative_13_equals_else.134, align 8
  %14 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_then.130, align 8
  %15 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.134, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  %17 = load ptr, ptr @num_0, align 8
  %18 = call ptr @candy_builtin_list_get(ptr %16, ptr %17)
  %19 = load ptr, ptr @tag_Match, align 8
  %20 = call ptr @candy_builtin_equals(ptr %18, ptr %19)
  %21 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %22 = load ptr, ptr @fun_Builtins__isNonNegative_13_case-1_didNotMatch, align 8
  %23 = call ptr @candy_builtin_if_else(ptr %20, ptr %21, ptr %22)
  ret ptr %23
}

define ptr @Builtins__isNonNegative_13_equals_then.129(ptr %0) {
Builtins__isNonNegative_13_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isNonNegative_13_equals_else.131, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isNonNegative_13_equals_else.132, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Builtins__isNonNegative_13_equals_else.132, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Builtins__isNonNegative_13_equals_else.131(ptr %0) {
Builtins__isNonNegative_13_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @41, align 8
  ret ptr @41
}

define ptr @Builtins__isNonNegative_13_equals_else.133(ptr %0) {
Builtins__isNonNegative_13_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected Less, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @42, align 8
  ret ptr @42
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_then.135(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_else.137, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.138, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.138, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_else.137(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @43, align 8
  ret ptr @43
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_else.139(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected Less, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @44, align 8
  ret ptr @44
}

define ptr @Builtins__isLessThanOrEqualTo_19_isMatch_then.141(ptr %0) {
Builtins__isLessThanOrEqualTo_19_isMatch_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Builtins__isLessThanOrEqualTo_19_isMatch_else.143(ptr %0) {
Builtins__isLessThanOrEqualTo_19_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_Equal, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_then.145, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.146, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_else.149, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.150, align 8
  %14 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.146, align 8
  %15 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.150, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_then.145(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_else.147, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.148, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.148, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_else.147(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @45, align 8
  ret ptr @45
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_else.149(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected Equal, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @46, align 8
  ret ptr @46
}

define ptr @Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch.151(ptr %0) {
Builtins__isLessThanOrEqualTo_19_case-0_didNotMatch:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_Greater, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_then.153, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.154, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_else.157, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.158, align 8
  %14 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_then.154, align 8
  %15 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.158, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  %17 = load ptr, ptr @num_0, align 8
  %18 = call ptr @candy_builtin_list_get(ptr %16, ptr %17)
  %19 = load ptr, ptr @tag_Match, align 8
  %20 = call ptr @candy_builtin_equals(ptr %18, ptr %19)
  %21 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %22 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_case-1_didNotMatch, align 8
  %23 = call ptr @candy_builtin_if_else(ptr %20, ptr %21, ptr %22)
  ret ptr %23
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_then.153(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Builtins__isLessThanOrEqualTo_19_equals_else.155, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.156, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Builtins__isLessThanOrEqualTo_19_equals_else.156, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_else.155(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @47, align 8
  ret ptr @47
}

define ptr @Builtins__isLessThanOrEqualTo_19_equals_else.157(ptr %0) {
Builtins__isLessThanOrEqualTo_19_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected Greater, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @48, align 8
  ret ptr @48
}

define ptr @Core_bool_is(ptr %0) {
Core_bool_is:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Tag, align 8
  %3 = call ptr @candy_builtin_equals(ptr %2, ptr %1)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %5 = getelementptr inbounds { ptr }, ptr %4, i32 0, i32 0
  store ptr %0, ptr %5, align 8
  %6 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then, ptr %4, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %6, ptr @fun_Core_bool_is_1_equals_then, align 8
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %8 = getelementptr inbounds { ptr }, ptr %7, i32 0, i32 0
  store ptr %1, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.163, ptr %7, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_bool_is_1_equals_else.164, align 8
  %10 = load ptr, ptr @fun_Core_bool_is_1_equals_then, align 8
  %11 = load ptr, ptr @fun_Core_bool_is_1_equals_else.164, align 8
  %12 = call ptr @candy_builtin_if_else(ptr %3, ptr %10, ptr %11)
  %13 = load ptr, ptr @num_0, align 8
  %14 = call ptr @candy_builtin_list_get(ptr %12, ptr %13)
  %15 = load ptr, ptr @tag_Match, align 8
  %16 = call ptr @candy_builtin_equals(ptr %14, ptr %15)
  %17 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %18 = getelementptr inbounds { ptr }, ptr %17, i32 0, i32 0
  store ptr %12, ptr %18, align 8
  %19 = call ptr @make_candy_function(ptr @Core_bool_is_1_isMatch_then, ptr %17, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %19, ptr @fun_Core_bool_is_1_isMatch_then, align 8
  %20 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %21 = getelementptr inbounds { ptr }, ptr %20, i32 0, i32 0
  store ptr %0, ptr %21, align 8
  %22 = call ptr @make_candy_function(ptr @Core_bool_is_1_isMatch_else, ptr %20, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %22, ptr @fun_Core_bool_is_1_isMatch_else, align 8
  %23 = load ptr, ptr @fun_Core_bool_is_1_isMatch_then, align 8
  %24 = load ptr, ptr @fun_Core_bool_is_1_isMatch_else, align 8
  %25 = call ptr @candy_builtin_if_else(ptr %16, ptr %23, ptr %24)
  %26 = load ptr, ptr @num_0, align 8
  %27 = call ptr @candy_builtin_list_get(ptr %25, ptr %26)
  %28 = load ptr, ptr @tag_Match, align 8
  %29 = call ptr @candy_builtin_equals(ptr %27, ptr %28)
  %30 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %31 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %32 = call ptr @candy_builtin_if_else(ptr %29, ptr %30, ptr %31)
  ret ptr %32
}

define ptr @Core_bool_is_1_equals_then(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.159, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_then.160, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.161, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_is_1_equals_else.162, align 8
  %14 = load ptr, ptr @fun_Core_bool_is_1_equals_then.160, align 8
  %15 = load ptr, ptr @fun_Core_bool_is_1_equals_else.162, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_is_1_equals_then.159(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_else, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_bool_is_1_equals_else, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_is_1_equals_else(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @49, align 8
  ret ptr @49
}

define ptr @Core_bool_is_1_equals_else.161(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected True, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @50, align 8
  ret ptr @50
}

define ptr @Core_bool_is_1_equals_else.163(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @51, align 8
  ret ptr @51
}

define ptr @Core_bool_is_1_isMatch_then(ptr %0) {
Core_bool_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_bool_is_1_isMatch_else(ptr %0) {
Core_bool_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Tag, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.165, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_then.166, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.173, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_is_1_equals_else.174, align 8
  %14 = load ptr, ptr @fun_Core_bool_is_1_equals_then.166, align 8
  %15 = load ptr, ptr @fun_Core_bool_is_1_equals_else.174, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_is_1_equals_then.165(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.167, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_then.168, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.171, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_is_1_equals_else.172, align 8
  %14 = load ptr, ptr @fun_Core_bool_is_1_equals_then.168, align 8
  %15 = load ptr, ptr @fun_Core_bool_is_1_equals_else.172, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_is_1_equals_then.167(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.169, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_else.170, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_bool_is_1_equals_else.170, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_is_1_equals_else.169(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @52, align 8
  ret ptr @52
}

define ptr @Core_bool_is_1_equals_else.171(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected False, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @53, align 8
  ret ptr @53
}

define ptr @Core_bool_is_1_equals_else.173(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @54, align 8
  ret ptr @54
}

define ptr @Core_bool_not_6_case-1_didNotMatch() {
Core_bool_not_6_case-1_didNotMatch:
  %0 = load ptr, ptr @"text_No case matched the given expression.", align 8
  call void @candy_panic(ptr %0)
  unreachable
}

define ptr @Core_bool_not(ptr %0) {
Core_bool_not:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Tag, align 8
  %3 = call ptr @candy_builtin_equals(ptr %2, ptr %1)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %5 = getelementptr inbounds { ptr }, ptr %4, i32 0, i32 0
  store ptr %0, ptr %5, align 8
  %6 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.175, ptr %4, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %6, ptr @fun_Core_bool_is_1_equals_then.176, align 8
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %8 = getelementptr inbounds { ptr }, ptr %7, i32 0, i32 0
  store ptr %1, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.183, ptr %7, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_bool_is_1_equals_else.184, align 8
  %10 = load ptr, ptr @fun_Core_bool_is_1_equals_then.176, align 8
  %11 = load ptr, ptr @fun_Core_bool_is_1_equals_else.184, align 8
  %12 = call ptr @candy_builtin_if_else(ptr %3, ptr %10, ptr %11)
  %13 = load ptr, ptr @num_0, align 8
  %14 = call ptr @candy_builtin_list_get(ptr %12, ptr %13)
  %15 = load ptr, ptr @tag_Match, align 8
  %16 = call ptr @candy_builtin_equals(ptr %14, ptr %15)
  %17 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %18 = getelementptr inbounds { ptr }, ptr %17, i32 0, i32 0
  store ptr %12, ptr %18, align 8
  %19 = call ptr @make_candy_function(ptr @Core_bool_is_1_isMatch_then.185, ptr %17, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %19, ptr @fun_Core_bool_is_1_isMatch_then.186, align 8
  %20 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %21 = getelementptr inbounds { ptr }, ptr %20, i32 0, i32 0
  store ptr %0, ptr %21, align 8
  %22 = call ptr @make_candy_function(ptr @Core_bool_is_1_isMatch_else.187, ptr %20, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %22, ptr @fun_Core_bool_is_1_isMatch_else.188, align 8
  %23 = load ptr, ptr @fun_Core_bool_is_1_isMatch_then.186, align 8
  %24 = load ptr, ptr @fun_Core_bool_is_1_isMatch_else.188, align 8
  %25 = call ptr @candy_builtin_if_else(ptr %16, ptr %23, ptr %24)
  %26 = load ptr, ptr @num_0, align 8
  %27 = call ptr @candy_builtin_list_get(ptr %25, ptr %26)
  %28 = load ptr, ptr @tag_Match, align 8
  %29 = call ptr @candy_builtin_equals(ptr %27, ptr %28)
  %30 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %31 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %32 = call ptr @candy_builtin_if_else(ptr %29, ptr %30, ptr %31)
  %33 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  %34 = call ptr @"anonymous_$generated__needs"(ptr %32, ptr %33, ptr null)
  %35 = call ptr @candy_builtin_type_of(ptr %0)
  %36 = load ptr, ptr @tag_Tag, align 8
  %37 = call ptr @candy_builtin_equals(ptr %36, ptr %35)
  %38 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %39 = getelementptr inbounds { ptr }, ptr %38, i32 0, i32 0
  store ptr %0, ptr %39, align 8
  %40 = call ptr @make_candy_function(ptr @Core_bool_not_6_equals_then, ptr %38, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %40, ptr @fun_Core_bool_not_6_equals_then, align 8
  %41 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %42 = getelementptr inbounds { ptr }, ptr %41, i32 0, i32 0
  store ptr %35, ptr %42, align 8
  %43 = call ptr @make_candy_function(ptr @Core_bool_not_6_equals_else.203, ptr %41, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %43, ptr @fun_Core_bool_not_6_equals_else.204, align 8
  %44 = load ptr, ptr @fun_Core_bool_not_6_equals_then, align 8
  %45 = load ptr, ptr @fun_Core_bool_not_6_equals_else.204, align 8
  %46 = call ptr @candy_builtin_if_else(ptr %37, ptr %44, ptr %45)
  %47 = load ptr, ptr @num_0, align 8
  %48 = call ptr @candy_builtin_list_get(ptr %46, ptr %47)
  %49 = load ptr, ptr @tag_Match, align 8
  %50 = call ptr @candy_builtin_equals(ptr %48, ptr %49)
  %51 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %52 = getelementptr inbounds { ptr }, ptr %51, i32 0, i32 0
  store ptr %0, ptr %52, align 8
  %53 = call ptr @make_candy_function(ptr @Core_bool_not_6_case-0_didNotMatch, ptr %51, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %53, ptr @fun_Core_bool_not_6_case-0_didNotMatch, align 8
  %54 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %55 = load ptr, ptr @fun_Core_bool_not_6_case-0_didNotMatch, align 8
  %56 = call ptr @candy_builtin_if_else(ptr %50, ptr %54, ptr %55)
  ret ptr %56
}

define ptr @Core_bool_is_1_equals_then.175(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.177, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_then.178, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.181, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_is_1_equals_else.182, align 8
  %14 = load ptr, ptr @fun_Core_bool_is_1_equals_then.178, align 8
  %15 = load ptr, ptr @fun_Core_bool_is_1_equals_else.182, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_is_1_equals_then.177(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.179, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_else.180, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_bool_is_1_equals_else.180, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_is_1_equals_else.179(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @55, align 8
  ret ptr @55
}

define ptr @Core_bool_is_1_equals_else.181(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected True, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @56, align 8
  ret ptr @56
}

define ptr @Core_bool_is_1_equals_else.183(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @57, align 8
  ret ptr @57
}

define ptr @Core_bool_is_1_isMatch_then.185(ptr %0) {
Core_bool_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_bool_is_1_isMatch_else.187(ptr %0) {
Core_bool_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Tag, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.189, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_then.190, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.197, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_is_1_equals_else.198, align 8
  %14 = load ptr, ptr @fun_Core_bool_is_1_equals_then.190, align 8
  %15 = load ptr, ptr @fun_Core_bool_is_1_equals_else.198, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_is_1_equals_then.189(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.191, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_then.192, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.195, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_is_1_equals_else.196, align 8
  %14 = load ptr, ptr @fun_Core_bool_is_1_equals_then.192, align 8
  %15 = load ptr, ptr @fun_Core_bool_is_1_equals_else.196, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_is_1_equals_then.191(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.193, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_else.194, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_bool_is_1_equals_else.194, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_is_1_equals_else.193(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @58, align 8
  ret ptr @58
}

define ptr @Core_bool_is_1_equals_else.195(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected False, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @59, align 8
  ret ptr @59
}

define ptr @Core_bool_is_1_equals_else.197(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @60, align 8
  ret ptr @60
}

define ptr @Core_bool_not_6_equals_then(ptr %0) {
Core_bool_not_6_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_not_6_equals_then.199, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_not_6_equals_then.200, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_not_6_equals_else.201, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_not_6_equals_else.202, align 8
  %14 = load ptr, ptr @fun_Core_bool_not_6_equals_then.200, align 8
  %15 = load ptr, ptr @fun_Core_bool_not_6_equals_else.202, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_not_6_equals_then.199(ptr %0) {
Core_bool_not_6_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_not_6_equals_else, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_not_6_equals_else, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_bool_not_6_equals_else, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_not_6_equals_else(ptr %0) {
Core_bool_not_6_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @61, align 8
  ret ptr @61
}

define ptr @Core_bool_not_6_equals_else.201(ptr %0) {
Core_bool_not_6_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected True, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @62, align 8
  ret ptr @62
}

define ptr @Core_bool_not_6_equals_else.203(ptr %0) {
Core_bool_not_6_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @63, align 8
  ret ptr @63
}

define ptr @Core_bool_not_6_case-0_didNotMatch(ptr %0) {
Core_bool_not_6_case-0_didNotMatch:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Tag, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_not_6_equals_then.205, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_not_6_equals_then.206, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_not_6_equals_else.213, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_not_6_equals_else.214, align 8
  %14 = load ptr, ptr @fun_Core_bool_not_6_equals_then.206, align 8
  %15 = load ptr, ptr @fun_Core_bool_not_6_equals_else.214, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  %17 = load ptr, ptr @num_0, align 8
  %18 = call ptr @candy_builtin_list_get(ptr %16, ptr %17)
  %19 = load ptr, ptr @tag_Match, align 8
  %20 = call ptr @candy_builtin_equals(ptr %18, ptr %19)
  %21 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %22 = load ptr, ptr @fun_Core_bool_not_6_case-1_didNotMatch, align 8
  %23 = call ptr @candy_builtin_if_else(ptr %20, ptr %21, ptr %22)
  ret ptr %23
}

define ptr @Core_bool_not_6_equals_then.205(ptr %0) {
Core_bool_not_6_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_not_6_equals_then.207, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_not_6_equals_then.208, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_not_6_equals_else.211, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_not_6_equals_else.212, align 8
  %14 = load ptr, ptr @fun_Core_bool_not_6_equals_then.208, align 8
  %15 = load ptr, ptr @fun_Core_bool_not_6_equals_else.212, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_not_6_equals_then.207(ptr %0) {
Core_bool_not_6_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_not_6_equals_else.209, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_not_6_equals_else.210, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_bool_not_6_equals_else.210, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_not_6_equals_else.209(ptr %0) {
Core_bool_not_6_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @64, align 8
  ret ptr @64
}

define ptr @Core_bool_not_6_equals_else.211(ptr %0) {
Core_bool_not_6_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected False, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @65, align 8
  ret ptr @65
}

define ptr @Core_bool_not_6_equals_else.213(ptr %0) {
Core_bool_not_6_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @66, align 8
  ret ptr @66
}

define ptr @Core_bool_lazyAnd_18_case-1_didNotMatch() {
Core_bool_lazyAnd_18_case-1_didNotMatch:
  %0 = load ptr, ptr @"text_No case matched the given expression.", align 8
  call void @candy_panic(ptr %0)
  unreachable
}

define ptr @Core_bool_lazyAnd(ptr %0, ptr %1) {
Core_bool_lazyAnd:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Tag, align 8
  %4 = call ptr @candy_builtin_equals(ptr %3, ptr %2)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %0, ptr %6, align 8
  %7 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.215, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %7, ptr @fun_Core_bool_is_1_equals_then.216, align 8
  %8 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %9 = getelementptr inbounds { ptr }, ptr %8, i32 0, i32 0
  store ptr %2, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.223, ptr %8, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_else.224, align 8
  %11 = load ptr, ptr @fun_Core_bool_is_1_equals_then.216, align 8
  %12 = load ptr, ptr @fun_Core_bool_is_1_equals_else.224, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %4, ptr %11, ptr %12)
  %14 = load ptr, ptr @num_0, align 8
  %15 = call ptr @candy_builtin_list_get(ptr %13, ptr %14)
  %16 = load ptr, ptr @tag_Match, align 8
  %17 = call ptr @candy_builtin_equals(ptr %15, ptr %16)
  %18 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %19 = getelementptr inbounds { ptr }, ptr %18, i32 0, i32 0
  store ptr %13, ptr %19, align 8
  %20 = call ptr @make_candy_function(ptr @Core_bool_is_1_isMatch_then.225, ptr %18, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %20, ptr @fun_Core_bool_is_1_isMatch_then.226, align 8
  %21 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %22 = getelementptr inbounds { ptr }, ptr %21, i32 0, i32 0
  store ptr %0, ptr %22, align 8
  %23 = call ptr @make_candy_function(ptr @Core_bool_is_1_isMatch_else.227, ptr %21, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %23, ptr @fun_Core_bool_is_1_isMatch_else.228, align 8
  %24 = load ptr, ptr @fun_Core_bool_is_1_isMatch_then.226, align 8
  %25 = load ptr, ptr @fun_Core_bool_is_1_isMatch_else.228, align 8
  %26 = call ptr @candy_builtin_if_else(ptr %17, ptr %24, ptr %25)
  %27 = load ptr, ptr @num_0, align 8
  %28 = call ptr @candy_builtin_list_get(ptr %26, ptr %27)
  %29 = load ptr, ptr @tag_Match, align 8
  %30 = call ptr @candy_builtin_equals(ptr %28, ptr %29)
  %31 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %32 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %33 = call ptr @candy_builtin_if_else(ptr %30, ptr %31, ptr %32)
  %34 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %35 = call ptr @"anonymous_$generated__needs"(ptr %33, ptr %34, ptr null)
  %36 = call ptr @candy_builtin_type_of(ptr %1)
  %37 = load ptr, ptr @tag_Function, align 8
  %38 = call ptr @candy_builtin_equals(ptr %36, ptr %37)
  %39 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %40 = getelementptr inbounds { ptr }, ptr %39, i32 0, i32 0
  store ptr %1, ptr %40, align 8
  %41 = call ptr @make_candy_function(ptr @Core_function_is0_11, ptr %39, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %41, ptr @fun_Core_function_is0_11, align 8
  %42 = load ptr, ptr @fun_Core_function_is0_11, align 8
  %43 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %44 = call ptr @Builtins__ifElse(ptr %38, ptr %42, ptr %43)
  %45 = load ptr, ptr @"text_`function.is0 b` was not satisfied", align 8
  %46 = call ptr @"anonymous_$generated__needs"(ptr %44, ptr %45, ptr null)
  %47 = call ptr @candy_builtin_type_of(ptr %0)
  %48 = load ptr, ptr @tag_Tag, align 8
  %49 = call ptr @candy_builtin_equals(ptr %48, ptr %47)
  %50 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %51 = getelementptr inbounds { ptr }, ptr %50, i32 0, i32 0
  store ptr %0, ptr %51, align 8
  %52 = call ptr @make_candy_function(ptr @Core_bool_lazyAnd_18_equals_then, ptr %50, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %52, ptr @fun_Core_bool_lazyAnd_18_equals_then, align 8
  %53 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %54 = getelementptr inbounds { ptr }, ptr %53, i32 0, i32 0
  store ptr %47, ptr %54, align 8
  %55 = call ptr @make_candy_function(ptr @Core_bool_lazyAnd_18_equals_else.243, ptr %53, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %55, ptr @fun_Core_bool_lazyAnd_18_equals_else.244, align 8
  %56 = load ptr, ptr @fun_Core_bool_lazyAnd_18_equals_then, align 8
  %57 = load ptr, ptr @fun_Core_bool_lazyAnd_18_equals_else.244, align 8
  %58 = call ptr @candy_builtin_if_else(ptr %49, ptr %56, ptr %57)
  %59 = load ptr, ptr @num_0, align 8
  %60 = call ptr @candy_builtin_list_get(ptr %58, ptr %59)
  %61 = load ptr, ptr @tag_Match, align 8
  %62 = call ptr @candy_builtin_equals(ptr %60, ptr %61)
  %63 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %64 = getelementptr inbounds { ptr }, ptr %63, i32 0, i32 0
  store ptr %1, ptr %64, align 8
  %65 = call ptr @make_candy_function(ptr @Core_bool_lazyAnd_18_case-0_matched, ptr %63, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %65, ptr @fun_Core_bool_lazyAnd_18_case-0_matched, align 8
  %66 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %67 = getelementptr inbounds { ptr }, ptr %66, i32 0, i32 0
  store ptr %0, ptr %67, align 8
  %68 = call ptr @make_candy_function(ptr @Core_bool_lazyAnd_18_case-0_didNotMatch, ptr %66, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %68, ptr @fun_Core_bool_lazyAnd_18_case-0_didNotMatch, align 8
  %69 = load ptr, ptr @fun_Core_bool_lazyAnd_18_case-0_matched, align 8
  %70 = load ptr, ptr @fun_Core_bool_lazyAnd_18_case-0_didNotMatch, align 8
  %71 = call ptr @candy_builtin_if_else(ptr %62, ptr %69, ptr %70)
  ret ptr %71
}

define ptr @Core_bool_is_1_equals_then.215(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.217, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_then.218, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.221, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_is_1_equals_else.222, align 8
  %14 = load ptr, ptr @fun_Core_bool_is_1_equals_then.218, align 8
  %15 = load ptr, ptr @fun_Core_bool_is_1_equals_else.222, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_is_1_equals_then.217(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.219, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_else.220, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_bool_is_1_equals_else.220, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_is_1_equals_else.219(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @67, align 8
  ret ptr @67
}

define ptr @Core_bool_is_1_equals_else.221(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected True, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @68, align 8
  ret ptr @68
}

define ptr @Core_bool_is_1_equals_else.223(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @69, align 8
  ret ptr @69
}

define ptr @Core_bool_is_1_isMatch_then.225(ptr %0) {
Core_bool_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_bool_is_1_isMatch_else.227(ptr %0) {
Core_bool_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Tag, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.229, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_then.230, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.237, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_is_1_equals_else.238, align 8
  %14 = load ptr, ptr @fun_Core_bool_is_1_equals_then.230, align 8
  %15 = load ptr, ptr @fun_Core_bool_is_1_equals_else.238, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_is_1_equals_then.229(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.231, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_then.232, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.235, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_is_1_equals_else.236, align 8
  %14 = load ptr, ptr @fun_Core_bool_is_1_equals_then.232, align 8
  %15 = load ptr, ptr @fun_Core_bool_is_1_equals_else.236, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_is_1_equals_then.231(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.233, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_else.234, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_bool_is_1_equals_else.234, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_is_1_equals_else.233(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @70, align 8
  ret ptr @70
}

define ptr @Core_bool_is_1_equals_else.235(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected False, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @71, align 8
  ret ptr @71
}

define ptr @Core_bool_is_1_equals_else.237(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @72, align 8
  ret ptr @72
}

define ptr @Core_function_is0_11(ptr %0) {
Core_function_is0_11:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Function, align 8
  %5 = call ptr @candy_builtin_equals(ptr %3, ptr %4)
  %6 = load ptr, ptr @"text_`function | typeIs Function` was not satisfied", align 8
  %7 = load ptr, ptr @"Core:function:is0:11:3", align 8
  %8 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %6, ptr %7)
  %9 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %10 = load ptr, ptr %9, align 8
  %11 = call ptr @candy_builtin_get_argument_count(ptr %10)
  %12 = load ptr, ptr @num_0, align 8
  %13 = call ptr @candy_builtin_equals(ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_lazyAnd_18_equals_then(ptr %0) {
Core_bool_lazyAnd_18_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_lazyAnd_18_equals_then.239, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_lazyAnd_18_equals_then.240, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_lazyAnd_18_equals_else.241, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_lazyAnd_18_equals_else.242, align 8
  %14 = load ptr, ptr @fun_Core_bool_lazyAnd_18_equals_then.240, align 8
  %15 = load ptr, ptr @fun_Core_bool_lazyAnd_18_equals_else.242, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_lazyAnd_18_equals_then.239(ptr %0) {
Core_bool_lazyAnd_18_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_lazyAnd_18_equals_else, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_lazyAnd_18_equals_else, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_bool_lazyAnd_18_equals_else, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_lazyAnd_18_equals_else(ptr %0) {
Core_bool_lazyAnd_18_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @73, align 8
  ret ptr @73
}

define ptr @Core_bool_lazyAnd_18_equals_else.241(ptr %0) {
Core_bool_lazyAnd_18_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected True, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @74, align 8
  ret ptr @74
}

define ptr @Core_bool_lazyAnd_18_equals_else.243(ptr %0) {
Core_bool_lazyAnd_18_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @75, align 8
  ret ptr @75
}

define ptr @Core_bool_lazyAnd_18_case-0_matched(ptr %0) {
Core_bool_lazyAnd_18_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Function, align 8
  %5 = call ptr @candy_builtin_equals(ptr %3, ptr %4)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_function_is0_11.245, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_function_is0_11.246, align 8
  %11 = load ptr, ptr @fun_Core_function_is0_11.246, align 8
  %12 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %13 = call ptr @Builtins__ifElse(ptr %5, ptr %11, ptr %12)
  %14 = load ptr, ptr @"text_`is0 body` was not satisfied", align 8
  %15 = load ptr, ptr @"Core:bool:lazyAnd:18:9", align 8
  %16 = call ptr @"anonymous_$generated__needs"(ptr %13, ptr %14, ptr %15)
  %17 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %18 = load ptr, ptr %17, align 8
  %19 = call ptr @candy_builtin_type_of(ptr %18)
  %20 = load ptr, ptr @tag_Function, align 8
  %21 = call ptr @candy_builtin_equals(ptr %19, ptr %20)
  %22 = load ptr, ptr @"text_`function | typeIs Function` was not satisfied", align 8
  %23 = load ptr, ptr @"Core:function:run:14", align 8
  %24 = call ptr @"anonymous_$generated__needs"(ptr %21, ptr %22, ptr %23)
  %25 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call ptr @candy_builtin_get_argument_count(ptr %26)
  %28 = load ptr, ptr @num_0, align 8
  %29 = call ptr @candy_builtin_equals(ptr %27, ptr %28)
  %30 = load ptr, ptr @"text_`function | \E2\9C\A8.getArgumentCount | equals 0` was not satisfied", align 8
  %31 = load ptr, ptr @"Core:function:run:14", align 8
  %32 = call ptr @"anonymous_$generated__needs"(ptr %29, ptr %30, ptr %31)
  %33 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = call ptr @get_candy_function_pointer(ptr %34)
  %36 = call ptr @get_candy_function_environment(ptr %34)
  %37 = call ptr (...) %35(ptr %36)
  %38 = call ptr @Core_bool_is(ptr %37)
  %39 = load ptr, ptr @"text_`b` didn't return a bool.", align 8
  %40 = call ptr @"anonymous_$generated__needs"(ptr %38, ptr %39, ptr null)
  ret ptr %37
}

define ptr @Core_function_is0_11.245(ptr %0) {
Core_function_is0_11:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Function, align 8
  %5 = call ptr @candy_builtin_equals(ptr %3, ptr %4)
  %6 = load ptr, ptr @"text_`function | typeIs Function` was not satisfied", align 8
  %7 = load ptr, ptr @"Core:function:is0:11:3", align 8
  %8 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %6, ptr %7)
  %9 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %10 = load ptr, ptr %9, align 8
  %11 = call ptr @candy_builtin_get_argument_count(ptr %10)
  %12 = load ptr, ptr @num_0, align 8
  %13 = call ptr @candy_builtin_equals(ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_lazyAnd_18_case-0_didNotMatch(ptr %0) {
Core_bool_lazyAnd_18_case-0_didNotMatch:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Tag, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_lazyAnd_18_equals_then.247, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_lazyAnd_18_equals_then.248, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_lazyAnd_18_equals_else.255, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_lazyAnd_18_equals_else.256, align 8
  %14 = load ptr, ptr @fun_Core_bool_lazyAnd_18_equals_then.248, align 8
  %15 = load ptr, ptr @fun_Core_bool_lazyAnd_18_equals_else.256, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  %17 = load ptr, ptr @num_0, align 8
  %18 = call ptr @candy_builtin_list_get(ptr %16, ptr %17)
  %19 = load ptr, ptr @tag_Match, align 8
  %20 = call ptr @candy_builtin_equals(ptr %18, ptr %19)
  %21 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %22 = load ptr, ptr @fun_Core_bool_lazyAnd_18_case-1_didNotMatch, align 8
  %23 = call ptr @candy_builtin_if_else(ptr %20, ptr %21, ptr %22)
  ret ptr %23
}

define ptr @Core_bool_lazyAnd_18_equals_then.247(ptr %0) {
Core_bool_lazyAnd_18_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_lazyAnd_18_equals_then.249, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_lazyAnd_18_equals_then.250, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_lazyAnd_18_equals_else.253, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_lazyAnd_18_equals_else.254, align 8
  %14 = load ptr, ptr @fun_Core_bool_lazyAnd_18_equals_then.250, align 8
  %15 = load ptr, ptr @fun_Core_bool_lazyAnd_18_equals_else.254, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_lazyAnd_18_equals_then.249(ptr %0) {
Core_bool_lazyAnd_18_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_lazyAnd_18_equals_else.251, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_lazyAnd_18_equals_else.252, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_bool_lazyAnd_18_equals_else.252, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_lazyAnd_18_equals_else.251(ptr %0) {
Core_bool_lazyAnd_18_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @76, align 8
  ret ptr @76
}

define ptr @Core_bool_lazyAnd_18_equals_else.253(ptr %0) {
Core_bool_lazyAnd_18_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected False, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @77, align 8
  ret ptr @77
}

define ptr @Core_bool_lazyAnd_18_equals_else.255(ptr %0) {
Core_bool_lazyAnd_18_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @78, align 8
  ret ptr @78
}

define ptr @Core_bool_lazyOr_18_case-1_didNotMatch() {
Core_bool_lazyOr_18_case-1_didNotMatch:
  %0 = load ptr, ptr @"text_No case matched the given expression.", align 8
  call void @candy_panic(ptr %0)
  unreachable
}

define ptr @Core_bool_lazyOr(ptr %0, ptr %1) {
Core_bool_lazyOr:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Tag, align 8
  %4 = call ptr @candy_builtin_equals(ptr %3, ptr %2)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %0, ptr %6, align 8
  %7 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.257, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %7, ptr @fun_Core_bool_is_1_equals_then.258, align 8
  %8 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %9 = getelementptr inbounds { ptr }, ptr %8, i32 0, i32 0
  store ptr %2, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.265, ptr %8, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_else.266, align 8
  %11 = load ptr, ptr @fun_Core_bool_is_1_equals_then.258, align 8
  %12 = load ptr, ptr @fun_Core_bool_is_1_equals_else.266, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %4, ptr %11, ptr %12)
  %14 = load ptr, ptr @num_0, align 8
  %15 = call ptr @candy_builtin_list_get(ptr %13, ptr %14)
  %16 = load ptr, ptr @tag_Match, align 8
  %17 = call ptr @candy_builtin_equals(ptr %15, ptr %16)
  %18 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %19 = getelementptr inbounds { ptr }, ptr %18, i32 0, i32 0
  store ptr %13, ptr %19, align 8
  %20 = call ptr @make_candy_function(ptr @Core_bool_is_1_isMatch_then.267, ptr %18, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %20, ptr @fun_Core_bool_is_1_isMatch_then.268, align 8
  %21 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %22 = getelementptr inbounds { ptr }, ptr %21, i32 0, i32 0
  store ptr %0, ptr %22, align 8
  %23 = call ptr @make_candy_function(ptr @Core_bool_is_1_isMatch_else.269, ptr %21, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %23, ptr @fun_Core_bool_is_1_isMatch_else.270, align 8
  %24 = load ptr, ptr @fun_Core_bool_is_1_isMatch_then.268, align 8
  %25 = load ptr, ptr @fun_Core_bool_is_1_isMatch_else.270, align 8
  %26 = call ptr @candy_builtin_if_else(ptr %17, ptr %24, ptr %25)
  %27 = load ptr, ptr @num_0, align 8
  %28 = call ptr @candy_builtin_list_get(ptr %26, ptr %27)
  %29 = load ptr, ptr @tag_Match, align 8
  %30 = call ptr @candy_builtin_equals(ptr %28, ptr %29)
  %31 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %32 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %33 = call ptr @candy_builtin_if_else(ptr %30, ptr %31, ptr %32)
  %34 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %35 = call ptr @"anonymous_$generated__needs"(ptr %33, ptr %34, ptr null)
  %36 = call ptr @candy_builtin_type_of(ptr %1)
  %37 = load ptr, ptr @tag_Function, align 8
  %38 = call ptr @candy_builtin_equals(ptr %36, ptr %37)
  %39 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %40 = getelementptr inbounds { ptr }, ptr %39, i32 0, i32 0
  store ptr %1, ptr %40, align 8
  %41 = call ptr @make_candy_function(ptr @Core_function_is0_11.281, ptr %39, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %41, ptr @fun_Core_function_is0_11.282, align 8
  %42 = load ptr, ptr @fun_Core_function_is0_11.282, align 8
  %43 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %44 = call ptr @Builtins__ifElse(ptr %38, ptr %42, ptr %43)
  %45 = load ptr, ptr @"text_`function.is0 b` was not satisfied", align 8
  %46 = call ptr @"anonymous_$generated__needs"(ptr %44, ptr %45, ptr null)
  %47 = call ptr @candy_builtin_type_of(ptr %0)
  %48 = load ptr, ptr @tag_Tag, align 8
  %49 = call ptr @candy_builtin_equals(ptr %48, ptr %47)
  %50 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %51 = getelementptr inbounds { ptr }, ptr %50, i32 0, i32 0
  store ptr %0, ptr %51, align 8
  %52 = call ptr @make_candy_function(ptr @Core_bool_lazyOr_18_equals_then, ptr %50, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %52, ptr @fun_Core_bool_lazyOr_18_equals_then, align 8
  %53 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %54 = getelementptr inbounds { ptr }, ptr %53, i32 0, i32 0
  store ptr %47, ptr %54, align 8
  %55 = call ptr @make_candy_function(ptr @Core_bool_lazyOr_18_equals_else.287, ptr %53, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %55, ptr @fun_Core_bool_lazyOr_18_equals_else.288, align 8
  %56 = load ptr, ptr @fun_Core_bool_lazyOr_18_equals_then, align 8
  %57 = load ptr, ptr @fun_Core_bool_lazyOr_18_equals_else.288, align 8
  %58 = call ptr @candy_builtin_if_else(ptr %49, ptr %56, ptr %57)
  %59 = load ptr, ptr @num_0, align 8
  %60 = call ptr @candy_builtin_list_get(ptr %58, ptr %59)
  %61 = load ptr, ptr @tag_Match, align 8
  %62 = call ptr @candy_builtin_equals(ptr %60, ptr %61)
  %63 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %64 = getelementptr inbounds { ptr, ptr }, ptr %63, i32 0, i32 0
  store ptr %1, ptr %64, align 8
  %65 = getelementptr inbounds { ptr, ptr }, ptr %63, i32 0, i32 1
  store ptr %0, ptr %65, align 8
  %66 = call ptr @make_candy_function(ptr @Core_bool_lazyOr_18_case-0_didNotMatch, ptr %63, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %66, ptr @fun_Core_bool_lazyOr_18_case-0_didNotMatch, align 8
  %67 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %68 = load ptr, ptr @fun_Core_bool_lazyOr_18_case-0_didNotMatch, align 8
  %69 = call ptr @candy_builtin_if_else(ptr %62, ptr %67, ptr %68)
  ret ptr %69
}

define ptr @Core_bool_is_1_equals_then.257(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.259, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_then.260, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.263, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_is_1_equals_else.264, align 8
  %14 = load ptr, ptr @fun_Core_bool_is_1_equals_then.260, align 8
  %15 = load ptr, ptr @fun_Core_bool_is_1_equals_else.264, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_is_1_equals_then.259(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.261, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_else.262, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_bool_is_1_equals_else.262, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_is_1_equals_else.261(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @79, align 8
  ret ptr @79
}

define ptr @Core_bool_is_1_equals_else.263(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected True, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @80, align 8
  ret ptr @80
}

define ptr @Core_bool_is_1_equals_else.265(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @81, align 8
  ret ptr @81
}

define ptr @Core_bool_is_1_isMatch_then.267(ptr %0) {
Core_bool_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_bool_is_1_isMatch_else.269(ptr %0) {
Core_bool_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Tag, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.271, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_then.272, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.279, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_is_1_equals_else.280, align 8
  %14 = load ptr, ptr @fun_Core_bool_is_1_equals_then.272, align 8
  %15 = load ptr, ptr @fun_Core_bool_is_1_equals_else.280, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_is_1_equals_then.271(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.273, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_then.274, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.277, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_is_1_equals_else.278, align 8
  %14 = load ptr, ptr @fun_Core_bool_is_1_equals_then.274, align 8
  %15 = load ptr, ptr @fun_Core_bool_is_1_equals_else.278, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_is_1_equals_then.273(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.275, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_else.276, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_bool_is_1_equals_else.276, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_is_1_equals_else.275(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @82, align 8
  ret ptr @82
}

define ptr @Core_bool_is_1_equals_else.277(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected False, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @83, align 8
  ret ptr @83
}

define ptr @Core_bool_is_1_equals_else.279(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @84, align 8
  ret ptr @84
}

define ptr @Core_function_is0_11.281(ptr %0) {
Core_function_is0_11:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Function, align 8
  %5 = call ptr @candy_builtin_equals(ptr %3, ptr %4)
  %6 = load ptr, ptr @"text_`function | typeIs Function` was not satisfied", align 8
  %7 = load ptr, ptr @"Core:function:is0:11:3", align 8
  %8 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %6, ptr %7)
  %9 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %10 = load ptr, ptr %9, align 8
  %11 = call ptr @candy_builtin_get_argument_count(ptr %10)
  %12 = load ptr, ptr @num_0, align 8
  %13 = call ptr @candy_builtin_equals(ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_lazyOr_18_equals_then(ptr %0) {
Core_bool_lazyOr_18_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_lazyOr_18_equals_then.283, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_lazyOr_18_equals_then.284, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_lazyOr_18_equals_else.285, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_lazyOr_18_equals_else.286, align 8
  %14 = load ptr, ptr @fun_Core_bool_lazyOr_18_equals_then.284, align 8
  %15 = load ptr, ptr @fun_Core_bool_lazyOr_18_equals_else.286, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_lazyOr_18_equals_then.283(ptr %0) {
Core_bool_lazyOr_18_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_lazyOr_18_equals_else, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_lazyOr_18_equals_else, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_bool_lazyOr_18_equals_else, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_lazyOr_18_equals_else(ptr %0) {
Core_bool_lazyOr_18_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @85, align 8
  ret ptr @85
}

define ptr @Core_bool_lazyOr_18_equals_else.285(ptr %0) {
Core_bool_lazyOr_18_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected True, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @86, align 8
  ret ptr @86
}

define ptr @Core_bool_lazyOr_18_equals_else.287(ptr %0) {
Core_bool_lazyOr_18_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @87, align 8
  ret ptr @87
}

define ptr @Core_bool_lazyOr_18_case-0_didNotMatch(ptr %0) {
Core_bool_lazyOr_18_case-0_didNotMatch:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Tag, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_lazyOr_18_equals_then.289, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_lazyOr_18_equals_then.290, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_lazyOr_18_equals_else.297, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_lazyOr_18_equals_else.298, align 8
  %14 = load ptr, ptr @fun_Core_bool_lazyOr_18_equals_then.290, align 8
  %15 = load ptr, ptr @fun_Core_bool_lazyOr_18_equals_else.298, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  %17 = load ptr, ptr @num_0, align 8
  %18 = call ptr @candy_builtin_list_get(ptr %16, ptr %17)
  %19 = load ptr, ptr @tag_Match, align 8
  %20 = call ptr @candy_builtin_equals(ptr %18, ptr %19)
  %21 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %22 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr inbounds { ptr }, ptr %21, i32 0, i32 0
  store ptr %23, ptr %24, align 8
  %25 = call ptr @make_candy_function(ptr @Core_bool_lazyOr_18_case-1_matched, ptr %21, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %25, ptr @fun_Core_bool_lazyOr_18_case-1_matched, align 8
  %26 = load ptr, ptr @fun_Core_bool_lazyOr_18_case-1_matched, align 8
  %27 = load ptr, ptr @fun_Core_bool_lazyOr_18_case-1_didNotMatch, align 8
  %28 = call ptr @candy_builtin_if_else(ptr %20, ptr %26, ptr %27)
  ret ptr %28
}

define ptr @Core_bool_lazyOr_18_equals_then.289(ptr %0) {
Core_bool_lazyOr_18_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_lazyOr_18_equals_then.291, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_lazyOr_18_equals_then.292, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_lazyOr_18_equals_else.295, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_lazyOr_18_equals_else.296, align 8
  %14 = load ptr, ptr @fun_Core_bool_lazyOr_18_equals_then.292, align 8
  %15 = load ptr, ptr @fun_Core_bool_lazyOr_18_equals_else.296, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_lazyOr_18_equals_then.291(ptr %0) {
Core_bool_lazyOr_18_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_lazyOr_18_equals_else.293, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_lazyOr_18_equals_else.294, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_bool_lazyOr_18_equals_else.294, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_lazyOr_18_equals_else.293(ptr %0) {
Core_bool_lazyOr_18_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @88, align 8
  ret ptr @88
}

define ptr @Core_bool_lazyOr_18_equals_else.295(ptr %0) {
Core_bool_lazyOr_18_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected False, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @89, align 8
  ret ptr @89
}

define ptr @Core_bool_lazyOr_18_equals_else.297(ptr %0) {
Core_bool_lazyOr_18_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @90, align 8
  ret ptr @90
}

define ptr @Core_bool_lazyOr_18_case-1_matched(ptr %0) {
Core_bool_lazyOr_18_case-1_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Function, align 8
  %5 = call ptr @candy_builtin_equals(ptr %3, ptr %4)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_function_is0_11.299, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_function_is0_11.300, align 8
  %11 = load ptr, ptr @fun_Core_function_is0_11.300, align 8
  %12 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %13 = call ptr @Builtins__ifElse(ptr %5, ptr %11, ptr %12)
  %14 = load ptr, ptr @"text_`is0 body` was not satisfied", align 8
  %15 = load ptr, ptr @"Core:bool:lazyOr:18:10", align 8
  %16 = call ptr @"anonymous_$generated__needs"(ptr %13, ptr %14, ptr %15)
  %17 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %18 = load ptr, ptr %17, align 8
  %19 = call ptr @candy_builtin_type_of(ptr %18)
  %20 = load ptr, ptr @tag_Function, align 8
  %21 = call ptr @candy_builtin_equals(ptr %19, ptr %20)
  %22 = load ptr, ptr @"text_`function | typeIs Function` was not satisfied", align 8
  %23 = load ptr, ptr @"Core:function:run:14", align 8
  %24 = call ptr @"anonymous_$generated__needs"(ptr %21, ptr %22, ptr %23)
  %25 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call ptr @candy_builtin_get_argument_count(ptr %26)
  %28 = load ptr, ptr @num_0, align 8
  %29 = call ptr @candy_builtin_equals(ptr %27, ptr %28)
  %30 = load ptr, ptr @"text_`function | \E2\9C\A8.getArgumentCount | equals 0` was not satisfied", align 8
  %31 = load ptr, ptr @"Core:function:run:14", align 8
  %32 = call ptr @"anonymous_$generated__needs"(ptr %29, ptr %30, ptr %31)
  %33 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = call ptr @get_candy_function_pointer(ptr %34)
  %36 = call ptr @get_candy_function_environment(ptr %34)
  %37 = call ptr (...) %35(ptr %36)
  %38 = call ptr @Core_bool_is(ptr %37)
  %39 = load ptr, ptr @"text_`b` didn't return a bool.", align 8
  %40 = call ptr @"anonymous_$generated__needs"(ptr %38, ptr %39, ptr null)
  ret ptr %37
}

define ptr @Core_function_is0_11.299(ptr %0) {
Core_function_is0_11:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Function, align 8
  %5 = call ptr @candy_builtin_equals(ptr %3, ptr %4)
  %6 = load ptr, ptr @"text_`function | typeIs Function` was not satisfied", align 8
  %7 = load ptr, ptr @"Core:function:is0:11:3", align 8
  %8 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %6, ptr %7)
  %9 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %10 = load ptr, ptr %9, align 8
  %11 = call ptr @candy_builtin_get_argument_count(ptr %10)
  %12 = load ptr, ptr @num_0, align 8
  %13 = call ptr @candy_builtin_equals(ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_or(ptr %0, ptr %1) {
Core_bool_or:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Tag, align 8
  %4 = call ptr @candy_builtin_equals(ptr %3, ptr %2)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %0, ptr %6, align 8
  %7 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.301, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %7, ptr @fun_Core_bool_is_1_equals_then.302, align 8
  %8 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %9 = getelementptr inbounds { ptr }, ptr %8, i32 0, i32 0
  store ptr %2, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.309, ptr %8, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_else.310, align 8
  %11 = load ptr, ptr @fun_Core_bool_is_1_equals_then.302, align 8
  %12 = load ptr, ptr @fun_Core_bool_is_1_equals_else.310, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %4, ptr %11, ptr %12)
  %14 = load ptr, ptr @num_0, align 8
  %15 = call ptr @candy_builtin_list_get(ptr %13, ptr %14)
  %16 = load ptr, ptr @tag_Match, align 8
  %17 = call ptr @candy_builtin_equals(ptr %15, ptr %16)
  %18 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %19 = getelementptr inbounds { ptr }, ptr %18, i32 0, i32 0
  store ptr %13, ptr %19, align 8
  %20 = call ptr @make_candy_function(ptr @Core_bool_is_1_isMatch_then.311, ptr %18, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %20, ptr @fun_Core_bool_is_1_isMatch_then.312, align 8
  %21 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %22 = getelementptr inbounds { ptr }, ptr %21, i32 0, i32 0
  store ptr %0, ptr %22, align 8
  %23 = call ptr @make_candy_function(ptr @Core_bool_is_1_isMatch_else.313, ptr %21, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %23, ptr @fun_Core_bool_is_1_isMatch_else.314, align 8
  %24 = load ptr, ptr @fun_Core_bool_is_1_isMatch_then.312, align 8
  %25 = load ptr, ptr @fun_Core_bool_is_1_isMatch_else.314, align 8
  %26 = call ptr @candy_builtin_if_else(ptr %17, ptr %24, ptr %25)
  %27 = load ptr, ptr @num_0, align 8
  %28 = call ptr @candy_builtin_list_get(ptr %26, ptr %27)
  %29 = load ptr, ptr @tag_Match, align 8
  %30 = call ptr @candy_builtin_equals(ptr %28, ptr %29)
  %31 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %32 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %33 = call ptr @candy_builtin_if_else(ptr %30, ptr %31, ptr %32)
  %34 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %35 = call ptr @"anonymous_$generated__needs"(ptr %33, ptr %34, ptr null)
  %36 = call ptr @candy_builtin_type_of(ptr %1)
  %37 = load ptr, ptr @tag_Tag, align 8
  %38 = call ptr @candy_builtin_equals(ptr %37, ptr %36)
  %39 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %40 = getelementptr inbounds { ptr }, ptr %39, i32 0, i32 0
  store ptr %1, ptr %40, align 8
  %41 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.325, ptr %39, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %41, ptr @fun_Core_bool_is_1_equals_then.326, align 8
  %42 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %43 = getelementptr inbounds { ptr }, ptr %42, i32 0, i32 0
  store ptr %36, ptr %43, align 8
  %44 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.333, ptr %42, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %44, ptr @fun_Core_bool_is_1_equals_else.334, align 8
  %45 = load ptr, ptr @fun_Core_bool_is_1_equals_then.326, align 8
  %46 = load ptr, ptr @fun_Core_bool_is_1_equals_else.334, align 8
  %47 = call ptr @candy_builtin_if_else(ptr %38, ptr %45, ptr %46)
  %48 = load ptr, ptr @num_0, align 8
  %49 = call ptr @candy_builtin_list_get(ptr %47, ptr %48)
  %50 = load ptr, ptr @tag_Match, align 8
  %51 = call ptr @candy_builtin_equals(ptr %49, ptr %50)
  %52 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %53 = getelementptr inbounds { ptr }, ptr %52, i32 0, i32 0
  store ptr %47, ptr %53, align 8
  %54 = call ptr @make_candy_function(ptr @Core_bool_is_1_isMatch_then.335, ptr %52, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %54, ptr @fun_Core_bool_is_1_isMatch_then.336, align 8
  %55 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %56 = getelementptr inbounds { ptr }, ptr %55, i32 0, i32 0
  store ptr %1, ptr %56, align 8
  %57 = call ptr @make_candy_function(ptr @Core_bool_is_1_isMatch_else.337, ptr %55, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %57, ptr @fun_Core_bool_is_1_isMatch_else.338, align 8
  %58 = load ptr, ptr @fun_Core_bool_is_1_isMatch_then.336, align 8
  %59 = load ptr, ptr @fun_Core_bool_is_1_isMatch_else.338, align 8
  %60 = call ptr @candy_builtin_if_else(ptr %51, ptr %58, ptr %59)
  %61 = load ptr, ptr @num_0, align 8
  %62 = call ptr @candy_builtin_list_get(ptr %60, ptr %61)
  %63 = load ptr, ptr @tag_Match, align 8
  %64 = call ptr @candy_builtin_equals(ptr %62, ptr %63)
  %65 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %66 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %67 = call ptr @candy_builtin_if_else(ptr %64, ptr %65, ptr %66)
  %68 = load ptr, ptr @"text_`is b` was not satisfied", align 8
  %69 = call ptr @"anonymous_$generated__needs"(ptr %67, ptr %68, ptr null)
  %70 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %71 = getelementptr inbounds { ptr }, ptr %70, i32 0, i32 0
  store ptr %1, ptr %71, align 8
  %72 = call ptr @make_candy_function(ptr @Core_bool_or_12, ptr %70, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %72, ptr @fun_Core_bool_or_12, align 8
  %73 = load ptr, ptr @fun_Core_bool_or_12, align 8
  %74 = call ptr @Core_bool_lazyOr(ptr %0, ptr %73)
  ret ptr %74
}

define ptr @Core_bool_is_1_equals_then.301(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.303, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_then.304, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.307, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_is_1_equals_else.308, align 8
  %14 = load ptr, ptr @fun_Core_bool_is_1_equals_then.304, align 8
  %15 = load ptr, ptr @fun_Core_bool_is_1_equals_else.308, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_is_1_equals_then.303(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.305, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_else.306, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_bool_is_1_equals_else.306, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_is_1_equals_else.305(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @91, align 8
  ret ptr @91
}

define ptr @Core_bool_is_1_equals_else.307(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected True, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @92, align 8
  ret ptr @92
}

define ptr @Core_bool_is_1_equals_else.309(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @93, align 8
  ret ptr @93
}

define ptr @Core_bool_is_1_isMatch_then.311(ptr %0) {
Core_bool_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_bool_is_1_isMatch_else.313(ptr %0) {
Core_bool_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Tag, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.315, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_then.316, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.323, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_is_1_equals_else.324, align 8
  %14 = load ptr, ptr @fun_Core_bool_is_1_equals_then.316, align 8
  %15 = load ptr, ptr @fun_Core_bool_is_1_equals_else.324, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_is_1_equals_then.315(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.317, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_then.318, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.321, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_is_1_equals_else.322, align 8
  %14 = load ptr, ptr @fun_Core_bool_is_1_equals_then.318, align 8
  %15 = load ptr, ptr @fun_Core_bool_is_1_equals_else.322, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_is_1_equals_then.317(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.319, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_else.320, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_bool_is_1_equals_else.320, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_is_1_equals_else.319(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @94, align 8
  ret ptr @94
}

define ptr @Core_bool_is_1_equals_else.321(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected False, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @95, align 8
  ret ptr @95
}

define ptr @Core_bool_is_1_equals_else.323(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @96, align 8
  ret ptr @96
}

define ptr @Core_bool_is_1_equals_then.325(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.327, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_then.328, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.331, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_is_1_equals_else.332, align 8
  %14 = load ptr, ptr @fun_Core_bool_is_1_equals_then.328, align 8
  %15 = load ptr, ptr @fun_Core_bool_is_1_equals_else.332, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_is_1_equals_then.327(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.329, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_else.330, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_bool_is_1_equals_else.330, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_is_1_equals_else.329(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @97, align 8
  ret ptr @97
}

define ptr @Core_bool_is_1_equals_else.331(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected True, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @98, align 8
  ret ptr @98
}

define ptr @Core_bool_is_1_equals_else.333(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @99, align 8
  ret ptr @99
}

define ptr @Core_bool_is_1_isMatch_then.335(ptr %0) {
Core_bool_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_bool_is_1_isMatch_else.337(ptr %0) {
Core_bool_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Tag, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.339, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_then.340, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.347, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_is_1_equals_else.348, align 8
  %14 = load ptr, ptr @fun_Core_bool_is_1_equals_then.340, align 8
  %15 = load ptr, ptr @fun_Core_bool_is_1_equals_else.348, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_is_1_equals_then.339(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.341, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_then.342, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.345, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_is_1_equals_else.346, align 8
  %14 = load ptr, ptr @fun_Core_bool_is_1_equals_then.342, align 8
  %15 = load ptr, ptr @fun_Core_bool_is_1_equals_else.346, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_is_1_equals_then.341(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.343, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_else.344, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_bool_is_1_equals_else.344, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_is_1_equals_else.343(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @100, align 8
  ret ptr @100
}

define ptr @Core_bool_is_1_equals_else.345(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected False, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @101, align 8
  ret ptr @101
}

define ptr @Core_bool_is_1_equals_else.347(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @102, align 8
  ret ptr @102
}

define ptr @Core_bool_or_12(ptr %0) {
Core_bool_or_12:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_bool_implies(ptr %0, ptr %1) {
Core_bool_implies:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Tag, align 8
  %4 = call ptr @candy_builtin_equals(ptr %3, ptr %2)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %0, ptr %6, align 8
  %7 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.349, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %7, ptr @fun_Core_bool_is_1_equals_then.350, align 8
  %8 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %9 = getelementptr inbounds { ptr }, ptr %8, i32 0, i32 0
  store ptr %2, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.357, ptr %8, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_else.358, align 8
  %11 = load ptr, ptr @fun_Core_bool_is_1_equals_then.350, align 8
  %12 = load ptr, ptr @fun_Core_bool_is_1_equals_else.358, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %4, ptr %11, ptr %12)
  %14 = load ptr, ptr @num_0, align 8
  %15 = call ptr @candy_builtin_list_get(ptr %13, ptr %14)
  %16 = load ptr, ptr @tag_Match, align 8
  %17 = call ptr @candy_builtin_equals(ptr %15, ptr %16)
  %18 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %19 = getelementptr inbounds { ptr }, ptr %18, i32 0, i32 0
  store ptr %13, ptr %19, align 8
  %20 = call ptr @make_candy_function(ptr @Core_bool_is_1_isMatch_then.359, ptr %18, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %20, ptr @fun_Core_bool_is_1_isMatch_then.360, align 8
  %21 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %22 = getelementptr inbounds { ptr }, ptr %21, i32 0, i32 0
  store ptr %0, ptr %22, align 8
  %23 = call ptr @make_candy_function(ptr @Core_bool_is_1_isMatch_else.361, ptr %21, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %23, ptr @fun_Core_bool_is_1_isMatch_else.362, align 8
  %24 = load ptr, ptr @fun_Core_bool_is_1_isMatch_then.360, align 8
  %25 = load ptr, ptr @fun_Core_bool_is_1_isMatch_else.362, align 8
  %26 = call ptr @candy_builtin_if_else(ptr %17, ptr %24, ptr %25)
  %27 = load ptr, ptr @num_0, align 8
  %28 = call ptr @candy_builtin_list_get(ptr %26, ptr %27)
  %29 = load ptr, ptr @tag_Match, align 8
  %30 = call ptr @candy_builtin_equals(ptr %28, ptr %29)
  %31 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %32 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %33 = call ptr @candy_builtin_if_else(ptr %30, ptr %31, ptr %32)
  %34 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %35 = call ptr @"anonymous_$generated__needs"(ptr %33, ptr %34, ptr null)
  %36 = call ptr @candy_builtin_type_of(ptr %1)
  %37 = load ptr, ptr @tag_Tag, align 8
  %38 = call ptr @candy_builtin_equals(ptr %37, ptr %36)
  %39 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %40 = getelementptr inbounds { ptr }, ptr %39, i32 0, i32 0
  store ptr %1, ptr %40, align 8
  %41 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.373, ptr %39, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %41, ptr @fun_Core_bool_is_1_equals_then.374, align 8
  %42 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %43 = getelementptr inbounds { ptr }, ptr %42, i32 0, i32 0
  store ptr %36, ptr %43, align 8
  %44 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.381, ptr %42, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %44, ptr @fun_Core_bool_is_1_equals_else.382, align 8
  %45 = load ptr, ptr @fun_Core_bool_is_1_equals_then.374, align 8
  %46 = load ptr, ptr @fun_Core_bool_is_1_equals_else.382, align 8
  %47 = call ptr @candy_builtin_if_else(ptr %38, ptr %45, ptr %46)
  %48 = load ptr, ptr @num_0, align 8
  %49 = call ptr @candy_builtin_list_get(ptr %47, ptr %48)
  %50 = load ptr, ptr @tag_Match, align 8
  %51 = call ptr @candy_builtin_equals(ptr %49, ptr %50)
  %52 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %53 = getelementptr inbounds { ptr }, ptr %52, i32 0, i32 0
  store ptr %47, ptr %53, align 8
  %54 = call ptr @make_candy_function(ptr @Core_bool_is_1_isMatch_then.383, ptr %52, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %54, ptr @fun_Core_bool_is_1_isMatch_then.384, align 8
  %55 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %56 = getelementptr inbounds { ptr }, ptr %55, i32 0, i32 0
  store ptr %1, ptr %56, align 8
  %57 = call ptr @make_candy_function(ptr @Core_bool_is_1_isMatch_else.385, ptr %55, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %57, ptr @fun_Core_bool_is_1_isMatch_else.386, align 8
  %58 = load ptr, ptr @fun_Core_bool_is_1_isMatch_then.384, align 8
  %59 = load ptr, ptr @fun_Core_bool_is_1_isMatch_else.386, align 8
  %60 = call ptr @candy_builtin_if_else(ptr %51, ptr %58, ptr %59)
  %61 = load ptr, ptr @num_0, align 8
  %62 = call ptr @candy_builtin_list_get(ptr %60, ptr %61)
  %63 = load ptr, ptr @tag_Match, align 8
  %64 = call ptr @candy_builtin_equals(ptr %62, ptr %63)
  %65 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %66 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %67 = call ptr @candy_builtin_if_else(ptr %64, ptr %65, ptr %66)
  %68 = load ptr, ptr @"text_`is b` was not satisfied", align 8
  %69 = call ptr @"anonymous_$generated__needs"(ptr %67, ptr %68, ptr null)
  %70 = load ptr, ptr @fun_Core_bool_is_1_equals_then.350, align 8
  %71 = load ptr, ptr @fun_Core_bool_is_1_equals_else.358, align 8
  %72 = call ptr @candy_builtin_if_else(ptr %4, ptr %70, ptr %71)
  %73 = load ptr, ptr @num_0, align 8
  %74 = call ptr @candy_builtin_list_get(ptr %72, ptr %73)
  %75 = load ptr, ptr @tag_Match, align 8
  %76 = call ptr @candy_builtin_equals(ptr %74, ptr %75)
  %77 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %78 = getelementptr inbounds { ptr }, ptr %77, i32 0, i32 0
  store ptr %72, ptr %78, align 8
  %79 = call ptr @make_candy_function(ptr @Core_bool_is_1_isMatch_then.397, ptr %77, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %79, ptr @fun_Core_bool_is_1_isMatch_then.398, align 8
  %80 = load ptr, ptr @fun_Core_bool_is_1_isMatch_then.398, align 8
  %81 = load ptr, ptr @fun_Core_bool_is_1_isMatch_else.362, align 8
  %82 = call ptr @candy_builtin_if_else(ptr %76, ptr %80, ptr %81)
  %83 = load ptr, ptr @num_0, align 8
  %84 = call ptr @candy_builtin_list_get(ptr %82, ptr %83)
  %85 = load ptr, ptr @tag_Match, align 8
  %86 = call ptr @candy_builtin_equals(ptr %84, ptr %85)
  %87 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %88 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %89 = call ptr @candy_builtin_if_else(ptr %86, ptr %87, ptr %88)
  %90 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  %91 = load ptr, ptr @"Core:bool:implies:12", align 8
  %92 = call ptr @"anonymous_$generated__needs"(ptr %89, ptr %90, ptr %91)
  %93 = call ptr @candy_builtin_type_of(ptr %0)
  %94 = load ptr, ptr @tag_Tag, align 8
  %95 = call ptr @candy_builtin_equals(ptr %94, ptr %93)
  %96 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %97 = getelementptr inbounds { ptr }, ptr %96, i32 0, i32 0
  store ptr %0, ptr %97, align 8
  %98 = call ptr @make_candy_function(ptr @Core_bool_not_6_equals_then.399, ptr %96, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %98, ptr @fun_Core_bool_not_6_equals_then.400, align 8
  %99 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %100 = getelementptr inbounds { ptr }, ptr %99, i32 0, i32 0
  store ptr %93, ptr %100, align 8
  %101 = call ptr @make_candy_function(ptr @Core_bool_not_6_equals_else.407, ptr %99, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %101, ptr @fun_Core_bool_not_6_equals_else.408, align 8
  %102 = load ptr, ptr @fun_Core_bool_not_6_equals_then.400, align 8
  %103 = load ptr, ptr @fun_Core_bool_not_6_equals_else.408, align 8
  %104 = call ptr @candy_builtin_if_else(ptr %95, ptr %102, ptr %103)
  %105 = load ptr, ptr @num_0, align 8
  %106 = call ptr @candy_builtin_list_get(ptr %104, ptr %105)
  %107 = load ptr, ptr @tag_Match, align 8
  %108 = call ptr @candy_builtin_equals(ptr %106, ptr %107)
  %109 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %110 = getelementptr inbounds { ptr }, ptr %109, i32 0, i32 0
  store ptr %0, ptr %110, align 8
  %111 = call ptr @make_candy_function(ptr @Core_bool_not_6_case-0_didNotMatch.409, ptr %109, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %111, ptr @fun_Core_bool_not_6_case-0_didNotMatch.410, align 8
  %112 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %113 = load ptr, ptr @fun_Core_bool_not_6_case-0_didNotMatch.410, align 8
  %114 = call ptr @candy_builtin_if_else(ptr %108, ptr %112, ptr %113)
  %115 = call ptr @Core_bool_or(ptr %114, ptr %1)
  ret ptr %115
}

define ptr @Core_bool_is_1_equals_then.349(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.351, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_then.352, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.355, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_is_1_equals_else.356, align 8
  %14 = load ptr, ptr @fun_Core_bool_is_1_equals_then.352, align 8
  %15 = load ptr, ptr @fun_Core_bool_is_1_equals_else.356, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_is_1_equals_then.351(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.353, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_else.354, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_bool_is_1_equals_else.354, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_is_1_equals_else.353(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @103, align 8
  ret ptr @103
}

define ptr @Core_bool_is_1_equals_else.355(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected True, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @104, align 8
  ret ptr @104
}

define ptr @Core_bool_is_1_equals_else.357(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @105, align 8
  ret ptr @105
}

define ptr @Core_bool_is_1_isMatch_then.359(ptr %0) {
Core_bool_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_bool_is_1_isMatch_else.361(ptr %0) {
Core_bool_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Tag, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.363, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_then.364, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.371, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_is_1_equals_else.372, align 8
  %14 = load ptr, ptr @fun_Core_bool_is_1_equals_then.364, align 8
  %15 = load ptr, ptr @fun_Core_bool_is_1_equals_else.372, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_is_1_equals_then.363(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.365, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_then.366, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.369, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_is_1_equals_else.370, align 8
  %14 = load ptr, ptr @fun_Core_bool_is_1_equals_then.366, align 8
  %15 = load ptr, ptr @fun_Core_bool_is_1_equals_else.370, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_is_1_equals_then.365(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.367, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_else.368, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_bool_is_1_equals_else.368, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_is_1_equals_else.367(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @106, align 8
  ret ptr @106
}

define ptr @Core_bool_is_1_equals_else.369(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected False, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @107, align 8
  ret ptr @107
}

define ptr @Core_bool_is_1_equals_else.371(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @108, align 8
  ret ptr @108
}

define ptr @Core_bool_is_1_equals_then.373(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.375, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_then.376, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.379, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_is_1_equals_else.380, align 8
  %14 = load ptr, ptr @fun_Core_bool_is_1_equals_then.376, align 8
  %15 = load ptr, ptr @fun_Core_bool_is_1_equals_else.380, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_is_1_equals_then.375(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.377, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_else.378, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_bool_is_1_equals_else.378, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_is_1_equals_else.377(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @109, align 8
  ret ptr @109
}

define ptr @Core_bool_is_1_equals_else.379(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected True, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @110, align 8
  ret ptr @110
}

define ptr @Core_bool_is_1_equals_else.381(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @111, align 8
  ret ptr @111
}

define ptr @Core_bool_is_1_isMatch_then.383(ptr %0) {
Core_bool_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_bool_is_1_isMatch_else.385(ptr %0) {
Core_bool_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Tag, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.387, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_then.388, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.395, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_is_1_equals_else.396, align 8
  %14 = load ptr, ptr @fun_Core_bool_is_1_equals_then.388, align 8
  %15 = load ptr, ptr @fun_Core_bool_is_1_equals_else.396, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_is_1_equals_then.387(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_then.389, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_then.390, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.393, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_is_1_equals_else.394, align 8
  %14 = load ptr, ptr @fun_Core_bool_is_1_equals_then.390, align 8
  %15 = load ptr, ptr @fun_Core_bool_is_1_equals_else.394, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_is_1_equals_then.389(ptr %0) {
Core_bool_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_is_1_equals_else.391, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_is_1_equals_else.392, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_bool_is_1_equals_else.392, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_is_1_equals_else.391(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @112, align 8
  ret ptr @112
}

define ptr @Core_bool_is_1_equals_else.393(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected False, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @113, align 8
  ret ptr @113
}

define ptr @Core_bool_is_1_equals_else.395(ptr %0) {
Core_bool_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @114, align 8
  ret ptr @114
}

define ptr @Core_bool_is_1_isMatch_then.397(ptr %0) {
Core_bool_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_bool_not_6_equals_then.399(ptr %0) {
Core_bool_not_6_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_not_6_equals_then.401, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_not_6_equals_then.402, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_not_6_equals_else.405, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_not_6_equals_else.406, align 8
  %14 = load ptr, ptr @fun_Core_bool_not_6_equals_then.402, align 8
  %15 = load ptr, ptr @fun_Core_bool_not_6_equals_else.406, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_not_6_equals_then.401(ptr %0) {
Core_bool_not_6_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_not_6_equals_else.403, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_not_6_equals_else.404, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_bool_not_6_equals_else.404, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_not_6_equals_else.403(ptr %0) {
Core_bool_not_6_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @115, align 8
  ret ptr @115
}

define ptr @Core_bool_not_6_equals_else.405(ptr %0) {
Core_bool_not_6_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected True, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @116, align 8
  ret ptr @116
}

define ptr @Core_bool_not_6_equals_else.407(ptr %0) {
Core_bool_not_6_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @117, align 8
  ret ptr @117
}

define ptr @Core_bool_not_6_case-0_didNotMatch.409(ptr %0) {
Core_bool_not_6_case-0_didNotMatch:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Tag, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_not_6_equals_then.411, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_not_6_equals_then.412, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_not_6_equals_else.419, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_not_6_equals_else.420, align 8
  %14 = load ptr, ptr @fun_Core_bool_not_6_equals_then.412, align 8
  %15 = load ptr, ptr @fun_Core_bool_not_6_equals_else.420, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  %17 = load ptr, ptr @num_0, align 8
  %18 = call ptr @candy_builtin_list_get(ptr %16, ptr %17)
  %19 = load ptr, ptr @tag_Match, align 8
  %20 = call ptr @candy_builtin_equals(ptr %18, ptr %19)
  %21 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %22 = load ptr, ptr @fun_Core_bool_not_6_case-1_didNotMatch, align 8
  %23 = call ptr @candy_builtin_if_else(ptr %20, ptr %21, ptr %22)
  ret ptr %23
}

define ptr @Core_bool_not_6_equals_then.411(ptr %0) {
Core_bool_not_6_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_not_6_equals_then.413, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_not_6_equals_then.414, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_bool_not_6_equals_else.417, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_bool_not_6_equals_else.418, align 8
  %14 = load ptr, ptr @fun_Core_bool_not_6_equals_then.414, align 8
  %15 = load ptr, ptr @fun_Core_bool_not_6_equals_else.418, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_bool_not_6_equals_then.413(ptr %0) {
Core_bool_not_6_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_bool_not_6_equals_else.415, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_bool_not_6_equals_else.416, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_bool_not_6_equals_else.416, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_bool_not_6_equals_else.415(ptr %0) {
Core_bool_not_6_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @118, align 8
  ret ptr @118
}

define ptr @Core_bool_not_6_equals_else.417(ptr %0) {
Core_bool_not_6_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected False, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @119, align 8
  ret ptr @119
}

define ptr @Core_bool_not_6_equals_else.419(ptr %0) {
Core_bool_not_6_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @120, align 8
  ret ptr @120
}

define ptr @"anonymous_$generated__needs_isConditionBool_else.421"() {
"anonymous_$generated__needs_isConditionBool_else":
  %0 = load ptr, ptr @"text_The `condition` must be either `True` or `False`.", align 8
  call void @candy_panic(ptr %0)
  unreachable
}

define ptr @Core_check_check(ptr %0) {
Core_check_check:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Tag, align 8
  %3 = call ptr @candy_builtin_equals(ptr %2, ptr %1)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %5 = getelementptr inbounds { ptr }, ptr %4, i32 0, i32 0
  store ptr %0, ptr %5, align 8
  %6 = call ptr @make_candy_function(ptr @Core_check_check_1_equals_then, ptr %4, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %6, ptr @fun_Core_check_check_1_equals_then, align 8
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %8 = getelementptr inbounds { ptr }, ptr %7, i32 0, i32 0
  store ptr %1, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_check_check_1_equals_else.427, ptr %7, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_check_check_1_equals_else.428, align 8
  %10 = load ptr, ptr @fun_Core_check_check_1_equals_then, align 8
  %11 = load ptr, ptr @fun_Core_check_check_1_equals_else.428, align 8
  %12 = call ptr @candy_builtin_if_else(ptr %3, ptr %10, ptr %11)
  %13 = load ptr, ptr @num_0, align 8
  %14 = call ptr @candy_builtin_list_get(ptr %12, ptr %13)
  %15 = load ptr, ptr @tag_Match, align 8
  %16 = call ptr @candy_builtin_equals(ptr %14, ptr %15)
  %17 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %18 = getelementptr inbounds { ptr }, ptr %17, i32 0, i32 0
  store ptr %12, ptr %18, align 8
  %19 = call ptr @make_candy_function(ptr @Core_check_check_1_isMatch_then, ptr %17, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %19, ptr @fun_Core_check_check_1_isMatch_then, align 8
  %20 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %21 = getelementptr inbounds { ptr }, ptr %20, i32 0, i32 0
  store ptr %0, ptr %21, align 8
  %22 = call ptr @make_candy_function(ptr @Core_check_check_1_isMatch_else, ptr %20, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %22, ptr @fun_Core_check_check_1_isMatch_else, align 8
  %23 = load ptr, ptr @fun_Core_check_check_1_isMatch_then, align 8
  %24 = load ptr, ptr @fun_Core_check_check_1_isMatch_else, align 8
  %25 = call ptr @candy_builtin_if_else(ptr %16, ptr %23, ptr %24)
  %26 = load ptr, ptr @num_0, align 8
  %27 = call ptr @candy_builtin_list_get(ptr %25, ptr %26)
  %28 = load ptr, ptr @tag_Match, align 8
  %29 = call ptr @candy_builtin_equals(ptr %27, ptr %28)
  %30 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %31 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %32 = call ptr @candy_builtin_if_else(ptr %29, ptr %30, ptr %31)
  %33 = load ptr, ptr @"text_`isConditionBool` was not satisfied", align 8
  %34 = call ptr @"anonymous_$generated__needs"(ptr %32, ptr %33, ptr null)
  %35 = load ptr, ptr @tag_True, align 8
  %36 = call ptr @candy_builtin_equals(ptr %0, ptr %35)
  %37 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %38 = getelementptr inbounds { ptr }, ptr %37, i32 0, i32 0
  store ptr %0, ptr %38, align 8
  %39 = call ptr @make_candy_function(ptr @"anonymous_$generated__needs_isConditionTrue_else.439", ptr %37, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %39, ptr @"fun_anonymous_$generated__needs_isConditionTrue_else.440", align 8
  %40 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_matched, Builtins__isLessThanOrEqualTo_19_case-0_matched, Builtins__isNonNegative_13_case-0_matched, Builtins__not_1_case-1_matched, Core_bool_is_1_case-0_matched, Core_bool_lazyOr_18_case-0_matched, Core_bool_not_6_case-1_matched, Core_check_check_1_case-0_matched, Core_result_is_1_case-0_matched, anonymous_$generated__needs_isConditionTrue_then", align 8
  %41 = load ptr, ptr @"fun_anonymous_$generated__needs_isConditionTrue_else.440", align 8
  %42 = call ptr @candy_builtin_if_else(ptr %36, ptr %40, ptr %41)
  %43 = load ptr, ptr @"fun_Core__19_isMatch_then, Core__30_isMatch_then, Core__41_isMatch_then, Core__102_isMatch_then, Core__153_isMatch_then, Core__164_isMatch_then, Core_bool_9_isMatch_then, Core_check_9_isMatch_then, Core_controlFlow_if_27, Core_controlFlow_29_isMatch_then, Core_controlFlow_50_isMatch_then, Core_fixedDecimal_19_isMatch_then, Core_fixedDecimal_30_isMatch_then, Core_fixedDecimal_41_isMatch_then, Core_fixedDecimal_52_isMatch_then, Core_fixedDecimal_103_isMatch_then, Core_function_19_isMatch_then, Core_int_pow_21_1_isMatch_then, Core_int_29_isMatch_then, Core_int_40_isMatch_then, Core_iterable_generateWithState_14_0_11_1_isMatch_then, Core_iterable_map_19_11_1_isMatch_then, Core_iterable_reduceLeft_38_1_isMatch_then, Core_iterable_take_33_1_isMatch_then, Core_iterable_takeWhile_2_11_1_isMatch_then, Core_iterable_withIndex_11_1_isMatch_then, Core_iterable_withIndex_11_14_1_isMatch_then, Core_iterable_19_isMatch_then, Core_iterable_30_isMatch_then, Core_iterable_82_11_1_isMatch_then, Core_iterable_84_2_11_1_isMatch_then, Core_iterable_84_2_11_7_15_1_isMatch_then, Core_list_generate_59_1_isMatch_then, Core_list_29_isMatch_then, Core_list_40_isMatch_then, Core_result_19_isMatch_then, Core_result_30_isMatch_then, Core_struct_19_isMatch_then, Core_tag_29_isMatch_then, Core_text_29_isMatch_then, Core_text_40_isMatch_then, Core_type_19_isMatch_then, Examples_sqrt_then, Examples_sqrt_19_isMatch_then, anonymous_$generated__needs_condition_then, anonymous_$generated__needs_isConditionBool_then, anonymous_$generated__needs_isReasonText_then", align 8
  %44 = load ptr, ptr @"fun_anonymous_$generated__needs_isConditionBool_else.422", align 8
  %45 = call ptr @candy_builtin_if_else(ptr %42, ptr %43, ptr %44)
  %46 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i32))
  %47 = call ptr @make_candy_function(ptr @"anonymous_$generated__needs_condition_else.441", ptr %46, i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  store ptr %47, ptr @"fun_anonymous_$generated__needs_condition_else.442", align 8
  %48 = load ptr, ptr @"fun_Core__19_isMatch_then, Core__30_isMatch_then, Core__41_isMatch_then, Core__102_isMatch_then, Core__153_isMatch_then, Core__164_isMatch_then, Core_bool_9_isMatch_then, Core_check_9_isMatch_then, Core_controlFlow_if_27, Core_controlFlow_29_isMatch_then, Core_controlFlow_50_isMatch_then, Core_fixedDecimal_19_isMatch_then, Core_fixedDecimal_30_isMatch_then, Core_fixedDecimal_41_isMatch_then, Core_fixedDecimal_52_isMatch_then, Core_fixedDecimal_103_isMatch_then, Core_function_19_isMatch_then, Core_int_pow_21_1_isMatch_then, Core_int_29_isMatch_then, Core_int_40_isMatch_then, Core_iterable_generateWithState_14_0_11_1_isMatch_then, Core_iterable_map_19_11_1_isMatch_then, Core_iterable_reduceLeft_38_1_isMatch_then, Core_iterable_take_33_1_isMatch_then, Core_iterable_takeWhile_2_11_1_isMatch_then, Core_iterable_withIndex_11_1_isMatch_then, Core_iterable_withIndex_11_14_1_isMatch_then, Core_iterable_19_isMatch_then, Core_iterable_30_isMatch_then, Core_iterable_82_11_1_isMatch_then, Core_iterable_84_2_11_1_isMatch_then, Core_iterable_84_2_11_7_15_1_isMatch_then, Core_list_generate_59_1_isMatch_then, Core_list_29_isMatch_then, Core_list_40_isMatch_then, Core_result_19_isMatch_then, Core_result_30_isMatch_then, Core_struct_19_isMatch_then, Core_tag_29_isMatch_then, Core_text_29_isMatch_then, Core_text_40_isMatch_then, Core_type_19_isMatch_then, Examples_sqrt_then, Examples_sqrt_19_isMatch_then, anonymous_$generated__needs_condition_then, anonymous_$generated__needs_isConditionBool_then, anonymous_$generated__needs_isReasonText_then", align 8
  %49 = load ptr, ptr @"fun_anonymous_$generated__needs_condition_else.442", align 8
  %50 = call ptr @candy_builtin_if_else(ptr %0, ptr %48, ptr %49)
  ret ptr %50
}

define ptr @Core_check_check_1_equals_then(ptr %0) {
Core_check_check_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_check_check_1_equals_then.423, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_check_check_1_equals_then.424, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_check_check_1_equals_else.425, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_check_check_1_equals_else.426, align 8
  %14 = load ptr, ptr @fun_Core_check_check_1_equals_then.424, align 8
  %15 = load ptr, ptr @fun_Core_check_check_1_equals_else.426, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_check_check_1_equals_then.423(ptr %0) {
Core_check_check_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_check_check_1_equals_else, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_check_check_1_equals_else, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_check_check_1_equals_else, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_check_check_1_equals_else(ptr %0) {
Core_check_check_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @121, align 8
  ret ptr @121
}

define ptr @Core_check_check_1_equals_else.425(ptr %0) {
Core_check_check_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected True, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @122, align 8
  ret ptr @122
}

define ptr @Core_check_check_1_equals_else.427(ptr %0) {
Core_check_check_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @123, align 8
  ret ptr @123
}

define ptr @Core_check_check_1_isMatch_then(ptr %0) {
Core_check_check_1_isMatch_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_check_check_1_isMatch_else(ptr %0) {
Core_check_check_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Tag, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_check_check_1_equals_then.429, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_check_check_1_equals_then.430, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_check_check_1_equals_else.437, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_check_check_1_equals_else.438, align 8
  %14 = load ptr, ptr @fun_Core_check_check_1_equals_then.430, align 8
  %15 = load ptr, ptr @fun_Core_check_check_1_equals_else.438, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_check_check_1_equals_then.429(ptr %0) {
Core_check_check_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_check_check_1_equals_then.431, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_check_check_1_equals_then.432, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_check_check_1_equals_else.435, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_check_check_1_equals_else.436, align 8
  %14 = load ptr, ptr @fun_Core_check_check_1_equals_then.432, align 8
  %15 = load ptr, ptr @fun_Core_check_check_1_equals_else.436, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_check_check_1_equals_then.431(ptr %0) {
Core_check_check_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_False, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_check_check_1_equals_else.433, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_check_check_1_equals_else.434, align 8
  %11 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %12 = load ptr, ptr @fun_Core_check_check_1_equals_else.434, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_check_check_1_equals_else.433(ptr %0) {
Core_check_check_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_to_debug_text(ptr %3)
  %5 = load ptr, ptr @"text_Expected tag to not have a value, but it has one: `", align 8
  %6 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %4)
  %7 = load ptr, ptr @"text_`.", align 8
  %8 = call ptr @candy_builtin_text_concatenate(ptr %6, ptr %7)
  %9 = alloca ptr, i64 3, align 8
  %10 = load ptr, ptr @tag_NoMatch, align 8
  %11 = getelementptr ptr, ptr %9, i64 0
  store ptr %10, ptr %11, align 8
  %12 = getelementptr ptr, ptr %9, i64 1
  store ptr %8, ptr %12, align 8
  %13 = getelementptr ptr, ptr %9, i64 2
  store ptr null, ptr %13, align 8
  %14 = call ptr @make_candy_list(ptr %9)
  store ptr %14, ptr @124, align 8
  ret ptr @124
}

define ptr @Core_check_check_1_equals_else.435(ptr %0) {
Core_check_check_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected False, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @125, align 8
  ret ptr @125
}

define ptr @Core_check_check_1_equals_else.437(ptr %0) {
Core_check_check_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @126, align 8
  ret ptr @126
}

define ptr @"anonymous_$generated__needs_isConditionTrue_else.439"(ptr %0) {
"anonymous_$generated__needs_isConditionTrue_else":
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_False, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  ret ptr %4
}

define ptr @"anonymous_$generated__needs_condition_else.441"() {
"anonymous_$generated__needs_condition_else":
  %0 = load ptr, ptr @"text_A check failed.", align 8
  call void @candy_panic(ptr %0)
  unreachable
}

define ptr @Core_controlFlow_recursive(ptr %0, ptr %1) {
Core_controlFlow_recursive:
  %2 = call ptr @candy_builtin_type_of(ptr %1)
  %3 = load ptr, ptr @tag_Function, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %1, ptr %6, align 8
  %7 = call ptr @make_candy_function(ptr @Core_function_is2_11, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %7, ptr @fun_Core_function_is2_11, align 8
  %8 = load ptr, ptr @fun_Core_function_is2_11, align 8
  %9 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %10 = call ptr @Builtins__ifElse(ptr %4, ptr %8, ptr %9)
  %11 = load ptr, ptr @"text_The `body` should take the recursive function and the argument.", align 8
  %12 = call ptr @"anonymous_$generated__needs"(ptr %10, ptr %11, ptr null)
  %13 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %14 = getelementptr inbounds { ptr }, ptr %13, i32 0, i32 0
  store ptr %1, ptr %14, align 8
  %15 = call ptr @make_candy_function(ptr @Core_controlFlow_recursive_18, ptr %13, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %15, ptr @fun_Core_controlFlow_recursive_18, align 8
  %16 = load ptr, ptr @fun_Core_controlFlow_recursive_18, align 8
  %17 = call ptr @get_candy_function_environment(ptr @fun_Core_controlFlow_recursive_18)
  %18 = call ptr @Core_controlFlow_recursive_18(ptr %16, ptr %0, ptr %17)
  ret ptr %18
}

define ptr @Core_function_is2_11(ptr %0) {
Core_function_is2_11:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Function, align 8
  %5 = call ptr @candy_builtin_equals(ptr %3, ptr %4)
  %6 = load ptr, ptr @"text_`function | typeIs Function` was not satisfied", align 8
  %7 = load ptr, ptr @"Core:function:is2:11:3", align 8
  %8 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %6, ptr %7)
  %9 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %10 = load ptr, ptr %9, align 8
  %11 = call ptr @candy_builtin_get_argument_count(ptr %10)
  %12 = load ptr, ptr @num_2, align 8
  %13 = call ptr @candy_builtin_equals(ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_controlFlow_recursive_18(ptr %0, ptr %1, ptr %2) {
Core_controlFlow_recursive_18:
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %4 = getelementptr inbounds { ptr }, ptr %3, i32 0, i32 0
  store ptr %0, ptr %4, align 8
  %5 = call ptr @make_candy_function(ptr @Core_controlFlow_recursive_18_0, ptr %3, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %5, ptr @fun_Core_controlFlow_recursive_18_0, align 8
  %6 = load ptr, ptr @fun_Core_controlFlow_recursive_18_0, align 8
  %7 = getelementptr inbounds { ptr }, ptr %2, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = call ptr @get_candy_function_pointer(ptr %8)
  %10 = call ptr @get_candy_function_environment(ptr %8)
  %11 = call ptr (...) %9(ptr %6, ptr %1, ptr %10)
  ret ptr %11
}

define ptr @Core_controlFlow_recursive_18_0(ptr %0, ptr %1) {
Core_controlFlow_recursive_18_0:
  %2 = getelementptr inbounds { ptr }, ptr %1, i32 0, i32 0
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr inbounds { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = call ptr @get_candy_function_pointer(ptr %5)
  %7 = call ptr @get_candy_function_environment(ptr %5)
  %8 = call ptr (...) %6(ptr %3, ptr %0, ptr %7)
  ret ptr %8
}

define ptr @Core_function_run(ptr %0) {
Core_function_run:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Function, align 8
  %3 = call ptr @candy_builtin_equals(ptr %1, ptr %2)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %5 = getelementptr inbounds { ptr }, ptr %4, i32 0, i32 0
  store ptr %0, ptr %5, align 8
  %6 = call ptr @make_candy_function(ptr @Core_function_is0_11.443, ptr %4, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %6, ptr @fun_Core_function_is0_11.444, align 8
  %7 = load ptr, ptr @fun_Core_function_is0_11.444, align 8
  %8 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %9 = call ptr @Builtins__ifElse(ptr %3, ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`is0 body` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = call ptr @candy_builtin_type_of(ptr %0)
  %13 = load ptr, ptr @tag_Function, align 8
  %14 = call ptr @candy_builtin_equals(ptr %12, ptr %13)
  %15 = load ptr, ptr @"text_`function | typeIs Function` was not satisfied", align 8
  %16 = load ptr, ptr @"Core:function:run:14", align 8
  %17 = call ptr @"anonymous_$generated__needs"(ptr %14, ptr %15, ptr %16)
  %18 = call ptr @candy_builtin_get_argument_count(ptr %0)
  %19 = load ptr, ptr @num_0, align 8
  %20 = call ptr @candy_builtin_equals(ptr %18, ptr %19)
  %21 = load ptr, ptr @"text_`function | \E2\9C\A8.getArgumentCount | equals 0` was not satisfied", align 8
  %22 = load ptr, ptr @"Core:function:run:14", align 8
  %23 = call ptr @"anonymous_$generated__needs"(ptr %20, ptr %21, ptr %22)
  %24 = call ptr @get_candy_function_pointer(ptr %0)
  %25 = call ptr @get_candy_function_environment(ptr %0)
  %26 = call ptr (...) %24(ptr %25)
  ret ptr %26
}

define ptr @Core_function_is0_11.443(ptr %0) {
Core_function_is0_11:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Function, align 8
  %5 = call ptr @candy_builtin_equals(ptr %3, ptr %4)
  %6 = load ptr, ptr @"text_`function | typeIs Function` was not satisfied", align 8
  %7 = load ptr, ptr @"Core:function:is0:11:3", align 8
  %8 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %6, ptr %7)
  %9 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %10 = load ptr, ptr %9, align 8
  %11 = call ptr @candy_builtin_get_argument_count(ptr %10)
  %12 = load ptr, ptr @num_0, align 8
  %13 = call ptr @candy_builtin_equals(ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_int_compareTo(ptr %0, ptr %1) {
Core_int_compareTo:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Int, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Int, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`is valueB` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = call ptr @candy_builtin_type_of(ptr %0)
  %13 = load ptr, ptr @tag_Int, align 8
  %14 = call ptr @candy_builtin_equals(ptr %12, ptr %13)
  %15 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %16 = load ptr, ptr @"Core:int:compareTo:20", align 8
  %17 = call ptr @"anonymous_$generated__needs"(ptr %14, ptr %15, ptr %16)
  %18 = call ptr @candy_builtin_type_of(ptr %1)
  %19 = load ptr, ptr @tag_Int, align 8
  %20 = call ptr @candy_builtin_equals(ptr %18, ptr %19)
  %21 = load ptr, ptr @"text_`b | typeIs Int` was not satisfied", align 8
  %22 = load ptr, ptr @"Core:int:compareTo:20", align 8
  %23 = call ptr @"anonymous_$generated__needs"(ptr %20, ptr %21, ptr %22)
  %24 = call ptr @candy_builtin_int_compare_to(ptr %0, ptr %1)
  ret ptr %24
}

define ptr @Core_int_isLessThan(ptr %0, ptr %1) {
Core_int_isLessThan:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Int, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Int, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`is valueB` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %13 = load ptr, ptr @"Core:int:isLessThan:13", align 8
  %14 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %12, ptr %13)
  %15 = load ptr, ptr @"text_`is valueB` was not satisfied", align 8
  %16 = load ptr, ptr @"Core:int:isLessThan:13", align 8
  %17 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %15, ptr %16)
  %18 = call ptr @candy_builtin_type_of(ptr %0)
  %19 = load ptr, ptr @tag_Int, align 8
  %20 = call ptr @candy_builtin_equals(ptr %18, ptr %19)
  %21 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %22 = load ptr, ptr @"Core:int:compareTo:20", align 8
  %23 = call ptr @"anonymous_$generated__needs"(ptr %20, ptr %21, ptr %22)
  %24 = call ptr @candy_builtin_type_of(ptr %1)
  %25 = load ptr, ptr @tag_Int, align 8
  %26 = call ptr @candy_builtin_equals(ptr %24, ptr %25)
  %27 = load ptr, ptr @"text_`b | typeIs Int` was not satisfied", align 8
  %28 = load ptr, ptr @"Core:int:compareTo:20", align 8
  %29 = call ptr @"anonymous_$generated__needs"(ptr %26, ptr %27, ptr %28)
  %30 = call ptr @candy_builtin_int_compare_to(ptr %0, ptr %1)
  %31 = load ptr, ptr @tag_Less, align 8
  %32 = call ptr @candy_builtin_equals(ptr %30, ptr %31)
  ret ptr %32
}

define ptr @Core_int_isGreaterThan(ptr %0, ptr %1) {
Core_int_isGreaterThan:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Int, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Int, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`is valueB` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %13 = load ptr, ptr @"Core:int:isGreaterThan:13", align 8
  %14 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %12, ptr %13)
  %15 = load ptr, ptr @"text_`is valueB` was not satisfied", align 8
  %16 = load ptr, ptr @"Core:int:isGreaterThan:13", align 8
  %17 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %15, ptr %16)
  %18 = call ptr @candy_builtin_type_of(ptr %0)
  %19 = load ptr, ptr @tag_Int, align 8
  %20 = call ptr @candy_builtin_equals(ptr %18, ptr %19)
  %21 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %22 = load ptr, ptr @"Core:int:compareTo:20", align 8
  %23 = call ptr @"anonymous_$generated__needs"(ptr %20, ptr %21, ptr %22)
  %24 = call ptr @candy_builtin_type_of(ptr %1)
  %25 = load ptr, ptr @tag_Int, align 8
  %26 = call ptr @candy_builtin_equals(ptr %24, ptr %25)
  %27 = load ptr, ptr @"text_`b | typeIs Int` was not satisfied", align 8
  %28 = load ptr, ptr @"Core:int:compareTo:20", align 8
  %29 = call ptr @"anonymous_$generated__needs"(ptr %26, ptr %27, ptr %28)
  %30 = call ptr @candy_builtin_int_compare_to(ptr %0, ptr %1)
  %31 = load ptr, ptr @tag_Greater, align 8
  %32 = call ptr @candy_builtin_equals(ptr %30, ptr %31)
  ret ptr %32
}

define ptr @Core_int_isNonNegative(ptr %0) {
Core_int_isNonNegative:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Int, align 8
  %3 = call ptr @candy_builtin_equals(ptr %1, ptr %2)
  %4 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  %5 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %4, ptr null)
  %6 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  %7 = load ptr, ptr @"Core:int:isNonNegative:7", align 8
  %8 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %6, ptr %7)
  %9 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %10 = load ptr, ptr @"Core:int:isNegative:8", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %9, ptr %10)
  %12 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %13 = load ptr, ptr @"Core:int:isLessThan:13", align 8
  %14 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %12, ptr %13)
  %15 = call ptr @candy_builtin_type_of(ptr %0)
  %16 = load ptr, ptr @tag_Int, align 8
  %17 = call ptr @candy_builtin_equals(ptr %15, ptr %16)
  %18 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %19 = load ptr, ptr @"Core:int:compareTo:20", align 8
  %20 = call ptr @"anonymous_$generated__needs"(ptr %17, ptr %18, ptr %19)
  %21 = load ptr, ptr @num_0, align 8
  %22 = call ptr @candy_builtin_int_compare_to(ptr %0, ptr %21)
  %23 = load ptr, ptr @tag_Less, align 8
  %24 = call ptr @candy_builtin_equals(ptr %22, ptr %23)
  %25 = call ptr @Core_bool_not(ptr %24)
  ret ptr %25
}

define ptr @Core_int_isEven(ptr %0) {
Core_int_isEven:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Int, align 8
  %3 = call ptr @candy_builtin_equals(ptr %1, ptr %2)
  %4 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  %5 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %4, ptr null)
  %6 = call ptr @candy_builtin_type_of(ptr %0)
  %7 = load ptr, ptr @tag_Int, align 8
  %8 = call ptr @candy_builtin_equals(ptr %6, ptr %7)
  %9 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %10 = load ptr, ptr @"Core:int:isEven:8", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %8, ptr %9, ptr %10)
  %12 = load ptr, ptr @num_1, align 8
  %13 = call ptr @candy_builtin_int_bitwise_and(ptr %0, ptr %12)
  %14 = load ptr, ptr @num_0, align 8
  %15 = call ptr @candy_builtin_equals(ptr %13, ptr %14)
  ret ptr %15
}

define ptr @Core_int_max(ptr %0, ptr %1) {
Core_int_max:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Int, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Int, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`is valueB` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %13 = load ptr, ptr @"Core:int:max:14", align 8
  %14 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %12, ptr %13)
  %15 = load ptr, ptr @"text_`is valueB` was not satisfied", align 8
  %16 = load ptr, ptr @"Core:int:max:14", align 8
  %17 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %15, ptr %16)
  %18 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %19 = load ptr, ptr @"Core:int:isGreaterThanOrEqualTo:13", align 8
  %20 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %18, ptr %19)
  %21 = load ptr, ptr @"text_`is valueB` was not satisfied", align 8
  %22 = load ptr, ptr @"Core:int:isGreaterThanOrEqualTo:13", align 8
  %23 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %21, ptr %22)
  %24 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %25 = load ptr, ptr @"Core:int:isLessThan:13", align 8
  %26 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %24, ptr %25)
  %27 = load ptr, ptr @"text_`is valueB` was not satisfied", align 8
  %28 = load ptr, ptr @"Core:int:isLessThan:13", align 8
  %29 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %27, ptr %28)
  %30 = call ptr @candy_builtin_type_of(ptr %0)
  %31 = load ptr, ptr @tag_Int, align 8
  %32 = call ptr @candy_builtin_equals(ptr %30, ptr %31)
  %33 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %34 = load ptr, ptr @"Core:int:compareTo:20", align 8
  %35 = call ptr @"anonymous_$generated__needs"(ptr %32, ptr %33, ptr %34)
  %36 = call ptr @candy_builtin_type_of(ptr %1)
  %37 = load ptr, ptr @tag_Int, align 8
  %38 = call ptr @candy_builtin_equals(ptr %36, ptr %37)
  %39 = load ptr, ptr @"text_`b | typeIs Int` was not satisfied", align 8
  %40 = load ptr, ptr @"Core:int:compareTo:20", align 8
  %41 = call ptr @"anonymous_$generated__needs"(ptr %38, ptr %39, ptr %40)
  %42 = call ptr @candy_builtin_int_compare_to(ptr %0, ptr %1)
  %43 = load ptr, ptr @tag_Less, align 8
  %44 = call ptr @candy_builtin_equals(ptr %42, ptr %43)
  %45 = call ptr @Core_bool_not(ptr %44)
  %46 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %47 = getelementptr inbounds { ptr }, ptr %46, i32 0, i32 0
  store ptr %0, ptr %47, align 8
  %48 = call ptr @make_candy_function(ptr @Core_int_max_15, ptr %46, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %48, ptr @fun_Core_int_max_15, align 8
  %49 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %50 = getelementptr inbounds { ptr }, ptr %49, i32 0, i32 0
  store ptr %1, ptr %50, align 8
  %51 = call ptr @make_candy_function(ptr @Core_int_max_16, ptr %49, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %51, ptr @fun_Core_int_max_16, align 8
  %52 = load ptr, ptr @fun_Core_int_max_15, align 8
  %53 = load ptr, ptr @fun_Core_int_max_16, align 8
  %54 = call ptr @Builtins__ifElse(ptr %45, ptr %52, ptr %53)
  ret ptr %54
}

define ptr @Core_int_max_15(ptr %0) {
Core_int_max_15:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_int_max_16(ptr %0) {
Core_int_max_16:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_int_pow_21_4_case-0_matched() {
Core_int_pow_21_4_case-0_matched:
  %0 = load ptr, ptr @num_1, align 8
  ret ptr %0
}

define ptr @Core_int_pow_21(ptr %0, ptr %1) {
Core_int_pow_21:
  %2 = call ptr @candy_builtin_type_of(ptr %1)
  %3 = load ptr, ptr @tag_Struct, align 8
  %4 = call ptr @candy_builtin_equals(ptr %3, ptr %2)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %1, ptr %6, align 8
  %7 = call ptr @make_candy_function(ptr @Core_int_pow_21_1_equals_then, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %7, ptr @fun_Core_int_pow_21_1_equals_then, align 8
  %8 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %9 = getelementptr inbounds { ptr }, ptr %8, i32 0, i32 0
  store ptr %2, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_int_pow_21_1_equals_else, ptr %8, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_int_pow_21_1_equals_else, align 8
  %11 = load ptr, ptr @fun_Core_int_pow_21_1_equals_then, align 8
  %12 = load ptr, ptr @fun_Core_int_pow_21_1_equals_else, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %4, ptr %11, ptr %12)
  %14 = load ptr, ptr @num_0, align 8
  %15 = call ptr @candy_builtin_list_get(ptr %13, ptr %14)
  %16 = load ptr, ptr @tag_Match, align 8
  %17 = call ptr @candy_builtin_equals(ptr %15, ptr %16)
  %18 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %19 = getelementptr inbounds { ptr }, ptr %18, i32 0, i32 0
  store ptr %13, ptr %19, align 8
  %20 = call ptr @make_candy_function(ptr @Core_int_pow_21_1_isMatch_else.453, ptr %18, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %20, ptr @fun_Core_int_pow_21_1_isMatch_else.454, align 8
  %21 = load ptr, ptr @"fun_Core__19_isMatch_then, Core__30_isMatch_then, Core__41_isMatch_then, Core__102_isMatch_then, Core__153_isMatch_then, Core__164_isMatch_then, Core_bool_9_isMatch_then, Core_check_9_isMatch_then, Core_controlFlow_if_27, Core_controlFlow_29_isMatch_then, Core_controlFlow_50_isMatch_then, Core_fixedDecimal_19_isMatch_then, Core_fixedDecimal_30_isMatch_then, Core_fixedDecimal_41_isMatch_then, Core_fixedDecimal_52_isMatch_then, Core_fixedDecimal_103_isMatch_then, Core_function_19_isMatch_then, Core_int_pow_21_1_isMatch_then, Core_int_29_isMatch_then, Core_int_40_isMatch_then, Core_iterable_generateWithState_14_0_11_1_isMatch_then, Core_iterable_map_19_11_1_isMatch_then, Core_iterable_reduceLeft_38_1_isMatch_then, Core_iterable_take_33_1_isMatch_then, Core_iterable_takeWhile_2_11_1_isMatch_then, Core_iterable_withIndex_11_1_isMatch_then, Core_iterable_withIndex_11_14_1_isMatch_then, Core_iterable_19_isMatch_then, Core_iterable_30_isMatch_then, Core_iterable_82_11_1_isMatch_then, Core_iterable_84_2_11_1_isMatch_then, Core_iterable_84_2_11_7_15_1_isMatch_then, Core_list_generate_59_1_isMatch_then, Core_list_29_isMatch_then, Core_list_40_isMatch_then, Core_result_19_isMatch_then, Core_result_30_isMatch_then, Core_struct_19_isMatch_then, Core_tag_29_isMatch_then, Core_text_29_isMatch_then, Core_text_40_isMatch_then, Core_type_19_isMatch_then, Examples_sqrt_then, Examples_sqrt_19_isMatch_then, anonymous_$generated__needs_condition_then, anonymous_$generated__needs_isConditionBool_then, anonymous_$generated__needs_isReasonText_then", align 8
  %22 = load ptr, ptr @fun_Core_int_pow_21_1_isMatch_else.454, align 8
  %23 = call ptr @candy_builtin_if_else(ptr %17, ptr %21, ptr %22)
  %24 = load ptr, ptr @num_1, align 8
  %25 = call ptr @candy_builtin_list_get(ptr %13, ptr %24)
  %26 = load ptr, ptr @num_2, align 8
  %27 = call ptr @candy_builtin_list_get(ptr %13, ptr %26)
  %28 = load ptr, ptr @num_0, align 8
  %29 = call ptr @candy_builtin_equals(ptr %28, ptr %27)
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %31 = getelementptr inbounds { ptr }, ptr %30, i32 0, i32 0
  store ptr %27, ptr %31, align 8
  %32 = call ptr @make_candy_function(ptr @Core_int_pow_21_4_equals_else, ptr %30, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %32, ptr @fun_Core_int_pow_21_4_equals_else, align 8
  %33 = load ptr, ptr @"fun_Builtins__ifElse_1_equals_then, Builtins__isLessThanOrEqualTo_19_equals_then, Builtins__isNonNegative_13_equals_then, Builtins__not_1_equals_then, Core_bool_is_1_equals_then, Core_bool_lazyAnd_18_equals_then, Core_bool_lazyOr_18_equals_then, Core_bool_not_6_equals_then, Core_check_check_1_equals_then, Core_int_pow_21_4_equals_then, Core_list_first_6_equals_then, Core_list_single_6_equals_then", align 8
  %34 = load ptr, ptr @fun_Core_int_pow_21_4_equals_else, align 8
  %35 = call ptr @candy_builtin_if_else(ptr %29, ptr %33, ptr %34)
  %36 = load ptr, ptr @num_0, align 8
  %37 = call ptr @candy_builtin_list_get(ptr %35, ptr %36)
  %38 = load ptr, ptr @tag_Match, align 8
  %39 = call ptr @candy_builtin_equals(ptr %37, ptr %38)
  %40 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr }, ptr null, i32 1) to i32))
  %41 = getelementptr inbounds { ptr, ptr, ptr }, ptr %40, i32 0, i32 0
  store ptr %25, ptr %41, align 8
  %42 = getelementptr inbounds { ptr, ptr, ptr }, ptr %40, i32 0, i32 1
  store ptr %0, ptr %42, align 8
  %43 = getelementptr inbounds { ptr, ptr, ptr }, ptr %40, i32 0, i32 2
  store ptr %27, ptr %43, align 8
  %44 = call ptr @make_candy_function(ptr @Core_int_pow_21_4_case-0_didNotMatch, ptr %40, i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %44, ptr @fun_Core_int_pow_21_4_case-0_didNotMatch, align 8
  %45 = load ptr, ptr @fun_Core_int_pow_21_4_case-0_matched, align 8
  %46 = load ptr, ptr @fun_Core_int_pow_21_4_case-0_didNotMatch, align 8
  %47 = call ptr @candy_builtin_if_else(ptr %39, ptr %45, ptr %46)
  ret ptr %47
}

define ptr @Core_int_pow_21_1_equals_then(ptr %0) {
Core_int_pow_21_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_Base, align 8
  %4 = call ptr @candy_builtin_struct_has_key(ptr %2, ptr %3)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %7, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_int_pow_21_1_hasKey_then, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_int_pow_21_1_hasKey_then, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %12, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_int_pow_21_1_hasKey_else, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_int_pow_21_1_hasKey_else, align 8
  %15 = load ptr, ptr @fun_Core_int_pow_21_1_hasKey_then, align 8
  %16 = load ptr, ptr @fun_Core_int_pow_21_1_hasKey_else, align 8
  %17 = call ptr @candy_builtin_if_else(ptr %4, ptr %15, ptr %16)
  %18 = load ptr, ptr @num_0, align 8
  %19 = call ptr @candy_builtin_list_get(ptr %17, ptr %18)
  %20 = load ptr, ptr @tag_Match, align 8
  %21 = call ptr @candy_builtin_equals(ptr %19, ptr %20)
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %23 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 0
  store ptr %17, ptr %23, align 8
  %24 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 1
  store ptr %25, ptr %26, align 8
  %27 = call ptr @make_candy_function(ptr @Core_int_pow_21_1_isMatch_then, ptr %22, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %27, ptr @fun_Core_int_pow_21_1_isMatch_then, align 8
  %28 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %29 = getelementptr inbounds { ptr }, ptr %28, i32 0, i32 0
  store ptr %17, ptr %29, align 8
  %30 = call ptr @make_candy_function(ptr @Core_int_pow_21_1_isMatch_else.451, ptr %28, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %30, ptr @fun_Core_int_pow_21_1_isMatch_else.452, align 8
  %31 = load ptr, ptr @fun_Core_int_pow_21_1_isMatch_then, align 8
  %32 = load ptr, ptr @fun_Core_int_pow_21_1_isMatch_else.452, align 8
  %33 = call ptr @candy_builtin_if_else(ptr %21, ptr %31, ptr %32)
  ret ptr %33
}

define ptr @Core_int_pow_21_1_hasKey_then(ptr %0) {
Core_int_pow_21_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_Base, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @127, align 8
  ret ptr @127
}

define ptr @Core_int_pow_21_1_hasKey_else(ptr %0) {
Core_int_pow_21_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `Base`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @128, align 8
  ret ptr @128
}

define ptr @Core_int_pow_21_1_isMatch_then(ptr %0) {
Core_int_pow_21_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @tag_Exponent, align 8
  %8 = call ptr @candy_builtin_struct_has_key(ptr %6, ptr %7)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %10 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds { ptr }, ptr %9, i32 0, i32 0
  store ptr %11, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_int_pow_21_1_hasKey_then.445, ptr %9, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_int_pow_21_1_hasKey_then.446, align 8
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %15 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds { ptr }, ptr %14, i32 0, i32 0
  store ptr %16, ptr %17, align 8
  %18 = call ptr @make_candy_function(ptr @Core_int_pow_21_1_hasKey_else.447, ptr %14, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %18, ptr @fun_Core_int_pow_21_1_hasKey_else.448, align 8
  %19 = load ptr, ptr @fun_Core_int_pow_21_1_hasKey_then.446, align 8
  %20 = load ptr, ptr @fun_Core_int_pow_21_1_hasKey_else.448, align 8
  %21 = call ptr @candy_builtin_if_else(ptr %8, ptr %19, ptr %20)
  %22 = load ptr, ptr @num_0, align 8
  %23 = call ptr @candy_builtin_list_get(ptr %21, ptr %22)
  %24 = load ptr, ptr @tag_Match, align 8
  %25 = call ptr @candy_builtin_equals(ptr %23, ptr %24)
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %27 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 0
  store ptr %4, ptr %27, align 8
  %28 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 1
  store ptr %21, ptr %28, align 8
  %29 = call ptr @make_candy_function(ptr @Core_int_pow_21_1_isMatch_then.449, ptr %26, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %29, ptr @fun_Core_int_pow_21_1_isMatch_then.450, align 8
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %31 = getelementptr inbounds { ptr }, ptr %30, i32 0, i32 0
  store ptr %21, ptr %31, align 8
  %32 = call ptr @make_candy_function(ptr @Core_int_pow_21_1_isMatch_else, ptr %30, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %32, ptr @fun_Core_int_pow_21_1_isMatch_else, align 8
  %33 = load ptr, ptr @fun_Core_int_pow_21_1_isMatch_then.450, align 8
  %34 = load ptr, ptr @fun_Core_int_pow_21_1_isMatch_else, align 8
  %35 = call ptr @candy_builtin_if_else(ptr %25, ptr %33, ptr %34)
  ret ptr %35
}

define ptr @Core_int_pow_21_1_hasKey_then.445(ptr %0) {
Core_int_pow_21_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_Exponent, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @129, align 8
  ret ptr @129
}

define ptr @Core_int_pow_21_1_hasKey_else.447(ptr %0) {
Core_int_pow_21_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `Exponent`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @130, align 8
  ret ptr @130
}

define ptr @Core_int_pow_21_1_isMatch_then.449(ptr %0) {
Core_int_pow_21_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 4, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %5, i64 1
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %5, i64 2
  store ptr %4, ptr %11, align 8
  %12 = getelementptr ptr, ptr %5, i64 3
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %5)
  store ptr %13, ptr @131, align 8
  ret ptr @131
}

define ptr @Core_int_pow_21_1_isMatch_else(ptr %0) {
Core_int_pow_21_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_int_pow_21_1_isMatch_else.451(ptr %0) {
Core_int_pow_21_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_int_pow_21_1_equals_else(ptr %0) {
Core_int_pow_21_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Struct, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @132, align 8
  ret ptr @132
}

define ptr @Core_int_pow_21_1_isMatch_else.453(ptr %0) {
Core_int_pow_21_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  call void @candy_panic(ptr %4)
  unreachable
}

define ptr @Core_int_pow_21_4_equals_else(ptr %0) {
Core_int_pow_21_4_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected `0`, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @133, align 8
  ret ptr @133
}

define ptr @Core_int_pow_21_4_case-0_didNotMatch(ptr %0) {
Core_int_pow_21_4_case-0_didNotMatch:
  %1 = getelementptr inbounds { ptr, ptr, ptr }, ptr %0, i32 0, i32 2
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_int_isEven(ptr %2)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr }, ptr null, i32 1) to i32))
  %5 = getelementptr inbounds { ptr, ptr, ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr inbounds { ptr, ptr, ptr }, ptr %4, i32 0, i32 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr inbounds { ptr, ptr, ptr }, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr inbounds { ptr, ptr, ptr }, ptr %4, i32 0, i32 1
  store ptr %9, ptr %10, align 8
  %11 = getelementptr inbounds { ptr, ptr, ptr }, ptr %0, i32 0, i32 2
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds { ptr, ptr, ptr }, ptr %4, i32 0, i32 2
  store ptr %12, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_int_pow_21_4_5, ptr %4, i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_int_pow_21_4_5, align 8
  %15 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr }, ptr null, i32 1) to i32))
  %16 = getelementptr inbounds { ptr, ptr, ptr }, ptr %0, i32 0, i32 0
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr inbounds { ptr, ptr, ptr }, ptr %15, i32 0, i32 0
  store ptr %17, ptr %18, align 8
  %19 = getelementptr inbounds { ptr, ptr, ptr }, ptr %0, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = getelementptr inbounds { ptr, ptr, ptr }, ptr %15, i32 0, i32 1
  store ptr %20, ptr %21, align 8
  %22 = getelementptr inbounds { ptr, ptr, ptr }, ptr %0, i32 0, i32 2
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr inbounds { ptr, ptr, ptr }, ptr %15, i32 0, i32 2
  store ptr %23, ptr %24, align 8
  %25 = call ptr @make_candy_function(ptr @Core_int_pow_21_4_6, ptr %15, i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %25, ptr @fun_Core_int_pow_21_4_6, align 8
  %26 = load ptr, ptr @fun_Core_int_pow_21_4_5, align 8
  %27 = load ptr, ptr @fun_Core_int_pow_21_4_6, align 8
  %28 = call ptr @Builtins__ifElse(ptr %3, ptr %26, ptr %27)
  ret ptr %28
}

define ptr @Core_int_pow_21_4_5(ptr %0) {
Core_int_pow_21_4_5:
  %1 = getelementptr inbounds { ptr, ptr, ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Int, align 8
  %5 = call ptr @candy_builtin_equals(ptr %3, ptr %4)
  %6 = load ptr, ptr @"text_`factorA | typeIs Int` was not satisfied", align 8
  %7 = load ptr, ptr @"Core:int:pow:21:4:5:5", align 8
  %8 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %6, ptr %7)
  %9 = load ptr, ptr @"text_`factorB | typeIs Int` was not satisfied", align 8
  %10 = load ptr, ptr @"Core:int:pow:21:4:5:5", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %9, ptr %10)
  %12 = getelementptr inbounds { ptr, ptr, ptr }, ptr %0, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = getelementptr inbounds { ptr, ptr, ptr }, ptr %0, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = call ptr @candy_builtin_int_multiply(ptr %13, ptr %15)
  %17 = getelementptr inbounds { ptr, ptr, ptr }, ptr %0, i32 0, i32 2
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr @num_1, align 8
  %20 = call ptr @Builtins__intShiftRight(ptr %18, ptr %19)
  %21 = alloca ptr, i64 3, align 8
  %22 = alloca ptr, i64 3, align 8
  %23 = load ptr, ptr @tag_Exponent, align 8
  %24 = getelementptr ptr, ptr %21, i64 0
  store ptr %23, ptr %24, align 8
  %25 = getelementptr ptr, ptr %22, i64 0
  store ptr %20, ptr %25, align 8
  %26 = load ptr, ptr @tag_Base, align 8
  %27 = getelementptr ptr, ptr %21, i64 1
  store ptr %26, ptr %27, align 8
  %28 = getelementptr ptr, ptr %22, i64 1
  store ptr %16, ptr %28, align 8
  %29 = getelementptr ptr, ptr %21, i64 2
  store ptr null, ptr %29, align 8
  %30 = getelementptr ptr, ptr %22, i64 2
  store ptr null, ptr %30, align 8
  %31 = call ptr @make_candy_struct(ptr %21, ptr %22)
  %32 = getelementptr inbounds { ptr, ptr, ptr }, ptr %0, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @get_candy_function_pointer(ptr %33)
  %35 = call ptr @get_candy_function_environment(ptr %33)
  %36 = call ptr (...) %34(ptr %31, ptr %35)
  ret ptr %36
}

define ptr @Core_int_pow_21_4_6(ptr %0) {
Core_int_pow_21_4_6:
  %1 = getelementptr inbounds { ptr, ptr, ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Int, align 8
  %5 = call ptr @candy_builtin_equals(ptr %3, ptr %4)
  %6 = load ptr, ptr @"text_`factorA | typeIs Int` was not satisfied", align 8
  %7 = load ptr, ptr @"Core:int:pow:21:4:6:7", align 8
  %8 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %6, ptr %7)
  %9 = load ptr, ptr @"text_`factorB | typeIs Int` was not satisfied", align 8
  %10 = load ptr, ptr @"Core:int:pow:21:4:6:7", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %9, ptr %10)
  %12 = getelementptr inbounds { ptr, ptr, ptr }, ptr %0, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = getelementptr inbounds { ptr, ptr, ptr }, ptr %0, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = call ptr @candy_builtin_int_multiply(ptr %13, ptr %15)
  %17 = getelementptr inbounds { ptr, ptr, ptr }, ptr %0, i32 0, i32 2
  %18 = load ptr, ptr %17, align 8
  %19 = call ptr @candy_builtin_type_of(ptr %18)
  %20 = load ptr, ptr @tag_Int, align 8
  %21 = call ptr @candy_builtin_equals(ptr %19, ptr %20)
  %22 = load ptr, ptr @"text_`minuend | typeIs Int` was not satisfied", align 8
  %23 = load ptr, ptr @"Core:int:pow:21:4:6:12", align 8
  %24 = call ptr @"anonymous_$generated__needs"(ptr %21, ptr %22, ptr %23)
  %25 = getelementptr inbounds { ptr, ptr, ptr }, ptr %0, i32 0, i32 2
  %26 = load ptr, ptr %25, align 8
  %27 = load ptr, ptr @num_1, align 8
  %28 = call ptr @candy_builtin_int_subtract(ptr %26, ptr %27)
  %29 = load ptr, ptr @num_1, align 8
  %30 = call ptr @Builtins__intShiftRight(ptr %28, ptr %29)
  %31 = alloca ptr, i64 3, align 8
  %32 = alloca ptr, i64 3, align 8
  %33 = load ptr, ptr @tag_Base, align 8
  %34 = getelementptr ptr, ptr %31, i64 0
  store ptr %33, ptr %34, align 8
  %35 = getelementptr ptr, ptr %32, i64 0
  store ptr %16, ptr %35, align 8
  %36 = load ptr, ptr @tag_Exponent, align 8
  %37 = getelementptr ptr, ptr %31, i64 1
  store ptr %36, ptr %37, align 8
  %38 = getelementptr ptr, ptr %32, i64 1
  store ptr %30, ptr %38, align 8
  %39 = getelementptr ptr, ptr %31, i64 2
  store ptr null, ptr %39, align 8
  %40 = getelementptr ptr, ptr %32, i64 2
  store ptr null, ptr %40, align 8
  %41 = call ptr @make_candy_struct(ptr %31, ptr %32)
  %42 = getelementptr inbounds { ptr, ptr, ptr }, ptr %0, i32 0, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = call ptr @get_candy_function_pointer(ptr %43)
  %45 = call ptr @get_candy_function_environment(ptr %43)
  %46 = call ptr (...) %44(ptr %41, ptr %45)
  %47 = load ptr, ptr @"text_`factorA | typeIs Int` was not satisfied", align 8
  %48 = load ptr, ptr @"Core:int:pow:21:4:6:18", align 8
  %49 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %47, ptr %48)
  %50 = call ptr @candy_builtin_type_of(ptr %46)
  %51 = load ptr, ptr @tag_Int, align 8
  %52 = call ptr @candy_builtin_equals(ptr %50, ptr %51)
  %53 = load ptr, ptr @"text_`factorB | typeIs Int` was not satisfied", align 8
  %54 = load ptr, ptr @"Core:int:pow:21:4:6:18", align 8
  %55 = call ptr @"anonymous_$generated__needs"(ptr %52, ptr %53, ptr %54)
  %56 = getelementptr inbounds { ptr, ptr, ptr }, ptr %0, i32 0, i32 0
  %57 = load ptr, ptr %56, align 8
  %58 = call ptr @candy_builtin_int_multiply(ptr %57, ptr %46)
  ret ptr %58
}

define ptr @Core_text_removePrefix(ptr %0, ptr %1) {
Core_text_removePrefix:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Text, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`is text` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Text, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = load ptr, ptr @"text_`is prefix` was not satisfied", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %9, ptr %10, ptr null)
  %12 = call ptr @candy_builtin_type_of(ptr %0)
  %13 = load ptr, ptr @tag_Text, align 8
  %14 = call ptr @candy_builtin_equals(ptr %12, ptr %13)
  %15 = load ptr, ptr @"text_`text | typeIs Text` was not satisfied", align 8
  %16 = load ptr, ptr @"Core:text:removePrefix:14", align 8
  %17 = call ptr @"anonymous_$generated__needs"(ptr %14, ptr %15, ptr %16)
  %18 = call ptr @candy_builtin_type_of(ptr %1)
  %19 = load ptr, ptr @tag_Text, align 8
  %20 = call ptr @candy_builtin_equals(ptr %18, ptr %19)
  %21 = load ptr, ptr @"text_`prefix | typeIs Text` was not satisfied", align 8
  %22 = load ptr, ptr @"Core:text:removePrefix:14", align 8
  %23 = call ptr @"anonymous_$generated__needs"(ptr %20, ptr %21, ptr %22)
  %24 = call ptr @candy_builtin_text_starts_with(ptr %0, ptr %1)
  %25 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %26 = getelementptr inbounds { ptr, ptr }, ptr %25, i32 0, i32 0
  store ptr %0, ptr %26, align 8
  %27 = getelementptr inbounds { ptr, ptr }, ptr %25, i32 0, i32 1
  store ptr %1, ptr %27, align 8
  %28 = call ptr @make_candy_function(ptr @Core_text_removePrefix_15, ptr %25, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %28, ptr @fun_Core_text_removePrefix_15, align 8
  %29 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %30 = getelementptr inbounds { ptr }, ptr %29, i32 0, i32 0
  store ptr %0, ptr %30, align 8
  %31 = call ptr @make_candy_function(ptr @Core_text_removePrefix_16, ptr %29, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %31, ptr @fun_Core_text_removePrefix_16, align 8
  %32 = load ptr, ptr @fun_Core_text_removePrefix_15, align 8
  %33 = load ptr, ptr @fun_Core_text_removePrefix_16, align 8
  %34 = call ptr @Builtins__ifElse(ptr %24, ptr %32, ptr %33)
  ret ptr %34
}

define ptr @Core_text_removePrefix_15(ptr %0) {
Core_text_removePrefix_15:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Text, align 8
  %5 = call ptr @candy_builtin_equals(ptr %3, ptr %4)
  %6 = load ptr, ptr @"text_`text | typeIs Text` was not satisfied", align 8
  %7 = load ptr, ptr @"Core:text:removePrefix:15:4", align 8
  %8 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %6, ptr %7)
  %9 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %9, align 8
  %11 = call ptr @candy_builtin_text_length(ptr %10)
  %12 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = call ptr @candy_builtin_type_of(ptr %13)
  %15 = load ptr, ptr @tag_Text, align 8
  %16 = call ptr @candy_builtin_equals(ptr %14, ptr %15)
  %17 = load ptr, ptr @"text_`text | typeIs Text` was not satisfied", align 8
  %18 = load ptr, ptr @"Core:text:removePrefix:15:7", align 8
  %19 = call ptr @"anonymous_$generated__needs"(ptr %16, ptr %17, ptr %18)
  %20 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = call ptr @candy_builtin_text_length(ptr %21)
  %23 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = call ptr @Builtins__textGetRange(ptr %24, ptr %11, ptr %22)
  ret ptr %25
}

define ptr @Core_text_removePrefix_16(ptr %0) {
Core_text_removePrefix_16:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_isScale(ptr %0) {
Core_fixedDecimal_isScale:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Int, align 8
  %3 = call ptr @candy_builtin_equals(ptr %1, ptr %2)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %5 = getelementptr inbounds { ptr }, ptr %4, i32 0, i32 0
  store ptr %0, ptr %5, align 8
  %6 = call ptr @make_candy_function(ptr @Core_fixedDecimal_isScale_18, ptr %4, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %6, ptr @fun_Core_fixedDecimal_isScale_18, align 8
  %7 = load ptr, ptr @fun_Core_fixedDecimal_isScale_18, align 8
  %8 = call ptr @Core_bool_lazyAnd(ptr %3, ptr %7)
  ret ptr %8
}

define ptr @Core_fixedDecimal_isScale_18(ptr %0) {
Core_fixedDecimal_isScale_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Int, align 8
  %5 = call ptr @candy_builtin_equals(ptr %3, ptr %4)
  %6 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  %7 = load ptr, ptr @"Core:fixedDecimal:isScale:18:9", align 8
  %8 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %6, ptr %7)
  %9 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  %10 = load ptr, ptr @"Core:int:isNonNegative:7", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %9, ptr %10)
  %12 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %13 = load ptr, ptr @"Core:int:isNegative:8", align 8
  %14 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %12, ptr %13)
  %15 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %16 = load ptr, ptr @"Core:int:isLessThan:13", align 8
  %17 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %15, ptr %16)
  %18 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  %20 = call ptr @candy_builtin_type_of(ptr %19)
  %21 = load ptr, ptr @tag_Int, align 8
  %22 = call ptr @candy_builtin_equals(ptr %20, ptr %21)
  %23 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %24 = load ptr, ptr @"Core:int:compareTo:20", align 8
  %25 = call ptr @"anonymous_$generated__needs"(ptr %22, ptr %23, ptr %24)
  %26 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = load ptr, ptr @num_0, align 8
  %29 = call ptr @candy_builtin_int_compare_to(ptr %27, ptr %28)
  %30 = load ptr, ptr @tag_Less, align 8
  %31 = call ptr @candy_builtin_equals(ptr %29, ptr %30)
  %32 = call ptr @Core_bool_not(ptr %31)
  ret ptr %32
}

define ptr @Core_fixedDecimal_scaleFactor(ptr %0) {
Core_fixedDecimal_scaleFactor:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Int, align 8
  %3 = call ptr @candy_builtin_equals(ptr %1, ptr %2)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %5 = getelementptr inbounds { ptr }, ptr %4, i32 0, i32 0
  store ptr %0, ptr %5, align 8
  %6 = call ptr @make_candy_function(ptr @Core_fixedDecimal_isScale_18.455, ptr %4, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %6, ptr @fun_Core_fixedDecimal_isScale_18.456, align 8
  %7 = load ptr, ptr @fun_Core_fixedDecimal_isScale_18.456, align 8
  %8 = call ptr @Core_bool_lazyAnd(ptr %3, ptr %7)
  %9 = load ptr, ptr @"text_`isScale scale` was not satisfied", align 8
  %10 = call ptr @"anonymous_$generated__needs"(ptr %8, ptr %9, ptr null)
  %11 = load ptr, ptr @"text_`is exponent` was not satisfied", align 8
  %12 = load ptr, ptr @"Core:fixedDecimal:scaleFactor:15", align 8
  %13 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %11, ptr %12)
  %14 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  %15 = load ptr, ptr @"Core:int:pow:12", align 8
  %16 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %14, ptr %15)
  %17 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  %18 = load ptr, ptr @"Core:int:isNonNegative:7", align 8
  %19 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %17, ptr %18)
  %20 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %21 = load ptr, ptr @"Core:int:isNegative:8", align 8
  %22 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %20, ptr %21)
  %23 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %24 = load ptr, ptr @"Core:int:isLessThan:13", align 8
  %25 = call ptr @"anonymous_$generated__needs"(ptr %3, ptr %23, ptr %24)
  %26 = call ptr @candy_builtin_type_of(ptr %0)
  %27 = load ptr, ptr @tag_Int, align 8
  %28 = call ptr @candy_builtin_equals(ptr %26, ptr %27)
  %29 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %30 = load ptr, ptr @"Core:int:compareTo:20", align 8
  %31 = call ptr @"anonymous_$generated__needs"(ptr %28, ptr %29, ptr %30)
  %32 = load ptr, ptr @num_0, align 8
  %33 = call ptr @candy_builtin_int_compare_to(ptr %0, ptr %32)
  %34 = load ptr, ptr @tag_Less, align 8
  %35 = call ptr @candy_builtin_equals(ptr %33, ptr %34)
  %36 = call ptr @Core_bool_not(ptr %35)
  %37 = load ptr, ptr @"text_`isNonNegative exponent` was not satisfied", align 8
  %38 = load ptr, ptr @"Core:fixedDecimal:scaleFactor:15", align 8
  %39 = call ptr @"anonymous_$generated__needs"(ptr %36, ptr %37, ptr %38)
  %40 = alloca ptr, i64 3, align 8
  %41 = alloca ptr, i64 3, align 8
  %42 = load ptr, ptr @tag_Exponent, align 8
  %43 = getelementptr ptr, ptr %40, i64 0
  store ptr %42, ptr %43, align 8
  %44 = getelementptr ptr, ptr %41, i64 0
  store ptr %0, ptr %44, align 8
  %45 = load ptr, ptr @tag_Base, align 8
  %46 = load ptr, ptr @num_10, align 8
  %47 = getelementptr ptr, ptr %40, i64 1
  store ptr %45, ptr %47, align 8
  %48 = getelementptr ptr, ptr %41, i64 1
  store ptr %46, ptr %48, align 8
  %49 = getelementptr ptr, ptr %40, i64 2
  store ptr null, ptr %49, align 8
  %50 = getelementptr ptr, ptr %41, i64 2
  store ptr null, ptr %50, align 8
  %51 = call ptr @make_candy_struct(ptr %40, ptr %41)
  %52 = load ptr, ptr @fun_Core_int_pow_21, align 8
  %53 = call ptr @Core_controlFlow_recursive(ptr %51, ptr %52)
  ret ptr %53
}

define ptr @Core_fixedDecimal_isScale_18.455(ptr %0) {
Core_fixedDecimal_isScale_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Int, align 8
  %5 = call ptr @candy_builtin_equals(ptr %3, ptr %4)
  %6 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  %7 = load ptr, ptr @"Core:fixedDecimal:isScale:18:9", align 8
  %8 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %6, ptr %7)
  %9 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  %10 = load ptr, ptr @"Core:int:isNonNegative:7", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %9, ptr %10)
  %12 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %13 = load ptr, ptr @"Core:int:isNegative:8", align 8
  %14 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %12, ptr %13)
  %15 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %16 = load ptr, ptr @"Core:int:isLessThan:13", align 8
  %17 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %15, ptr %16)
  %18 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  %20 = call ptr @candy_builtin_type_of(ptr %19)
  %21 = load ptr, ptr @tag_Int, align 8
  %22 = call ptr @candy_builtin_equals(ptr %20, ptr %21)
  %23 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %24 = load ptr, ptr @"Core:int:compareTo:20", align 8
  %25 = call ptr @"anonymous_$generated__needs"(ptr %22, ptr %23, ptr %24)
  %26 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = load ptr, ptr @num_0, align 8
  %29 = call ptr @candy_builtin_int_compare_to(ptr %27, ptr %28)
  %30 = load ptr, ptr @tag_Less, align 8
  %31 = call ptr @candy_builtin_equals(ptr %29, ptr %30)
  %32 = call ptr @Core_bool_not(ptr %31)
  ret ptr %32
}

define ptr @"Core_fixedDecimal_is_1_equals_else, Core_result_is_1_equals_else, Core_result_mapOrElse_30_equals_else"() {
"Core_fixedDecimal_is_1_equals_else, Core_result_is_1_equals_else, Core_result_mapOrElse_30_equals_else":
  %0 = load ptr, ptr @134, align 8
  ret ptr %0
}

define ptr @Core_fixedDecimal_fromIntScaled(ptr %0, ptr %1) {
Core_fixedDecimal_fromIntScaled:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Int, align 8
  %4 = call ptr @candy_builtin_equals(ptr %2, ptr %3)
  %5 = load ptr, ptr @"text_`int.is minorUnits` was not satisfied", align 8
  %6 = call ptr @"anonymous_$generated__needs"(ptr %4, ptr %5, ptr null)
  %7 = call ptr @candy_builtin_type_of(ptr %1)
  %8 = load ptr, ptr @tag_Int, align 8
  %9 = call ptr @candy_builtin_equals(ptr %7, ptr %8)
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %1, ptr %11, align 8
  %12 = call ptr @make_candy_function(ptr @Core_fixedDecimal_isScale_18.457, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %12, ptr @fun_Core_fixedDecimal_isScale_18.458, align 8
  %13 = load ptr, ptr @fun_Core_fixedDecimal_isScale_18.458, align 8
  %14 = call ptr @Core_bool_lazyAnd(ptr %9, ptr %13)
  %15 = load ptr, ptr @"text_`isScale scale` was not satisfied", align 8
  %16 = call ptr @"anonymous_$generated__needs"(ptr %14, ptr %15, ptr null)
  %17 = alloca ptr, i64 3, align 8
  %18 = alloca ptr, i64 3, align 8
  %19 = load ptr, ptr @tag_Scale, align 8
  %20 = getelementptr ptr, ptr %17, i64 0
  store ptr %19, ptr %20, align 8
  %21 = getelementptr ptr, ptr %18, i64 0
  store ptr %1, ptr %21, align 8
  %22 = load ptr, ptr @tag_MinorUnits, align 8
  %23 = getelementptr ptr, ptr %17, i64 1
  store ptr %22, ptr %23, align 8
  %24 = getelementptr ptr, ptr %18, i64 1
  store ptr %0, ptr %24, align 8
  %25 = getelementptr ptr, ptr %17, i64 2
  store ptr null, ptr %25, align 8
  %26 = getelementptr ptr, ptr %18, i64 2
  store ptr null, ptr %26, align 8
  %27 = call ptr @make_candy_struct(ptr %17, ptr %18)
  %28 = alloca i8, i64 13, align 1
  store [13 x i8] c"FixedDecimal\00", ptr %28, align 1
  %29 = call ptr @make_candy_tag(ptr %28, ptr %27)
  store ptr %29, ptr @tag_FixedDecimal.459, align 8
  ret ptr @tag_FixedDecimal.459
}

define ptr @Core_fixedDecimal_isScale_18.457(ptr %0) {
Core_fixedDecimal_isScale_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Int, align 8
  %5 = call ptr @candy_builtin_equals(ptr %3, ptr %4)
  %6 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  %7 = load ptr, ptr @"Core:fixedDecimal:isScale:18:9", align 8
  %8 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %6, ptr %7)
  %9 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  %10 = load ptr, ptr @"Core:int:isNonNegative:7", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %9, ptr %10)
  %12 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %13 = load ptr, ptr @"Core:int:isNegative:8", align 8
  %14 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %12, ptr %13)
  %15 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %16 = load ptr, ptr @"Core:int:isLessThan:13", align 8
  %17 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %15, ptr %16)
  %18 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  %20 = call ptr @candy_builtin_type_of(ptr %19)
  %21 = load ptr, ptr @tag_Int, align 8
  %22 = call ptr @candy_builtin_equals(ptr %20, ptr %21)
  %23 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %24 = load ptr, ptr @"Core:int:compareTo:20", align 8
  %25 = call ptr @"anonymous_$generated__needs"(ptr %22, ptr %23, ptr %24)
  %26 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = load ptr, ptr @num_0, align 8
  %29 = call ptr @candy_builtin_int_compare_to(ptr %27, ptr %28)
  %30 = load ptr, ptr @tag_Less, align 8
  %31 = call ptr @candy_builtin_equals(ptr %29, ptr %30)
  %32 = call ptr @Core_bool_not(ptr %31)
  ret ptr %32
}

define ptr @Core_fixedDecimal_rescaledMinorUnits(ptr %0, ptr %1) {
Core_fixedDecimal_rescaledMinorUnits:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Tag, align 8
  %4 = call ptr @candy_builtin_equals(ptr %3, ptr %2)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %0, ptr %6, align 8
  %7 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %7, ptr @fun_Core_fixedDecimal_is_1_equals_then, align 8
  %8 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %9 = getelementptr inbounds { ptr }, ptr %8, i32 0, i32 0
  store ptr %2, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.476, ptr %8, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_else.477, align 8
  %11 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then, align 8
  %12 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.477, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %4, ptr %11, ptr %12)
  %14 = load ptr, ptr @num_0, align 8
  %15 = call ptr @candy_builtin_list_get(ptr %13, ptr %14)
  %16 = load ptr, ptr @tag_Match, align 8
  %17 = call ptr @candy_builtin_equals(ptr %15, ptr %16)
  %18 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %19 = getelementptr inbounds { ptr }, ptr %18, i32 0, i32 0
  store ptr %13, ptr %19, align 8
  %20 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched, ptr %18, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %20, ptr @fun_Core_fixedDecimal_is_1_case-0_matched, align 8
  %21 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched, align 8
  %22 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %23 = call ptr @candy_builtin_if_else(ptr %17, ptr %21, ptr %22)
  %24 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %25 = call ptr @"anonymous_$generated__needs"(ptr %23, ptr %24, ptr null)
  %26 = call ptr @candy_builtin_type_of(ptr %1)
  %27 = load ptr, ptr @tag_Int, align 8
  %28 = call ptr @candy_builtin_equals(ptr %26, ptr %27)
  %29 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %30 = getelementptr inbounds { ptr }, ptr %29, i32 0, i32 0
  store ptr %1, ptr %30, align 8
  %31 = call ptr @make_candy_function(ptr @Core_fixedDecimal_isScale_18.478, ptr %29, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %31, ptr @fun_Core_fixedDecimal_isScale_18.479, align 8
  %32 = load ptr, ptr @fun_Core_fixedDecimal_isScale_18.479, align 8
  %33 = call ptr @Core_bool_lazyAnd(ptr %28, ptr %32)
  %34 = load ptr, ptr @"text_`isScale targetScale` was not satisfied", align 8
  %35 = call ptr @"anonymous_$generated__needs"(ptr %33, ptr %34, ptr null)
  %36 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then, align 8
  %37 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.477, align 8
  %38 = call ptr @candy_builtin_if_else(ptr %4, ptr %36, ptr %37)
  %39 = load ptr, ptr @num_0, align 8
  %40 = call ptr @candy_builtin_list_get(ptr %38, ptr %39)
  %41 = load ptr, ptr @tag_Match, align 8
  %42 = call ptr @candy_builtin_equals(ptr %40, ptr %41)
  %43 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %44 = getelementptr inbounds { ptr }, ptr %43, i32 0, i32 0
  store ptr %38, ptr %44, align 8
  %45 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.480, ptr %43, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %45, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.481, align 8
  %46 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.481, align 8
  %47 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %48 = call ptr @candy_builtin_if_else(ptr %42, ptr %46, ptr %47)
  %49 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %50 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:13", align 8
  %51 = call ptr @"anonymous_$generated__needs"(ptr %48, ptr %49, ptr %50)
  %52 = call ptr @candy_builtin_type_of(ptr %0)
  %53 = load ptr, ptr @tag_Tag, align 8
  %54 = call ptr @candy_builtin_equals(ptr %52, ptr %53)
  %55 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %56 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %57 = call ptr @"anonymous_$generated__needs"(ptr %54, ptr %55, ptr %56)
  %58 = call ptr @candy_builtin_tag_has_value(ptr %0)
  %59 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %60 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %61 = call ptr @"anonymous_$generated__needs"(ptr %58, ptr %59, ptr %60)
  %62 = call ptr @candy_builtin_tag_get_value(ptr %0)
  %63 = call ptr @candy_builtin_type_of(ptr %62)
  %64 = load ptr, ptr @tag_Struct, align 8
  %65 = call ptr @candy_builtin_equals(ptr %63, ptr %64)
  %66 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %67 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %68 = call ptr @"anonymous_$generated__needs"(ptr %65, ptr %66, ptr %67)
  %69 = load ptr, ptr @tag_Scale, align 8
  %70 = call ptr @candy_builtin_struct_has_key(ptr %62, ptr %69)
  %71 = load ptr, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  %72 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %73 = call ptr @"anonymous_$generated__needs"(ptr %70, ptr %71, ptr %72)
  %74 = load ptr, ptr @tag_Scale, align 8
  %75 = call ptr @candy_builtin_struct_get(ptr %62, ptr %74)
  %76 = call ptr @Core_int_isGreaterThan(ptr %75, ptr %1)
  %77 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %78 = getelementptr inbounds { ptr, ptr }, ptr %77, i32 0, i32 0
  store ptr %0, ptr %78, align 8
  %79 = getelementptr inbounds { ptr, ptr }, ptr %77, i32 0, i32 1
  store ptr %1, ptr %79, align 8
  %80 = call ptr @make_candy_function(ptr @Core_fixedDecimal_rescaledMinorUnits_24, ptr %77, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %80, ptr @fun_Core_fixedDecimal_rescaledMinorUnits_24, align 8
  %81 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %82 = getelementptr inbounds { ptr, ptr }, ptr %81, i32 0, i32 0
  store ptr %0, ptr %82, align 8
  %83 = getelementptr inbounds { ptr, ptr }, ptr %81, i32 0, i32 1
  store ptr %1, ptr %83, align 8
  %84 = call ptr @make_candy_function(ptr @Core_fixedDecimal_rescaledMinorUnits_25, ptr %81, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %84, ptr @fun_Core_fixedDecimal_rescaledMinorUnits_25, align 8
  %85 = load ptr, ptr @fun_Core_fixedDecimal_rescaledMinorUnits_24, align 8
  %86 = load ptr, ptr @fun_Core_fixedDecimal_rescaledMinorUnits_25, align 8
  %87 = call ptr @Builtins__ifElse(ptr %76, ptr %85, ptr %86)
  ret ptr %87
}

define ptr @Core_fixedDecimal_is_1_equals_then(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_FixedDecimal, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.460, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.461, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.474, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_equals_else.475, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.461, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.475, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_equals_then.460(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.462, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.463, align 8
  %11 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.463, align 8
  %12 = load ptr, ptr @"fun_Core_fixedDecimal_is_1_equals_else, Core_result_is_1_equals_else, Core_result_mapOrElse_30_equals_else", align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_fixedDecimal_is_1_equals_then.462(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_type_of(ptr %3)
  %5 = load ptr, ptr @tag_Struct, align 8
  %6 = call ptr @candy_builtin_equals(ptr %5, ptr %4)
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %8 = getelementptr inbounds { ptr }, ptr %7, i32 0, i32 0
  store ptr %3, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.464, ptr %7, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_equals_then.465, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %4, ptr %11, align 8
  %12 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %12, ptr @fun_Core_fixedDecimal_is_1_equals_else, align 8
  %13 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.465, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else, align 8
  %15 = call ptr @candy_builtin_if_else(ptr %6, ptr %13, ptr %14)
  ret ptr %15
}

define ptr @Core_fixedDecimal_is_1_equals_then.464(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_has_key(ptr %2, ptr %3)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %7, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_hasKey_then, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %12, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_hasKey_else, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then, align 8
  %16 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else, align 8
  %17 = call ptr @candy_builtin_if_else(ptr %4, ptr %15, ptr %16)
  %18 = load ptr, ptr @num_0, align 8
  %19 = call ptr @candy_builtin_list_get(ptr %17, ptr %18)
  %20 = load ptr, ptr @tag_Match, align 8
  %21 = call ptr @candy_builtin_equals(ptr %19, ptr %20)
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %23 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 0
  store ptr %24, ptr %25, align 8
  %26 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 1
  store ptr %17, ptr %26, align 8
  %27 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then, ptr %22, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %27, ptr @fun_Core_fixedDecimal_is_1_isMatch_then, align 8
  %28 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %29 = getelementptr inbounds { ptr }, ptr %28, i32 0, i32 0
  store ptr %17, ptr %29, align 8
  %30 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.472, ptr %28, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %30, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.473, align 8
  %31 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then, align 8
  %32 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.473, align 8
  %33 = call ptr @candy_builtin_if_else(ptr %21, ptr %31, ptr %32)
  ret ptr %33
}

define ptr @Core_fixedDecimal_is_1_hasKey_then(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @135, align 8
  ret ptr @135
}

define ptr @Core_fixedDecimal_is_1_hasKey_else(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `MinorUnits`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @136, align 8
  ret ptr @136
}

define ptr @Core_fixedDecimal_is_1_isMatch_then(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @tag_Scale, align 8
  %8 = call ptr @candy_builtin_struct_has_key(ptr %6, ptr %7)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %10 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds { ptr }, ptr %9, i32 0, i32 0
  store ptr %11, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.466, ptr %9, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.467, align 8
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %15 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds { ptr }, ptr %14, i32 0, i32 0
  store ptr %16, ptr %17, align 8
  %18 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.468, ptr %14, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %18, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.469, align 8
  %19 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.467, align 8
  %20 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.469, align 8
  %21 = call ptr @candy_builtin_if_else(ptr %8, ptr %19, ptr %20)
  %22 = load ptr, ptr @num_0, align 8
  %23 = call ptr @candy_builtin_list_get(ptr %21, ptr %22)
  %24 = load ptr, ptr @tag_Match, align 8
  %25 = call ptr @candy_builtin_equals(ptr %23, ptr %24)
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %27 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 0
  store ptr %21, ptr %27, align 8
  %28 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 1
  store ptr %4, ptr %28, align 8
  %29 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.470, ptr %26, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %29, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.471, align 8
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %31 = getelementptr inbounds { ptr }, ptr %30, i32 0, i32 0
  store ptr %21, ptr %31, align 8
  %32 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else, ptr %30, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %32, ptr @fun_Core_fixedDecimal_is_1_isMatch_else, align 8
  %33 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.471, align 8
  %34 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else, align 8
  %35 = call ptr @candy_builtin_if_else(ptr %25, ptr %33, ptr %34)
  ret ptr %35
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.466(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_Scale, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @137, align 8
  ret ptr @137
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.468(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `Scale`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @138, align 8
  ret ptr @138
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.470(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 4, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %5, i64 1
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %5, i64 2
  store ptr %4, ptr %11, align 8
  %12 = getelementptr ptr, ptr %5, i64 3
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %5)
  store ptr %13, ptr @139, align 8
  ret ptr @139
}

define ptr @Core_fixedDecimal_is_1_isMatch_else(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.472(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_equals_else(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Struct, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @140, align 8
  ret ptr @140
}

define ptr @Core_fixedDecimal_is_1_equals_else.474(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected FixedDecimal, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @141, align 8
  ret ptr @141
}

define ptr @Core_fixedDecimal_is_1_equals_else.476(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @142, align 8
  ret ptr @142
}

define ptr @Core_fixedDecimal_is_1_case-0_matched(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_isScale_18.478(ptr %0) {
Core_fixedDecimal_isScale_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Int, align 8
  %5 = call ptr @candy_builtin_equals(ptr %3, ptr %4)
  %6 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  %7 = load ptr, ptr @"Core:fixedDecimal:isScale:18:9", align 8
  %8 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %6, ptr %7)
  %9 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  %10 = load ptr, ptr @"Core:int:isNonNegative:7", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %9, ptr %10)
  %12 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %13 = load ptr, ptr @"Core:int:isNegative:8", align 8
  %14 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %12, ptr %13)
  %15 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %16 = load ptr, ptr @"Core:int:isLessThan:13", align 8
  %17 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %15, ptr %16)
  %18 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  %20 = call ptr @candy_builtin_type_of(ptr %19)
  %21 = load ptr, ptr @tag_Int, align 8
  %22 = call ptr @candy_builtin_equals(ptr %20, ptr %21)
  %23 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %24 = load ptr, ptr @"Core:int:compareTo:20", align 8
  %25 = call ptr @"anonymous_$generated__needs"(ptr %22, ptr %23, ptr %24)
  %26 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = load ptr, ptr @num_0, align 8
  %29 = call ptr @candy_builtin_int_compare_to(ptr %27, ptr %28)
  %30 = load ptr, ptr @tag_Less, align 8
  %31 = call ptr @candy_builtin_equals(ptr %29, ptr %30)
  %32 = call ptr @Core_bool_not(ptr %31)
  ret ptr %32
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.480(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.482, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.483, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.483, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.482(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_rescaledMinorUnits_24(ptr %0) {
Core_fixedDecimal_rescaledMinorUnits_24:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Tag, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.484, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.485, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.512, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_equals_else.513, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.485, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.513, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  %17 = load ptr, ptr @num_0, align 8
  %18 = call ptr @candy_builtin_list_get(ptr %16, ptr %17)
  %19 = load ptr, ptr @tag_Match, align 8
  %20 = call ptr @candy_builtin_equals(ptr %18, ptr %19)
  %21 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %22 = getelementptr inbounds { ptr }, ptr %21, i32 0, i32 0
  store ptr %16, ptr %22, align 8
  %23 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.514, ptr %21, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %23, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.515, align 8
  %24 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.515, align 8
  %25 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %26 = call ptr @candy_builtin_if_else(ptr %20, ptr %24, ptr %25)
  %27 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %28 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:24:2", align 8
  %29 = call ptr @"anonymous_$generated__needs"(ptr %26, ptr %27, ptr %28)
  %30 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %31 = load ptr, ptr %30, align 8
  %32 = call ptr @candy_builtin_type_of(ptr %31)
  %33 = load ptr, ptr @tag_Tag, align 8
  %34 = call ptr @candy_builtin_equals(ptr %32, ptr %33)
  %35 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %36 = load ptr, ptr @"Core:fixedDecimal:minorUnits:19", align 8
  %37 = call ptr @"anonymous_$generated__needs"(ptr %34, ptr %35, ptr %36)
  %38 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %39 = load ptr, ptr %38, align 8
  %40 = call ptr @candy_builtin_tag_has_value(ptr %39)
  %41 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %42 = load ptr, ptr @"Core:fixedDecimal:minorUnits:19", align 8
  %43 = call ptr @"anonymous_$generated__needs"(ptr %40, ptr %41, ptr %42)
  %44 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = call ptr @candy_builtin_tag_get_value(ptr %45)
  %47 = call ptr @candy_builtin_type_of(ptr %46)
  %48 = load ptr, ptr @tag_Struct, align 8
  %49 = call ptr @candy_builtin_equals(ptr %47, ptr %48)
  %50 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %51 = load ptr, ptr @"Core:fixedDecimal:minorUnits:21", align 8
  %52 = call ptr @"anonymous_$generated__needs"(ptr %49, ptr %50, ptr %51)
  %53 = load ptr, ptr @tag_MinorUnits, align 8
  %54 = call ptr @candy_builtin_struct_has_key(ptr %46, ptr %53)
  %55 = load ptr, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  %56 = load ptr, ptr @"Core:fixedDecimal:minorUnits:21", align 8
  %57 = call ptr @"anonymous_$generated__needs"(ptr %54, ptr %55, ptr %56)
  %58 = load ptr, ptr @tag_MinorUnits, align 8
  %59 = call ptr @candy_builtin_struct_get(ptr %46, ptr %58)
  %60 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.485, align 8
  %61 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.513, align 8
  %62 = call ptr @candy_builtin_if_else(ptr %5, ptr %60, ptr %61)
  %63 = load ptr, ptr @num_0, align 8
  %64 = call ptr @candy_builtin_list_get(ptr %62, ptr %63)
  %65 = load ptr, ptr @tag_Match, align 8
  %66 = call ptr @candy_builtin_equals(ptr %64, ptr %65)
  %67 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %68 = getelementptr inbounds { ptr }, ptr %67, i32 0, i32 0
  store ptr %62, ptr %68, align 8
  %69 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.518, ptr %67, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %69, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.519, align 8
  %70 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.519, align 8
  %71 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %72 = call ptr @candy_builtin_if_else(ptr %66, ptr %70, ptr %71)
  %73 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %74 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:24:14", align 8
  %75 = call ptr @"anonymous_$generated__needs"(ptr %72, ptr %73, ptr %74)
  %76 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %77 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %78 = call ptr @"anonymous_$generated__needs"(ptr %34, ptr %76, ptr %77)
  %79 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %80 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %81 = call ptr @"anonymous_$generated__needs"(ptr %40, ptr %79, ptr %80)
  %82 = call ptr @candy_builtin_type_of(ptr %46)
  %83 = load ptr, ptr @tag_Struct, align 8
  %84 = call ptr @candy_builtin_equals(ptr %82, ptr %83)
  %85 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %86 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %87 = call ptr @"anonymous_$generated__needs"(ptr %84, ptr %85, ptr %86)
  %88 = load ptr, ptr @tag_Scale, align 8
  %89 = call ptr @candy_builtin_struct_has_key(ptr %46, ptr %88)
  %90 = load ptr, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  %91 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %92 = call ptr @"anonymous_$generated__needs"(ptr %89, ptr %90, ptr %91)
  %93 = load ptr, ptr @tag_Scale, align 8
  %94 = call ptr @candy_builtin_struct_get(ptr %46, ptr %93)
  %95 = call ptr @candy_builtin_type_of(ptr %94)
  %96 = load ptr, ptr @tag_Int, align 8
  %97 = call ptr @candy_builtin_equals(ptr %95, ptr %96)
  %98 = load ptr, ptr @"text_`minuend | typeIs Int` was not satisfied", align 8
  %99 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:24:24", align 8
  %100 = call ptr @"anonymous_$generated__needs"(ptr %97, ptr %98, ptr %99)
  %101 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %102 = load ptr, ptr %101, align 8
  %103 = call ptr @candy_builtin_type_of(ptr %102)
  %104 = load ptr, ptr @tag_Int, align 8
  %105 = call ptr @candy_builtin_equals(ptr %103, ptr %104)
  %106 = load ptr, ptr @"text_`subtrahend | typeIs Int` was not satisfied", align 8
  %107 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:24:24", align 8
  %108 = call ptr @"anonymous_$generated__needs"(ptr %105, ptr %106, ptr %107)
  %109 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = call ptr @candy_builtin_int_subtract(ptr %94, ptr %110)
  %112 = call ptr @Core_fixedDecimal_scaleFactor(ptr %111)
  %113 = call ptr @Builtins__intDivideTruncating(ptr %59, ptr %112)
  ret ptr %113
}

define ptr @Core_fixedDecimal_is_1_equals_then.484(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_FixedDecimal, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.486, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.487, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.510, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_equals_else.511, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.487, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.511, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_equals_then.486(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.488, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.489, align 8
  %11 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.489, align 8
  %12 = load ptr, ptr @"fun_Core_fixedDecimal_is_1_equals_else, Core_result_is_1_equals_else, Core_result_mapOrElse_30_equals_else", align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_fixedDecimal_is_1_equals_then.488(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_type_of(ptr %3)
  %5 = load ptr, ptr @tag_Struct, align 8
  %6 = call ptr @candy_builtin_equals(ptr %5, ptr %4)
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %8 = getelementptr inbounds { ptr }, ptr %7, i32 0, i32 0
  store ptr %3, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.490, ptr %7, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_equals_then.491, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %4, ptr %11, align 8
  %12 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.508, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %12, ptr @fun_Core_fixedDecimal_is_1_equals_else.509, align 8
  %13 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.491, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.509, align 8
  %15 = call ptr @candy_builtin_if_else(ptr %6, ptr %13, ptr %14)
  ret ptr %15
}

define ptr @Core_fixedDecimal_is_1_equals_then.490(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_has_key(ptr %2, ptr %3)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %7, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.492, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.493, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %12, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.494, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.495, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.493, align 8
  %16 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.495, align 8
  %17 = call ptr @candy_builtin_if_else(ptr %4, ptr %15, ptr %16)
  %18 = load ptr, ptr @num_0, align 8
  %19 = call ptr @candy_builtin_list_get(ptr %17, ptr %18)
  %20 = load ptr, ptr @tag_Match, align 8
  %21 = call ptr @candy_builtin_equals(ptr %19, ptr %20)
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %23 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 0
  store ptr %24, ptr %25, align 8
  %26 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 1
  store ptr %17, ptr %26, align 8
  %27 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.496, ptr %22, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %27, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.497, align 8
  %28 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %29 = getelementptr inbounds { ptr }, ptr %28, i32 0, i32 0
  store ptr %17, ptr %29, align 8
  %30 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.506, ptr %28, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %30, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.507, align 8
  %31 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.497, align 8
  %32 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.507, align 8
  %33 = call ptr @candy_builtin_if_else(ptr %21, ptr %31, ptr %32)
  ret ptr %33
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.492(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @143, align 8
  ret ptr @143
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.494(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `MinorUnits`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @144, align 8
  ret ptr @144
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.496(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @tag_Scale, align 8
  %8 = call ptr @candy_builtin_struct_has_key(ptr %6, ptr %7)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %10 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds { ptr }, ptr %9, i32 0, i32 0
  store ptr %11, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.498, ptr %9, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.499, align 8
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %15 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds { ptr }, ptr %14, i32 0, i32 0
  store ptr %16, ptr %17, align 8
  %18 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.500, ptr %14, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %18, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.501, align 8
  %19 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.499, align 8
  %20 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.501, align 8
  %21 = call ptr @candy_builtin_if_else(ptr %8, ptr %19, ptr %20)
  %22 = load ptr, ptr @num_0, align 8
  %23 = call ptr @candy_builtin_list_get(ptr %21, ptr %22)
  %24 = load ptr, ptr @tag_Match, align 8
  %25 = call ptr @candy_builtin_equals(ptr %23, ptr %24)
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %27 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 0
  store ptr %21, ptr %27, align 8
  %28 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 1
  store ptr %4, ptr %28, align 8
  %29 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.502, ptr %26, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %29, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.503, align 8
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %31 = getelementptr inbounds { ptr }, ptr %30, i32 0, i32 0
  store ptr %21, ptr %31, align 8
  %32 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.504, ptr %30, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %32, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.505, align 8
  %33 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.503, align 8
  %34 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.505, align 8
  %35 = call ptr @candy_builtin_if_else(ptr %25, ptr %33, ptr %34)
  ret ptr %35
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.498(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_Scale, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @145, align 8
  ret ptr @145
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.500(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `Scale`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @146, align 8
  ret ptr @146
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.502(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 4, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %5, i64 1
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %5, i64 2
  store ptr %4, ptr %11, align 8
  %12 = getelementptr ptr, ptr %5, i64 3
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %5)
  store ptr %13, ptr @147, align 8
  ret ptr @147
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.504(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.506(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_equals_else.508(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Struct, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @148, align 8
  ret ptr @148
}

define ptr @Core_fixedDecimal_is_1_equals_else.510(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected FixedDecimal, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @149, align 8
  ret ptr @149
}

define ptr @Core_fixedDecimal_is_1_equals_else.512(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @150, align 8
  ret ptr @150
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.514(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.516, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.517, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.517, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.516(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.518(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.520, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.521, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.521, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.520(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_rescaledMinorUnits_25(ptr %0) {
Core_fixedDecimal_rescaledMinorUnits_25:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Tag, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.522, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.523, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.550, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_equals_else.551, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.523, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.551, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  %17 = load ptr, ptr @num_0, align 8
  %18 = call ptr @candy_builtin_list_get(ptr %16, ptr %17)
  %19 = load ptr, ptr @tag_Match, align 8
  %20 = call ptr @candy_builtin_equals(ptr %18, ptr %19)
  %21 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %22 = getelementptr inbounds { ptr }, ptr %21, i32 0, i32 0
  store ptr %16, ptr %22, align 8
  %23 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.552, ptr %21, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %23, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.553, align 8
  %24 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.553, align 8
  %25 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %26 = call ptr @candy_builtin_if_else(ptr %20, ptr %24, ptr %25)
  %27 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %28 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:25:2", align 8
  %29 = call ptr @"anonymous_$generated__needs"(ptr %26, ptr %27, ptr %28)
  %30 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %31 = load ptr, ptr %30, align 8
  %32 = call ptr @candy_builtin_type_of(ptr %31)
  %33 = load ptr, ptr @tag_Tag, align 8
  %34 = call ptr @candy_builtin_equals(ptr %32, ptr %33)
  %35 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %36 = load ptr, ptr @"Core:fixedDecimal:minorUnits:19", align 8
  %37 = call ptr @"anonymous_$generated__needs"(ptr %34, ptr %35, ptr %36)
  %38 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %39 = load ptr, ptr %38, align 8
  %40 = call ptr @candy_builtin_tag_has_value(ptr %39)
  %41 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %42 = load ptr, ptr @"Core:fixedDecimal:minorUnits:19", align 8
  %43 = call ptr @"anonymous_$generated__needs"(ptr %40, ptr %41, ptr %42)
  %44 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = call ptr @candy_builtin_tag_get_value(ptr %45)
  %47 = call ptr @candy_builtin_type_of(ptr %46)
  %48 = load ptr, ptr @tag_Struct, align 8
  %49 = call ptr @candy_builtin_equals(ptr %47, ptr %48)
  %50 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %51 = load ptr, ptr @"Core:fixedDecimal:minorUnits:21", align 8
  %52 = call ptr @"anonymous_$generated__needs"(ptr %49, ptr %50, ptr %51)
  %53 = load ptr, ptr @tag_MinorUnits, align 8
  %54 = call ptr @candy_builtin_struct_has_key(ptr %46, ptr %53)
  %55 = load ptr, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  %56 = load ptr, ptr @"Core:fixedDecimal:minorUnits:21", align 8
  %57 = call ptr @"anonymous_$generated__needs"(ptr %54, ptr %55, ptr %56)
  %58 = load ptr, ptr @tag_MinorUnits, align 8
  %59 = call ptr @candy_builtin_struct_get(ptr %46, ptr %58)
  %60 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.523, align 8
  %61 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.551, align 8
  %62 = call ptr @candy_builtin_if_else(ptr %5, ptr %60, ptr %61)
  %63 = load ptr, ptr @num_0, align 8
  %64 = call ptr @candy_builtin_list_get(ptr %62, ptr %63)
  %65 = load ptr, ptr @tag_Match, align 8
  %66 = call ptr @candy_builtin_equals(ptr %64, ptr %65)
  %67 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %68 = getelementptr inbounds { ptr }, ptr %67, i32 0, i32 0
  store ptr %62, ptr %68, align 8
  %69 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.556, ptr %67, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %69, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.557, align 8
  %70 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.557, align 8
  %71 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %72 = call ptr @candy_builtin_if_else(ptr %66, ptr %70, ptr %71)
  %73 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %74 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:25:23", align 8
  %75 = call ptr @"anonymous_$generated__needs"(ptr %72, ptr %73, ptr %74)
  %76 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %77 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %78 = call ptr @"anonymous_$generated__needs"(ptr %34, ptr %76, ptr %77)
  %79 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %80 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %81 = call ptr @"anonymous_$generated__needs"(ptr %40, ptr %79, ptr %80)
  %82 = call ptr @candy_builtin_type_of(ptr %46)
  %83 = load ptr, ptr @tag_Struct, align 8
  %84 = call ptr @candy_builtin_equals(ptr %82, ptr %83)
  %85 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %86 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %87 = call ptr @"anonymous_$generated__needs"(ptr %84, ptr %85, ptr %86)
  %88 = load ptr, ptr @tag_Scale, align 8
  %89 = call ptr @candy_builtin_struct_has_key(ptr %46, ptr %88)
  %90 = load ptr, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  %91 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %92 = call ptr @"anonymous_$generated__needs"(ptr %89, ptr %90, ptr %91)
  %93 = load ptr, ptr @tag_Scale, align 8
  %94 = call ptr @candy_builtin_struct_get(ptr %46, ptr %93)
  %95 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %96 = load ptr, ptr %95, align 8
  %97 = call ptr @candy_builtin_type_of(ptr %96)
  %98 = load ptr, ptr @tag_Int, align 8
  %99 = call ptr @candy_builtin_equals(ptr %97, ptr %98)
  %100 = load ptr, ptr @"text_`minuend | typeIs Int` was not satisfied", align 8
  %101 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:25:24", align 8
  %102 = call ptr @"anonymous_$generated__needs"(ptr %99, ptr %100, ptr %101)
  %103 = call ptr @candy_builtin_type_of(ptr %94)
  %104 = load ptr, ptr @tag_Int, align 8
  %105 = call ptr @candy_builtin_equals(ptr %103, ptr %104)
  %106 = load ptr, ptr @"text_`subtrahend | typeIs Int` was not satisfied", align 8
  %107 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:25:24", align 8
  %108 = call ptr @"anonymous_$generated__needs"(ptr %105, ptr %106, ptr %107)
  %109 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = call ptr @candy_builtin_int_subtract(ptr %110, ptr %94)
  %112 = call ptr @Core_fixedDecimal_scaleFactor(ptr %111)
  %113 = call ptr @candy_builtin_type_of(ptr %59)
  %114 = load ptr, ptr @tag_Int, align 8
  %115 = call ptr @candy_builtin_equals(ptr %113, ptr %114)
  %116 = load ptr, ptr @"text_`factorA | typeIs Int` was not satisfied", align 8
  %117 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:25:26", align 8
  %118 = call ptr @"anonymous_$generated__needs"(ptr %115, ptr %116, ptr %117)
  %119 = call ptr @candy_builtin_type_of(ptr %112)
  %120 = load ptr, ptr @tag_Int, align 8
  %121 = call ptr @candy_builtin_equals(ptr %119, ptr %120)
  %122 = load ptr, ptr @"text_`factorB | typeIs Int` was not satisfied", align 8
  %123 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:25:26", align 8
  %124 = call ptr @"anonymous_$generated__needs"(ptr %121, ptr %122, ptr %123)
  %125 = call ptr @candy_builtin_int_multiply(ptr %59, ptr %112)
  ret ptr %125
}

define ptr @Core_fixedDecimal_is_1_equals_then.522(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_FixedDecimal, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.524, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.525, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.548, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_equals_else.549, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.525, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.549, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_equals_then.524(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.526, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.527, align 8
  %11 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.527, align 8
  %12 = load ptr, ptr @"fun_Core_fixedDecimal_is_1_equals_else, Core_result_is_1_equals_else, Core_result_mapOrElse_30_equals_else", align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_fixedDecimal_is_1_equals_then.526(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_type_of(ptr %3)
  %5 = load ptr, ptr @tag_Struct, align 8
  %6 = call ptr @candy_builtin_equals(ptr %5, ptr %4)
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %8 = getelementptr inbounds { ptr }, ptr %7, i32 0, i32 0
  store ptr %3, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.528, ptr %7, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_equals_then.529, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %4, ptr %11, align 8
  %12 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.546, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %12, ptr @fun_Core_fixedDecimal_is_1_equals_else.547, align 8
  %13 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.529, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.547, align 8
  %15 = call ptr @candy_builtin_if_else(ptr %6, ptr %13, ptr %14)
  ret ptr %15
}

define ptr @Core_fixedDecimal_is_1_equals_then.528(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_has_key(ptr %2, ptr %3)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %7, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.530, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.531, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %12, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.532, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.533, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.531, align 8
  %16 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.533, align 8
  %17 = call ptr @candy_builtin_if_else(ptr %4, ptr %15, ptr %16)
  %18 = load ptr, ptr @num_0, align 8
  %19 = call ptr @candy_builtin_list_get(ptr %17, ptr %18)
  %20 = load ptr, ptr @tag_Match, align 8
  %21 = call ptr @candy_builtin_equals(ptr %19, ptr %20)
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %23 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 0
  store ptr %24, ptr %25, align 8
  %26 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 1
  store ptr %17, ptr %26, align 8
  %27 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.534, ptr %22, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %27, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.535, align 8
  %28 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %29 = getelementptr inbounds { ptr }, ptr %28, i32 0, i32 0
  store ptr %17, ptr %29, align 8
  %30 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.544, ptr %28, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %30, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.545, align 8
  %31 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.535, align 8
  %32 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.545, align 8
  %33 = call ptr @candy_builtin_if_else(ptr %21, ptr %31, ptr %32)
  ret ptr %33
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.530(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @151, align 8
  ret ptr @151
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.532(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `MinorUnits`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @152, align 8
  ret ptr @152
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.534(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @tag_Scale, align 8
  %8 = call ptr @candy_builtin_struct_has_key(ptr %6, ptr %7)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %10 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds { ptr }, ptr %9, i32 0, i32 0
  store ptr %11, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.536, ptr %9, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.537, align 8
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %15 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds { ptr }, ptr %14, i32 0, i32 0
  store ptr %16, ptr %17, align 8
  %18 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.538, ptr %14, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %18, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.539, align 8
  %19 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.537, align 8
  %20 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.539, align 8
  %21 = call ptr @candy_builtin_if_else(ptr %8, ptr %19, ptr %20)
  %22 = load ptr, ptr @num_0, align 8
  %23 = call ptr @candy_builtin_list_get(ptr %21, ptr %22)
  %24 = load ptr, ptr @tag_Match, align 8
  %25 = call ptr @candy_builtin_equals(ptr %23, ptr %24)
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %27 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 0
  store ptr %4, ptr %27, align 8
  %28 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 1
  store ptr %21, ptr %28, align 8
  %29 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.540, ptr %26, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %29, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.541, align 8
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %31 = getelementptr inbounds { ptr }, ptr %30, i32 0, i32 0
  store ptr %21, ptr %31, align 8
  %32 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.542, ptr %30, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %32, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.543, align 8
  %33 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.541, align 8
  %34 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.543, align 8
  %35 = call ptr @candy_builtin_if_else(ptr %25, ptr %33, ptr %34)
  ret ptr %35
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.536(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_Scale, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @153, align 8
  ret ptr @153
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.538(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `Scale`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @154, align 8
  ret ptr @154
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.540(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 4, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %5, i64 1
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %5, i64 2
  store ptr %4, ptr %11, align 8
  %12 = getelementptr ptr, ptr %5, i64 3
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %5)
  store ptr %13, ptr @155, align 8
  ret ptr @155
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.542(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.544(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_equals_else.546(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Struct, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @156, align 8
  ret ptr @156
}

define ptr @Core_fixedDecimal_is_1_equals_else.548(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected FixedDecimal, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @157, align 8
  ret ptr @157
}

define ptr @Core_fixedDecimal_is_1_equals_else.550(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @158, align 8
  ret ptr @158
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.552(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.554, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.555, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.555, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.554(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.556(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.558, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.559, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.559, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.558(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_add(ptr %0, ptr %1) {
Core_fixedDecimal_add:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Tag, align 8
  %4 = call ptr @candy_builtin_equals(ptr %3, ptr %2)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %0, ptr %6, align 8
  %7 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.560, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %7, ptr @fun_Core_fixedDecimal_is_1_equals_then.561, align 8
  %8 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %9 = getelementptr inbounds { ptr }, ptr %8, i32 0, i32 0
  store ptr %2, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.588, ptr %8, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_else.589, align 8
  %11 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.561, align 8
  %12 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.589, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %4, ptr %11, ptr %12)
  %14 = load ptr, ptr @num_0, align 8
  %15 = call ptr @candy_builtin_list_get(ptr %13, ptr %14)
  %16 = load ptr, ptr @tag_Match, align 8
  %17 = call ptr @candy_builtin_equals(ptr %15, ptr %16)
  %18 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %19 = getelementptr inbounds { ptr }, ptr %18, i32 0, i32 0
  store ptr %13, ptr %19, align 8
  %20 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.590, ptr %18, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %20, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.591, align 8
  %21 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.591, align 8
  %22 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %23 = call ptr @candy_builtin_if_else(ptr %17, ptr %21, ptr %22)
  %24 = load ptr, ptr @"text_`is summandA` was not satisfied", align 8
  %25 = call ptr @"anonymous_$generated__needs"(ptr %23, ptr %24, ptr null)
  %26 = call ptr @candy_builtin_type_of(ptr %1)
  %27 = load ptr, ptr @tag_Tag, align 8
  %28 = call ptr @candy_builtin_equals(ptr %27, ptr %26)
  %29 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %30 = getelementptr inbounds { ptr }, ptr %29, i32 0, i32 0
  store ptr %1, ptr %30, align 8
  %31 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.594, ptr %29, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %31, ptr @fun_Core_fixedDecimal_is_1_equals_then.595, align 8
  %32 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %33 = getelementptr inbounds { ptr }, ptr %32, i32 0, i32 0
  store ptr %26, ptr %33, align 8
  %34 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.622, ptr %32, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %34, ptr @fun_Core_fixedDecimal_is_1_equals_else.623, align 8
  %35 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.595, align 8
  %36 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.623, align 8
  %37 = call ptr @candy_builtin_if_else(ptr %28, ptr %35, ptr %36)
  %38 = load ptr, ptr @num_0, align 8
  %39 = call ptr @candy_builtin_list_get(ptr %37, ptr %38)
  %40 = load ptr, ptr @tag_Match, align 8
  %41 = call ptr @candy_builtin_equals(ptr %39, ptr %40)
  %42 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %43 = getelementptr inbounds { ptr }, ptr %42, i32 0, i32 0
  store ptr %37, ptr %43, align 8
  %44 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.624, ptr %42, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %44, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.625, align 8
  %45 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.625, align 8
  %46 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %47 = call ptr @candy_builtin_if_else(ptr %41, ptr %45, ptr %46)
  %48 = load ptr, ptr @"text_`is summandB` was not satisfied", align 8
  %49 = call ptr @"anonymous_$generated__needs"(ptr %47, ptr %48, ptr null)
  %50 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.561, align 8
  %51 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.589, align 8
  %52 = call ptr @candy_builtin_if_else(ptr %4, ptr %50, ptr %51)
  %53 = load ptr, ptr @num_0, align 8
  %54 = call ptr @candy_builtin_list_get(ptr %52, ptr %53)
  %55 = load ptr, ptr @tag_Match, align 8
  %56 = call ptr @candy_builtin_equals(ptr %54, ptr %55)
  %57 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %58 = getelementptr inbounds { ptr }, ptr %57, i32 0, i32 0
  store ptr %52, ptr %58, align 8
  %59 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.628, ptr %57, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %59, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.629, align 8
  %60 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.629, align 8
  %61 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %62 = call ptr @candy_builtin_if_else(ptr %56, ptr %60, ptr %61)
  %63 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %64 = load ptr, ptr @"Core:fixedDecimal:add:13", align 8
  %65 = call ptr @"anonymous_$generated__needs"(ptr %62, ptr %63, ptr %64)
  %66 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.595, align 8
  %67 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.623, align 8
  %68 = call ptr @candy_builtin_if_else(ptr %28, ptr %66, ptr %67)
  %69 = load ptr, ptr @num_0, align 8
  %70 = call ptr @candy_builtin_list_get(ptr %68, ptr %69)
  %71 = load ptr, ptr @tag_Match, align 8
  %72 = call ptr @candy_builtin_equals(ptr %70, ptr %71)
  %73 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %74 = getelementptr inbounds { ptr }, ptr %73, i32 0, i32 0
  store ptr %68, ptr %74, align 8
  %75 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.632, ptr %73, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %75, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.633, align 8
  %76 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.633, align 8
  %77 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %78 = call ptr @candy_builtin_if_else(ptr %72, ptr %76, ptr %77)
  %79 = load ptr, ptr @"text_`is valueB` was not satisfied", align 8
  %80 = load ptr, ptr @"Core:fixedDecimal:add:13", align 8
  %81 = call ptr @"anonymous_$generated__needs"(ptr %78, ptr %79, ptr %80)
  %82 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.561, align 8
  %83 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.589, align 8
  %84 = call ptr @candy_builtin_if_else(ptr %4, ptr %82, ptr %83)
  %85 = load ptr, ptr @num_0, align 8
  %86 = call ptr @candy_builtin_list_get(ptr %84, ptr %85)
  %87 = load ptr, ptr @tag_Match, align 8
  %88 = call ptr @candy_builtin_equals(ptr %86, ptr %87)
  %89 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %90 = getelementptr inbounds { ptr }, ptr %89, i32 0, i32 0
  store ptr %84, ptr %90, align 8
  %91 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.636, ptr %89, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %91, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.637, align 8
  %92 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.637, align 8
  %93 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %94 = call ptr @candy_builtin_if_else(ptr %88, ptr %92, ptr %93)
  %95 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %96 = load ptr, ptr @"Core:fixedDecimal:comparableMinorUnits:20", align 8
  %97 = call ptr @"anonymous_$generated__needs"(ptr %94, ptr %95, ptr %96)
  %98 = call ptr @candy_builtin_type_of(ptr %0)
  %99 = load ptr, ptr @tag_Tag, align 8
  %100 = call ptr @candy_builtin_equals(ptr %98, ptr %99)
  %101 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %102 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %103 = call ptr @"anonymous_$generated__needs"(ptr %100, ptr %101, ptr %102)
  %104 = call ptr @candy_builtin_tag_has_value(ptr %0)
  %105 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %106 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %107 = call ptr @"anonymous_$generated__needs"(ptr %104, ptr %105, ptr %106)
  %108 = call ptr @candy_builtin_tag_get_value(ptr %0)
  %109 = call ptr @candy_builtin_type_of(ptr %108)
  %110 = load ptr, ptr @tag_Struct, align 8
  %111 = call ptr @candy_builtin_equals(ptr %109, ptr %110)
  %112 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %113 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %114 = call ptr @"anonymous_$generated__needs"(ptr %111, ptr %112, ptr %113)
  %115 = load ptr, ptr @tag_Scale, align 8
  %116 = call ptr @candy_builtin_struct_has_key(ptr %108, ptr %115)
  %117 = load ptr, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  %118 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %119 = call ptr @"anonymous_$generated__needs"(ptr %116, ptr %117, ptr %118)
  %120 = load ptr, ptr @tag_Scale, align 8
  %121 = call ptr @candy_builtin_struct_get(ptr %108, ptr %120)
  %122 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.595, align 8
  %123 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.623, align 8
  %124 = call ptr @candy_builtin_if_else(ptr %28, ptr %122, ptr %123)
  %125 = load ptr, ptr @num_0, align 8
  %126 = call ptr @candy_builtin_list_get(ptr %124, ptr %125)
  %127 = load ptr, ptr @tag_Match, align 8
  %128 = call ptr @candy_builtin_equals(ptr %126, ptr %127)
  %129 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %130 = getelementptr inbounds { ptr }, ptr %129, i32 0, i32 0
  store ptr %124, ptr %130, align 8
  %131 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.640, ptr %129, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %131, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.641, align 8
  %132 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.641, align 8
  %133 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %134 = call ptr @candy_builtin_if_else(ptr %128, ptr %132, ptr %133)
  %135 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %136 = load ptr, ptr @"Core:fixedDecimal:comparableMinorUnits:23", align 8
  %137 = call ptr @"anonymous_$generated__needs"(ptr %134, ptr %135, ptr %136)
  %138 = call ptr @candy_builtin_type_of(ptr %1)
  %139 = load ptr, ptr @tag_Tag, align 8
  %140 = call ptr @candy_builtin_equals(ptr %138, ptr %139)
  %141 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %142 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %143 = call ptr @"anonymous_$generated__needs"(ptr %140, ptr %141, ptr %142)
  %144 = call ptr @candy_builtin_tag_has_value(ptr %1)
  %145 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %146 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %147 = call ptr @"anonymous_$generated__needs"(ptr %144, ptr %145, ptr %146)
  %148 = call ptr @candy_builtin_tag_get_value(ptr %1)
  %149 = call ptr @candy_builtin_type_of(ptr %148)
  %150 = load ptr, ptr @tag_Struct, align 8
  %151 = call ptr @candy_builtin_equals(ptr %149, ptr %150)
  %152 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %153 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %154 = call ptr @"anonymous_$generated__needs"(ptr %151, ptr %152, ptr %153)
  %155 = load ptr, ptr @tag_Scale, align 8
  %156 = call ptr @candy_builtin_struct_has_key(ptr %148, ptr %155)
  %157 = load ptr, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  %158 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %159 = call ptr @"anonymous_$generated__needs"(ptr %156, ptr %157, ptr %158)
  %160 = load ptr, ptr @tag_Scale, align 8
  %161 = call ptr @candy_builtin_struct_get(ptr %148, ptr %160)
  %162 = call ptr @Core_int_max(ptr %121, ptr %161)
  %163 = call ptr @Core_fixedDecimal_rescaledMinorUnits(ptr %0, ptr %162)
  %164 = call ptr @Core_fixedDecimal_rescaledMinorUnits(ptr %1, ptr %162)
  %165 = call ptr @candy_builtin_type_of(ptr %163)
  %166 = load ptr, ptr @tag_Int, align 8
  %167 = call ptr @candy_builtin_equals(ptr %165, ptr %166)
  %168 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %169 = load ptr, ptr @"Core:fixedDecimal:add:27", align 8
  %170 = call ptr @"anonymous_$generated__needs"(ptr %167, ptr %168, ptr %169)
  %171 = call ptr @candy_builtin_type_of(ptr %164)
  %172 = load ptr, ptr @tag_Int, align 8
  %173 = call ptr @candy_builtin_equals(ptr %171, ptr %172)
  %174 = load ptr, ptr @"text_`b | typeIs Int` was not satisfied", align 8
  %175 = load ptr, ptr @"Core:fixedDecimal:add:27", align 8
  %176 = call ptr @"anonymous_$generated__needs"(ptr %173, ptr %174, ptr %175)
  %177 = call ptr @candy_builtin_int_add(ptr %163, ptr %164)
  %178 = call ptr @Core_fixedDecimal_fromIntScaled(ptr %177, ptr %162)
  ret ptr %178
}

define ptr @Core_fixedDecimal_is_1_equals_then.560(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_FixedDecimal, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.562, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.563, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.586, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_equals_else.587, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.563, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.587, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_equals_then.562(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.564, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.565, align 8
  %11 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.565, align 8
  %12 = load ptr, ptr @"fun_Core_fixedDecimal_is_1_equals_else, Core_result_is_1_equals_else, Core_result_mapOrElse_30_equals_else", align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_fixedDecimal_is_1_equals_then.564(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_type_of(ptr %3)
  %5 = load ptr, ptr @tag_Struct, align 8
  %6 = call ptr @candy_builtin_equals(ptr %5, ptr %4)
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %8 = getelementptr inbounds { ptr }, ptr %7, i32 0, i32 0
  store ptr %3, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.566, ptr %7, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_equals_then.567, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %4, ptr %11, align 8
  %12 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.584, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %12, ptr @fun_Core_fixedDecimal_is_1_equals_else.585, align 8
  %13 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.567, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.585, align 8
  %15 = call ptr @candy_builtin_if_else(ptr %6, ptr %13, ptr %14)
  ret ptr %15
}

define ptr @Core_fixedDecimal_is_1_equals_then.566(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_has_key(ptr %2, ptr %3)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %7, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.568, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.569, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %12, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.570, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.571, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.569, align 8
  %16 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.571, align 8
  %17 = call ptr @candy_builtin_if_else(ptr %4, ptr %15, ptr %16)
  %18 = load ptr, ptr @num_0, align 8
  %19 = call ptr @candy_builtin_list_get(ptr %17, ptr %18)
  %20 = load ptr, ptr @tag_Match, align 8
  %21 = call ptr @candy_builtin_equals(ptr %19, ptr %20)
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %23 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 0
  store ptr %24, ptr %25, align 8
  %26 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 1
  store ptr %17, ptr %26, align 8
  %27 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.572, ptr %22, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %27, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.573, align 8
  %28 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %29 = getelementptr inbounds { ptr }, ptr %28, i32 0, i32 0
  store ptr %17, ptr %29, align 8
  %30 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.582, ptr %28, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %30, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.583, align 8
  %31 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.573, align 8
  %32 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.583, align 8
  %33 = call ptr @candy_builtin_if_else(ptr %21, ptr %31, ptr %32)
  ret ptr %33
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.568(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @159, align 8
  ret ptr @159
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.570(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `MinorUnits`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @160, align 8
  ret ptr @160
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.572(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @tag_Scale, align 8
  %8 = call ptr @candy_builtin_struct_has_key(ptr %6, ptr %7)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %10 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds { ptr }, ptr %9, i32 0, i32 0
  store ptr %11, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.574, ptr %9, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.575, align 8
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %15 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds { ptr }, ptr %14, i32 0, i32 0
  store ptr %16, ptr %17, align 8
  %18 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.576, ptr %14, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %18, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.577, align 8
  %19 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.575, align 8
  %20 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.577, align 8
  %21 = call ptr @candy_builtin_if_else(ptr %8, ptr %19, ptr %20)
  %22 = load ptr, ptr @num_0, align 8
  %23 = call ptr @candy_builtin_list_get(ptr %21, ptr %22)
  %24 = load ptr, ptr @tag_Match, align 8
  %25 = call ptr @candy_builtin_equals(ptr %23, ptr %24)
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %27 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 0
  store ptr %21, ptr %27, align 8
  %28 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 1
  store ptr %4, ptr %28, align 8
  %29 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.578, ptr %26, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %29, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.579, align 8
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %31 = getelementptr inbounds { ptr }, ptr %30, i32 0, i32 0
  store ptr %21, ptr %31, align 8
  %32 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.580, ptr %30, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %32, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.581, align 8
  %33 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.579, align 8
  %34 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.581, align 8
  %35 = call ptr @candy_builtin_if_else(ptr %25, ptr %33, ptr %34)
  ret ptr %35
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.574(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_Scale, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @161, align 8
  ret ptr @161
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.576(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `Scale`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @162, align 8
  ret ptr @162
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.578(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 4, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %5, i64 1
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %5, i64 2
  store ptr %4, ptr %11, align 8
  %12 = getelementptr ptr, ptr %5, i64 3
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %5)
  store ptr %13, ptr @163, align 8
  ret ptr @163
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.580(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.582(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_equals_else.584(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Struct, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @164, align 8
  ret ptr @164
}

define ptr @Core_fixedDecimal_is_1_equals_else.586(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected FixedDecimal, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @165, align 8
  ret ptr @165
}

define ptr @Core_fixedDecimal_is_1_equals_else.588(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @166, align 8
  ret ptr @166
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.590(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.592, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.593, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.593, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.592(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_equals_then.594(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_FixedDecimal, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.596, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.597, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.620, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_equals_else.621, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.597, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.621, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_equals_then.596(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.598, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.599, align 8
  %11 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.599, align 8
  %12 = load ptr, ptr @"fun_Core_fixedDecimal_is_1_equals_else, Core_result_is_1_equals_else, Core_result_mapOrElse_30_equals_else", align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_fixedDecimal_is_1_equals_then.598(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_type_of(ptr %3)
  %5 = load ptr, ptr @tag_Struct, align 8
  %6 = call ptr @candy_builtin_equals(ptr %5, ptr %4)
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %8 = getelementptr inbounds { ptr }, ptr %7, i32 0, i32 0
  store ptr %3, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.600, ptr %7, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_equals_then.601, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %4, ptr %11, align 8
  %12 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.618, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %12, ptr @fun_Core_fixedDecimal_is_1_equals_else.619, align 8
  %13 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.601, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.619, align 8
  %15 = call ptr @candy_builtin_if_else(ptr %6, ptr %13, ptr %14)
  ret ptr %15
}

define ptr @Core_fixedDecimal_is_1_equals_then.600(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_has_key(ptr %2, ptr %3)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %7, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.602, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.603, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %12, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.604, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.605, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.603, align 8
  %16 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.605, align 8
  %17 = call ptr @candy_builtin_if_else(ptr %4, ptr %15, ptr %16)
  %18 = load ptr, ptr @num_0, align 8
  %19 = call ptr @candy_builtin_list_get(ptr %17, ptr %18)
  %20 = load ptr, ptr @tag_Match, align 8
  %21 = call ptr @candy_builtin_equals(ptr %19, ptr %20)
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %23 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 0
  store ptr %24, ptr %25, align 8
  %26 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 1
  store ptr %17, ptr %26, align 8
  %27 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.606, ptr %22, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %27, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.607, align 8
  %28 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %29 = getelementptr inbounds { ptr }, ptr %28, i32 0, i32 0
  store ptr %17, ptr %29, align 8
  %30 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.616, ptr %28, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %30, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.617, align 8
  %31 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.607, align 8
  %32 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.617, align 8
  %33 = call ptr @candy_builtin_if_else(ptr %21, ptr %31, ptr %32)
  ret ptr %33
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.602(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @167, align 8
  ret ptr @167
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.604(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `MinorUnits`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @168, align 8
  ret ptr @168
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.606(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @tag_Scale, align 8
  %8 = call ptr @candy_builtin_struct_has_key(ptr %6, ptr %7)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %10 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds { ptr }, ptr %9, i32 0, i32 0
  store ptr %11, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.608, ptr %9, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.609, align 8
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %15 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds { ptr }, ptr %14, i32 0, i32 0
  store ptr %16, ptr %17, align 8
  %18 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.610, ptr %14, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %18, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.611, align 8
  %19 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.609, align 8
  %20 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.611, align 8
  %21 = call ptr @candy_builtin_if_else(ptr %8, ptr %19, ptr %20)
  %22 = load ptr, ptr @num_0, align 8
  %23 = call ptr @candy_builtin_list_get(ptr %21, ptr %22)
  %24 = load ptr, ptr @tag_Match, align 8
  %25 = call ptr @candy_builtin_equals(ptr %23, ptr %24)
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %27 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 0
  store ptr %21, ptr %27, align 8
  %28 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 1
  store ptr %4, ptr %28, align 8
  %29 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.612, ptr %26, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %29, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.613, align 8
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %31 = getelementptr inbounds { ptr }, ptr %30, i32 0, i32 0
  store ptr %21, ptr %31, align 8
  %32 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.614, ptr %30, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %32, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.615, align 8
  %33 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.613, align 8
  %34 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.615, align 8
  %35 = call ptr @candy_builtin_if_else(ptr %25, ptr %33, ptr %34)
  ret ptr %35
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.608(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_Scale, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @169, align 8
  ret ptr @169
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.610(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `Scale`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @170, align 8
  ret ptr @170
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.612(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 4, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %5, i64 1
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %5, i64 2
  store ptr %4, ptr %11, align 8
  %12 = getelementptr ptr, ptr %5, i64 3
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %5)
  store ptr %13, ptr @171, align 8
  ret ptr @171
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.614(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.616(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_equals_else.618(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Struct, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @172, align 8
  ret ptr @172
}

define ptr @Core_fixedDecimal_is_1_equals_else.620(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected FixedDecimal, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @173, align 8
  ret ptr @173
}

define ptr @Core_fixedDecimal_is_1_equals_else.622(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @174, align 8
  ret ptr @174
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.624(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.626, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.627, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.627, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.626(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.628(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.630, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.631, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.631, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.630(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.632(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.634, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.635, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.635, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.634(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.636(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.638, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.639, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.639, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.638(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.640(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.642, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.643, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.643, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.642(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_divideTruncatingAtScale(ptr %0, ptr %1, ptr %2) {
Core_fixedDecimal_divideTruncatingAtScale:
  %3 = call ptr @candy_builtin_type_of(ptr %0)
  %4 = load ptr, ptr @tag_Tag, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %0, ptr %7, align 8
  %8 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.644, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %8, ptr @fun_Core_fixedDecimal_is_1_equals_then.645, align 8
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %10 = getelementptr inbounds { ptr }, ptr %9, i32 0, i32 0
  store ptr %3, ptr %10, align 8
  %11 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.672, ptr %9, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %11, ptr @fun_Core_fixedDecimal_is_1_equals_else.673, align 8
  %12 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.645, align 8
  %13 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.673, align 8
  %14 = call ptr @candy_builtin_if_else(ptr %5, ptr %12, ptr %13)
  %15 = load ptr, ptr @num_0, align 8
  %16 = call ptr @candy_builtin_list_get(ptr %14, ptr %15)
  %17 = load ptr, ptr @tag_Match, align 8
  %18 = call ptr @candy_builtin_equals(ptr %16, ptr %17)
  %19 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %20 = getelementptr inbounds { ptr }, ptr %19, i32 0, i32 0
  store ptr %14, ptr %20, align 8
  %21 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.674, ptr %19, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %21, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.675, align 8
  %22 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.675, align 8
  %23 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %24 = call ptr @candy_builtin_if_else(ptr %18, ptr %22, ptr %23)
  %25 = load ptr, ptr @"text_`is dividend` was not satisfied", align 8
  %26 = call ptr @"anonymous_$generated__needs"(ptr %24, ptr %25, ptr null)
  %27 = call ptr @candy_builtin_type_of(ptr %1)
  %28 = load ptr, ptr @tag_Tag, align 8
  %29 = call ptr @candy_builtin_equals(ptr %28, ptr %27)
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %31 = getelementptr inbounds { ptr }, ptr %30, i32 0, i32 0
  store ptr %1, ptr %31, align 8
  %32 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.678, ptr %30, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %32, ptr @fun_Core_fixedDecimal_is_1_equals_then.679, align 8
  %33 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %34 = getelementptr inbounds { ptr }, ptr %33, i32 0, i32 0
  store ptr %27, ptr %34, align 8
  %35 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.706, ptr %33, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %35, ptr @fun_Core_fixedDecimal_is_1_equals_else.707, align 8
  %36 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.679, align 8
  %37 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.707, align 8
  %38 = call ptr @candy_builtin_if_else(ptr %29, ptr %36, ptr %37)
  %39 = load ptr, ptr @num_0, align 8
  %40 = call ptr @candy_builtin_list_get(ptr %38, ptr %39)
  %41 = load ptr, ptr @tag_Match, align 8
  %42 = call ptr @candy_builtin_equals(ptr %40, ptr %41)
  %43 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %44 = getelementptr inbounds { ptr }, ptr %43, i32 0, i32 0
  store ptr %38, ptr %44, align 8
  %45 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.708, ptr %43, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %45, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.709, align 8
  %46 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.709, align 8
  %47 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %48 = call ptr @candy_builtin_if_else(ptr %42, ptr %46, ptr %47)
  %49 = load ptr, ptr @"text_`is divisor` was not satisfied", align 8
  %50 = call ptr @"anonymous_$generated__needs"(ptr %48, ptr %49, ptr null)
  %51 = call ptr @candy_builtin_type_of(ptr %2)
  %52 = load ptr, ptr @tag_Int, align 8
  %53 = call ptr @candy_builtin_equals(ptr %51, ptr %52)
  %54 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %55 = getelementptr inbounds { ptr }, ptr %54, i32 0, i32 0
  store ptr %2, ptr %55, align 8
  %56 = call ptr @make_candy_function(ptr @Core_fixedDecimal_isScale_18.712, ptr %54, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %56, ptr @fun_Core_fixedDecimal_isScale_18.713, align 8
  %57 = load ptr, ptr @fun_Core_fixedDecimal_isScale_18.713, align 8
  %58 = call ptr @Core_bool_lazyAnd(ptr %53, ptr %57)
  %59 = load ptr, ptr @"text_`isScale targetScale` was not satisfied", align 8
  %60 = call ptr @"anonymous_$generated__needs"(ptr %58, ptr %59, ptr null)
  %61 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.679, align 8
  %62 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.707, align 8
  %63 = call ptr @candy_builtin_if_else(ptr %29, ptr %61, ptr %62)
  %64 = load ptr, ptr @num_0, align 8
  %65 = call ptr @candy_builtin_list_get(ptr %63, ptr %64)
  %66 = load ptr, ptr @tag_Match, align 8
  %67 = call ptr @candy_builtin_equals(ptr %65, ptr %66)
  %68 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %69 = getelementptr inbounds { ptr }, ptr %68, i32 0, i32 0
  store ptr %63, ptr %69, align 8
  %70 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.714, ptr %68, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %70, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.715, align 8
  %71 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.715, align 8
  %72 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %73 = call ptr @candy_builtin_if_else(ptr %67, ptr %71, ptr %72)
  %74 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %75 = load ptr, ptr @"Core:fixedDecimal:divideTruncatingAtScale:17", align 8
  %76 = call ptr @"anonymous_$generated__needs"(ptr %73, ptr %74, ptr %75)
  %77 = call ptr @candy_builtin_type_of(ptr %1)
  %78 = load ptr, ptr @tag_Tag, align 8
  %79 = call ptr @candy_builtin_equals(ptr %77, ptr %78)
  %80 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %81 = load ptr, ptr @"Core:fixedDecimal:minorUnits:19", align 8
  %82 = call ptr @"anonymous_$generated__needs"(ptr %79, ptr %80, ptr %81)
  %83 = call ptr @candy_builtin_tag_has_value(ptr %1)
  %84 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %85 = load ptr, ptr @"Core:fixedDecimal:minorUnits:19", align 8
  %86 = call ptr @"anonymous_$generated__needs"(ptr %83, ptr %84, ptr %85)
  %87 = call ptr @candy_builtin_tag_get_value(ptr %1)
  %88 = call ptr @candy_builtin_type_of(ptr %87)
  %89 = load ptr, ptr @tag_Struct, align 8
  %90 = call ptr @candy_builtin_equals(ptr %88, ptr %89)
  %91 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %92 = load ptr, ptr @"Core:fixedDecimal:minorUnits:21", align 8
  %93 = call ptr @"anonymous_$generated__needs"(ptr %90, ptr %91, ptr %92)
  %94 = load ptr, ptr @tag_MinorUnits, align 8
  %95 = call ptr @candy_builtin_struct_has_key(ptr %87, ptr %94)
  %96 = load ptr, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  %97 = load ptr, ptr @"Core:fixedDecimal:minorUnits:21", align 8
  %98 = call ptr @"anonymous_$generated__needs"(ptr %95, ptr %96, ptr %97)
  %99 = load ptr, ptr @tag_MinorUnits, align 8
  %100 = call ptr @candy_builtin_struct_get(ptr %87, ptr %99)
  %101 = load ptr, ptr @num_0, align 8
  %102 = call ptr @candy_builtin_equals(ptr %100, ptr %101)
  %103 = call ptr @Core_bool_not(ptr %102)
  %104 = load ptr, ptr @"text_You can't divide by zero.", align 8
  %105 = call ptr @"anonymous_$generated__needs"(ptr %103, ptr %104, ptr null)
  %106 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.645, align 8
  %107 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.673, align 8
  %108 = call ptr @candy_builtin_if_else(ptr %5, ptr %106, ptr %107)
  %109 = load ptr, ptr @num_0, align 8
  %110 = call ptr @candy_builtin_list_get(ptr %108, ptr %109)
  %111 = load ptr, ptr @tag_Match, align 8
  %112 = call ptr @candy_builtin_equals(ptr %110, ptr %111)
  %113 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %114 = getelementptr inbounds { ptr }, ptr %113, i32 0, i32 0
  store ptr %108, ptr %114, align 8
  %115 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.718, ptr %113, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %115, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.719, align 8
  %116 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.719, align 8
  %117 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %118 = call ptr @candy_builtin_if_else(ptr %112, ptr %116, ptr %117)
  %119 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %120 = load ptr, ptr @"Core:fixedDecimal:divideTruncatingAtScale:41", align 8
  %121 = call ptr @"anonymous_$generated__needs"(ptr %118, ptr %119, ptr %120)
  %122 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.679, align 8
  %123 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.707, align 8
  %124 = call ptr @candy_builtin_if_else(ptr %29, ptr %122, ptr %123)
  %125 = load ptr, ptr @num_0, align 8
  %126 = call ptr @candy_builtin_list_get(ptr %124, ptr %125)
  %127 = load ptr, ptr @tag_Match, align 8
  %128 = call ptr @candy_builtin_equals(ptr %126, ptr %127)
  %129 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %130 = getelementptr inbounds { ptr }, ptr %129, i32 0, i32 0
  store ptr %124, ptr %130, align 8
  %131 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.722, ptr %129, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %131, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.723, align 8
  %132 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.723, align 8
  %133 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %134 = call ptr @candy_builtin_if_else(ptr %128, ptr %132, ptr %133)
  %135 = load ptr, ptr @"text_`is valueB` was not satisfied", align 8
  %136 = load ptr, ptr @"Core:fixedDecimal:divideTruncatingAtScale:41", align 8
  %137 = call ptr @"anonymous_$generated__needs"(ptr %134, ptr %135, ptr %136)
  %138 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.645, align 8
  %139 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.673, align 8
  %140 = call ptr @candy_builtin_if_else(ptr %5, ptr %138, ptr %139)
  %141 = load ptr, ptr @num_0, align 8
  %142 = call ptr @candy_builtin_list_get(ptr %140, ptr %141)
  %143 = load ptr, ptr @tag_Match, align 8
  %144 = call ptr @candy_builtin_equals(ptr %142, ptr %143)
  %145 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %146 = getelementptr inbounds { ptr }, ptr %145, i32 0, i32 0
  store ptr %140, ptr %146, align 8
  %147 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.726, ptr %145, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %147, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.727, align 8
  %148 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.727, align 8
  %149 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %150 = call ptr @candy_builtin_if_else(ptr %144, ptr %148, ptr %149)
  %151 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %152 = load ptr, ptr @"Core:fixedDecimal:comparableMinorUnits:20", align 8
  %153 = call ptr @"anonymous_$generated__needs"(ptr %150, ptr %151, ptr %152)
  %154 = call ptr @candy_builtin_type_of(ptr %0)
  %155 = load ptr, ptr @tag_Tag, align 8
  %156 = call ptr @candy_builtin_equals(ptr %154, ptr %155)
  %157 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %158 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %159 = call ptr @"anonymous_$generated__needs"(ptr %156, ptr %157, ptr %158)
  %160 = call ptr @candy_builtin_tag_has_value(ptr %0)
  %161 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %162 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %163 = call ptr @"anonymous_$generated__needs"(ptr %160, ptr %161, ptr %162)
  %164 = call ptr @candy_builtin_tag_get_value(ptr %0)
  %165 = call ptr @candy_builtin_type_of(ptr %164)
  %166 = load ptr, ptr @tag_Struct, align 8
  %167 = call ptr @candy_builtin_equals(ptr %165, ptr %166)
  %168 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %169 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %170 = call ptr @"anonymous_$generated__needs"(ptr %167, ptr %168, ptr %169)
  %171 = load ptr, ptr @tag_Scale, align 8
  %172 = call ptr @candy_builtin_struct_has_key(ptr %164, ptr %171)
  %173 = load ptr, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  %174 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %175 = call ptr @"anonymous_$generated__needs"(ptr %172, ptr %173, ptr %174)
  %176 = load ptr, ptr @tag_Scale, align 8
  %177 = call ptr @candy_builtin_struct_get(ptr %164, ptr %176)
  %178 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.679, align 8
  %179 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.707, align 8
  %180 = call ptr @candy_builtin_if_else(ptr %29, ptr %178, ptr %179)
  %181 = load ptr, ptr @num_0, align 8
  %182 = call ptr @candy_builtin_list_get(ptr %180, ptr %181)
  %183 = load ptr, ptr @tag_Match, align 8
  %184 = call ptr @candy_builtin_equals(ptr %182, ptr %183)
  %185 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %186 = getelementptr inbounds { ptr }, ptr %185, i32 0, i32 0
  store ptr %180, ptr %186, align 8
  %187 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.730, ptr %185, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %187, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.731, align 8
  %188 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.731, align 8
  %189 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %190 = call ptr @candy_builtin_if_else(ptr %184, ptr %188, ptr %189)
  %191 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %192 = load ptr, ptr @"Core:fixedDecimal:comparableMinorUnits:23", align 8
  %193 = call ptr @"anonymous_$generated__needs"(ptr %190, ptr %191, ptr %192)
  %194 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %195 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %196 = call ptr @"anonymous_$generated__needs"(ptr %79, ptr %194, ptr %195)
  %197 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %198 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %199 = call ptr @"anonymous_$generated__needs"(ptr %83, ptr %197, ptr %198)
  %200 = call ptr @candy_builtin_type_of(ptr %87)
  %201 = load ptr, ptr @tag_Struct, align 8
  %202 = call ptr @candy_builtin_equals(ptr %200, ptr %201)
  %203 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %204 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %205 = call ptr @"anonymous_$generated__needs"(ptr %202, ptr %203, ptr %204)
  %206 = load ptr, ptr @tag_Scale, align 8
  %207 = call ptr @candy_builtin_struct_has_key(ptr %87, ptr %206)
  %208 = load ptr, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  %209 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %210 = call ptr @"anonymous_$generated__needs"(ptr %207, ptr %208, ptr %209)
  %211 = load ptr, ptr @tag_Scale, align 8
  %212 = call ptr @candy_builtin_struct_get(ptr %87, ptr %211)
  %213 = call ptr @Core_int_max(ptr %177, ptr %212)
  %214 = call ptr @Core_fixedDecimal_rescaledMinorUnits(ptr %0, ptr %213)
  %215 = call ptr @Core_fixedDecimal_rescaledMinorUnits(ptr %1, ptr %213)
  %216 = load ptr, ptr @fun_Core_fixedDecimal_isScale_18.713, align 8
  %217 = call ptr @Core_bool_lazyAnd(ptr %53, ptr %216)
  %218 = load ptr, ptr @"text_`isScale scale` was not satisfied", align 8
  %219 = load ptr, ptr @"Core:fixedDecimal:divideTruncatingAtScale:56", align 8
  %220 = call ptr @"anonymous_$generated__needs"(ptr %217, ptr %218, ptr %219)
  %221 = load ptr, ptr @"text_`is exponent` was not satisfied", align 8
  %222 = load ptr, ptr @"Core:fixedDecimal:scaleFactor:15", align 8
  %223 = call ptr @"anonymous_$generated__needs"(ptr %53, ptr %221, ptr %222)
  %224 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  %225 = load ptr, ptr @"Core:int:pow:12", align 8
  %226 = call ptr @"anonymous_$generated__needs"(ptr %53, ptr %224, ptr %225)
  %227 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  %228 = load ptr, ptr @"Core:int:isNonNegative:7", align 8
  %229 = call ptr @"anonymous_$generated__needs"(ptr %53, ptr %227, ptr %228)
  %230 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %231 = load ptr, ptr @"Core:int:isNegative:8", align 8
  %232 = call ptr @"anonymous_$generated__needs"(ptr %53, ptr %230, ptr %231)
  %233 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %234 = load ptr, ptr @"Core:int:isLessThan:13", align 8
  %235 = call ptr @"anonymous_$generated__needs"(ptr %53, ptr %233, ptr %234)
  %236 = call ptr @candy_builtin_type_of(ptr %2)
  %237 = load ptr, ptr @tag_Int, align 8
  %238 = call ptr @candy_builtin_equals(ptr %236, ptr %237)
  %239 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %240 = load ptr, ptr @"Core:int:compareTo:20", align 8
  %241 = call ptr @"anonymous_$generated__needs"(ptr %238, ptr %239, ptr %240)
  %242 = load ptr, ptr @num_0, align 8
  %243 = call ptr @candy_builtin_int_compare_to(ptr %2, ptr %242)
  %244 = load ptr, ptr @tag_Less, align 8
  %245 = call ptr @candy_builtin_equals(ptr %243, ptr %244)
  %246 = call ptr @Core_bool_not(ptr %245)
  %247 = load ptr, ptr @"text_`isNonNegative exponent` was not satisfied", align 8
  %248 = load ptr, ptr @"Core:fixedDecimal:scaleFactor:15", align 8
  %249 = call ptr @"anonymous_$generated__needs"(ptr %246, ptr %247, ptr %248)
  %250 = alloca ptr, i64 3, align 8
  %251 = alloca ptr, i64 3, align 8
  %252 = load ptr, ptr @tag_Exponent, align 8
  %253 = getelementptr ptr, ptr %250, i64 0
  store ptr %252, ptr %253, align 8
  %254 = getelementptr ptr, ptr %251, i64 0
  store ptr %2, ptr %254, align 8
  %255 = load ptr, ptr @tag_Base, align 8
  %256 = load ptr, ptr @num_10, align 8
  %257 = getelementptr ptr, ptr %250, i64 1
  store ptr %255, ptr %257, align 8
  %258 = getelementptr ptr, ptr %251, i64 1
  store ptr %256, ptr %258, align 8
  %259 = getelementptr ptr, ptr %250, i64 2
  store ptr null, ptr %259, align 8
  %260 = getelementptr ptr, ptr %251, i64 2
  store ptr null, ptr %260, align 8
  %261 = call ptr @make_candy_struct(ptr %250, ptr %251)
  %262 = load ptr, ptr @fun_Core_int_pow_21, align 8
  %263 = call ptr @Core_controlFlow_recursive(ptr %261, ptr %262)
  %264 = call ptr @candy_builtin_type_of(ptr %214)
  %265 = load ptr, ptr @tag_Int, align 8
  %266 = call ptr @candy_builtin_equals(ptr %264, ptr %265)
  %267 = load ptr, ptr @"text_`factorA | typeIs Int` was not satisfied", align 8
  %268 = load ptr, ptr @"Core:fixedDecimal:divideTruncatingAtScale:57", align 8
  %269 = call ptr @"anonymous_$generated__needs"(ptr %266, ptr %267, ptr %268)
  %270 = call ptr @candy_builtin_type_of(ptr %263)
  %271 = load ptr, ptr @tag_Int, align 8
  %272 = call ptr @candy_builtin_equals(ptr %270, ptr %271)
  %273 = load ptr, ptr @"text_`factorB | typeIs Int` was not satisfied", align 8
  %274 = load ptr, ptr @"Core:fixedDecimal:divideTruncatingAtScale:57", align 8
  %275 = call ptr @"anonymous_$generated__needs"(ptr %272, ptr %273, ptr %274)
  %276 = call ptr @candy_builtin_int_multiply(ptr %214, ptr %263)
  %277 = call ptr @Builtins__intDivideTruncating(ptr %276, ptr %215)
  %278 = call ptr @Core_fixedDecimal_fromIntScaled(ptr %277, ptr %2)
  ret ptr %278
}

define ptr @Core_fixedDecimal_is_1_equals_then.644(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_FixedDecimal, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.646, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.647, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.670, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_equals_else.671, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.647, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.671, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_equals_then.646(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.648, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.649, align 8
  %11 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.649, align 8
  %12 = load ptr, ptr @"fun_Core_fixedDecimal_is_1_equals_else, Core_result_is_1_equals_else, Core_result_mapOrElse_30_equals_else", align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_fixedDecimal_is_1_equals_then.648(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_type_of(ptr %3)
  %5 = load ptr, ptr @tag_Struct, align 8
  %6 = call ptr @candy_builtin_equals(ptr %5, ptr %4)
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %8 = getelementptr inbounds { ptr }, ptr %7, i32 0, i32 0
  store ptr %3, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.650, ptr %7, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_equals_then.651, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %4, ptr %11, align 8
  %12 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.668, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %12, ptr @fun_Core_fixedDecimal_is_1_equals_else.669, align 8
  %13 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.651, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.669, align 8
  %15 = call ptr @candy_builtin_if_else(ptr %6, ptr %13, ptr %14)
  ret ptr %15
}

define ptr @Core_fixedDecimal_is_1_equals_then.650(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_has_key(ptr %2, ptr %3)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %7, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.652, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.653, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %12, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.654, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.655, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.653, align 8
  %16 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.655, align 8
  %17 = call ptr @candy_builtin_if_else(ptr %4, ptr %15, ptr %16)
  %18 = load ptr, ptr @num_0, align 8
  %19 = call ptr @candy_builtin_list_get(ptr %17, ptr %18)
  %20 = load ptr, ptr @tag_Match, align 8
  %21 = call ptr @candy_builtin_equals(ptr %19, ptr %20)
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %23 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 0
  store ptr %24, ptr %25, align 8
  %26 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 1
  store ptr %17, ptr %26, align 8
  %27 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.656, ptr %22, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %27, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.657, align 8
  %28 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %29 = getelementptr inbounds { ptr }, ptr %28, i32 0, i32 0
  store ptr %17, ptr %29, align 8
  %30 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.666, ptr %28, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %30, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.667, align 8
  %31 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.657, align 8
  %32 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.667, align 8
  %33 = call ptr @candy_builtin_if_else(ptr %21, ptr %31, ptr %32)
  ret ptr %33
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.652(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @175, align 8
  ret ptr @175
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.654(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `MinorUnits`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @176, align 8
  ret ptr @176
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.656(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @tag_Scale, align 8
  %8 = call ptr @candy_builtin_struct_has_key(ptr %6, ptr %7)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %10 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds { ptr }, ptr %9, i32 0, i32 0
  store ptr %11, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.658, ptr %9, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.659, align 8
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %15 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds { ptr }, ptr %14, i32 0, i32 0
  store ptr %16, ptr %17, align 8
  %18 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.660, ptr %14, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %18, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.661, align 8
  %19 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.659, align 8
  %20 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.661, align 8
  %21 = call ptr @candy_builtin_if_else(ptr %8, ptr %19, ptr %20)
  %22 = load ptr, ptr @num_0, align 8
  %23 = call ptr @candy_builtin_list_get(ptr %21, ptr %22)
  %24 = load ptr, ptr @tag_Match, align 8
  %25 = call ptr @candy_builtin_equals(ptr %23, ptr %24)
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %27 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 0
  store ptr %4, ptr %27, align 8
  %28 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 1
  store ptr %21, ptr %28, align 8
  %29 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.662, ptr %26, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %29, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.663, align 8
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %31 = getelementptr inbounds { ptr }, ptr %30, i32 0, i32 0
  store ptr %21, ptr %31, align 8
  %32 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.664, ptr %30, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %32, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.665, align 8
  %33 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.663, align 8
  %34 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.665, align 8
  %35 = call ptr @candy_builtin_if_else(ptr %25, ptr %33, ptr %34)
  ret ptr %35
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.658(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_Scale, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @177, align 8
  ret ptr @177
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.660(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `Scale`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @178, align 8
  ret ptr @178
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.662(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 4, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %5, i64 1
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %5, i64 2
  store ptr %4, ptr %11, align 8
  %12 = getelementptr ptr, ptr %5, i64 3
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %5)
  store ptr %13, ptr @179, align 8
  ret ptr @179
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.664(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.666(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_equals_else.668(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Struct, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @180, align 8
  ret ptr @180
}

define ptr @Core_fixedDecimal_is_1_equals_else.670(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected FixedDecimal, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @181, align 8
  ret ptr @181
}

define ptr @Core_fixedDecimal_is_1_equals_else.672(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @182, align 8
  ret ptr @182
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.674(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.676, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.677, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.677, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.676(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_equals_then.678(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_FixedDecimal, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.680, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.681, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.704, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_equals_else.705, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.681, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.705, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_equals_then.680(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.682, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.683, align 8
  %11 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.683, align 8
  %12 = load ptr, ptr @"fun_Core_fixedDecimal_is_1_equals_else, Core_result_is_1_equals_else, Core_result_mapOrElse_30_equals_else", align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_fixedDecimal_is_1_equals_then.682(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_type_of(ptr %3)
  %5 = load ptr, ptr @tag_Struct, align 8
  %6 = call ptr @candy_builtin_equals(ptr %5, ptr %4)
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %8 = getelementptr inbounds { ptr }, ptr %7, i32 0, i32 0
  store ptr %3, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.684, ptr %7, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_equals_then.685, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %4, ptr %11, align 8
  %12 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.702, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %12, ptr @fun_Core_fixedDecimal_is_1_equals_else.703, align 8
  %13 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.685, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.703, align 8
  %15 = call ptr @candy_builtin_if_else(ptr %6, ptr %13, ptr %14)
  ret ptr %15
}

define ptr @Core_fixedDecimal_is_1_equals_then.684(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_has_key(ptr %2, ptr %3)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %7, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.686, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.687, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %12, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.688, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.689, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.687, align 8
  %16 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.689, align 8
  %17 = call ptr @candy_builtin_if_else(ptr %4, ptr %15, ptr %16)
  %18 = load ptr, ptr @num_0, align 8
  %19 = call ptr @candy_builtin_list_get(ptr %17, ptr %18)
  %20 = load ptr, ptr @tag_Match, align 8
  %21 = call ptr @candy_builtin_equals(ptr %19, ptr %20)
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %23 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 0
  store ptr %17, ptr %23, align 8
  %24 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 1
  store ptr %25, ptr %26, align 8
  %27 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.690, ptr %22, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %27, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.691, align 8
  %28 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %29 = getelementptr inbounds { ptr }, ptr %28, i32 0, i32 0
  store ptr %17, ptr %29, align 8
  %30 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.700, ptr %28, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %30, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.701, align 8
  %31 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.691, align 8
  %32 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.701, align 8
  %33 = call ptr @candy_builtin_if_else(ptr %21, ptr %31, ptr %32)
  ret ptr %33
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.686(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @183, align 8
  ret ptr @183
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.688(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `MinorUnits`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @184, align 8
  ret ptr @184
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.690(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @tag_Scale, align 8
  %8 = call ptr @candy_builtin_struct_has_key(ptr %6, ptr %7)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %10 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds { ptr }, ptr %9, i32 0, i32 0
  store ptr %11, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.692, ptr %9, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.693, align 8
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %15 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds { ptr }, ptr %14, i32 0, i32 0
  store ptr %16, ptr %17, align 8
  %18 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.694, ptr %14, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %18, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.695, align 8
  %19 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.693, align 8
  %20 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.695, align 8
  %21 = call ptr @candy_builtin_if_else(ptr %8, ptr %19, ptr %20)
  %22 = load ptr, ptr @num_0, align 8
  %23 = call ptr @candy_builtin_list_get(ptr %21, ptr %22)
  %24 = load ptr, ptr @tag_Match, align 8
  %25 = call ptr @candy_builtin_equals(ptr %23, ptr %24)
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %27 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 0
  store ptr %4, ptr %27, align 8
  %28 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 1
  store ptr %21, ptr %28, align 8
  %29 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.696, ptr %26, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %29, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.697, align 8
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %31 = getelementptr inbounds { ptr }, ptr %30, i32 0, i32 0
  store ptr %21, ptr %31, align 8
  %32 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.698, ptr %30, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %32, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.699, align 8
  %33 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.697, align 8
  %34 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.699, align 8
  %35 = call ptr @candy_builtin_if_else(ptr %25, ptr %33, ptr %34)
  ret ptr %35
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.692(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_Scale, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @185, align 8
  ret ptr @185
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.694(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `Scale`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @186, align 8
  ret ptr @186
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.696(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 4, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %5, i64 1
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %5, i64 2
  store ptr %4, ptr %11, align 8
  %12 = getelementptr ptr, ptr %5, i64 3
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %5)
  store ptr %13, ptr @187, align 8
  ret ptr @187
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.698(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.700(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_equals_else.702(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Struct, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @188, align 8
  ret ptr @188
}

define ptr @Core_fixedDecimal_is_1_equals_else.704(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected FixedDecimal, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @189, align 8
  ret ptr @189
}

define ptr @Core_fixedDecimal_is_1_equals_else.706(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @190, align 8
  ret ptr @190
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.708(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.710, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.711, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.711, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.710(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_isScale_18.712(ptr %0) {
Core_fixedDecimal_isScale_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Int, align 8
  %5 = call ptr @candy_builtin_equals(ptr %3, ptr %4)
  %6 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  %7 = load ptr, ptr @"Core:fixedDecimal:isScale:18:9", align 8
  %8 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %6, ptr %7)
  %9 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  %10 = load ptr, ptr @"Core:int:isNonNegative:7", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %9, ptr %10)
  %12 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %13 = load ptr, ptr @"Core:int:isNegative:8", align 8
  %14 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %12, ptr %13)
  %15 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %16 = load ptr, ptr @"Core:int:isLessThan:13", align 8
  %17 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %15, ptr %16)
  %18 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  %20 = call ptr @candy_builtin_type_of(ptr %19)
  %21 = load ptr, ptr @tag_Int, align 8
  %22 = call ptr @candy_builtin_equals(ptr %20, ptr %21)
  %23 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %24 = load ptr, ptr @"Core:int:compareTo:20", align 8
  %25 = call ptr @"anonymous_$generated__needs"(ptr %22, ptr %23, ptr %24)
  %26 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = load ptr, ptr @num_0, align 8
  %29 = call ptr @candy_builtin_int_compare_to(ptr %27, ptr %28)
  %30 = load ptr, ptr @tag_Less, align 8
  %31 = call ptr @candy_builtin_equals(ptr %29, ptr %30)
  %32 = call ptr @Core_bool_not(ptr %31)
  ret ptr %32
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.714(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.716, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.717, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.717, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.716(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.718(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.720, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.721, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.721, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.720(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.722(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.724, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.725, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.725, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.724(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.726(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.728, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.729, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.729, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.728(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.730(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.732, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.733, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.733, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.732(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_isLessThanOrEqualTo(ptr %0, ptr %1) {
Core_fixedDecimal_isLessThanOrEqualTo:
  %2 = call ptr @candy_builtin_type_of(ptr %0)
  %3 = load ptr, ptr @tag_Tag, align 8
  %4 = call ptr @candy_builtin_equals(ptr %3, ptr %2)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %0, ptr %6, align 8
  %7 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.734, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %7, ptr @fun_Core_fixedDecimal_is_1_equals_then.735, align 8
  %8 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %9 = getelementptr inbounds { ptr }, ptr %8, i32 0, i32 0
  store ptr %2, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.762, ptr %8, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_else.763, align 8
  %11 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.735, align 8
  %12 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.763, align 8
  %13 = call ptr @candy_builtin_if_else(ptr %4, ptr %11, ptr %12)
  %14 = load ptr, ptr @num_0, align 8
  %15 = call ptr @candy_builtin_list_get(ptr %13, ptr %14)
  %16 = load ptr, ptr @tag_Match, align 8
  %17 = call ptr @candy_builtin_equals(ptr %15, ptr %16)
  %18 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %19 = getelementptr inbounds { ptr }, ptr %18, i32 0, i32 0
  store ptr %13, ptr %19, align 8
  %20 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.764, ptr %18, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %20, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.765, align 8
  %21 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.765, align 8
  %22 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %23 = call ptr @candy_builtin_if_else(ptr %17, ptr %21, ptr %22)
  %24 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %25 = call ptr @"anonymous_$generated__needs"(ptr %23, ptr %24, ptr null)
  %26 = call ptr @candy_builtin_type_of(ptr %1)
  %27 = load ptr, ptr @tag_Tag, align 8
  %28 = call ptr @candy_builtin_equals(ptr %27, ptr %26)
  %29 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %30 = getelementptr inbounds { ptr }, ptr %29, i32 0, i32 0
  store ptr %1, ptr %30, align 8
  %31 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.768, ptr %29, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %31, ptr @fun_Core_fixedDecimal_is_1_equals_then.769, align 8
  %32 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %33 = getelementptr inbounds { ptr }, ptr %32, i32 0, i32 0
  store ptr %26, ptr %33, align 8
  %34 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.796, ptr %32, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %34, ptr @fun_Core_fixedDecimal_is_1_equals_else.797, align 8
  %35 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.769, align 8
  %36 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.797, align 8
  %37 = call ptr @candy_builtin_if_else(ptr %28, ptr %35, ptr %36)
  %38 = load ptr, ptr @num_0, align 8
  %39 = call ptr @candy_builtin_list_get(ptr %37, ptr %38)
  %40 = load ptr, ptr @tag_Match, align 8
  %41 = call ptr @candy_builtin_equals(ptr %39, ptr %40)
  %42 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %43 = getelementptr inbounds { ptr }, ptr %42, i32 0, i32 0
  store ptr %37, ptr %43, align 8
  %44 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.798, ptr %42, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %44, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.799, align 8
  %45 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.799, align 8
  %46 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %47 = call ptr @candy_builtin_if_else(ptr %41, ptr %45, ptr %46)
  %48 = load ptr, ptr @"text_`is valueB` was not satisfied", align 8
  %49 = call ptr @"anonymous_$generated__needs"(ptr %47, ptr %48, ptr null)
  %50 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.735, align 8
  %51 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.763, align 8
  %52 = call ptr @candy_builtin_if_else(ptr %4, ptr %50, ptr %51)
  %53 = load ptr, ptr @num_0, align 8
  %54 = call ptr @candy_builtin_list_get(ptr %52, ptr %53)
  %55 = load ptr, ptr @tag_Match, align 8
  %56 = call ptr @candy_builtin_equals(ptr %54, ptr %55)
  %57 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %58 = getelementptr inbounds { ptr }, ptr %57, i32 0, i32 0
  store ptr %52, ptr %58, align 8
  %59 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.802, ptr %57, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %59, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.803, align 8
  %60 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.803, align 8
  %61 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %62 = call ptr @candy_builtin_if_else(ptr %56, ptr %60, ptr %61)
  %63 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %64 = load ptr, ptr @"Core:fixedDecimal:isLessThanOrEqualTo:13", align 8
  %65 = call ptr @"anonymous_$generated__needs"(ptr %62, ptr %63, ptr %64)
  %66 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.769, align 8
  %67 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.797, align 8
  %68 = call ptr @candy_builtin_if_else(ptr %28, ptr %66, ptr %67)
  %69 = load ptr, ptr @num_0, align 8
  %70 = call ptr @candy_builtin_list_get(ptr %68, ptr %69)
  %71 = load ptr, ptr @tag_Match, align 8
  %72 = call ptr @candy_builtin_equals(ptr %70, ptr %71)
  %73 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %74 = getelementptr inbounds { ptr }, ptr %73, i32 0, i32 0
  store ptr %68, ptr %74, align 8
  %75 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.806, ptr %73, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %75, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.807, align 8
  %76 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.807, align 8
  %77 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %78 = call ptr @candy_builtin_if_else(ptr %72, ptr %76, ptr %77)
  %79 = load ptr, ptr @"text_`is valueB` was not satisfied", align 8
  %80 = load ptr, ptr @"Core:fixedDecimal:isLessThanOrEqualTo:13", align 8
  %81 = call ptr @"anonymous_$generated__needs"(ptr %78, ptr %79, ptr %80)
  %82 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.735, align 8
  %83 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.763, align 8
  %84 = call ptr @candy_builtin_if_else(ptr %4, ptr %82, ptr %83)
  %85 = load ptr, ptr @num_0, align 8
  %86 = call ptr @candy_builtin_list_get(ptr %84, ptr %85)
  %87 = load ptr, ptr @tag_Match, align 8
  %88 = call ptr @candy_builtin_equals(ptr %86, ptr %87)
  %89 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %90 = getelementptr inbounds { ptr }, ptr %89, i32 0, i32 0
  store ptr %84, ptr %90, align 8
  %91 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.810, ptr %89, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %91, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.811, align 8
  %92 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.811, align 8
  %93 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %94 = call ptr @candy_builtin_if_else(ptr %88, ptr %92, ptr %93)
  %95 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %96 = load ptr, ptr @"Core:fixedDecimal:isGreaterThan:14", align 8
  %97 = call ptr @"anonymous_$generated__needs"(ptr %94, ptr %95, ptr %96)
  %98 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.769, align 8
  %99 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.797, align 8
  %100 = call ptr @candy_builtin_if_else(ptr %28, ptr %98, ptr %99)
  %101 = load ptr, ptr @num_0, align 8
  %102 = call ptr @candy_builtin_list_get(ptr %100, ptr %101)
  %103 = load ptr, ptr @tag_Match, align 8
  %104 = call ptr @candy_builtin_equals(ptr %102, ptr %103)
  %105 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %106 = getelementptr inbounds { ptr }, ptr %105, i32 0, i32 0
  store ptr %100, ptr %106, align 8
  %107 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.814, ptr %105, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %107, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.815, align 8
  %108 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.815, align 8
  %109 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %110 = call ptr @candy_builtin_if_else(ptr %104, ptr %108, ptr %109)
  %111 = load ptr, ptr @"text_`is valueB` was not satisfied", align 8
  %112 = load ptr, ptr @"Core:fixedDecimal:isGreaterThan:14", align 8
  %113 = call ptr @"anonymous_$generated__needs"(ptr %110, ptr %111, ptr %112)
  %114 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.735, align 8
  %115 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.763, align 8
  %116 = call ptr @candy_builtin_if_else(ptr %4, ptr %114, ptr %115)
  %117 = load ptr, ptr @num_0, align 8
  %118 = call ptr @candy_builtin_list_get(ptr %116, ptr %117)
  %119 = load ptr, ptr @tag_Match, align 8
  %120 = call ptr @candy_builtin_equals(ptr %118, ptr %119)
  %121 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %122 = getelementptr inbounds { ptr }, ptr %121, i32 0, i32 0
  store ptr %116, ptr %122, align 8
  %123 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.818, ptr %121, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %123, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.819, align 8
  %124 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.819, align 8
  %125 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %126 = call ptr @candy_builtin_if_else(ptr %120, ptr %124, ptr %125)
  %127 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %128 = load ptr, ptr @"Core:fixedDecimal:compareTo:13", align 8
  %129 = call ptr @"anonymous_$generated__needs"(ptr %126, ptr %127, ptr %128)
  %130 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.769, align 8
  %131 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.797, align 8
  %132 = call ptr @candy_builtin_if_else(ptr %28, ptr %130, ptr %131)
  %133 = load ptr, ptr @num_0, align 8
  %134 = call ptr @candy_builtin_list_get(ptr %132, ptr %133)
  %135 = load ptr, ptr @tag_Match, align 8
  %136 = call ptr @candy_builtin_equals(ptr %134, ptr %135)
  %137 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %138 = getelementptr inbounds { ptr }, ptr %137, i32 0, i32 0
  store ptr %132, ptr %138, align 8
  %139 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.822, ptr %137, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %139, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.823, align 8
  %140 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.823, align 8
  %141 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %142 = call ptr @candy_builtin_if_else(ptr %136, ptr %140, ptr %141)
  %143 = load ptr, ptr @"text_`is valueB` was not satisfied", align 8
  %144 = load ptr, ptr @"Core:fixedDecimal:compareTo:13", align 8
  %145 = call ptr @"anonymous_$generated__needs"(ptr %142, ptr %143, ptr %144)
  %146 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.735, align 8
  %147 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.763, align 8
  %148 = call ptr @candy_builtin_if_else(ptr %4, ptr %146, ptr %147)
  %149 = load ptr, ptr @num_0, align 8
  %150 = call ptr @candy_builtin_list_get(ptr %148, ptr %149)
  %151 = load ptr, ptr @tag_Match, align 8
  %152 = call ptr @candy_builtin_equals(ptr %150, ptr %151)
  %153 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %154 = getelementptr inbounds { ptr }, ptr %153, i32 0, i32 0
  store ptr %148, ptr %154, align 8
  %155 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.826, ptr %153, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %155, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.827, align 8
  %156 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.827, align 8
  %157 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %158 = call ptr @candy_builtin_if_else(ptr %152, ptr %156, ptr %157)
  %159 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %160 = load ptr, ptr @"Core:fixedDecimal:comparableMinorUnits:20", align 8
  %161 = call ptr @"anonymous_$generated__needs"(ptr %158, ptr %159, ptr %160)
  %162 = call ptr @candy_builtin_type_of(ptr %0)
  %163 = load ptr, ptr @tag_Tag, align 8
  %164 = call ptr @candy_builtin_equals(ptr %162, ptr %163)
  %165 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %166 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %167 = call ptr @"anonymous_$generated__needs"(ptr %164, ptr %165, ptr %166)
  %168 = call ptr @candy_builtin_tag_has_value(ptr %0)
  %169 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %170 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %171 = call ptr @"anonymous_$generated__needs"(ptr %168, ptr %169, ptr %170)
  %172 = call ptr @candy_builtin_tag_get_value(ptr %0)
  %173 = call ptr @candy_builtin_type_of(ptr %172)
  %174 = load ptr, ptr @tag_Struct, align 8
  %175 = call ptr @candy_builtin_equals(ptr %173, ptr %174)
  %176 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %177 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %178 = call ptr @"anonymous_$generated__needs"(ptr %175, ptr %176, ptr %177)
  %179 = load ptr, ptr @tag_Scale, align 8
  %180 = call ptr @candy_builtin_struct_has_key(ptr %172, ptr %179)
  %181 = load ptr, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  %182 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %183 = call ptr @"anonymous_$generated__needs"(ptr %180, ptr %181, ptr %182)
  %184 = load ptr, ptr @tag_Scale, align 8
  %185 = call ptr @candy_builtin_struct_get(ptr %172, ptr %184)
  %186 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.769, align 8
  %187 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.797, align 8
  %188 = call ptr @candy_builtin_if_else(ptr %28, ptr %186, ptr %187)
  %189 = load ptr, ptr @num_0, align 8
  %190 = call ptr @candy_builtin_list_get(ptr %188, ptr %189)
  %191 = load ptr, ptr @tag_Match, align 8
  %192 = call ptr @candy_builtin_equals(ptr %190, ptr %191)
  %193 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %194 = getelementptr inbounds { ptr }, ptr %193, i32 0, i32 0
  store ptr %188, ptr %194, align 8
  %195 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.830, ptr %193, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %195, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.831, align 8
  %196 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.831, align 8
  %197 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %198 = call ptr @candy_builtin_if_else(ptr %192, ptr %196, ptr %197)
  %199 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %200 = load ptr, ptr @"Core:fixedDecimal:comparableMinorUnits:23", align 8
  %201 = call ptr @"anonymous_$generated__needs"(ptr %198, ptr %199, ptr %200)
  %202 = call ptr @candy_builtin_type_of(ptr %1)
  %203 = load ptr, ptr @tag_Tag, align 8
  %204 = call ptr @candy_builtin_equals(ptr %202, ptr %203)
  %205 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %206 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %207 = call ptr @"anonymous_$generated__needs"(ptr %204, ptr %205, ptr %206)
  %208 = call ptr @candy_builtin_tag_has_value(ptr %1)
  %209 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %210 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %211 = call ptr @"anonymous_$generated__needs"(ptr %208, ptr %209, ptr %210)
  %212 = call ptr @candy_builtin_tag_get_value(ptr %1)
  %213 = call ptr @candy_builtin_type_of(ptr %212)
  %214 = load ptr, ptr @tag_Struct, align 8
  %215 = call ptr @candy_builtin_equals(ptr %213, ptr %214)
  %216 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %217 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %218 = call ptr @"anonymous_$generated__needs"(ptr %215, ptr %216, ptr %217)
  %219 = load ptr, ptr @tag_Scale, align 8
  %220 = call ptr @candy_builtin_struct_has_key(ptr %212, ptr %219)
  %221 = load ptr, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  %222 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %223 = call ptr @"anonymous_$generated__needs"(ptr %220, ptr %221, ptr %222)
  %224 = load ptr, ptr @tag_Scale, align 8
  %225 = call ptr @candy_builtin_struct_get(ptr %212, ptr %224)
  %226 = call ptr @Core_int_max(ptr %185, ptr %225)
  %227 = call ptr @Core_fixedDecimal_rescaledMinorUnits(ptr %0, ptr %226)
  %228 = call ptr @Core_fixedDecimal_rescaledMinorUnits(ptr %1, ptr %226)
  %229 = call ptr @Core_int_compareTo(ptr %227, ptr %228)
  %230 = load ptr, ptr @tag_Equal, align 8
  %231 = call ptr @candy_builtin_equals(ptr %229, ptr %230)
  %232 = call ptr @candy_builtin_equals(ptr %227, ptr %228)
  %233 = call ptr @Core_bool_implies(ptr %231, ptr %232)
  %234 = call ptr @Core_check_check(ptr %233)
  %235 = load ptr, ptr @tag_Greater, align 8
  %236 = call ptr @candy_builtin_equals(ptr %229, ptr %235)
  %237 = call ptr @Core_bool_not(ptr %236)
  ret ptr %237
}

define ptr @Core_fixedDecimal_is_1_equals_then.734(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_FixedDecimal, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.736, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.737, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.760, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_equals_else.761, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.737, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.761, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_equals_then.736(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.738, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.739, align 8
  %11 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.739, align 8
  %12 = load ptr, ptr @"fun_Core_fixedDecimal_is_1_equals_else, Core_result_is_1_equals_else, Core_result_mapOrElse_30_equals_else", align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_fixedDecimal_is_1_equals_then.738(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_type_of(ptr %3)
  %5 = load ptr, ptr @tag_Struct, align 8
  %6 = call ptr @candy_builtin_equals(ptr %5, ptr %4)
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %8 = getelementptr inbounds { ptr }, ptr %7, i32 0, i32 0
  store ptr %3, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.740, ptr %7, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_equals_then.741, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %4, ptr %11, align 8
  %12 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.758, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %12, ptr @fun_Core_fixedDecimal_is_1_equals_else.759, align 8
  %13 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.741, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.759, align 8
  %15 = call ptr @candy_builtin_if_else(ptr %6, ptr %13, ptr %14)
  ret ptr %15
}

define ptr @Core_fixedDecimal_is_1_equals_then.740(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_has_key(ptr %2, ptr %3)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %7, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.742, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.743, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %12, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.744, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.745, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.743, align 8
  %16 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.745, align 8
  %17 = call ptr @candy_builtin_if_else(ptr %4, ptr %15, ptr %16)
  %18 = load ptr, ptr @num_0, align 8
  %19 = call ptr @candy_builtin_list_get(ptr %17, ptr %18)
  %20 = load ptr, ptr @tag_Match, align 8
  %21 = call ptr @candy_builtin_equals(ptr %19, ptr %20)
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %23 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 0
  store ptr %17, ptr %23, align 8
  %24 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 1
  store ptr %25, ptr %26, align 8
  %27 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.746, ptr %22, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %27, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.747, align 8
  %28 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %29 = getelementptr inbounds { ptr }, ptr %28, i32 0, i32 0
  store ptr %17, ptr %29, align 8
  %30 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.756, ptr %28, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %30, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.757, align 8
  %31 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.747, align 8
  %32 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.757, align 8
  %33 = call ptr @candy_builtin_if_else(ptr %21, ptr %31, ptr %32)
  ret ptr %33
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.742(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @191, align 8
  ret ptr @191
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.744(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `MinorUnits`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @192, align 8
  ret ptr @192
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.746(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @tag_Scale, align 8
  %8 = call ptr @candy_builtin_struct_has_key(ptr %6, ptr %7)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %10 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds { ptr }, ptr %9, i32 0, i32 0
  store ptr %11, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.748, ptr %9, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.749, align 8
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %15 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds { ptr }, ptr %14, i32 0, i32 0
  store ptr %16, ptr %17, align 8
  %18 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.750, ptr %14, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %18, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.751, align 8
  %19 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.749, align 8
  %20 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.751, align 8
  %21 = call ptr @candy_builtin_if_else(ptr %8, ptr %19, ptr %20)
  %22 = load ptr, ptr @num_0, align 8
  %23 = call ptr @candy_builtin_list_get(ptr %21, ptr %22)
  %24 = load ptr, ptr @tag_Match, align 8
  %25 = call ptr @candy_builtin_equals(ptr %23, ptr %24)
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %27 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 0
  store ptr %4, ptr %27, align 8
  %28 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 1
  store ptr %21, ptr %28, align 8
  %29 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.752, ptr %26, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %29, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.753, align 8
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %31 = getelementptr inbounds { ptr }, ptr %30, i32 0, i32 0
  store ptr %21, ptr %31, align 8
  %32 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.754, ptr %30, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %32, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.755, align 8
  %33 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.753, align 8
  %34 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.755, align 8
  %35 = call ptr @candy_builtin_if_else(ptr %25, ptr %33, ptr %34)
  ret ptr %35
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.748(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_Scale, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @193, align 8
  ret ptr @193
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.750(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `Scale`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @194, align 8
  ret ptr @194
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.752(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 4, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %5, i64 1
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %5, i64 2
  store ptr %4, ptr %11, align 8
  %12 = getelementptr ptr, ptr %5, i64 3
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %5)
  store ptr %13, ptr @195, align 8
  ret ptr @195
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.754(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.756(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_equals_else.758(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Struct, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @196, align 8
  ret ptr @196
}

define ptr @Core_fixedDecimal_is_1_equals_else.760(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected FixedDecimal, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @197, align 8
  ret ptr @197
}

define ptr @Core_fixedDecimal_is_1_equals_else.762(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @198, align 8
  ret ptr @198
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.764(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.766, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.767, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.767, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.766(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_equals_then.768(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_FixedDecimal, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.770, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.771, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.794, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_equals_else.795, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.771, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.795, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_equals_then.770(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.772, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.773, align 8
  %11 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.773, align 8
  %12 = load ptr, ptr @"fun_Core_fixedDecimal_is_1_equals_else, Core_result_is_1_equals_else, Core_result_mapOrElse_30_equals_else", align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_fixedDecimal_is_1_equals_then.772(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_type_of(ptr %3)
  %5 = load ptr, ptr @tag_Struct, align 8
  %6 = call ptr @candy_builtin_equals(ptr %5, ptr %4)
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %8 = getelementptr inbounds { ptr }, ptr %7, i32 0, i32 0
  store ptr %3, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.774, ptr %7, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_equals_then.775, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %4, ptr %11, align 8
  %12 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.792, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %12, ptr @fun_Core_fixedDecimal_is_1_equals_else.793, align 8
  %13 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.775, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.793, align 8
  %15 = call ptr @candy_builtin_if_else(ptr %6, ptr %13, ptr %14)
  ret ptr %15
}

define ptr @Core_fixedDecimal_is_1_equals_then.774(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_has_key(ptr %2, ptr %3)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %7, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.776, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.777, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %12, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.778, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.779, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.777, align 8
  %16 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.779, align 8
  %17 = call ptr @candy_builtin_if_else(ptr %4, ptr %15, ptr %16)
  %18 = load ptr, ptr @num_0, align 8
  %19 = call ptr @candy_builtin_list_get(ptr %17, ptr %18)
  %20 = load ptr, ptr @tag_Match, align 8
  %21 = call ptr @candy_builtin_equals(ptr %19, ptr %20)
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %23 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 0
  store ptr %24, ptr %25, align 8
  %26 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 1
  store ptr %17, ptr %26, align 8
  %27 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.780, ptr %22, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %27, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.781, align 8
  %28 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %29 = getelementptr inbounds { ptr }, ptr %28, i32 0, i32 0
  store ptr %17, ptr %29, align 8
  %30 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.790, ptr %28, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %30, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.791, align 8
  %31 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.781, align 8
  %32 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.791, align 8
  %33 = call ptr @candy_builtin_if_else(ptr %21, ptr %31, ptr %32)
  ret ptr %33
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.776(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @199, align 8
  ret ptr @199
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.778(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `MinorUnits`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @200, align 8
  ret ptr @200
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.780(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @tag_Scale, align 8
  %8 = call ptr @candy_builtin_struct_has_key(ptr %6, ptr %7)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %10 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds { ptr }, ptr %9, i32 0, i32 0
  store ptr %11, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.782, ptr %9, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.783, align 8
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %15 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds { ptr }, ptr %14, i32 0, i32 0
  store ptr %16, ptr %17, align 8
  %18 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.784, ptr %14, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %18, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.785, align 8
  %19 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.783, align 8
  %20 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.785, align 8
  %21 = call ptr @candy_builtin_if_else(ptr %8, ptr %19, ptr %20)
  %22 = load ptr, ptr @num_0, align 8
  %23 = call ptr @candy_builtin_list_get(ptr %21, ptr %22)
  %24 = load ptr, ptr @tag_Match, align 8
  %25 = call ptr @candy_builtin_equals(ptr %23, ptr %24)
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %27 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 0
  store ptr %4, ptr %27, align 8
  %28 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 1
  store ptr %21, ptr %28, align 8
  %29 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.786, ptr %26, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %29, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.787, align 8
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %31 = getelementptr inbounds { ptr }, ptr %30, i32 0, i32 0
  store ptr %21, ptr %31, align 8
  %32 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.788, ptr %30, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %32, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.789, align 8
  %33 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.787, align 8
  %34 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.789, align 8
  %35 = call ptr @candy_builtin_if_else(ptr %25, ptr %33, ptr %34)
  ret ptr %35
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.782(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_Scale, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @201, align 8
  ret ptr @201
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.784(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `Scale`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @202, align 8
  ret ptr @202
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.786(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 4, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %5, i64 1
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %5, i64 2
  store ptr %4, ptr %11, align 8
  %12 = getelementptr ptr, ptr %5, i64 3
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %5)
  store ptr %13, ptr @203, align 8
  ret ptr @203
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.788(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.790(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_equals_else.792(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Struct, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @204, align 8
  ret ptr @204
}

define ptr @Core_fixedDecimal_is_1_equals_else.794(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected FixedDecimal, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @205, align 8
  ret ptr @205
}

define ptr @Core_fixedDecimal_is_1_equals_else.796(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @206, align 8
  ret ptr @206
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.798(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.800, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.801, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.801, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.800(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.802(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.804, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.805, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.805, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.804(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.806(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.808, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.809, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.809, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.808(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.810(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.812, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.813, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.813, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.812(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.814(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.816, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.817, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.817, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.816(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.818(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.820, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.821, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.821, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.820(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.822(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.824, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.825, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.825, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.824(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.826(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.828, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.829, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.829, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.828(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.830(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.832, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.833, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.833, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.832(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_absolute(ptr %0) {
Core_fixedDecimal_absolute:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Tag, align 8
  %3 = call ptr @candy_builtin_equals(ptr %2, ptr %1)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %5 = getelementptr inbounds { ptr }, ptr %4, i32 0, i32 0
  store ptr %0, ptr %5, align 8
  %6 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.834, ptr %4, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %6, ptr @fun_Core_fixedDecimal_is_1_equals_then.835, align 8
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %8 = getelementptr inbounds { ptr }, ptr %7, i32 0, i32 0
  store ptr %1, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.862, ptr %7, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_equals_else.863, align 8
  %10 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.835, align 8
  %11 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.863, align 8
  %12 = call ptr @candy_builtin_if_else(ptr %3, ptr %10, ptr %11)
  %13 = load ptr, ptr @num_0, align 8
  %14 = call ptr @candy_builtin_list_get(ptr %12, ptr %13)
  %15 = load ptr, ptr @tag_Match, align 8
  %16 = call ptr @candy_builtin_equals(ptr %14, ptr %15)
  %17 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %18 = getelementptr inbounds { ptr }, ptr %17, i32 0, i32 0
  store ptr %12, ptr %18, align 8
  %19 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.864, ptr %17, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %19, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.865, align 8
  %20 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.865, align 8
  %21 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %22 = call ptr @candy_builtin_if_else(ptr %16, ptr %20, ptr %21)
  %23 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  %24 = call ptr @"anonymous_$generated__needs"(ptr %22, ptr %23, ptr null)
  %25 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.835, align 8
  %26 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.863, align 8
  %27 = call ptr @candy_builtin_if_else(ptr %3, ptr %25, ptr %26)
  %28 = load ptr, ptr @num_0, align 8
  %29 = call ptr @candy_builtin_list_get(ptr %27, ptr %28)
  %30 = load ptr, ptr @tag_Match, align 8
  %31 = call ptr @candy_builtin_equals(ptr %29, ptr %30)
  %32 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %33 = getelementptr inbounds { ptr }, ptr %32, i32 0, i32 0
  store ptr %27, ptr %33, align 8
  %34 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.868, ptr %32, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %34, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.869, align 8
  %35 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.869, align 8
  %36 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %37 = call ptr @candy_builtin_if_else(ptr %31, ptr %35, ptr %36)
  %38 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  %39 = load ptr, ptr @"Core:fixedDecimal:absolute:8", align 8
  %40 = call ptr @"anonymous_$generated__needs"(ptr %37, ptr %38, ptr %39)
  %41 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.835, align 8
  %42 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.863, align 8
  %43 = call ptr @candy_builtin_if_else(ptr %3, ptr %41, ptr %42)
  %44 = load ptr, ptr @num_0, align 8
  %45 = call ptr @candy_builtin_list_get(ptr %43, ptr %44)
  %46 = load ptr, ptr @tag_Match, align 8
  %47 = call ptr @candy_builtin_equals(ptr %45, ptr %46)
  %48 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %49 = getelementptr inbounds { ptr }, ptr %48, i32 0, i32 0
  store ptr %43, ptr %49, align 8
  %50 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.872, ptr %48, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %50, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.873, align 8
  %51 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.873, align 8
  %52 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %53 = call ptr @candy_builtin_if_else(ptr %47, ptr %51, ptr %52)
  %54 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %55 = load ptr, ptr @"Core:fixedDecimal:isNegative:7", align 8
  %56 = call ptr @"anonymous_$generated__needs"(ptr %53, ptr %54, ptr %55)
  %57 = call ptr @candy_builtin_type_of(ptr %0)
  %58 = load ptr, ptr @tag_Tag, align 8
  %59 = call ptr @candy_builtin_equals(ptr %57, ptr %58)
  %60 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %61 = load ptr, ptr @"Core:fixedDecimal:minorUnits:19", align 8
  %62 = call ptr @"anonymous_$generated__needs"(ptr %59, ptr %60, ptr %61)
  %63 = call ptr @candy_builtin_tag_has_value(ptr %0)
  %64 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %65 = load ptr, ptr @"Core:fixedDecimal:minorUnits:19", align 8
  %66 = call ptr @"anonymous_$generated__needs"(ptr %63, ptr %64, ptr %65)
  %67 = call ptr @candy_builtin_tag_get_value(ptr %0)
  %68 = call ptr @candy_builtin_type_of(ptr %67)
  %69 = load ptr, ptr @tag_Struct, align 8
  %70 = call ptr @candy_builtin_equals(ptr %68, ptr %69)
  %71 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %72 = load ptr, ptr @"Core:fixedDecimal:minorUnits:21", align 8
  %73 = call ptr @"anonymous_$generated__needs"(ptr %70, ptr %71, ptr %72)
  %74 = load ptr, ptr @tag_MinorUnits, align 8
  %75 = call ptr @candy_builtin_struct_has_key(ptr %67, ptr %74)
  %76 = load ptr, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  %77 = load ptr, ptr @"Core:fixedDecimal:minorUnits:21", align 8
  %78 = call ptr @"anonymous_$generated__needs"(ptr %75, ptr %76, ptr %77)
  %79 = load ptr, ptr @tag_MinorUnits, align 8
  %80 = call ptr @candy_builtin_struct_get(ptr %67, ptr %79)
  %81 = load ptr, ptr @num_0, align 8
  %82 = call ptr @Core_int_isLessThan(ptr %80, ptr %81)
  %83 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %84 = getelementptr inbounds { ptr }, ptr %83, i32 0, i32 0
  store ptr %0, ptr %84, align 8
  %85 = call ptr @make_candy_function(ptr @Core_fixedDecimal_absolute_9, ptr %83, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %85, ptr @fun_Core_fixedDecimal_absolute_9, align 8
  %86 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %87 = getelementptr inbounds { ptr }, ptr %86, i32 0, i32 0
  store ptr %0, ptr %87, align 8
  %88 = call ptr @make_candy_function(ptr @Core_fixedDecimal_absolute_10, ptr %86, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %88, ptr @fun_Core_fixedDecimal_absolute_10, align 8
  %89 = load ptr, ptr @fun_Core_fixedDecimal_absolute_9, align 8
  %90 = load ptr, ptr @fun_Core_fixedDecimal_absolute_10, align 8
  %91 = call ptr @Builtins__ifElse(ptr %82, ptr %89, ptr %90)
  ret ptr %91
}

define ptr @Core_fixedDecimal_is_1_equals_then.834(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_FixedDecimal, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.836, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.837, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.860, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_equals_else.861, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.837, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.861, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_equals_then.836(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.838, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.839, align 8
  %11 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.839, align 8
  %12 = load ptr, ptr @"fun_Core_fixedDecimal_is_1_equals_else, Core_result_is_1_equals_else, Core_result_mapOrElse_30_equals_else", align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_fixedDecimal_is_1_equals_then.838(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_type_of(ptr %3)
  %5 = load ptr, ptr @tag_Struct, align 8
  %6 = call ptr @candy_builtin_equals(ptr %5, ptr %4)
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %8 = getelementptr inbounds { ptr }, ptr %7, i32 0, i32 0
  store ptr %3, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.840, ptr %7, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_equals_then.841, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %4, ptr %11, align 8
  %12 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.858, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %12, ptr @fun_Core_fixedDecimal_is_1_equals_else.859, align 8
  %13 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.841, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.859, align 8
  %15 = call ptr @candy_builtin_if_else(ptr %6, ptr %13, ptr %14)
  ret ptr %15
}

define ptr @Core_fixedDecimal_is_1_equals_then.840(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_has_key(ptr %2, ptr %3)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %7, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.842, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.843, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %12, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.844, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.845, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.843, align 8
  %16 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.845, align 8
  %17 = call ptr @candy_builtin_if_else(ptr %4, ptr %15, ptr %16)
  %18 = load ptr, ptr @num_0, align 8
  %19 = call ptr @candy_builtin_list_get(ptr %17, ptr %18)
  %20 = load ptr, ptr @tag_Match, align 8
  %21 = call ptr @candy_builtin_equals(ptr %19, ptr %20)
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %23 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 0
  store ptr %24, ptr %25, align 8
  %26 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 1
  store ptr %17, ptr %26, align 8
  %27 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.846, ptr %22, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %27, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.847, align 8
  %28 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %29 = getelementptr inbounds { ptr }, ptr %28, i32 0, i32 0
  store ptr %17, ptr %29, align 8
  %30 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.856, ptr %28, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %30, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.857, align 8
  %31 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.847, align 8
  %32 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.857, align 8
  %33 = call ptr @candy_builtin_if_else(ptr %21, ptr %31, ptr %32)
  ret ptr %33
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.842(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @207, align 8
  ret ptr @207
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.844(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `MinorUnits`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @208, align 8
  ret ptr @208
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.846(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @tag_Scale, align 8
  %8 = call ptr @candy_builtin_struct_has_key(ptr %6, ptr %7)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %10 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds { ptr }, ptr %9, i32 0, i32 0
  store ptr %11, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.848, ptr %9, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.849, align 8
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %15 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds { ptr }, ptr %14, i32 0, i32 0
  store ptr %16, ptr %17, align 8
  %18 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.850, ptr %14, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %18, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.851, align 8
  %19 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.849, align 8
  %20 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.851, align 8
  %21 = call ptr @candy_builtin_if_else(ptr %8, ptr %19, ptr %20)
  %22 = load ptr, ptr @num_0, align 8
  %23 = call ptr @candy_builtin_list_get(ptr %21, ptr %22)
  %24 = load ptr, ptr @tag_Match, align 8
  %25 = call ptr @candy_builtin_equals(ptr %23, ptr %24)
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %27 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 0
  store ptr %4, ptr %27, align 8
  %28 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 1
  store ptr %21, ptr %28, align 8
  %29 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.852, ptr %26, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %29, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.853, align 8
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %31 = getelementptr inbounds { ptr }, ptr %30, i32 0, i32 0
  store ptr %21, ptr %31, align 8
  %32 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.854, ptr %30, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %32, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.855, align 8
  %33 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.853, align 8
  %34 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.855, align 8
  %35 = call ptr @candy_builtin_if_else(ptr %25, ptr %33, ptr %34)
  ret ptr %35
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.848(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_Scale, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @209, align 8
  ret ptr @209
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.850(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `Scale`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @210, align 8
  ret ptr @210
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.852(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 4, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %5, i64 1
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %5, i64 2
  store ptr %4, ptr %11, align 8
  %12 = getelementptr ptr, ptr %5, i64 3
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %5)
  store ptr %13, ptr @211, align 8
  ret ptr @211
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.854(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.856(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_equals_else.858(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Struct, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @212, align 8
  ret ptr @212
}

define ptr @Core_fixedDecimal_is_1_equals_else.860(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected FixedDecimal, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @213, align 8
  ret ptr @213
}

define ptr @Core_fixedDecimal_is_1_equals_else.862(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @214, align 8
  ret ptr @214
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.864(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.866, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.867, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.867, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.866(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.868(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.870, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.871, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.871, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.870(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.872(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.874, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.875, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.875, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.874(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_absolute_9(ptr %0) {
Core_fixedDecimal_absolute_9:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Tag, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.876, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.877, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.904, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_equals_else.905, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.877, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.905, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  %17 = load ptr, ptr @num_0, align 8
  %18 = call ptr @candy_builtin_list_get(ptr %16, ptr %17)
  %19 = load ptr, ptr @tag_Match, align 8
  %20 = call ptr @candy_builtin_equals(ptr %18, ptr %19)
  %21 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %22 = getelementptr inbounds { ptr }, ptr %21, i32 0, i32 0
  store ptr %16, ptr %22, align 8
  %23 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.906, ptr %21, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %23, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.907, align 8
  %24 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.907, align 8
  %25 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %26 = call ptr @candy_builtin_if_else(ptr %20, ptr %24, ptr %25)
  %27 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  %28 = load ptr, ptr @"Core:fixedDecimal:absolute:9:2", align 8
  %29 = call ptr @"anonymous_$generated__needs"(ptr %26, ptr %27, ptr %28)
  %30 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.877, align 8
  %31 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.905, align 8
  %32 = call ptr @candy_builtin_if_else(ptr %5, ptr %30, ptr %31)
  %33 = load ptr, ptr @num_0, align 8
  %34 = call ptr @candy_builtin_list_get(ptr %32, ptr %33)
  %35 = load ptr, ptr @tag_Match, align 8
  %36 = call ptr @candy_builtin_equals(ptr %34, ptr %35)
  %37 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %38 = getelementptr inbounds { ptr }, ptr %37, i32 0, i32 0
  store ptr %32, ptr %38, align 8
  %39 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.910, ptr %37, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %39, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.911, align 8
  %40 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.911, align 8
  %41 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %42 = call ptr @candy_builtin_if_else(ptr %36, ptr %40, ptr %41)
  %43 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %44 = load ptr, ptr @"Core:fixedDecimal:negate:8", align 8
  %45 = call ptr @"anonymous_$generated__needs"(ptr %42, ptr %43, ptr %44)
  %46 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %47 = load ptr, ptr %46, align 8
  %48 = call ptr @candy_builtin_type_of(ptr %47)
  %49 = load ptr, ptr @tag_Tag, align 8
  %50 = call ptr @candy_builtin_equals(ptr %48, ptr %49)
  %51 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %52 = load ptr, ptr @"Core:fixedDecimal:minorUnits:19", align 8
  %53 = call ptr @"anonymous_$generated__needs"(ptr %50, ptr %51, ptr %52)
  %54 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %55 = load ptr, ptr %54, align 8
  %56 = call ptr @candy_builtin_tag_has_value(ptr %55)
  %57 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %58 = load ptr, ptr @"Core:fixedDecimal:minorUnits:19", align 8
  %59 = call ptr @"anonymous_$generated__needs"(ptr %56, ptr %57, ptr %58)
  %60 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = call ptr @candy_builtin_tag_get_value(ptr %61)
  %63 = call ptr @candy_builtin_type_of(ptr %62)
  %64 = load ptr, ptr @tag_Struct, align 8
  %65 = call ptr @candy_builtin_equals(ptr %63, ptr %64)
  %66 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %67 = load ptr, ptr @"Core:fixedDecimal:minorUnits:21", align 8
  %68 = call ptr @"anonymous_$generated__needs"(ptr %65, ptr %66, ptr %67)
  %69 = load ptr, ptr @tag_MinorUnits, align 8
  %70 = call ptr @candy_builtin_struct_has_key(ptr %62, ptr %69)
  %71 = load ptr, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  %72 = load ptr, ptr @"Core:fixedDecimal:minorUnits:21", align 8
  %73 = call ptr @"anonymous_$generated__needs"(ptr %70, ptr %71, ptr %72)
  %74 = load ptr, ptr @tag_MinorUnits, align 8
  %75 = call ptr @candy_builtin_struct_get(ptr %62, ptr %74)
  %76 = call ptr @candy_builtin_type_of(ptr %75)
  %77 = load ptr, ptr @tag_Int, align 8
  %78 = call ptr @candy_builtin_equals(ptr %76, ptr %77)
  %79 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  %80 = load ptr, ptr @"Core:fixedDecimal:negate:17", align 8
  %81 = call ptr @"anonymous_$generated__needs"(ptr %78, ptr %79, ptr %80)
  %82 = call ptr @candy_builtin_type_of(ptr %75)
  %83 = load ptr, ptr @tag_Int, align 8
  %84 = call ptr @candy_builtin_equals(ptr %82, ptr %83)
  %85 = load ptr, ptr @"text_`subtrahend | typeIs Int` was not satisfied", align 8
  %86 = load ptr, ptr @"Core:int:negate:8", align 8
  %87 = call ptr @"anonymous_$generated__needs"(ptr %84, ptr %85, ptr %86)
  %88 = load ptr, ptr @num_0, align 8
  %89 = call ptr @candy_builtin_int_subtract(ptr %88, ptr %75)
  %90 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.877, align 8
  %91 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.905, align 8
  %92 = call ptr @candy_builtin_if_else(ptr %5, ptr %90, ptr %91)
  %93 = load ptr, ptr @num_0, align 8
  %94 = call ptr @candy_builtin_list_get(ptr %92, ptr %93)
  %95 = load ptr, ptr @tag_Match, align 8
  %96 = call ptr @candy_builtin_equals(ptr %94, ptr %95)
  %97 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %98 = getelementptr inbounds { ptr }, ptr %97, i32 0, i32 0
  store ptr %92, ptr %98, align 8
  %99 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.914, ptr %97, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %99, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.915, align 8
  %100 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.915, align 8
  %101 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %102 = call ptr @candy_builtin_if_else(ptr %96, ptr %100, ptr %101)
  %103 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %104 = load ptr, ptr @"Core:fixedDecimal:negate:20", align 8
  %105 = call ptr @"anonymous_$generated__needs"(ptr %102, ptr %103, ptr %104)
  %106 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %107 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %108 = call ptr @"anonymous_$generated__needs"(ptr %50, ptr %106, ptr %107)
  %109 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %110 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %111 = call ptr @"anonymous_$generated__needs"(ptr %56, ptr %109, ptr %110)
  %112 = call ptr @candy_builtin_type_of(ptr %62)
  %113 = load ptr, ptr @tag_Struct, align 8
  %114 = call ptr @candy_builtin_equals(ptr %112, ptr %113)
  %115 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %116 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %117 = call ptr @"anonymous_$generated__needs"(ptr %114, ptr %115, ptr %116)
  %118 = load ptr, ptr @tag_Scale, align 8
  %119 = call ptr @candy_builtin_struct_has_key(ptr %62, ptr %118)
  %120 = load ptr, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  %121 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %122 = call ptr @"anonymous_$generated__needs"(ptr %119, ptr %120, ptr %121)
  %123 = load ptr, ptr @tag_Scale, align 8
  %124 = call ptr @candy_builtin_struct_get(ptr %62, ptr %123)
  %125 = call ptr @Core_fixedDecimal_fromIntScaled(ptr %89, ptr %124)
  ret ptr %125
}

define ptr @Core_fixedDecimal_is_1_equals_then.876(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_FixedDecimal, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.878, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.879, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.902, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_equals_else.903, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.879, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.903, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_equals_then.878(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.880, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.881, align 8
  %11 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.881, align 8
  %12 = load ptr, ptr @"fun_Core_fixedDecimal_is_1_equals_else, Core_result_is_1_equals_else, Core_result_mapOrElse_30_equals_else", align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_fixedDecimal_is_1_equals_then.880(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_type_of(ptr %3)
  %5 = load ptr, ptr @tag_Struct, align 8
  %6 = call ptr @candy_builtin_equals(ptr %5, ptr %4)
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %8 = getelementptr inbounds { ptr }, ptr %7, i32 0, i32 0
  store ptr %3, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.882, ptr %7, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_equals_then.883, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %4, ptr %11, align 8
  %12 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.900, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %12, ptr @fun_Core_fixedDecimal_is_1_equals_else.901, align 8
  %13 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.883, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.901, align 8
  %15 = call ptr @candy_builtin_if_else(ptr %6, ptr %13, ptr %14)
  ret ptr %15
}

define ptr @Core_fixedDecimal_is_1_equals_then.882(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_has_key(ptr %2, ptr %3)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %7, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.884, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.885, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %12, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.886, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.887, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.885, align 8
  %16 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.887, align 8
  %17 = call ptr @candy_builtin_if_else(ptr %4, ptr %15, ptr %16)
  %18 = load ptr, ptr @num_0, align 8
  %19 = call ptr @candy_builtin_list_get(ptr %17, ptr %18)
  %20 = load ptr, ptr @tag_Match, align 8
  %21 = call ptr @candy_builtin_equals(ptr %19, ptr %20)
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %23 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 0
  store ptr %24, ptr %25, align 8
  %26 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 1
  store ptr %17, ptr %26, align 8
  %27 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.888, ptr %22, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %27, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.889, align 8
  %28 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %29 = getelementptr inbounds { ptr }, ptr %28, i32 0, i32 0
  store ptr %17, ptr %29, align 8
  %30 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.898, ptr %28, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %30, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.899, align 8
  %31 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.889, align 8
  %32 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.899, align 8
  %33 = call ptr @candy_builtin_if_else(ptr %21, ptr %31, ptr %32)
  ret ptr %33
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.884(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @215, align 8
  ret ptr @215
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.886(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `MinorUnits`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @216, align 8
  ret ptr @216
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.888(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @tag_Scale, align 8
  %8 = call ptr @candy_builtin_struct_has_key(ptr %6, ptr %7)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %10 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds { ptr }, ptr %9, i32 0, i32 0
  store ptr %11, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.890, ptr %9, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.891, align 8
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %15 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds { ptr }, ptr %14, i32 0, i32 0
  store ptr %16, ptr %17, align 8
  %18 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.892, ptr %14, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %18, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.893, align 8
  %19 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.891, align 8
  %20 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.893, align 8
  %21 = call ptr @candy_builtin_if_else(ptr %8, ptr %19, ptr %20)
  %22 = load ptr, ptr @num_0, align 8
  %23 = call ptr @candy_builtin_list_get(ptr %21, ptr %22)
  %24 = load ptr, ptr @tag_Match, align 8
  %25 = call ptr @candy_builtin_equals(ptr %23, ptr %24)
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %27 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 0
  store ptr %21, ptr %27, align 8
  %28 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 1
  store ptr %4, ptr %28, align 8
  %29 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.894, ptr %26, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %29, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.895, align 8
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %31 = getelementptr inbounds { ptr }, ptr %30, i32 0, i32 0
  store ptr %21, ptr %31, align 8
  %32 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.896, ptr %30, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %32, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.897, align 8
  %33 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.895, align 8
  %34 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.897, align 8
  %35 = call ptr @candy_builtin_if_else(ptr %25, ptr %33, ptr %34)
  ret ptr %35
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.890(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_Scale, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @217, align 8
  ret ptr @217
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.892(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `Scale`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @218, align 8
  ret ptr @218
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.894(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 4, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %5, i64 1
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %5, i64 2
  store ptr %4, ptr %11, align 8
  %12 = getelementptr ptr, ptr %5, i64 3
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %5)
  store ptr %13, ptr @219, align 8
  ret ptr @219
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.896(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.898(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_equals_else.900(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Struct, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @220, align 8
  ret ptr @220
}

define ptr @Core_fixedDecimal_is_1_equals_else.902(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected FixedDecimal, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @221, align 8
  ret ptr @221
}

define ptr @Core_fixedDecimal_is_1_equals_else.904(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @222, align 8
  ret ptr @222
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.906(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.908, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.909, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.909, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.908(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.910(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.912, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.913, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.913, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.912(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.914(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.916, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.917, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.917, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.916(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_absolute_10(ptr %0) {
Core_fixedDecimal_absolute_10:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_approxEquals(ptr %0, ptr %1, ptr %2) {
Core_fixedDecimal_approxEquals:
  %3 = call ptr @candy_builtin_type_of(ptr %0)
  %4 = load ptr, ptr @tag_Tag, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %0, ptr %7, align 8
  %8 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.918, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %8, ptr @fun_Core_fixedDecimal_is_1_equals_then.919, align 8
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %10 = getelementptr inbounds { ptr }, ptr %9, i32 0, i32 0
  store ptr %3, ptr %10, align 8
  %11 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.946, ptr %9, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %11, ptr @fun_Core_fixedDecimal_is_1_equals_else.947, align 8
  %12 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.919, align 8
  %13 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.947, align 8
  %14 = call ptr @candy_builtin_if_else(ptr %5, ptr %12, ptr %13)
  %15 = load ptr, ptr @num_0, align 8
  %16 = call ptr @candy_builtin_list_get(ptr %14, ptr %15)
  %17 = load ptr, ptr @tag_Match, align 8
  %18 = call ptr @candy_builtin_equals(ptr %16, ptr %17)
  %19 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %20 = getelementptr inbounds { ptr }, ptr %19, i32 0, i32 0
  store ptr %14, ptr %20, align 8
  %21 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.948, ptr %19, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %21, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.949, align 8
  %22 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.949, align 8
  %23 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %24 = call ptr @candy_builtin_if_else(ptr %18, ptr %22, ptr %23)
  %25 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %26 = call ptr @"anonymous_$generated__needs"(ptr %24, ptr %25, ptr null)
  %27 = call ptr @candy_builtin_type_of(ptr %1)
  %28 = load ptr, ptr @tag_Tag, align 8
  %29 = call ptr @candy_builtin_equals(ptr %28, ptr %27)
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %31 = getelementptr inbounds { ptr }, ptr %30, i32 0, i32 0
  store ptr %1, ptr %31, align 8
  %32 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.952, ptr %30, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %32, ptr @fun_Core_fixedDecimal_is_1_equals_then.953, align 8
  %33 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %34 = getelementptr inbounds { ptr }, ptr %33, i32 0, i32 0
  store ptr %27, ptr %34, align 8
  %35 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.980, ptr %33, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %35, ptr @fun_Core_fixedDecimal_is_1_equals_else.981, align 8
  %36 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.953, align 8
  %37 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.981, align 8
  %38 = call ptr @candy_builtin_if_else(ptr %29, ptr %36, ptr %37)
  %39 = load ptr, ptr @num_0, align 8
  %40 = call ptr @candy_builtin_list_get(ptr %38, ptr %39)
  %41 = load ptr, ptr @tag_Match, align 8
  %42 = call ptr @candy_builtin_equals(ptr %40, ptr %41)
  %43 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %44 = getelementptr inbounds { ptr }, ptr %43, i32 0, i32 0
  store ptr %38, ptr %44, align 8
  %45 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.982, ptr %43, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %45, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.983, align 8
  %46 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.983, align 8
  %47 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %48 = call ptr @candy_builtin_if_else(ptr %42, ptr %46, ptr %47)
  %49 = load ptr, ptr @"text_`is b` was not satisfied", align 8
  %50 = call ptr @"anonymous_$generated__needs"(ptr %48, ptr %49, ptr null)
  %51 = call ptr @candy_builtin_type_of(ptr %2)
  %52 = load ptr, ptr @tag_Tag, align 8
  %53 = call ptr @candy_builtin_equals(ptr %52, ptr %51)
  %54 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %55 = getelementptr inbounds { ptr }, ptr %54, i32 0, i32 0
  store ptr %2, ptr %55, align 8
  %56 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.986, ptr %54, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %56, ptr @fun_Core_fixedDecimal_is_1_equals_then.987, align 8
  %57 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %58 = getelementptr inbounds { ptr }, ptr %57, i32 0, i32 0
  store ptr %51, ptr %58, align 8
  %59 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.1014, ptr %57, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %59, ptr @fun_Core_fixedDecimal_is_1_equals_else.1015, align 8
  %60 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.987, align 8
  %61 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1015, align 8
  %62 = call ptr @candy_builtin_if_else(ptr %53, ptr %60, ptr %61)
  %63 = load ptr, ptr @num_0, align 8
  %64 = call ptr @candy_builtin_list_get(ptr %62, ptr %63)
  %65 = load ptr, ptr @tag_Match, align 8
  %66 = call ptr @candy_builtin_equals(ptr %64, ptr %65)
  %67 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %68 = getelementptr inbounds { ptr }, ptr %67, i32 0, i32 0
  store ptr %62, ptr %68, align 8
  %69 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.1016, ptr %67, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %69, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1017, align 8
  %70 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1017, align 8
  %71 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %72 = call ptr @candy_builtin_if_else(ptr %66, ptr %70, ptr %71)
  %73 = load ptr, ptr @"text_`is delta` was not satisfied", align 8
  %74 = call ptr @"anonymous_$generated__needs"(ptr %72, ptr %73, ptr null)
  %75 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.987, align 8
  %76 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1015, align 8
  %77 = call ptr @candy_builtin_if_else(ptr %53, ptr %75, ptr %76)
  %78 = load ptr, ptr @num_0, align 8
  %79 = call ptr @candy_builtin_list_get(ptr %77, ptr %78)
  %80 = load ptr, ptr @tag_Match, align 8
  %81 = call ptr @candy_builtin_equals(ptr %79, ptr %80)
  %82 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %83 = getelementptr inbounds { ptr }, ptr %82, i32 0, i32 0
  store ptr %77, ptr %83, align 8
  %84 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.1020, ptr %82, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %84, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1021, align 8
  %85 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1021, align 8
  %86 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %87 = call ptr @candy_builtin_if_else(ptr %81, ptr %85, ptr %86)
  %88 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  %89 = load ptr, ptr @"Core:fixedDecimal:approxEquals:17", align 8
  %90 = call ptr @"anonymous_$generated__needs"(ptr %87, ptr %88, ptr %89)
  %91 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.987, align 8
  %92 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1015, align 8
  %93 = call ptr @candy_builtin_if_else(ptr %53, ptr %91, ptr %92)
  %94 = load ptr, ptr @num_0, align 8
  %95 = call ptr @candy_builtin_list_get(ptr %93, ptr %94)
  %96 = load ptr, ptr @tag_Match, align 8
  %97 = call ptr @candy_builtin_equals(ptr %95, ptr %96)
  %98 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %99 = getelementptr inbounds { ptr }, ptr %98, i32 0, i32 0
  store ptr %93, ptr %99, align 8
  %100 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.1024, ptr %98, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %100, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1025, align 8
  %101 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1025, align 8
  %102 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %103 = call ptr @candy_builtin_if_else(ptr %97, ptr %101, ptr %102)
  %104 = load ptr, ptr @"text_`is value` was not satisfied", align 8
  %105 = load ptr, ptr @"Core:fixedDecimal:isNonNegative:7", align 8
  %106 = call ptr @"anonymous_$generated__needs"(ptr %103, ptr %104, ptr %105)
  %107 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.987, align 8
  %108 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1015, align 8
  %109 = call ptr @candy_builtin_if_else(ptr %53, ptr %107, ptr %108)
  %110 = load ptr, ptr @num_0, align 8
  %111 = call ptr @candy_builtin_list_get(ptr %109, ptr %110)
  %112 = load ptr, ptr @tag_Match, align 8
  %113 = call ptr @candy_builtin_equals(ptr %111, ptr %112)
  %114 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %115 = getelementptr inbounds { ptr }, ptr %114, i32 0, i32 0
  store ptr %109, ptr %115, align 8
  %116 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.1028, ptr %114, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %116, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1029, align 8
  %117 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1029, align 8
  %118 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %119 = call ptr @candy_builtin_if_else(ptr %113, ptr %117, ptr %118)
  %120 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %121 = load ptr, ptr @"Core:fixedDecimal:isNegative:7", align 8
  %122 = call ptr @"anonymous_$generated__needs"(ptr %119, ptr %120, ptr %121)
  %123 = call ptr @candy_builtin_type_of(ptr %2)
  %124 = load ptr, ptr @tag_Tag, align 8
  %125 = call ptr @candy_builtin_equals(ptr %123, ptr %124)
  %126 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %127 = load ptr, ptr @"Core:fixedDecimal:minorUnits:19", align 8
  %128 = call ptr @"anonymous_$generated__needs"(ptr %125, ptr %126, ptr %127)
  %129 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %130 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %131 = load ptr, ptr @"Core:fixedDecimal:minorUnits:19", align 8
  %132 = call ptr @"anonymous_$generated__needs"(ptr %129, ptr %130, ptr %131)
  %133 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %134 = call ptr @candy_builtin_type_of(ptr %133)
  %135 = load ptr, ptr @tag_Struct, align 8
  %136 = call ptr @candy_builtin_equals(ptr %134, ptr %135)
  %137 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %138 = load ptr, ptr @"Core:fixedDecimal:minorUnits:21", align 8
  %139 = call ptr @"anonymous_$generated__needs"(ptr %136, ptr %137, ptr %138)
  %140 = load ptr, ptr @tag_MinorUnits, align 8
  %141 = call ptr @candy_builtin_struct_has_key(ptr %133, ptr %140)
  %142 = load ptr, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  %143 = load ptr, ptr @"Core:fixedDecimal:minorUnits:21", align 8
  %144 = call ptr @"anonymous_$generated__needs"(ptr %141, ptr %142, ptr %143)
  %145 = load ptr, ptr @tag_MinorUnits, align 8
  %146 = call ptr @candy_builtin_struct_get(ptr %133, ptr %145)
  %147 = load ptr, ptr @num_0, align 8
  %148 = call ptr @Core_int_isLessThan(ptr %146, ptr %147)
  %149 = call ptr @Core_bool_not(ptr %148)
  %150 = load ptr, ptr @"text_`isNonNegative delta` was not satisfied", align 8
  %151 = call ptr @"anonymous_$generated__needs"(ptr %149, ptr %150, ptr null)
  %152 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.919, align 8
  %153 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.947, align 8
  %154 = call ptr @candy_builtin_if_else(ptr %5, ptr %152, ptr %153)
  %155 = load ptr, ptr @num_0, align 8
  %156 = call ptr @candy_builtin_list_get(ptr %154, ptr %155)
  %157 = load ptr, ptr @tag_Match, align 8
  %158 = call ptr @candy_builtin_equals(ptr %156, ptr %157)
  %159 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %160 = getelementptr inbounds { ptr }, ptr %159, i32 0, i32 0
  store ptr %154, ptr %160, align 8
  %161 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.1032, ptr %159, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %161, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1033, align 8
  %162 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1033, align 8
  %163 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %164 = call ptr @candy_builtin_if_else(ptr %158, ptr %162, ptr %163)
  %165 = load ptr, ptr @"text_`is minuend` was not satisfied", align 8
  %166 = load ptr, ptr @"Core:fixedDecimal:approxEquals:23", align 8
  %167 = call ptr @"anonymous_$generated__needs"(ptr %164, ptr %165, ptr %166)
  %168 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.953, align 8
  %169 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.981, align 8
  %170 = call ptr @candy_builtin_if_else(ptr %29, ptr %168, ptr %169)
  %171 = load ptr, ptr @num_0, align 8
  %172 = call ptr @candy_builtin_list_get(ptr %170, ptr %171)
  %173 = load ptr, ptr @tag_Match, align 8
  %174 = call ptr @candy_builtin_equals(ptr %172, ptr %173)
  %175 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %176 = getelementptr inbounds { ptr }, ptr %175, i32 0, i32 0
  store ptr %170, ptr %176, align 8
  %177 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.1036, ptr %175, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %177, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1037, align 8
  %178 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1037, align 8
  %179 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %180 = call ptr @candy_builtin_if_else(ptr %174, ptr %178, ptr %179)
  %181 = load ptr, ptr @"text_`is subtrahend` was not satisfied", align 8
  %182 = load ptr, ptr @"Core:fixedDecimal:approxEquals:23", align 8
  %183 = call ptr @"anonymous_$generated__needs"(ptr %180, ptr %181, ptr %182)
  %184 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.919, align 8
  %185 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.947, align 8
  %186 = call ptr @candy_builtin_if_else(ptr %5, ptr %184, ptr %185)
  %187 = load ptr, ptr @num_0, align 8
  %188 = call ptr @candy_builtin_list_get(ptr %186, ptr %187)
  %189 = load ptr, ptr @tag_Match, align 8
  %190 = call ptr @candy_builtin_equals(ptr %188, ptr %189)
  %191 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %192 = getelementptr inbounds { ptr }, ptr %191, i32 0, i32 0
  store ptr %186, ptr %192, align 8
  %193 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.1040, ptr %191, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %193, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1041, align 8
  %194 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1041, align 8
  %195 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %196 = call ptr @candy_builtin_if_else(ptr %190, ptr %194, ptr %195)
  %197 = load ptr, ptr @"text_`is valueA` was not satisfied", align 8
  %198 = load ptr, ptr @"Core:fixedDecimal:subtract:13", align 8
  %199 = call ptr @"anonymous_$generated__needs"(ptr %196, ptr %197, ptr %198)
  %200 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.953, align 8
  %201 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.981, align 8
  %202 = call ptr @candy_builtin_if_else(ptr %29, ptr %200, ptr %201)
  %203 = load ptr, ptr @num_0, align 8
  %204 = call ptr @candy_builtin_list_get(ptr %202, ptr %203)
  %205 = load ptr, ptr @tag_Match, align 8
  %206 = call ptr @candy_builtin_equals(ptr %204, ptr %205)
  %207 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %208 = getelementptr inbounds { ptr }, ptr %207, i32 0, i32 0
  store ptr %202, ptr %208, align 8
  %209 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.1044, ptr %207, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %209, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1045, align 8
  %210 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1045, align 8
  %211 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %212 = call ptr @candy_builtin_if_else(ptr %206, ptr %210, ptr %211)
  %213 = load ptr, ptr @"text_`is valueB` was not satisfied", align 8
  %214 = load ptr, ptr @"Core:fixedDecimal:subtract:13", align 8
  %215 = call ptr @"anonymous_$generated__needs"(ptr %212, ptr %213, ptr %214)
  %216 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.919, align 8
  %217 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.947, align 8
  %218 = call ptr @candy_builtin_if_else(ptr %5, ptr %216, ptr %217)
  %219 = load ptr, ptr @num_0, align 8
  %220 = call ptr @candy_builtin_list_get(ptr %218, ptr %219)
  %221 = load ptr, ptr @tag_Match, align 8
  %222 = call ptr @candy_builtin_equals(ptr %220, ptr %221)
  %223 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %224 = getelementptr inbounds { ptr }, ptr %223, i32 0, i32 0
  store ptr %218, ptr %224, align 8
  %225 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.1048, ptr %223, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %225, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1049, align 8
  %226 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1049, align 8
  %227 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %228 = call ptr @candy_builtin_if_else(ptr %222, ptr %226, ptr %227)
  %229 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %230 = load ptr, ptr @"Core:fixedDecimal:comparableMinorUnits:20", align 8
  %231 = call ptr @"anonymous_$generated__needs"(ptr %228, ptr %229, ptr %230)
  %232 = call ptr @candy_builtin_type_of(ptr %0)
  %233 = load ptr, ptr @tag_Tag, align 8
  %234 = call ptr @candy_builtin_equals(ptr %232, ptr %233)
  %235 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %236 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %237 = call ptr @"anonymous_$generated__needs"(ptr %234, ptr %235, ptr %236)
  %238 = call ptr @candy_builtin_tag_has_value(ptr %0)
  %239 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %240 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %241 = call ptr @"anonymous_$generated__needs"(ptr %238, ptr %239, ptr %240)
  %242 = call ptr @candy_builtin_tag_get_value(ptr %0)
  %243 = call ptr @candy_builtin_type_of(ptr %242)
  %244 = load ptr, ptr @tag_Struct, align 8
  %245 = call ptr @candy_builtin_equals(ptr %243, ptr %244)
  %246 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %247 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %248 = call ptr @"anonymous_$generated__needs"(ptr %245, ptr %246, ptr %247)
  %249 = load ptr, ptr @tag_Scale, align 8
  %250 = call ptr @candy_builtin_struct_has_key(ptr %242, ptr %249)
  %251 = load ptr, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  %252 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %253 = call ptr @"anonymous_$generated__needs"(ptr %250, ptr %251, ptr %252)
  %254 = load ptr, ptr @tag_Scale, align 8
  %255 = call ptr @candy_builtin_struct_get(ptr %242, ptr %254)
  %256 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.953, align 8
  %257 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.981, align 8
  %258 = call ptr @candy_builtin_if_else(ptr %29, ptr %256, ptr %257)
  %259 = load ptr, ptr @num_0, align 8
  %260 = call ptr @candy_builtin_list_get(ptr %258, ptr %259)
  %261 = load ptr, ptr @tag_Match, align 8
  %262 = call ptr @candy_builtin_equals(ptr %260, ptr %261)
  %263 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %264 = getelementptr inbounds { ptr }, ptr %263, i32 0, i32 0
  store ptr %258, ptr %264, align 8
  %265 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.1052, ptr %263, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %265, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1053, align 8
  %266 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1053, align 8
  %267 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %268 = call ptr @candy_builtin_if_else(ptr %262, ptr %266, ptr %267)
  %269 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %270 = load ptr, ptr @"Core:fixedDecimal:comparableMinorUnits:23", align 8
  %271 = call ptr @"anonymous_$generated__needs"(ptr %268, ptr %269, ptr %270)
  %272 = call ptr @candy_builtin_type_of(ptr %1)
  %273 = load ptr, ptr @tag_Tag, align 8
  %274 = call ptr @candy_builtin_equals(ptr %272, ptr %273)
  %275 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %276 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %277 = call ptr @"anonymous_$generated__needs"(ptr %274, ptr %275, ptr %276)
  %278 = call ptr @candy_builtin_tag_has_value(ptr %1)
  %279 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %280 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %281 = call ptr @"anonymous_$generated__needs"(ptr %278, ptr %279, ptr %280)
  %282 = call ptr @candy_builtin_tag_get_value(ptr %1)
  %283 = call ptr @candy_builtin_type_of(ptr %282)
  %284 = load ptr, ptr @tag_Struct, align 8
  %285 = call ptr @candy_builtin_equals(ptr %283, ptr %284)
  %286 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %287 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %288 = call ptr @"anonymous_$generated__needs"(ptr %285, ptr %286, ptr %287)
  %289 = load ptr, ptr @tag_Scale, align 8
  %290 = call ptr @candy_builtin_struct_has_key(ptr %282, ptr %289)
  %291 = load ptr, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  %292 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %293 = call ptr @"anonymous_$generated__needs"(ptr %290, ptr %291, ptr %292)
  %294 = load ptr, ptr @tag_Scale, align 8
  %295 = call ptr @candy_builtin_struct_get(ptr %282, ptr %294)
  %296 = call ptr @Core_int_max(ptr %255, ptr %295)
  %297 = call ptr @Core_fixedDecimal_rescaledMinorUnits(ptr %0, ptr %296)
  %298 = call ptr @Core_fixedDecimal_rescaledMinorUnits(ptr %1, ptr %296)
  %299 = call ptr @candy_builtin_type_of(ptr %297)
  %300 = load ptr, ptr @tag_Int, align 8
  %301 = call ptr @candy_builtin_equals(ptr %299, ptr %300)
  %302 = load ptr, ptr @"text_`minuend | typeIs Int` was not satisfied", align 8
  %303 = load ptr, ptr @"Core:fixedDecimal:subtract:27", align 8
  %304 = call ptr @"anonymous_$generated__needs"(ptr %301, ptr %302, ptr %303)
  %305 = call ptr @candy_builtin_type_of(ptr %298)
  %306 = load ptr, ptr @tag_Int, align 8
  %307 = call ptr @candy_builtin_equals(ptr %305, ptr %306)
  %308 = load ptr, ptr @"text_`subtrahend | typeIs Int` was not satisfied", align 8
  %309 = load ptr, ptr @"Core:fixedDecimal:subtract:27", align 8
  %310 = call ptr @"anonymous_$generated__needs"(ptr %307, ptr %308, ptr %309)
  %311 = call ptr @candy_builtin_int_subtract(ptr %297, ptr %298)
  %312 = call ptr @Core_fixedDecimal_fromIntScaled(ptr %311, ptr %296)
  %313 = call ptr @Core_fixedDecimal_absolute(ptr %312)
  %314 = call ptr @Core_fixedDecimal_isLessThanOrEqualTo(ptr %313, ptr %2)
  ret ptr %314
}

define ptr @Core_fixedDecimal_is_1_equals_then.918(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_FixedDecimal, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.920, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.921, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.944, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_equals_else.945, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.921, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.945, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_equals_then.920(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.922, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.923, align 8
  %11 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.923, align 8
  %12 = load ptr, ptr @"fun_Core_fixedDecimal_is_1_equals_else, Core_result_is_1_equals_else, Core_result_mapOrElse_30_equals_else", align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_fixedDecimal_is_1_equals_then.922(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_type_of(ptr %3)
  %5 = load ptr, ptr @tag_Struct, align 8
  %6 = call ptr @candy_builtin_equals(ptr %5, ptr %4)
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %8 = getelementptr inbounds { ptr }, ptr %7, i32 0, i32 0
  store ptr %3, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.924, ptr %7, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_equals_then.925, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %4, ptr %11, align 8
  %12 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.942, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %12, ptr @fun_Core_fixedDecimal_is_1_equals_else.943, align 8
  %13 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.925, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.943, align 8
  %15 = call ptr @candy_builtin_if_else(ptr %6, ptr %13, ptr %14)
  ret ptr %15
}

define ptr @Core_fixedDecimal_is_1_equals_then.924(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_has_key(ptr %2, ptr %3)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %7, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.926, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.927, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %12, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.928, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.929, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.927, align 8
  %16 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.929, align 8
  %17 = call ptr @candy_builtin_if_else(ptr %4, ptr %15, ptr %16)
  %18 = load ptr, ptr @num_0, align 8
  %19 = call ptr @candy_builtin_list_get(ptr %17, ptr %18)
  %20 = load ptr, ptr @tag_Match, align 8
  %21 = call ptr @candy_builtin_equals(ptr %19, ptr %20)
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %23 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 0
  store ptr %24, ptr %25, align 8
  %26 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 1
  store ptr %17, ptr %26, align 8
  %27 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.930, ptr %22, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %27, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.931, align 8
  %28 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %29 = getelementptr inbounds { ptr }, ptr %28, i32 0, i32 0
  store ptr %17, ptr %29, align 8
  %30 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.940, ptr %28, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %30, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.941, align 8
  %31 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.931, align 8
  %32 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.941, align 8
  %33 = call ptr @candy_builtin_if_else(ptr %21, ptr %31, ptr %32)
  ret ptr %33
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.926(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @223, align 8
  ret ptr @223
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.928(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `MinorUnits`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @224, align 8
  ret ptr @224
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.930(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @tag_Scale, align 8
  %8 = call ptr @candy_builtin_struct_has_key(ptr %6, ptr %7)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %10 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds { ptr }, ptr %9, i32 0, i32 0
  store ptr %11, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.932, ptr %9, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.933, align 8
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %15 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds { ptr }, ptr %14, i32 0, i32 0
  store ptr %16, ptr %17, align 8
  %18 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.934, ptr %14, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %18, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.935, align 8
  %19 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.933, align 8
  %20 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.935, align 8
  %21 = call ptr @candy_builtin_if_else(ptr %8, ptr %19, ptr %20)
  %22 = load ptr, ptr @num_0, align 8
  %23 = call ptr @candy_builtin_list_get(ptr %21, ptr %22)
  %24 = load ptr, ptr @tag_Match, align 8
  %25 = call ptr @candy_builtin_equals(ptr %23, ptr %24)
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %27 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 0
  store ptr %4, ptr %27, align 8
  %28 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 1
  store ptr %21, ptr %28, align 8
  %29 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.936, ptr %26, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %29, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.937, align 8
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %31 = getelementptr inbounds { ptr }, ptr %30, i32 0, i32 0
  store ptr %21, ptr %31, align 8
  %32 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.938, ptr %30, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %32, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.939, align 8
  %33 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.937, align 8
  %34 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.939, align 8
  %35 = call ptr @candy_builtin_if_else(ptr %25, ptr %33, ptr %34)
  ret ptr %35
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.932(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_Scale, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @225, align 8
  ret ptr @225
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.934(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `Scale`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @226, align 8
  ret ptr @226
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.936(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 4, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %5, i64 1
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %5, i64 2
  store ptr %4, ptr %11, align 8
  %12 = getelementptr ptr, ptr %5, i64 3
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %5)
  store ptr %13, ptr @227, align 8
  ret ptr @227
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.938(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.940(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_equals_else.942(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Struct, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @228, align 8
  ret ptr @228
}

define ptr @Core_fixedDecimal_is_1_equals_else.944(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected FixedDecimal, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @229, align 8
  ret ptr @229
}

define ptr @Core_fixedDecimal_is_1_equals_else.946(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @230, align 8
  ret ptr @230
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.948(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.950, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.951, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.951, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.950(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_equals_then.952(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_FixedDecimal, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.954, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.955, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.978, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_equals_else.979, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.955, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.979, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_equals_then.954(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.956, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.957, align 8
  %11 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.957, align 8
  %12 = load ptr, ptr @"fun_Core_fixedDecimal_is_1_equals_else, Core_result_is_1_equals_else, Core_result_mapOrElse_30_equals_else", align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_fixedDecimal_is_1_equals_then.956(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_type_of(ptr %3)
  %5 = load ptr, ptr @tag_Struct, align 8
  %6 = call ptr @candy_builtin_equals(ptr %5, ptr %4)
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %8 = getelementptr inbounds { ptr }, ptr %7, i32 0, i32 0
  store ptr %3, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.958, ptr %7, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_equals_then.959, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %4, ptr %11, align 8
  %12 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.976, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %12, ptr @fun_Core_fixedDecimal_is_1_equals_else.977, align 8
  %13 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.959, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.977, align 8
  %15 = call ptr @candy_builtin_if_else(ptr %6, ptr %13, ptr %14)
  ret ptr %15
}

define ptr @Core_fixedDecimal_is_1_equals_then.958(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_has_key(ptr %2, ptr %3)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %7, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.960, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.961, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %12, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.962, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.963, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.961, align 8
  %16 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.963, align 8
  %17 = call ptr @candy_builtin_if_else(ptr %4, ptr %15, ptr %16)
  %18 = load ptr, ptr @num_0, align 8
  %19 = call ptr @candy_builtin_list_get(ptr %17, ptr %18)
  %20 = load ptr, ptr @tag_Match, align 8
  %21 = call ptr @candy_builtin_equals(ptr %19, ptr %20)
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %23 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 0
  store ptr %24, ptr %25, align 8
  %26 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 1
  store ptr %17, ptr %26, align 8
  %27 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.964, ptr %22, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %27, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.965, align 8
  %28 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %29 = getelementptr inbounds { ptr }, ptr %28, i32 0, i32 0
  store ptr %17, ptr %29, align 8
  %30 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.974, ptr %28, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %30, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.975, align 8
  %31 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.965, align 8
  %32 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.975, align 8
  %33 = call ptr @candy_builtin_if_else(ptr %21, ptr %31, ptr %32)
  ret ptr %33
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.960(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @231, align 8
  ret ptr @231
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.962(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `MinorUnits`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @232, align 8
  ret ptr @232
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.964(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @tag_Scale, align 8
  %8 = call ptr @candy_builtin_struct_has_key(ptr %6, ptr %7)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %10 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds { ptr }, ptr %9, i32 0, i32 0
  store ptr %11, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.966, ptr %9, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.967, align 8
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %15 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds { ptr }, ptr %14, i32 0, i32 0
  store ptr %16, ptr %17, align 8
  %18 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.968, ptr %14, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %18, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.969, align 8
  %19 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.967, align 8
  %20 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.969, align 8
  %21 = call ptr @candy_builtin_if_else(ptr %8, ptr %19, ptr %20)
  %22 = load ptr, ptr @num_0, align 8
  %23 = call ptr @candy_builtin_list_get(ptr %21, ptr %22)
  %24 = load ptr, ptr @tag_Match, align 8
  %25 = call ptr @candy_builtin_equals(ptr %23, ptr %24)
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %27 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 0
  store ptr %4, ptr %27, align 8
  %28 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 1
  store ptr %21, ptr %28, align 8
  %29 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.970, ptr %26, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %29, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.971, align 8
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %31 = getelementptr inbounds { ptr }, ptr %30, i32 0, i32 0
  store ptr %21, ptr %31, align 8
  %32 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.972, ptr %30, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %32, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.973, align 8
  %33 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.971, align 8
  %34 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.973, align 8
  %35 = call ptr @candy_builtin_if_else(ptr %25, ptr %33, ptr %34)
  ret ptr %35
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.966(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_Scale, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @233, align 8
  ret ptr @233
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.968(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `Scale`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @234, align 8
  ret ptr @234
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.970(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 4, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %5, i64 1
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %5, i64 2
  store ptr %4, ptr %11, align 8
  %12 = getelementptr ptr, ptr %5, i64 3
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %5)
  store ptr %13, ptr @235, align 8
  ret ptr @235
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.972(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.974(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_equals_else.976(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Struct, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @236, align 8
  ret ptr @236
}

define ptr @Core_fixedDecimal_is_1_equals_else.978(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected FixedDecimal, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @237, align 8
  ret ptr @237
}

define ptr @Core_fixedDecimal_is_1_equals_else.980(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @238, align 8
  ret ptr @238
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.982(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.984, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.985, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.985, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.984(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_equals_then.986(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_FixedDecimal, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.988, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.989, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.1012, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_equals_else.1013, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.989, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1013, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_equals_then.988(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.990, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.991, align 8
  %11 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.991, align 8
  %12 = load ptr, ptr @"fun_Core_fixedDecimal_is_1_equals_else, Core_result_is_1_equals_else, Core_result_mapOrElse_30_equals_else", align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_fixedDecimal_is_1_equals_then.990(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_type_of(ptr %3)
  %5 = load ptr, ptr @tag_Struct, align 8
  %6 = call ptr @candy_builtin_equals(ptr %5, ptr %4)
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %8 = getelementptr inbounds { ptr }, ptr %7, i32 0, i32 0
  store ptr %3, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.992, ptr %7, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_equals_then.993, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %4, ptr %11, align 8
  %12 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.1010, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %12, ptr @fun_Core_fixedDecimal_is_1_equals_else.1011, align 8
  %13 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.993, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1011, align 8
  %15 = call ptr @candy_builtin_if_else(ptr %6, ptr %13, ptr %14)
  ret ptr %15
}

define ptr @Core_fixedDecimal_is_1_equals_then.992(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_has_key(ptr %2, ptr %3)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %7, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.994, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.995, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %12, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.996, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.997, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.995, align 8
  %16 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.997, align 8
  %17 = call ptr @candy_builtin_if_else(ptr %4, ptr %15, ptr %16)
  %18 = load ptr, ptr @num_0, align 8
  %19 = call ptr @candy_builtin_list_get(ptr %17, ptr %18)
  %20 = load ptr, ptr @tag_Match, align 8
  %21 = call ptr @candy_builtin_equals(ptr %19, ptr %20)
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %23 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 0
  store ptr %24, ptr %25, align 8
  %26 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 1
  store ptr %17, ptr %26, align 8
  %27 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.998, ptr %22, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %27, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.999, align 8
  %28 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %29 = getelementptr inbounds { ptr }, ptr %28, i32 0, i32 0
  store ptr %17, ptr %29, align 8
  %30 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.1008, ptr %28, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %30, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.1009, align 8
  %31 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.999, align 8
  %32 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.1009, align 8
  %33 = call ptr @candy_builtin_if_else(ptr %21, ptr %31, ptr %32)
  ret ptr %33
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.994(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @239, align 8
  ret ptr @239
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.996(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `MinorUnits`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @240, align 8
  ret ptr @240
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.998(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @tag_Scale, align 8
  %8 = call ptr @candy_builtin_struct_has_key(ptr %6, ptr %7)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %10 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds { ptr }, ptr %9, i32 0, i32 0
  store ptr %11, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.1000, ptr %9, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.1001, align 8
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %15 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds { ptr }, ptr %14, i32 0, i32 0
  store ptr %16, ptr %17, align 8
  %18 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.1002, ptr %14, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %18, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.1003, align 8
  %19 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.1001, align 8
  %20 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.1003, align 8
  %21 = call ptr @candy_builtin_if_else(ptr %8, ptr %19, ptr %20)
  %22 = load ptr, ptr @num_0, align 8
  %23 = call ptr @candy_builtin_list_get(ptr %21, ptr %22)
  %24 = load ptr, ptr @tag_Match, align 8
  %25 = call ptr @candy_builtin_equals(ptr %23, ptr %24)
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %27 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 0
  store ptr %4, ptr %27, align 8
  %28 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 1
  store ptr %21, ptr %28, align 8
  %29 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.1004, ptr %26, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %29, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.1005, align 8
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %31 = getelementptr inbounds { ptr }, ptr %30, i32 0, i32 0
  store ptr %21, ptr %31, align 8
  %32 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.1006, ptr %30, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %32, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.1007, align 8
  %33 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.1005, align 8
  %34 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.1007, align 8
  %35 = call ptr @candy_builtin_if_else(ptr %25, ptr %33, ptr %34)
  ret ptr %35
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.1000(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_Scale, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @241, align 8
  ret ptr @241
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.1002(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `Scale`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @242, align 8
  ret ptr @242
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.1004(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 4, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %5, i64 1
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %5, i64 2
  store ptr %4, ptr %11, align 8
  %12 = getelementptr ptr, ptr %5, i64 3
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %5)
  store ptr %13, ptr @243, align 8
  ret ptr @243
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.1006(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.1008(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_equals_else.1010(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Struct, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @244, align 8
  ret ptr @244
}

define ptr @Core_fixedDecimal_is_1_equals_else.1012(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected FixedDecimal, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @245, align 8
  ret ptr @245
}

define ptr @Core_fixedDecimal_is_1_equals_else.1014(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @246, align 8
  ret ptr @246
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.1016(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.1018, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.1019, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1019, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.1018(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.1020(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.1022, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.1023, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1023, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.1022(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.1024(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.1026, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.1027, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1027, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.1026(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.1028(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.1030, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.1031, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1031, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.1030(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.1032(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.1034, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.1035, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1035, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.1034(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.1036(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.1038, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.1039, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1039, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.1038(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.1040(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.1042, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.1043, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1043, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.1042(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.1044(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.1046, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.1047, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1047, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.1046(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.1048(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.1050, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.1051, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1051, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.1050(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.1052(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.1054, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.1055, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1055, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.1054(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_toText(ptr %0) {
Core_fixedDecimal_toText:
  %1 = call ptr @candy_builtin_type_of(ptr %0)
  %2 = load ptr, ptr @tag_Tag, align 8
  %3 = call ptr @candy_builtin_equals(ptr %2, ptr %1)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %5 = getelementptr inbounds { ptr }, ptr %4, i32 0, i32 0
  store ptr %0, ptr %5, align 8
  %6 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.1056, ptr %4, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %6, ptr @fun_Core_fixedDecimal_is_1_equals_then.1057, align 8
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %8 = getelementptr inbounds { ptr }, ptr %7, i32 0, i32 0
  store ptr %1, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.1084, ptr %7, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_equals_else.1085, align 8
  %10 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1057, align 8
  %11 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1085, align 8
  %12 = call ptr @candy_builtin_if_else(ptr %3, ptr %10, ptr %11)
  %13 = load ptr, ptr @num_0, align 8
  %14 = call ptr @candy_builtin_list_get(ptr %12, ptr %13)
  %15 = load ptr, ptr @tag_Match, align 8
  %16 = call ptr @candy_builtin_equals(ptr %14, ptr %15)
  %17 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %18 = getelementptr inbounds { ptr }, ptr %17, i32 0, i32 0
  store ptr %12, ptr %18, align 8
  %19 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.1086, ptr %17, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %19, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1087, align 8
  %20 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1087, align 8
  %21 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %22 = call ptr @candy_builtin_if_else(ptr %16, ptr %20, ptr %21)
  %23 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %24 = call ptr @"anonymous_$generated__needs"(ptr %22, ptr %23, ptr null)
  %25 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1057, align 8
  %26 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1085, align 8
  %27 = call ptr @candy_builtin_if_else(ptr %3, ptr %25, ptr %26)
  %28 = load ptr, ptr @num_0, align 8
  %29 = call ptr @candy_builtin_list_get(ptr %27, ptr %28)
  %30 = load ptr, ptr @tag_Match, align 8
  %31 = call ptr @candy_builtin_equals(ptr %29, ptr %30)
  %32 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %33 = getelementptr inbounds { ptr }, ptr %32, i32 0, i32 0
  store ptr %27, ptr %33, align 8
  %34 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.1090, ptr %32, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %34, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1091, align 8
  %35 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1091, align 8
  %36 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %37 = call ptr @candy_builtin_if_else(ptr %31, ptr %35, ptr %36)
  %38 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %39 = load ptr, ptr @"Core:fixedDecimal:toText:7", align 8
  %40 = call ptr @"anonymous_$generated__needs"(ptr %37, ptr %38, ptr %39)
  %41 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1057, align 8
  %42 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1085, align 8
  %43 = call ptr @candy_builtin_if_else(ptr %3, ptr %41, ptr %42)
  %44 = load ptr, ptr @num_0, align 8
  %45 = call ptr @candy_builtin_list_get(ptr %43, ptr %44)
  %46 = load ptr, ptr @tag_Match, align 8
  %47 = call ptr @candy_builtin_equals(ptr %45, ptr %46)
  %48 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %49 = getelementptr inbounds { ptr }, ptr %48, i32 0, i32 0
  store ptr %43, ptr %49, align 8
  %50 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.1094, ptr %48, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %50, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1095, align 8
  %51 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1095, align 8
  %52 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %53 = call ptr @candy_builtin_if_else(ptr %47, ptr %51, ptr %52)
  %54 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %55 = load ptr, ptr @"Core:fixedDecimal:floorToInt:7", align 8
  %56 = call ptr @"anonymous_$generated__needs"(ptr %53, ptr %54, ptr %55)
  %57 = call ptr @candy_builtin_type_of(ptr %0)
  %58 = load ptr, ptr @tag_Tag, align 8
  %59 = call ptr @candy_builtin_equals(ptr %57, ptr %58)
  %60 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %61 = load ptr, ptr @"Core:fixedDecimal:minorUnits:19", align 8
  %62 = call ptr @"anonymous_$generated__needs"(ptr %59, ptr %60, ptr %61)
  %63 = call ptr @candy_builtin_tag_has_value(ptr %0)
  %64 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %65 = load ptr, ptr @"Core:fixedDecimal:minorUnits:19", align 8
  %66 = call ptr @"anonymous_$generated__needs"(ptr %63, ptr %64, ptr %65)
  %67 = call ptr @candy_builtin_tag_get_value(ptr %0)
  %68 = call ptr @candy_builtin_type_of(ptr %67)
  %69 = load ptr, ptr @tag_Struct, align 8
  %70 = call ptr @candy_builtin_equals(ptr %68, ptr %69)
  %71 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %72 = load ptr, ptr @"Core:fixedDecimal:minorUnits:21", align 8
  %73 = call ptr @"anonymous_$generated__needs"(ptr %70, ptr %71, ptr %72)
  %74 = load ptr, ptr @tag_MinorUnits, align 8
  %75 = call ptr @candy_builtin_struct_has_key(ptr %67, ptr %74)
  %76 = load ptr, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  %77 = load ptr, ptr @"Core:fixedDecimal:minorUnits:21", align 8
  %78 = call ptr @"anonymous_$generated__needs"(ptr %75, ptr %76, ptr %77)
  %79 = load ptr, ptr @tag_MinorUnits, align 8
  %80 = call ptr @candy_builtin_struct_get(ptr %67, ptr %79)
  %81 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1057, align 8
  %82 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1085, align 8
  %83 = call ptr @candy_builtin_if_else(ptr %3, ptr %81, ptr %82)
  %84 = load ptr, ptr @num_0, align 8
  %85 = call ptr @candy_builtin_list_get(ptr %83, ptr %84)
  %86 = load ptr, ptr @tag_Match, align 8
  %87 = call ptr @candy_builtin_equals(ptr %85, ptr %86)
  %88 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %89 = getelementptr inbounds { ptr }, ptr %88, i32 0, i32 0
  store ptr %83, ptr %89, align 8
  %90 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.1098, ptr %88, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %90, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1099, align 8
  %91 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1099, align 8
  %92 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %93 = call ptr @candy_builtin_if_else(ptr %87, ptr %91, ptr %92)
  %94 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %95 = load ptr, ptr @"Core:fixedDecimal:floorToInt:18", align 8
  %96 = call ptr @"anonymous_$generated__needs"(ptr %93, ptr %94, ptr %95)
  %97 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %98 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %99 = call ptr @"anonymous_$generated__needs"(ptr %59, ptr %97, ptr %98)
  %100 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %101 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %102 = call ptr @"anonymous_$generated__needs"(ptr %63, ptr %100, ptr %101)
  %103 = call ptr @candy_builtin_type_of(ptr %67)
  %104 = load ptr, ptr @tag_Struct, align 8
  %105 = call ptr @candy_builtin_equals(ptr %103, ptr %104)
  %106 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %107 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %108 = call ptr @"anonymous_$generated__needs"(ptr %105, ptr %106, ptr %107)
  %109 = load ptr, ptr @tag_Scale, align 8
  %110 = call ptr @candy_builtin_struct_has_key(ptr %67, ptr %109)
  %111 = load ptr, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  %112 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %113 = call ptr @"anonymous_$generated__needs"(ptr %110, ptr %111, ptr %112)
  %114 = load ptr, ptr @tag_Scale, align 8
  %115 = call ptr @candy_builtin_struct_get(ptr %67, ptr %114)
  %116 = call ptr @Core_fixedDecimal_scaleFactor(ptr %115)
  %117 = call ptr @Builtins__intDivideTruncating(ptr %80, ptr %116)
  %118 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %119 = getelementptr inbounds { ptr }, ptr %118, i32 0, i32 0
  store ptr %0, ptr %119, align 8
  %120 = call ptr @make_candy_function(ptr @Core_fixedDecimal_toText_10, ptr %118, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %120, ptr @fun_Core_fixedDecimal_toText_10, align 8
  %121 = load ptr, ptr @fun_Core_fixedDecimal_toText_10, align 8
  %122 = call ptr @Core_function_run(ptr %121)
  %123 = call ptr @candy_builtin_type_of(ptr %117)
  %124 = load ptr, ptr @tag_Text, align 8
  %125 = call ptr @candy_builtin_equals(ptr %123, ptr %124)
  %126 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %127 = getelementptr inbounds { ptr }, ptr %126, i32 0, i32 0
  store ptr %117, ptr %127, align 8
  %128 = call ptr @make_candy_function(ptr @Core_fixedDecimal_toText_22, ptr %126, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %128, ptr @fun_Core_fixedDecimal_toText_22, align 8
  %129 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %130 = getelementptr inbounds { ptr }, ptr %129, i32 0, i32 0
  store ptr %117, ptr %130, align 8
  %131 = call ptr @make_candy_function(ptr @Core_fixedDecimal_toText_23, ptr %129, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %131, ptr @fun_Core_fixedDecimal_toText_23, align 8
  %132 = load ptr, ptr @fun_Core_fixedDecimal_toText_22, align 8
  %133 = load ptr, ptr @fun_Core_fixedDecimal_toText_23, align 8
  %134 = call ptr @candy_builtin_if_else(ptr %125, ptr %132, ptr %133)
  %135 = call ptr @candy_builtin_type_of(ptr %122)
  %136 = load ptr, ptr @tag_Text, align 8
  %137 = call ptr @candy_builtin_equals(ptr %135, ptr %136)
  %138 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %139 = getelementptr inbounds { ptr }, ptr %138, i32 0, i32 0
  store ptr %122, ptr %139, align 8
  %140 = call ptr @make_candy_function(ptr @Core_fixedDecimal_toText_29, ptr %138, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %140, ptr @fun_Core_fixedDecimal_toText_29, align 8
  %141 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %142 = getelementptr inbounds { ptr }, ptr %141, i32 0, i32 0
  store ptr %122, ptr %142, align 8
  %143 = call ptr @make_candy_function(ptr @Core_fixedDecimal_toText_30, ptr %141, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %143, ptr @fun_Core_fixedDecimal_toText_30, align 8
  %144 = load ptr, ptr @fun_Core_fixedDecimal_toText_29, align 8
  %145 = load ptr, ptr @fun_Core_fixedDecimal_toText_30, align 8
  %146 = call ptr @candy_builtin_if_else(ptr %137, ptr %144, ptr %145)
  %147 = load ptr, ptr @text_., align 8
  %148 = call ptr @candy_builtin_text_concatenate(ptr %134, ptr %147)
  %149 = call ptr @candy_builtin_text_concatenate(ptr %148, ptr %146)
  ret ptr %149
}

define ptr @Core_fixedDecimal_is_1_equals_then.1056(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_FixedDecimal, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.1058, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.1059, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.1082, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_equals_else.1083, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1059, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1083, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_equals_then.1058(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.1060, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.1061, align 8
  %11 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1061, align 8
  %12 = load ptr, ptr @"fun_Core_fixedDecimal_is_1_equals_else, Core_result_is_1_equals_else, Core_result_mapOrElse_30_equals_else", align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_fixedDecimal_is_1_equals_then.1060(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_type_of(ptr %3)
  %5 = load ptr, ptr @tag_Struct, align 8
  %6 = call ptr @candy_builtin_equals(ptr %5, ptr %4)
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %8 = getelementptr inbounds { ptr }, ptr %7, i32 0, i32 0
  store ptr %3, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.1062, ptr %7, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_equals_then.1063, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %4, ptr %11, align 8
  %12 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.1080, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %12, ptr @fun_Core_fixedDecimal_is_1_equals_else.1081, align 8
  %13 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1063, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1081, align 8
  %15 = call ptr @candy_builtin_if_else(ptr %6, ptr %13, ptr %14)
  ret ptr %15
}

define ptr @Core_fixedDecimal_is_1_equals_then.1062(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_has_key(ptr %2, ptr %3)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %7, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.1064, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.1065, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %12, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.1066, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.1067, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.1065, align 8
  %16 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.1067, align 8
  %17 = call ptr @candy_builtin_if_else(ptr %4, ptr %15, ptr %16)
  %18 = load ptr, ptr @num_0, align 8
  %19 = call ptr @candy_builtin_list_get(ptr %17, ptr %18)
  %20 = load ptr, ptr @tag_Match, align 8
  %21 = call ptr @candy_builtin_equals(ptr %19, ptr %20)
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %23 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 0
  store ptr %24, ptr %25, align 8
  %26 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 1
  store ptr %17, ptr %26, align 8
  %27 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.1068, ptr %22, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %27, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.1069, align 8
  %28 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %29 = getelementptr inbounds { ptr }, ptr %28, i32 0, i32 0
  store ptr %17, ptr %29, align 8
  %30 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.1078, ptr %28, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %30, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.1079, align 8
  %31 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.1069, align 8
  %32 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.1079, align 8
  %33 = call ptr @candy_builtin_if_else(ptr %21, ptr %31, ptr %32)
  ret ptr %33
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.1064(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @247, align 8
  ret ptr @247
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.1066(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `MinorUnits`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @248, align 8
  ret ptr @248
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.1068(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @tag_Scale, align 8
  %8 = call ptr @candy_builtin_struct_has_key(ptr %6, ptr %7)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %10 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds { ptr }, ptr %9, i32 0, i32 0
  store ptr %11, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.1070, ptr %9, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.1071, align 8
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %15 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds { ptr }, ptr %14, i32 0, i32 0
  store ptr %16, ptr %17, align 8
  %18 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.1072, ptr %14, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %18, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.1073, align 8
  %19 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.1071, align 8
  %20 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.1073, align 8
  %21 = call ptr @candy_builtin_if_else(ptr %8, ptr %19, ptr %20)
  %22 = load ptr, ptr @num_0, align 8
  %23 = call ptr @candy_builtin_list_get(ptr %21, ptr %22)
  %24 = load ptr, ptr @tag_Match, align 8
  %25 = call ptr @candy_builtin_equals(ptr %23, ptr %24)
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %27 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 0
  store ptr %4, ptr %27, align 8
  %28 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 1
  store ptr %21, ptr %28, align 8
  %29 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.1074, ptr %26, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %29, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.1075, align 8
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %31 = getelementptr inbounds { ptr }, ptr %30, i32 0, i32 0
  store ptr %21, ptr %31, align 8
  %32 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.1076, ptr %30, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %32, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.1077, align 8
  %33 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.1075, align 8
  %34 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.1077, align 8
  %35 = call ptr @candy_builtin_if_else(ptr %25, ptr %33, ptr %34)
  ret ptr %35
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.1070(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_Scale, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @249, align 8
  ret ptr @249
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.1072(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `Scale`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @250, align 8
  ret ptr @250
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.1074(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 4, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %5, i64 1
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %5, i64 2
  store ptr %4, ptr %11, align 8
  %12 = getelementptr ptr, ptr %5, i64 3
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %5)
  store ptr %13, ptr @251, align 8
  ret ptr @251
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.1076(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.1078(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_equals_else.1080(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Struct, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @252, align 8
  ret ptr @252
}

define ptr @Core_fixedDecimal_is_1_equals_else.1082(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected FixedDecimal, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @253, align 8
  ret ptr @253
}

define ptr @Core_fixedDecimal_is_1_equals_else.1084(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @254, align 8
  ret ptr @254
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.1086(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.1088, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.1089, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1089, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.1088(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.1090(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.1092, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.1093, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1093, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.1092(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.1094(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.1096, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.1097, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1097, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.1096(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.1098(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.1100, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.1101, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1101, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.1100(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_toText_10(ptr %0) {
Core_fixedDecimal_toText_10:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Tag, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.1102, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.1103, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.1130, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_equals_else.1131, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1103, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1131, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  %17 = load ptr, ptr @num_0, align 8
  %18 = call ptr @candy_builtin_list_get(ptr %16, ptr %17)
  %19 = load ptr, ptr @tag_Match, align 8
  %20 = call ptr @candy_builtin_equals(ptr %18, ptr %19)
  %21 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %22 = getelementptr inbounds { ptr }, ptr %21, i32 0, i32 0
  store ptr %16, ptr %22, align 8
  %23 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.1132, ptr %21, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %23, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1133, align 8
  %24 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1133, align 8
  %25 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %26 = call ptr @candy_builtin_if_else(ptr %20, ptr %24, ptr %25)
  %27 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %28 = load ptr, ptr @"Core:fixedDecimal:toText:10:2", align 8
  %29 = call ptr @"anonymous_$generated__needs"(ptr %26, ptr %27, ptr %28)
  %30 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %31 = load ptr, ptr %30, align 8
  %32 = call ptr @candy_builtin_type_of(ptr %31)
  %33 = load ptr, ptr @tag_Tag, align 8
  %34 = call ptr @candy_builtin_equals(ptr %32, ptr %33)
  %35 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %36 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %37 = call ptr @"anonymous_$generated__needs"(ptr %34, ptr %35, ptr %36)
  %38 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %39 = load ptr, ptr %38, align 8
  %40 = call ptr @candy_builtin_tag_has_value(ptr %39)
  %41 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %42 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %43 = call ptr @"anonymous_$generated__needs"(ptr %40, ptr %41, ptr %42)
  %44 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = call ptr @candy_builtin_tag_get_value(ptr %45)
  %47 = call ptr @candy_builtin_type_of(ptr %46)
  %48 = load ptr, ptr @tag_Struct, align 8
  %49 = call ptr @candy_builtin_equals(ptr %47, ptr %48)
  %50 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %51 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %52 = call ptr @"anonymous_$generated__needs"(ptr %49, ptr %50, ptr %51)
  %53 = load ptr, ptr @tag_Scale, align 8
  %54 = call ptr @candy_builtin_struct_has_key(ptr %46, ptr %53)
  %55 = load ptr, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  %56 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %57 = call ptr @"anonymous_$generated__needs"(ptr %54, ptr %55, ptr %56)
  %58 = load ptr, ptr @tag_Scale, align 8
  %59 = call ptr @candy_builtin_struct_get(ptr %46, ptr %58)
  %60 = call ptr @Core_fixedDecimal_scaleFactor(ptr %59)
  %61 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1103, align 8
  %62 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1131, align 8
  %63 = call ptr @candy_builtin_if_else(ptr %5, ptr %61, ptr %62)
  %64 = load ptr, ptr @num_0, align 8
  %65 = call ptr @candy_builtin_list_get(ptr %63, ptr %64)
  %66 = load ptr, ptr @tag_Match, align 8
  %67 = call ptr @candy_builtin_equals(ptr %65, ptr %66)
  %68 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %69 = getelementptr inbounds { ptr }, ptr %68, i32 0, i32 0
  store ptr %63, ptr %69, align 8
  %70 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.1136, ptr %68, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %70, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1137, align 8
  %71 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1137, align 8
  %72 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %73 = call ptr @candy_builtin_if_else(ptr %67, ptr %71, ptr %72)
  %74 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %75 = load ptr, ptr @"Core:fixedDecimal:toText:10:8", align 8
  %76 = call ptr @"anonymous_$generated__needs"(ptr %73, ptr %74, ptr %75)
  %77 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %78 = load ptr, ptr @"Core:fixedDecimal:minorUnits:19", align 8
  %79 = call ptr @"anonymous_$generated__needs"(ptr %34, ptr %77, ptr %78)
  %80 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %81 = load ptr, ptr @"Core:fixedDecimal:minorUnits:19", align 8
  %82 = call ptr @"anonymous_$generated__needs"(ptr %40, ptr %80, ptr %81)
  %83 = call ptr @candy_builtin_type_of(ptr %46)
  %84 = load ptr, ptr @tag_Struct, align 8
  %85 = call ptr @candy_builtin_equals(ptr %83, ptr %84)
  %86 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %87 = load ptr, ptr @"Core:fixedDecimal:minorUnits:21", align 8
  %88 = call ptr @"anonymous_$generated__needs"(ptr %85, ptr %86, ptr %87)
  %89 = load ptr, ptr @tag_MinorUnits, align 8
  %90 = call ptr @candy_builtin_struct_has_key(ptr %46, ptr %89)
  %91 = load ptr, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  %92 = load ptr, ptr @"Core:fixedDecimal:minorUnits:21", align 8
  %93 = call ptr @"anonymous_$generated__needs"(ptr %90, ptr %91, ptr %92)
  %94 = load ptr, ptr @tag_MinorUnits, align 8
  %95 = call ptr @candy_builtin_struct_get(ptr %46, ptr %94)
  %96 = call ptr @Builtins__intRemainder(ptr %95, ptr %60)
  %97 = call ptr @Core_int_isNonNegative(ptr %96)
  %98 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %99 = getelementptr inbounds { ptr, ptr }, ptr %98, i32 0, i32 0
  store ptr %96, ptr %99, align 8
  %100 = getelementptr inbounds { ptr, ptr }, ptr %98, i32 0, i32 1
  store ptr %60, ptr %100, align 8
  %101 = call ptr @make_candy_function(ptr @Core_fixedDecimal_toText_10_31, ptr %98, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %101, ptr @fun_Core_fixedDecimal_toText_10_31, align 8
  %102 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %103 = getelementptr inbounds { ptr, ptr }, ptr %102, i32 0, i32 0
  store ptr %96, ptr %103, align 8
  %104 = getelementptr inbounds { ptr, ptr }, ptr %102, i32 0, i32 1
  store ptr %60, ptr %104, align 8
  %105 = call ptr @make_candy_function(ptr @Core_fixedDecimal_toText_10_32, ptr %102, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %105, ptr @fun_Core_fixedDecimal_toText_10_32, align 8
  %106 = load ptr, ptr @fun_Core_fixedDecimal_toText_10_31, align 8
  %107 = load ptr, ptr @fun_Core_fixedDecimal_toText_10_32, align 8
  %108 = call ptr @Builtins__ifElse(ptr %97, ptr %106, ptr %107)
  ret ptr %108
}

define ptr @Core_fixedDecimal_is_1_equals_then.1102(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_FixedDecimal, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.1104, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.1105, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.1128, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_equals_else.1129, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1105, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1129, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_equals_then.1104(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.1106, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.1107, align 8
  %11 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1107, align 8
  %12 = load ptr, ptr @"fun_Core_fixedDecimal_is_1_equals_else, Core_result_is_1_equals_else, Core_result_mapOrElse_30_equals_else", align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_fixedDecimal_is_1_equals_then.1106(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_type_of(ptr %3)
  %5 = load ptr, ptr @tag_Struct, align 8
  %6 = call ptr @candy_builtin_equals(ptr %5, ptr %4)
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %8 = getelementptr inbounds { ptr }, ptr %7, i32 0, i32 0
  store ptr %3, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.1108, ptr %7, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_equals_then.1109, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %4, ptr %11, align 8
  %12 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.1126, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %12, ptr @fun_Core_fixedDecimal_is_1_equals_else.1127, align 8
  %13 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1109, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1127, align 8
  %15 = call ptr @candy_builtin_if_else(ptr %6, ptr %13, ptr %14)
  ret ptr %15
}

define ptr @Core_fixedDecimal_is_1_equals_then.1108(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_has_key(ptr %2, ptr %3)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %7, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.1110, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.1111, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %12, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.1112, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.1113, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.1111, align 8
  %16 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.1113, align 8
  %17 = call ptr @candy_builtin_if_else(ptr %4, ptr %15, ptr %16)
  %18 = load ptr, ptr @num_0, align 8
  %19 = call ptr @candy_builtin_list_get(ptr %17, ptr %18)
  %20 = load ptr, ptr @tag_Match, align 8
  %21 = call ptr @candy_builtin_equals(ptr %19, ptr %20)
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %23 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 0
  store ptr %24, ptr %25, align 8
  %26 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 1
  store ptr %17, ptr %26, align 8
  %27 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.1114, ptr %22, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %27, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.1115, align 8
  %28 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %29 = getelementptr inbounds { ptr }, ptr %28, i32 0, i32 0
  store ptr %17, ptr %29, align 8
  %30 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.1124, ptr %28, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %30, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.1125, align 8
  %31 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.1115, align 8
  %32 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.1125, align 8
  %33 = call ptr @candy_builtin_if_else(ptr %21, ptr %31, ptr %32)
  ret ptr %33
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.1110(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @255, align 8
  ret ptr @255
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.1112(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `MinorUnits`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @256, align 8
  ret ptr @256
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.1114(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @tag_Scale, align 8
  %8 = call ptr @candy_builtin_struct_has_key(ptr %6, ptr %7)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %10 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds { ptr }, ptr %9, i32 0, i32 0
  store ptr %11, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.1116, ptr %9, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.1117, align 8
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %15 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds { ptr }, ptr %14, i32 0, i32 0
  store ptr %16, ptr %17, align 8
  %18 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.1118, ptr %14, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %18, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.1119, align 8
  %19 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.1117, align 8
  %20 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.1119, align 8
  %21 = call ptr @candy_builtin_if_else(ptr %8, ptr %19, ptr %20)
  %22 = load ptr, ptr @num_0, align 8
  %23 = call ptr @candy_builtin_list_get(ptr %21, ptr %22)
  %24 = load ptr, ptr @tag_Match, align 8
  %25 = call ptr @candy_builtin_equals(ptr %23, ptr %24)
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %27 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 0
  store ptr %4, ptr %27, align 8
  %28 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 1
  store ptr %21, ptr %28, align 8
  %29 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.1120, ptr %26, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %29, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.1121, align 8
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %31 = getelementptr inbounds { ptr }, ptr %30, i32 0, i32 0
  store ptr %21, ptr %31, align 8
  %32 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.1122, ptr %30, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %32, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.1123, align 8
  %33 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.1121, align 8
  %34 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.1123, align 8
  %35 = call ptr @candy_builtin_if_else(ptr %25, ptr %33, ptr %34)
  ret ptr %35
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.1116(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_Scale, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @257, align 8
  ret ptr @257
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.1118(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `Scale`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @258, align 8
  ret ptr @258
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.1120(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 4, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %5, i64 1
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %5, i64 2
  store ptr %4, ptr %11, align 8
  %12 = getelementptr ptr, ptr %5, i64 3
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %5)
  store ptr %13, ptr @259, align 8
  ret ptr @259
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.1122(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.1124(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_equals_else.1126(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Struct, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @260, align 8
  ret ptr @260
}

define ptr @Core_fixedDecimal_is_1_equals_else.1128(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected FixedDecimal, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @261, align 8
  ret ptr @261
}

define ptr @Core_fixedDecimal_is_1_equals_else.1130(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @262, align 8
  ret ptr @262
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.1132(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.1134, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.1135, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1135, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.1134(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.1136(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.1138, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.1139, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1139, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.1138(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_toText_10_31(ptr %0) {
Core_fixedDecimal_toText_10_31:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Int, align 8
  %5 = call ptr @candy_builtin_equals(ptr %3, ptr %4)
  %6 = load ptr, ptr @"text_`a | typeIs Int` was not satisfied", align 8
  %7 = load ptr, ptr @"Core:fixedDecimal:toText:10:31:10", align 8
  %8 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %6, ptr %7)
  %9 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %9, align 8
  %11 = call ptr @candy_builtin_type_of(ptr %10)
  %12 = load ptr, ptr @tag_Int, align 8
  %13 = call ptr @candy_builtin_equals(ptr %11, ptr %12)
  %14 = load ptr, ptr @"text_`b | typeIs Int` was not satisfied", align 8
  %15 = load ptr, ptr @"Core:fixedDecimal:toText:10:31:10", align 8
  %16 = call ptr @"anonymous_$generated__needs"(ptr %13, ptr %14, ptr %15)
  %17 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = call ptr @candy_builtin_int_add(ptr %18, ptr %20)
  %22 = call ptr @candy_builtin_to_debug_text(ptr %21)
  %23 = load ptr, ptr @text_1, align 8
  %24 = call ptr @Core_text_removePrefix(ptr %22, ptr %23)
  ret ptr %24
}

define ptr @Core_fixedDecimal_toText_10_32(ptr %0) {
Core_fixedDecimal_toText_10_32:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_type_of(ptr %2)
  %4 = load ptr, ptr @tag_Int, align 8
  %5 = call ptr @candy_builtin_equals(ptr %3, ptr %4)
  %6 = load ptr, ptr @"text_`minuend | typeIs Int` was not satisfied", align 8
  %7 = load ptr, ptr @"Core:fixedDecimal:toText:10:32:10", align 8
  %8 = call ptr @"anonymous_$generated__needs"(ptr %5, ptr %6, ptr %7)
  %9 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %9, align 8
  %11 = call ptr @candy_builtin_type_of(ptr %10)
  %12 = load ptr, ptr @tag_Int, align 8
  %13 = call ptr @candy_builtin_equals(ptr %11, ptr %12)
  %14 = load ptr, ptr @"text_`subtrahend | typeIs Int` was not satisfied", align 8
  %15 = load ptr, ptr @"Core:fixedDecimal:toText:10:32:10", align 8
  %16 = call ptr @"anonymous_$generated__needs"(ptr %13, ptr %14, ptr %15)
  %17 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = call ptr @candy_builtin_int_subtract(ptr %18, ptr %20)
  %22 = call ptr @candy_builtin_to_debug_text(ptr %21)
  %23 = load ptr, ptr @text_-1, align 8
  %24 = call ptr @Core_text_removePrefix(ptr %22, ptr %23)
  ret ptr %24
}

define ptr @Core_fixedDecimal_toText_22(ptr %0) {
Core_fixedDecimal_toText_22:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_toText_23(ptr %0) {
Core_fixedDecimal_toText_23:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_toText_29(ptr %0) {
Core_fixedDecimal_toText_29:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_toText_30(ptr %0) {
Core_fixedDecimal_toText_30:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  ret ptr %3
}

define ptr @Core_controlFlow_recursive_18.1142(ptr %0, ptr %1) {
Core_controlFlow_recursive_18:
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %3 = getelementptr inbounds { ptr }, ptr %2, i32 0, i32 0
  store ptr %0, ptr %3, align 8
  %4 = call ptr @make_candy_function(ptr @Core_controlFlow_recursive_18_0.1144, ptr %2, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %4, ptr @fun_Core_controlFlow_recursive_18_0.1145, align 8
  %5 = load ptr, ptr @fun_Core_controlFlow_recursive_18_0.1145, align 8
  %6 = call ptr @Core_int_pow_21(ptr %5, ptr %1)
  ret ptr %6
}

define ptr @Core_controlFlow_recursive_18_0.1144(ptr %0, ptr %1) {
Core_controlFlow_recursive_18_0:
  %2 = getelementptr inbounds { ptr }, ptr %1, i32 0, i32 0
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr inbounds { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = call ptr @get_candy_function_pointer(ptr %5)
  %7 = call ptr @get_candy_function_environment(ptr %5)
  %8 = call ptr (...) %6(ptr %3, ptr %0, ptr %7)
  ret ptr %8
}

define ptr @Examples_sqrt_sqrt_82(ptr %0, ptr %1, ptr %2) {
Examples_sqrt_sqrt_82:
  %3 = call ptr @candy_builtin_type_of(ptr %1)
  %4 = load ptr, ptr @tag_Tag, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %1, ptr %7, align 8
  %8 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.1146, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %8, ptr @fun_Core_fixedDecimal_is_1_equals_then.1147, align 8
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %10 = getelementptr inbounds { ptr }, ptr %9, i32 0, i32 0
  store ptr %3, ptr %10, align 8
  %11 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.1174, ptr %9, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %11, ptr @fun_Core_fixedDecimal_is_1_equals_else.1175, align 8
  %12 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1147, align 8
  %13 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1175, align 8
  %14 = call ptr @candy_builtin_if_else(ptr %5, ptr %12, ptr %13)
  %15 = load ptr, ptr @num_0, align 8
  %16 = call ptr @candy_builtin_list_get(ptr %14, ptr %15)
  %17 = load ptr, ptr @tag_Match, align 8
  %18 = call ptr @candy_builtin_equals(ptr %16, ptr %17)
  %19 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %20 = getelementptr inbounds { ptr }, ptr %19, i32 0, i32 0
  store ptr %14, ptr %20, align 8
  %21 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.1176, ptr %19, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %21, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1177, align 8
  %22 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1177, align 8
  %23 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %24 = call ptr @candy_builtin_if_else(ptr %18, ptr %22, ptr %23)
  %25 = load ptr, ptr @"text_`is divisor` was not satisfied", align 8
  %26 = load ptr, ptr @"Examples:sqrt:sqrt:82:28", align 8
  %27 = call ptr @"anonymous_$generated__needs"(ptr %24, ptr %25, ptr %26)
  %28 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1147, align 8
  %29 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1175, align 8
  %30 = call ptr @candy_builtin_if_else(ptr %5, ptr %28, ptr %29)
  %31 = load ptr, ptr @num_0, align 8
  %32 = call ptr @candy_builtin_list_get(ptr %30, ptr %31)
  %33 = load ptr, ptr @tag_Match, align 8
  %34 = call ptr @candy_builtin_equals(ptr %32, ptr %33)
  %35 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %36 = getelementptr inbounds { ptr }, ptr %35, i32 0, i32 0
  store ptr %30, ptr %36, align 8
  %37 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.1180, ptr %35, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %37, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1181, align 8
  %38 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1181, align 8
  %39 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %40 = call ptr @candy_builtin_if_else(ptr %34, ptr %38, ptr %39)
  %41 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %42 = load ptr, ptr @"Core:fixedDecimal:divideTruncatingAtScale:17", align 8
  %43 = call ptr @"anonymous_$generated__needs"(ptr %40, ptr %41, ptr %42)
  %44 = call ptr @candy_builtin_type_of(ptr %1)
  %45 = load ptr, ptr @tag_Tag, align 8
  %46 = call ptr @candy_builtin_equals(ptr %44, ptr %45)
  %47 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %48 = load ptr, ptr @"Core:fixedDecimal:minorUnits:19", align 8
  %49 = call ptr @"anonymous_$generated__needs"(ptr %46, ptr %47, ptr %48)
  %50 = call ptr @candy_builtin_tag_has_value(ptr %1)
  %51 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %52 = load ptr, ptr @"Core:fixedDecimal:minorUnits:19", align 8
  %53 = call ptr @"anonymous_$generated__needs"(ptr %50, ptr %51, ptr %52)
  %54 = call ptr @candy_builtin_tag_get_value(ptr %1)
  %55 = call ptr @candy_builtin_type_of(ptr %54)
  %56 = load ptr, ptr @tag_Struct, align 8
  %57 = call ptr @candy_builtin_equals(ptr %55, ptr %56)
  %58 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %59 = load ptr, ptr @"Core:fixedDecimal:minorUnits:21", align 8
  %60 = call ptr @"anonymous_$generated__needs"(ptr %57, ptr %58, ptr %59)
  %61 = load ptr, ptr @tag_MinorUnits, align 8
  %62 = call ptr @candy_builtin_struct_has_key(ptr %54, ptr %61)
  %63 = load ptr, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  %64 = load ptr, ptr @"Core:fixedDecimal:minorUnits:21", align 8
  %65 = call ptr @"anonymous_$generated__needs"(ptr %62, ptr %63, ptr %64)
  %66 = load ptr, ptr @tag_MinorUnits, align 8
  %67 = call ptr @candy_builtin_struct_get(ptr %54, ptr %66)
  %68 = load ptr, ptr @num_0, align 8
  %69 = call ptr @candy_builtin_equals(ptr %67, ptr %68)
  %70 = call ptr @Core_bool_not(ptr %69)
  %71 = load ptr, ptr @"text_You can't divide by zero.", align 8
  %72 = load ptr, ptr @"Examples:sqrt:sqrt:82:28", align 8
  %73 = call ptr @"anonymous_$generated__needs"(ptr %70, ptr %71, ptr %72)
  %74 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1147, align 8
  %75 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1175, align 8
  %76 = call ptr @candy_builtin_if_else(ptr %5, ptr %74, ptr %75)
  %77 = load ptr, ptr @num_0, align 8
  %78 = call ptr @candy_builtin_list_get(ptr %76, ptr %77)
  %79 = load ptr, ptr @tag_Match, align 8
  %80 = call ptr @candy_builtin_equals(ptr %78, ptr %79)
  %81 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %82 = getelementptr inbounds { ptr }, ptr %81, i32 0, i32 0
  store ptr %76, ptr %82, align 8
  %83 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.1184, ptr %81, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %83, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1185, align 8
  %84 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1185, align 8
  %85 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %86 = call ptr @candy_builtin_if_else(ptr %80, ptr %84, ptr %85)
  %87 = load ptr, ptr @"text_`is valueB` was not satisfied", align 8
  %88 = load ptr, ptr @"Core:fixedDecimal:divideTruncatingAtScale:41", align 8
  %89 = call ptr @"anonymous_$generated__needs"(ptr %86, ptr %87, ptr %88)
  %90 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1147, align 8
  %91 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1175, align 8
  %92 = call ptr @candy_builtin_if_else(ptr %5, ptr %90, ptr %91)
  %93 = load ptr, ptr @num_0, align 8
  %94 = call ptr @candy_builtin_list_get(ptr %92, ptr %93)
  %95 = load ptr, ptr @tag_Match, align 8
  %96 = call ptr @candy_builtin_equals(ptr %94, ptr %95)
  %97 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %98 = getelementptr inbounds { ptr }, ptr %97, i32 0, i32 0
  store ptr %92, ptr %98, align 8
  %99 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_case-0_matched.1188, ptr %97, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %99, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1189, align 8
  %100 = load ptr, ptr @fun_Core_fixedDecimal_is_1_case-0_matched.1189, align 8
  %101 = load ptr, ptr @"fun_Builtins__ifElse_1_case-0_didNotMatch, Builtins__isLessThanOrEqualTo_19_case-1_matched, Builtins__isNonNegative_13_case-1_matched, Builtins__not_1_case-0_matched, Core_bool_is_1_case-0_didNotMatch, Core_bool_lazyAnd_18_case-1_matched, Core_bool_not_6_case-0_matched, Core_check_check_1_case-0_didNotMatch, Core_fixedDecimal_is_1_case-0_didNotMatch, Core_function_is0_12, Core_function_is1_12, Core_function_is2_12, Core_function_is3_12, Core_function_is4_12, Core_function_is5_12, Core_list_isValidIndex_21, Core_list_isValidInsertIndex_21, Core_result_is_1_case-0_didNotMatch, anonymous_$generated__needs_isConditionTrue_else", align 8
  %102 = call ptr @candy_builtin_if_else(ptr %96, ptr %100, ptr %101)
  %103 = load ptr, ptr @"text_`is a` was not satisfied", align 8
  %104 = load ptr, ptr @"Core:fixedDecimal:comparableMinorUnits:23", align 8
  %105 = call ptr @"anonymous_$generated__needs"(ptr %102, ptr %103, ptr %104)
  %106 = load ptr, ptr @"text_`tag | typeIs Tag` was not satisfied", align 8
  %107 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %108 = call ptr @"anonymous_$generated__needs"(ptr %46, ptr %106, ptr %107)
  %109 = load ptr, ptr @"text_`tag | \E2\9C\A8.tagHasValue` was not satisfied", align 8
  %110 = load ptr, ptr @"Core:fixedDecimal:scale:19", align 8
  %111 = call ptr @"anonymous_$generated__needs"(ptr %50, ptr %109, ptr %110)
  %112 = load ptr, ptr @"text_`struct | typeIs Struct` was not satisfied", align 8
  %113 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %114 = call ptr @"anonymous_$generated__needs"(ptr %57, ptr %112, ptr %113)
  %115 = load ptr, ptr @tag_Scale, align 8
  %116 = call ptr @candy_builtin_struct_has_key(ptr %54, ptr %115)
  %117 = load ptr, ptr @"text_`struct | \E2\9C\A8.structHasKey key` was not satisfied", align 8
  %118 = load ptr, ptr @"Core:fixedDecimal:scale:21", align 8
  %119 = call ptr @"anonymous_$generated__needs"(ptr %116, ptr %117, ptr %118)
  %120 = load ptr, ptr @tag_Scale, align 8
  %121 = call ptr @candy_builtin_struct_get(ptr %54, ptr %120)
  %122 = load ptr, ptr @num_0, align 8
  %123 = call ptr @Core_int_max(ptr %122, ptr %121)
  %124 = load ptr, ptr @tag_FixedDecimal.1140, align 8
  %125 = call ptr @Core_fixedDecimal_rescaledMinorUnits(ptr %124, ptr %123)
  %126 = call ptr @Core_fixedDecimal_rescaledMinorUnits(ptr %1, ptr %123)
  %127 = load ptr, ptr @fun_Core_controlFlow_recursive_18.1143, align 8
  %128 = getelementptr inbounds { ptr }, ptr %2, i32 0, i32 0
  %129 = load ptr, ptr %128, align 8
  %130 = call ptr @Core_controlFlow_recursive_18.1142(ptr %127, ptr %129)
  %131 = call ptr @candy_builtin_type_of(ptr %125)
  %132 = load ptr, ptr @tag_Int, align 8
  %133 = call ptr @candy_builtin_equals(ptr %131, ptr %132)
  %134 = load ptr, ptr @"text_`factorA | typeIs Int` was not satisfied", align 8
  %135 = load ptr, ptr @"Core:fixedDecimal:divideTruncatingAtScale:57", align 8
  %136 = call ptr @"anonymous_$generated__needs"(ptr %133, ptr %134, ptr %135)
  %137 = call ptr @candy_builtin_type_of(ptr %130)
  %138 = load ptr, ptr @tag_Int, align 8
  %139 = call ptr @candy_builtin_equals(ptr %137, ptr %138)
  %140 = load ptr, ptr @"text_`factorB | typeIs Int` was not satisfied", align 8
  %141 = load ptr, ptr @"Core:fixedDecimal:divideTruncatingAtScale:57", align 8
  %142 = call ptr @"anonymous_$generated__needs"(ptr %139, ptr %140, ptr %141)
  %143 = call ptr @candy_builtin_int_multiply(ptr %125, ptr %130)
  %144 = call ptr @Builtins__intDivideTruncating(ptr %143, ptr %126)
  %145 = load ptr, ptr @num_65, align 8
  %146 = call ptr @Core_fixedDecimal_fromIntScaled(ptr %144, ptr %145)
  %147 = call ptr @Core_fixedDecimal_add(ptr %1, ptr %146)
  %148 = load ptr, ptr @tag_FixedDecimal.1140, align 8
  %149 = load ptr, ptr @num_65, align 8
  %150 = call ptr @Core_fixedDecimal_divideTruncatingAtScale(ptr %147, ptr %148, ptr %149)
  %151 = load ptr, ptr @tag_FixedDecimal.1141, align 8
  %152 = call ptr @Core_fixedDecimal_approxEquals(ptr %1, ptr %150, ptr %151)
  %153 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %154 = getelementptr inbounds { ptr }, ptr %153, i32 0, i32 0
  store ptr %1, ptr %154, align 8
  %155 = call ptr @make_candy_function(ptr @Examples_sqrt_sqrt_82_56, ptr %153, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %155, ptr @fun_Examples_sqrt_sqrt_82_56, align 8
  %156 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %157 = getelementptr inbounds { ptr, ptr }, ptr %156, i32 0, i32 0
  store ptr %150, ptr %157, align 8
  %158 = getelementptr inbounds { ptr, ptr }, ptr %156, i32 0, i32 1
  store ptr %0, ptr %158, align 8
  %159 = call ptr @make_candy_function(ptr @Examples_sqrt_sqrt_82_57, ptr %156, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %159, ptr @fun_Examples_sqrt_sqrt_82_57, align 8
  %160 = load ptr, ptr @fun_Examples_sqrt_sqrt_82_56, align 8
  %161 = load ptr, ptr @fun_Examples_sqrt_sqrt_82_57, align 8
  %162 = call ptr @Builtins__ifElse(ptr %152, ptr %160, ptr %161)
  ret ptr %162
}

define ptr @Core_fixedDecimal_is_1_equals_then.1146(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_without_value(ptr %2)
  %4 = load ptr, ptr @tag_FixedDecimal, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.1148, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.1149, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %12 = getelementptr inbounds { ptr }, ptr %11, i32 0, i32 0
  store ptr %3, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.1172, ptr %11, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_equals_else.1173, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1149, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1173, align 8
  %16 = call ptr @candy_builtin_if_else(ptr %5, ptr %14, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_equals_then.1148(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_has_value(ptr %2)
  %4 = load ptr, ptr @tag_True, align 8
  %5 = call ptr @candy_builtin_equals(ptr %4, ptr %3)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %7 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds { ptr }, ptr %6, i32 0, i32 0
  store ptr %8, ptr %9, align 8
  %10 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.1150, ptr %6, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %10, ptr @fun_Core_fixedDecimal_is_1_equals_then.1151, align 8
  %11 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1151, align 8
  %12 = load ptr, ptr @"fun_Core_fixedDecimal_is_1_equals_else, Core_result_is_1_equals_else, Core_result_mapOrElse_30_equals_else", align 8
  %13 = call ptr @candy_builtin_if_else(ptr %5, ptr %11, ptr %12)
  ret ptr %13
}

define ptr @Core_fixedDecimal_is_1_equals_then.1150(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_tag_get_value(ptr %2)
  %4 = call ptr @candy_builtin_type_of(ptr %3)
  %5 = load ptr, ptr @tag_Struct, align 8
  %6 = call ptr @candy_builtin_equals(ptr %5, ptr %4)
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %8 = getelementptr inbounds { ptr }, ptr %7, i32 0, i32 0
  store ptr %3, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_then.1152, ptr %7, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_equals_then.1153, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %4, ptr %11, align 8
  %12 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_equals_else.1170, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %12, ptr @fun_Core_fixedDecimal_is_1_equals_else.1171, align 8
  %13 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_then.1153, align 8
  %14 = load ptr, ptr @fun_Core_fixedDecimal_is_1_equals_else.1171, align 8
  %15 = call ptr @candy_builtin_if_else(ptr %6, ptr %13, ptr %14)
  ret ptr %15
}

define ptr @Core_fixedDecimal_is_1_equals_then.1152(ptr %0) {
Core_fixedDecimal_is_1_equals_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_has_key(ptr %2, ptr %3)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %6 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds { ptr }, ptr %5, i32 0, i32 0
  store ptr %7, ptr %8, align 8
  %9 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.1154, ptr %5, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %9, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.1155, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %11 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds { ptr }, ptr %10, i32 0, i32 0
  store ptr %12, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.1156, ptr %10, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.1157, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.1155, align 8
  %16 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.1157, align 8
  %17 = call ptr @candy_builtin_if_else(ptr %4, ptr %15, ptr %16)
  %18 = load ptr, ptr @num_0, align 8
  %19 = call ptr @candy_builtin_list_get(ptr %17, ptr %18)
  %20 = load ptr, ptr @tag_Match, align 8
  %21 = call ptr @candy_builtin_equals(ptr %19, ptr %20)
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %23 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 0
  store ptr %17, ptr %23, align 8
  %24 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr inbounds { ptr, ptr }, ptr %22, i32 0, i32 1
  store ptr %25, ptr %26, align 8
  %27 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.1158, ptr %22, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %27, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.1159, align 8
  %28 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %29 = getelementptr inbounds { ptr }, ptr %28, i32 0, i32 0
  store ptr %17, ptr %29, align 8
  %30 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.1168, ptr %28, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %30, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.1169, align 8
  %31 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.1159, align 8
  %32 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.1169, align 8
  %33 = call ptr @candy_builtin_if_else(ptr %21, ptr %31, ptr %32)
  ret ptr %33
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.1154(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_MinorUnits, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @263, align 8
  ret ptr @263
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.1156(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `MinorUnits`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @264, align 8
  ret ptr @264
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.1158(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @tag_Scale, align 8
  %8 = call ptr @candy_builtin_struct_has_key(ptr %6, ptr %7)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %10 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds { ptr }, ptr %9, i32 0, i32 0
  store ptr %11, ptr %12, align 8
  %13 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_then.1160, ptr %9, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %13, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.1161, align 8
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %15 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds { ptr }, ptr %14, i32 0, i32 0
  store ptr %16, ptr %17, align 8
  %18 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_hasKey_else.1162, ptr %14, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %18, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.1163, align 8
  %19 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_then.1161, align 8
  %20 = load ptr, ptr @fun_Core_fixedDecimal_is_1_hasKey_else.1163, align 8
  %21 = call ptr @candy_builtin_if_else(ptr %8, ptr %19, ptr %20)
  %22 = load ptr, ptr @num_0, align 8
  %23 = call ptr @candy_builtin_list_get(ptr %21, ptr %22)
  %24 = load ptr, ptr @tag_Match, align 8
  %25 = call ptr @candy_builtin_equals(ptr %23, ptr %24)
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i32))
  %27 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 0
  store ptr %4, ptr %27, align 8
  %28 = getelementptr inbounds { ptr, ptr }, ptr %26, i32 0, i32 1
  store ptr %21, ptr %28, align 8
  %29 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_then.1164, ptr %26, i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64))
  store ptr %29, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.1165, align 8
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %31 = getelementptr inbounds { ptr }, ptr %30, i32 0, i32 0
  store ptr %21, ptr %31, align 8
  %32 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_isMatch_else.1166, ptr %30, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %32, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.1167, align 8
  %33 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_then.1165, align 8
  %34 = load ptr, ptr @fun_Core_fixedDecimal_is_1_isMatch_else.1167, align 8
  %35 = call ptr @candy_builtin_if_else(ptr %25, ptr %33, ptr %34)
  ret ptr %35
}

define ptr @Core_fixedDecimal_is_1_hasKey_then.1160(ptr %0) {
Core_fixedDecimal_is_1_hasKey_then:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @tag_Scale, align 8
  %4 = call ptr @candy_builtin_struct_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 3, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr ptr, ptr %5, i64 1
  store ptr %4, ptr %8, align 8
  %9 = getelementptr ptr, ptr %5, i64 2
  store ptr null, ptr %9, align 8
  %10 = call ptr @make_candy_list(ptr %5)
  store ptr %10, ptr @265, align 8
  ret ptr @265
}

define ptr @Core_fixedDecimal_is_1_hasKey_else.1162(ptr %0) {
Core_fixedDecimal_is_1_hasKey_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Struct doesn't contain key `Scale`: `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @266, align 8
  ret ptr @266
}

define ptr @Core_fixedDecimal_is_1_isMatch_then.1164(ptr %0) {
Core_fixedDecimal_is_1_isMatch_then:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = alloca ptr, i64 4, align 8
  %6 = load ptr, ptr @tag_Match, align 8
  %7 = getelementptr ptr, ptr %5, i64 0
  store ptr %6, ptr %7, align 8
  %8 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %5, i64 1
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %5, i64 2
  store ptr %4, ptr %11, align 8
  %12 = getelementptr ptr, ptr %5, i64 3
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %5)
  store ptr %13, ptr @267, align 8
  ret ptr @267
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.1166(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_isMatch_else.1168(ptr %0) {
Core_fixedDecimal_is_1_isMatch_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Core_fixedDecimal_is_1_equals_else.1170(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Struct, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @268, align 8
  ret ptr @268
}

define ptr @Core_fixedDecimal_is_1_equals_else.1172(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected FixedDecimal, got ", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @text_., align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @269, align 8
  ret ptr @269
}

define ptr @Core_fixedDecimal_is_1_equals_else.1174(ptr %0) {
Core_fixedDecimal_is_1_equals_else:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  %4 = load ptr, ptr @"text_Expected a Tag, got `", align 8
  %5 = call ptr @candy_builtin_text_concatenate(ptr %4, ptr %3)
  %6 = load ptr, ptr @"text_`.", align 8
  %7 = call ptr @candy_builtin_text_concatenate(ptr %5, ptr %6)
  %8 = alloca ptr, i64 3, align 8
  %9 = load ptr, ptr @tag_NoMatch, align 8
  %10 = getelementptr ptr, ptr %8, i64 0
  store ptr %9, ptr %10, align 8
  %11 = getelementptr ptr, ptr %8, i64 1
  store ptr %7, ptr %11, align 8
  %12 = getelementptr ptr, ptr %8, i64 2
  store ptr null, ptr %12, align 8
  %13 = call ptr @make_candy_list(ptr %8)
  store ptr %13, ptr @270, align 8
  ret ptr @270
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.1176(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.1178, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.1179, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1179, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.1178(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.1180(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.1182, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.1183, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1183, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.1182(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.1184(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.1186, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.1187, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1187, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.1186(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Core_fixedDecimal_is_1_case-0_matched.1188(ptr %0) {
Core_fixedDecimal_is_1_case-0_matched:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = load ptr, ptr @num_1, align 8
  %4 = call ptr @candy_builtin_list_get(ptr %2, ptr %3)
  %5 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr @num_2, align 8
  %8 = call ptr @candy_builtin_list_get(ptr %6, ptr %7)
  %9 = call ptr @candy_builtin_type_of(ptr %4)
  %10 = load ptr, ptr @tag_Int, align 8
  %11 = call ptr @candy_builtin_equals(ptr %9, ptr %10)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %13 = getelementptr inbounds { ptr }, ptr %12, i32 0, i32 0
  store ptr %8, ptr %13, align 8
  %14 = call ptr @make_candy_function(ptr @Core_fixedDecimal_is_1_18.1190, ptr %12, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %14, ptr @fun_Core_fixedDecimal_is_1_18.1191, align 8
  %15 = load ptr, ptr @fun_Core_fixedDecimal_is_1_18.1191, align 8
  %16 = call ptr @Core_bool_lazyAnd(ptr %11, ptr %15)
  ret ptr %16
}

define ptr @Core_fixedDecimal_is_1_18.1190(ptr %0) {
Core_fixedDecimal_is_1_18:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @Core_fixedDecimal_isScale(ptr %2)
  ret ptr %3
}

define ptr @Examples_sqrt_sqrt_82_56(ptr %0) {
Examples_sqrt_sqrt_82_56:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Examples_sqrt_sqrt_82_57(ptr %0) {
Examples_sqrt_sqrt_82_57:
  %1 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %3, align 8
  %5 = call ptr @get_candy_function_pointer(ptr %4)
  %6 = call ptr @get_candy_function_environment(ptr %4)
  %7 = call ptr (...) %5(ptr %2, ptr %6)
  ret ptr %7
}

define ptr @Examples_sqrt_main(ptr %0, ptr %1) {
Examples_sqrt_main:
  %2 = load ptr, ptr @fun_Core_controlFlow_recursive_18.1143, align 8
  %3 = getelementptr inbounds { ptr, ptr }, ptr %1, i32 0, i32 1
  %4 = load ptr, ptr %3, align 8
  %5 = call ptr @Core_controlFlow_recursive_18.1142(ptr %2, ptr %4)
  %6 = call ptr @candy_builtin_type_of(ptr %5)
  %7 = load ptr, ptr @tag_Int, align 8
  %8 = call ptr @candy_builtin_equals(ptr %6, ptr %7)
  %9 = load ptr, ptr @"text_`factorB | typeIs Int` was not satisfied", align 8
  %10 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:25:26", align 8
  %11 = call ptr @"anonymous_$generated__needs"(ptr %8, ptr %9, ptr %10)
  %12 = load ptr, ptr @num_2, align 8
  %13 = call ptr @candy_builtin_int_multiply(ptr %12, ptr %5)
  %14 = load ptr, ptr @fun_Core_controlFlow_recursive_18.1143, align 8
  %15 = getelementptr inbounds { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = call ptr @Core_controlFlow_recursive_18.1142(ptr %14, ptr %16)
  %18 = call ptr @candy_builtin_type_of(ptr %17)
  %19 = load ptr, ptr @tag_Int, align 8
  %20 = call ptr @candy_builtin_equals(ptr %18, ptr %19)
  %21 = load ptr, ptr @"text_`factorB | typeIs Int` was not satisfied", align 8
  %22 = load ptr, ptr @"Core:fixedDecimal:rescaledMinorUnits:25:26", align 8
  %23 = call ptr @"anonymous_$generated__needs"(ptr %20, ptr %21, ptr %22)
  %24 = load ptr, ptr @num_2, align 8
  %25 = call ptr @candy_builtin_int_multiply(ptr %24, ptr %17)
  %26 = load ptr, ptr @fun_Core_controlFlow_recursive_18.1143, align 8
  %27 = getelementptr inbounds { ptr, ptr }, ptr %1, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call ptr @Core_controlFlow_recursive_18.1142(ptr %26, ptr %28)
  %30 = call ptr @candy_builtin_type_of(ptr %29)
  %31 = load ptr, ptr @tag_Int, align 8
  %32 = call ptr @candy_builtin_equals(ptr %30, ptr %31)
  %33 = load ptr, ptr @"text_`factorB | typeIs Int` was not satisfied", align 8
  %34 = load ptr, ptr @"Core:fixedDecimal:divideTruncatingAtScale:57", align 8
  %35 = call ptr @"anonymous_$generated__needs"(ptr %32, ptr %33, ptr %34)
  %36 = call ptr @candy_builtin_int_multiply(ptr %13, ptr %29)
  %37 = call ptr @Builtins__intDivideTruncating(ptr %36, ptr %25)
  %38 = load ptr, ptr @num_65, align 8
  %39 = call ptr @Core_fixedDecimal_fromIntScaled(ptr %37, ptr %38)
  %40 = load ptr, ptr @fun_Examples_sqrt_sqrt_82, align 8
  %41 = call ptr @Core_controlFlow_recursive(ptr %39, ptr %40)
  %42 = call ptr @Core_fixedDecimal_toText(ptr %41)
  %43 = call ptr @candy_builtin_type_of(ptr %42)
  %44 = load ptr, ptr @tag_Text, align 8
  %45 = call ptr @candy_builtin_equals(ptr %43, ptr %44)
  %46 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %47 = getelementptr inbounds { ptr }, ptr %46, i32 0, i32 0
  store ptr %42, ptr %47, align 8
  %48 = call ptr @make_candy_function(ptr @Examples_sqrt_main_50, ptr %46, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %48, ptr @fun_Examples_sqrt_main_50, align 8
  %49 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i32))
  %50 = getelementptr inbounds { ptr }, ptr %49, i32 0, i32 0
  store ptr %42, ptr %50, align 8
  %51 = call ptr @make_candy_function(ptr @Examples_sqrt_main_51, ptr %49, i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64))
  store ptr %51, ptr @fun_Examples_sqrt_main_51, align 8
  %52 = load ptr, ptr @fun_Examples_sqrt_main_50, align 8
  %53 = load ptr, ptr @fun_Examples_sqrt_main_51, align 8
  %54 = call ptr @candy_builtin_if_else(ptr %45, ptr %52, ptr %53)
  %55 = load ptr, ptr @"text_The root of 2 is ", align 8
  %56 = call ptr @candy_builtin_text_concatenate(ptr %55, ptr %54)
  %57 = call ptr @candy_builtin_print(ptr %56)
  ret ptr %57
}

define ptr @Examples_sqrt_main_50(ptr %0) {
Examples_sqrt_main_50:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  ret ptr %2
}

define ptr @Examples_sqrt_main_51(ptr %0) {
Examples_sqrt_main_51:
  %1 = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %2 = load ptr, ptr %1, align 8
  %3 = call ptr @candy_builtin_to_debug_text(ptr %2)
  ret ptr %3
}
