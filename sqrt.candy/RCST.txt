# RCST for module Examples:sqrt
Cst { data: (), kind: Error { unparsable_input: "builtins = use \"Builtins\"\n[equals, fixedDecimal, ifElse, int, recursive] = use \"Core\"\n\nsqrt x precision :=\n  needs (fixedDecimal.is x)\n  needs (fixedDecimal.isNonNegative x)\n  needs (int.is precision)\n  needs (int.isNonNegative precision)\n\n  delta = 10 | fixedDecimal.fromIntScaled precision\n\n  recursive (x | fixedDecimal.divideTruncatingAtScale (2 | fixedDecimal.fromInt) precision) {\n    recurse guess ->\n    refinedGuess =\n      fixedDecimal.divideTruncatingAtScale\n        guess | fixedDecimal.add (x | fixedDecimal.divideTruncatingAtScale guess precision)\n        2 | fixedDecimal.fromInt\n        precision\n    ifElse (fixedDecimal.approxEquals guess refinedGuess delta) { guess } { recurse refinedGuess }\n  }\n\nmain _ :=\n  input = 2\n  result = input | fixedDecimal.fromInt | sqrt 65\n  builtins.print \"The root of {input} is {result | fixedDecimal.toText}\"", error: UnparsedRest } }
Cst { data: (), kind: Newline("\n") }
