# RCST for module Examples:sqrt
Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("builtins") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("use") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Text { opening: Cst { data: (), kind: OpeningText { opening_single_quotes: [], opening_double_quote: Cst { data: (), kind: DoubleQuote } } }, parts: [Cst { data: (), kind: TextPart("Builtins") }], closing: Cst { data: (), kind: ClosingText { closing_double_quote: Cst { data: (), kind: DoubleQuote }, closing_single_quotes: [] } } } }] } }] } }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Struct { opening_bracket: Cst { data: (), kind: OpeningBracket }, fields: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructField { key_and_colon: None, value: Cst { data: (), kind: Identifier("equals") }, comma: Some(Cst { data: (), kind: Comma }) } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructField { key_and_colon: None, value: Cst { data: (), kind: Identifier("fixedDecimal") }, comma: Some(Cst { data: (), kind: Comma }) } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructField { key_and_colon: None, value: Cst { data: (), kind: Identifier("ifElse") }, comma: Some(Cst { data: (), kind: Comma }) } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructField { key_and_colon: None, value: Cst { data: (), kind: Identifier("int") }, comma: Some(Cst { data: (), kind: Comma }) } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: StructField { key_and_colon: None, value: Cst { data: (), kind: Identifier("recursive") }, comma: None } }], closing_bracket: Cst { data: (), kind: ClosingBracket } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("use") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Text { opening: Cst { data: (), kind: OpeningText { opening_single_quotes: [], opening_double_quote: Cst { data: (), kind: DoubleQuote } } }, parts: [Cst { data: (), kind: TextPart("Core") }], closing: Cst { data: (), kind: ClosingText { closing_double_quote: Cst { data: (), kind: DoubleQuote }, closing_single_quotes: [] } } } }] } }] } }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("sqrt") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("x") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: Identifier("precision") }] } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: ColonEqualsSign }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }] } }, body: [Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("needs") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Parenthesized { opening_parenthesis: Cst { data: (), kind: OpeningParenthesis }, inner: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("fixedDecimal") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("is") } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Identifier("x") }] } }, closing_parenthesis: Cst { data: (), kind: ClosingParenthesis } } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("needs") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Parenthesized { opening_parenthesis: Cst { data: (), kind: OpeningParenthesis }, inner: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("fixedDecimal") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("isNonNegative") } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Identifier("x") }] } }, closing_parenthesis: Cst { data: (), kind: ClosingParenthesis } } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("needs") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Parenthesized { opening_parenthesis: Cst { data: (), kind: OpeningParenthesis }, inner: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("int") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("is") } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Identifier("precision") }] } }, closing_parenthesis: Cst { data: (), kind: ClosingParenthesis } } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("needs") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Parenthesized { opening_parenthesis: Cst { data: (), kind: OpeningParenthesis }, inner: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("int") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("isNonNegative") } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Identifier("precision") }] } }, closing_parenthesis: Cst { data: (), kind: ClosingParenthesis } } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("delta") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Int { value: 10, string: "10" } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("fixedDecimal") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("fromIntScaled") } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Identifier("precision") }] } } } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("recursive") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Parenthesized { opening_parenthesis: Cst { data: (), kind: OpeningParenthesis }, inner: Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("x") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("fixedDecimal") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("divideTruncatingAtScale") } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Parenthesized { opening_parenthesis: Cst { data: (), kind: OpeningParenthesis }, inner: Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Int { value: 2, string: "2" } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("fixedDecimal") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("fromInt") } } } } }, closing_parenthesis: Cst { data: (), kind: ClosingParenthesis } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: Identifier("precision") }] } } } }, closing_parenthesis: Cst { data: (), kind: ClosingParenthesis } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: Function { opening_curly_brace: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: OpeningCurlyBrace }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("    ") }] } }, parameters_and_arrow: Some(([Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("recurse") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("guess") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }], Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Arrow }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("    ") }] } })), body: [Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("refinedGuess") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("      ") }] } }, body: [Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("fixedDecimal") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("divideTruncatingAtScale") } } }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("        ") }] } }, arguments: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("guess") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("fixedDecimal") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("add") } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Parenthesized { opening_parenthesis: Cst { data: (), kind: OpeningParenthesis }, inner: Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("x") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("fixedDecimal") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("divideTruncatingAtScale") } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("guess") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: Identifier("precision") }] } } } }, closing_parenthesis: Cst { data: (), kind: ClosingParenthesis } } }] } } } }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("        ") }] } }, Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Int { value: 2, string: "2" } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("fixedDecimal") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("fromInt") } } } } }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("        ") }] } }, Cst { data: (), kind: Identifier("precision") }] } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("    ") }, Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("ifElse") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Parenthesized { opening_parenthesis: Cst { data: (), kind: OpeningParenthesis }, inner: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("fixedDecimal") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("approxEquals") } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("guess") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("refinedGuess") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: Identifier("delta") }] } }, closing_parenthesis: Cst { data: (), kind: ClosingParenthesis } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Function { opening_curly_brace: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: OpeningCurlyBrace }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, parameters_and_arrow: None, body: [Cst { data: (), kind: Identifier("guess") }, Cst { data: (), kind: Whitespace(" ") }], closing_curly_brace: Cst { data: (), kind: ClosingCurlyBrace } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: Function { opening_curly_brace: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: OpeningCurlyBrace }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, parameters_and_arrow: None, body: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("recurse") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Identifier("refinedGuess") }] } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }], closing_curly_brace: Cst { data: (), kind: ClosingCurlyBrace } } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }], closing_curly_brace: Cst { data: (), kind: ClosingCurlyBrace } } }] } }] } }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("main") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Identifier("_") }] } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: ColonEqualsSign }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }] } }, body: [Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("input") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: Int { value: 2, string: "2" } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("result") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("input") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("fixedDecimal") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("fromInt") } } } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("sqrt") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Int { value: 65, string: "65" } }] } } } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("builtins") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("print") } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Text { opening: Cst { data: (), kind: OpeningText { opening_single_quotes: [], opening_double_quote: Cst { data: (), kind: DoubleQuote } } }, parts: [Cst { data: (), kind: TextPart("The root of ") }, Cst { data: (), kind: TextInterpolation { opening_curly_braces: [Cst { data: (), kind: OpeningCurlyBrace }], expression: Cst { data: (), kind: Identifier("input") }, closing_curly_braces: [Cst { data: (), kind: ClosingCurlyBrace }] } }, Cst { data: (), kind: TextPart(" is ") }, Cst { data: (), kind: TextInterpolation { opening_curly_braces: [Cst { data: (), kind: OpeningCurlyBrace }], expression: Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("result") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("fixedDecimal") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("toText") } } } } }, closing_curly_braces: [Cst { data: (), kind: ClosingCurlyBrace }] } }], closing: Cst { data: (), kind: ClosingText { closing_double_quote: Cst { data: (), kind: DoubleQuote }, closing_single_quotes: [] } } } }] } }] } }
Cst { data: (), kind: Newline("\n") }
