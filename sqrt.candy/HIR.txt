# HIR for module Examples:sqrt
$use = { (non-fuzzable, but passes on responsibility) $use:relativePath ->
  $use:importedModule = relative to module Examples:sqrt, use $use:relativePath
}
$0 = "Builtins"
$1 = call $use with $0
$2 = $use
$3 = builtinTextConcatenate
$4 = builtinTypeOf
$5 = Text
$6 = builtinEquals
$7 = builtinIfElse
$8 = builtinToDebugText
$9 = "Builtins"
$10 = call $2 with $9
$builtins = $10
$builtins#1 = $builtins
$11 = Nothing
$12 = $use
$13 = builtinTextConcatenate
$14 = builtinTypeOf
$15 = Text
$16 = builtinEquals
$17 = builtinIfElse
$18 = builtinToDebugText
$19 = "Core"
$20 = call $12 with $19
$21 = destructure $20 into [Equals: p$0, FixedDecimal: p$1, IfElse: p$2, Int: p$3, Recursive: p$4]
$equals = p$0
$fixedDecimal = p$1
$ifElse = p$2
$int = p$3
$recursive = p$4
$22 = Nothing
$sqrt = { (fuzzable) $sqrt:x $sqrt:precision ->
  $sqrt:0 = builtinStructGet
  $sqrt:1 = StructGet
  $sqrt:2 = call $sqrt:0 with $1 $sqrt:1
  $sqrt:3 = $fixedDecimal
  $sqrt:4 = Is
  $sqrt:5 = call $sqrt:2 with $sqrt:3 $sqrt:4
  $sqrt:6 = $sqrt:x
  $sqrt:7 = call $sqrt:5 with $sqrt:6
  $sqrt:8 = "`fixedDecimal.is x` was not satisfied"
  $sqrt:9 = needs $sqrt:7 with reason $sqrt:8
  $sqrt:10 = builtinStructGet
  $sqrt:11 = StructGet
  $sqrt:12 = call $sqrt:10 with $1 $sqrt:11
  $sqrt:13 = $fixedDecimal
  $sqrt:14 = IsNonNegative
  $sqrt:15 = call $sqrt:12 with $sqrt:13 $sqrt:14
  $sqrt:16 = $sqrt:x
  $sqrt:17 = call $sqrt:15 with $sqrt:16
  $sqrt:18 = "`fixedDecimal.isNonNegative x` was not satisfied"
  $sqrt:19 = needs $sqrt:17 with reason $sqrt:18
  $sqrt:20 = builtinStructGet
  $sqrt:21 = StructGet
  $sqrt:22 = call $sqrt:20 with $1 $sqrt:21
  $sqrt:23 = $int
  $sqrt:24 = Is
  $sqrt:25 = call $sqrt:22 with $sqrt:23 $sqrt:24
  $sqrt:26 = $sqrt:precision
  $sqrt:27 = call $sqrt:25 with $sqrt:26
  $sqrt:28 = "`int.is precision` was not satisfied"
  $sqrt:29 = needs $sqrt:27 with reason $sqrt:28
  $sqrt:30 = builtinStructGet
  $sqrt:31 = StructGet
  $sqrt:32 = call $sqrt:30 with $1 $sqrt:31
  $sqrt:33 = $int
  $sqrt:34 = IsNonNegative
  $sqrt:35 = call $sqrt:32 with $sqrt:33 $sqrt:34
  $sqrt:36 = $sqrt:precision
  $sqrt:37 = call $sqrt:35 with $sqrt:36
  $sqrt:38 = "`int.isNonNegative precision` was not satisfied"
  $sqrt:39 = needs $sqrt:37 with reason $sqrt:38
  $sqrt:40 = 10
  $sqrt:41 = builtinStructGet
  $sqrt:42 = StructGet
  $sqrt:43 = call $sqrt:41 with $1 $sqrt:42
  $sqrt:44 = $fixedDecimal
  $sqrt:45 = FromIntScaled
  $sqrt:46 = call $sqrt:43 with $sqrt:44 $sqrt:45
  $sqrt:47 = $sqrt:precision
  $sqrt:48 = call $sqrt:46 with $sqrt:40 $sqrt:47
  $sqrt:delta = $sqrt:48
  $sqrt:delta#1 = $sqrt:delta
  $sqrt:49 = Nothing
  $sqrt:50 = $recursive
  $sqrt:51 = $sqrt:x
  $sqrt:52 = builtinStructGet
  $sqrt:53 = StructGet
  $sqrt:54 = call $sqrt:52 with $1 $sqrt:53
  $sqrt:55 = $fixedDecimal
  $sqrt:56 = DivideTruncatingAtScale
  $sqrt:57 = call $sqrt:54 with $sqrt:55 $sqrt:56
  $sqrt:58 = 2
  $sqrt:59 = builtinStructGet
  $sqrt:60 = StructGet
  $sqrt:61 = call $sqrt:59 with $1 $sqrt:60
  $sqrt:62 = $fixedDecimal
  $sqrt:63 = FromInt
  $sqrt:64 = call $sqrt:61 with $sqrt:62 $sqrt:63
  $sqrt:65 = call $sqrt:64 with $sqrt:58
  $sqrt:66 = $sqrt:precision
  $sqrt:67 = call $sqrt:57 with $sqrt:51 $sqrt:65 $sqrt:66
  $sqrt:68 = { (non-fuzzable) $sqrt:68:recurse $sqrt:68:guess ->
    $sqrt:68:0 = builtinStructGet
    $sqrt:68:1 = StructGet
    $sqrt:68:2 = call $sqrt:68:0 with $1 $sqrt:68:1
    $sqrt:68:3 = $fixedDecimal
    $sqrt:68:4 = DivideTruncatingAtScale
    $sqrt:68:5 = call $sqrt:68:2 with $sqrt:68:3 $sqrt:68:4
    $sqrt:68:6 = $sqrt:68:guess
    $sqrt:68:7 = builtinStructGet
    $sqrt:68:8 = StructGet
    $sqrt:68:9 = call $sqrt:68:7 with $1 $sqrt:68:8
    $sqrt:68:10 = $fixedDecimal
    $sqrt:68:11 = Add
    $sqrt:68:12 = call $sqrt:68:9 with $sqrt:68:10 $sqrt:68:11
    $sqrt:68:13 = $sqrt:x
    $sqrt:68:14 = builtinStructGet
    $sqrt:68:15 = StructGet
    $sqrt:68:16 = call $sqrt:68:14 with $1 $sqrt:68:15
    $sqrt:68:17 = $fixedDecimal
    $sqrt:68:18 = DivideTruncatingAtScale
    $sqrt:68:19 = call $sqrt:68:16 with $sqrt:68:17 $sqrt:68:18
    $sqrt:68:20 = $sqrt:68:guess
    $sqrt:68:21 = $sqrt:precision
    $sqrt:68:22 = call $sqrt:68:19 with $sqrt:68:13 $sqrt:68:20 $sqrt:68:21
    $sqrt:68:23 = call $sqrt:68:12 with $sqrt:68:6 $sqrt:68:22
    $sqrt:68:24 = 2
    $sqrt:68:25 = builtinStructGet
    $sqrt:68:26 = StructGet
    $sqrt:68:27 = call $sqrt:68:25 with $1 $sqrt:68:26
    $sqrt:68:28 = $fixedDecimal
    $sqrt:68:29 = FromInt
    $sqrt:68:30 = call $sqrt:68:27 with $sqrt:68:28 $sqrt:68:29
    $sqrt:68:31 = call $sqrt:68:30 with $sqrt:68:24
    $sqrt:68:32 = $sqrt:precision
    $sqrt:68:33 = call $sqrt:68:5 with $sqrt:68:23 $sqrt:68:31 $sqrt:68:32
    $sqrt:68:refinedGuess = $sqrt:68:33
    $sqrt:68:refinedGuess#1 = $sqrt:68:refinedGuess
    $sqrt:68:34 = Nothing
    $sqrt:68:35 = $ifElse
    $sqrt:68:36 = builtinStructGet
    $sqrt:68:37 = StructGet
    $sqrt:68:38 = call $sqrt:68:36 with $1 $sqrt:68:37
    $sqrt:68:39 = $fixedDecimal
    $sqrt:68:40 = ApproxEquals
    $sqrt:68:41 = call $sqrt:68:38 with $sqrt:68:39 $sqrt:68:40
    $sqrt:68:42 = $sqrt:68:guess
    $sqrt:68:43 = $sqrt:68:refinedGuess#1
    $sqrt:68:44 = $sqrt:delta#1
    $sqrt:68:45 = call $sqrt:68:41 with $sqrt:68:42 $sqrt:68:43 $sqrt:68:44
    $sqrt:68:46 = { (non-fuzzable) ->
      $sqrt:68:46:0 = $sqrt:68:guess
    }
    $sqrt:68:47 = { (non-fuzzable) ->
      $sqrt:68:47:0 = $sqrt:68:recurse
      $sqrt:68:47:1 = $sqrt:68:refinedGuess#1
      $sqrt:68:47:2 = call $sqrt:68:47:0 with $sqrt:68:47:1
    }
    $sqrt:68:48 = call $sqrt:68:35 with $sqrt:68:45 $sqrt:68:46 $sqrt:68:47
  }
  $sqrt:69 = call $sqrt:50 with $sqrt:67 $sqrt:68
}
$sqrt#1 = $sqrt
$main = { (fuzzable) $main:_ ->
  $main:0 = 2
  $main:input = $main:0
  $main:input#1 = $main:input
  $main:1 = Nothing
  $main:2 = $main:input#1
  $main:3 = builtinStructGet
  $main:4 = StructGet
  $main:5 = call $main:3 with $1 $main:4
  $main:6 = $fixedDecimal
  $main:7 = FromInt
  $main:8 = call $main:5 with $main:6 $main:7
  $main:9 = call $main:8 with $main:2
  $main:10 = $sqrt#1
  $main:11 = 65
  $main:12 = call $main:10 with $main:9 $main:11
  $main:result = $main:12
  $main:result#1 = $main:result
  $main:13 = Nothing
  $main:14 = builtinStructGet
  $main:15 = StructGet
  $main:16 = call $main:14 with $1 $main:15
  $main:17 = $builtins#1
  $main:18 = Print
  $main:19 = call $main:16 with $main:17 $main:18
  $main:20 = builtinTextConcatenate
  $main:21 = builtinTypeOf
  $main:22 = Text
  $main:23 = builtinEquals
  $main:24 = builtinIfElse
  $main:25 = builtinToDebugText
  $main:26 = "The root of "
  $main:27 = $main:input#1
  $main:28 = call $main:21 with $main:27
  $main:29 = call $main:23 with $main:28 $main:22
  $main:30 = { (non-fuzzable) ->
    $main:30:0 = $main:27
  }
  $main:31 = { (non-fuzzable) ->
    $main:31:0 = call $main:25 with $main:27
  }
  $main:32 = call $main:24 with $main:29 $main:30 $main:31
  $main:33 = " is "
  $main:34 = $main:result#1
  $main:35 = builtinStructGet
  $main:36 = StructGet
  $main:37 = call $main:35 with $1 $main:36
  $main:38 = $fixedDecimal
  $main:39 = ToText
  $main:40 = call $main:37 with $main:38 $main:39
  $main:41 = call $main:40 with $main:34
  $main:42 = call $main:21 with $main:41
  $main:43 = call $main:23 with $main:42 $main:22
  $main:44 = { (non-fuzzable) ->
    $main:44:0 = $main:41
  }
  $main:45 = { (non-fuzzable) ->
    $main:45:0 = call $main:25 with $main:41
  }
  $main:46 = call $main:24 with $main:43 $main:44 $main:45
  $main:47 = call $main:20 with $main:26 $main:32
  $main:48 = call $main:20 with $main:47 $main:33
  $main:49 = call $main:20 with $main:48 $main:46
  $main:50 = call $main:19 with $main:49
}
$main#1 = $main
$23 = Main
$24 = Sqrt
$25 = [$23: $main#1, $24: $sqrt#1]
