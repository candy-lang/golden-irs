# RCST for module Examples:clock
Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Struct { opening_bracket: Cst { data: (), kind: OpeningBracket }, fields: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructField { key_and_colon: None, value: Cst { data: (), kind: Identifier("clock") }, comma: Some(Cst { data: (), kind: Comma }) } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructField { key_and_colon: None, value: Cst { data: (), kind: Identifier("duration") }, comma: Some(Cst { data: (), kind: Comma }) } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: StructField { key_and_colon: None, value: Cst { data: (), kind: Identifier("instant") }, comma: None } }], closing_bracket: Cst { data: (), kind: ClosingBracket } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("use") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Text { opening: Cst { data: (), kind: OpeningText { opening_single_quotes: [], opening_double_quote: Cst { data: (), kind: DoubleQuote } } }, parts: [Cst { data: (), kind: TextPart("Chrono") }], closing: Cst { data: (), kind: ClosingText { closing_double_quote: Cst { data: (), kind: DoubleQuote }, closing_single_quotes: [] } } } }] } }] } }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Struct { opening_bracket: Cst { data: (), kind: OpeningBracket }, fields: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructField { key_and_colon: None, value: Cst { data: (), kind: Identifier("tag") }, comma: Some(Cst { data: (), kind: Comma }) } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: StructField { key_and_colon: None, value: Cst { data: (), kind: Identifier("fixedDecimal") }, comma: None } }], closing_bracket: Cst { data: (), kind: ClosingBracket } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("use") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Text { opening: Cst { data: (), kind: OpeningText { opening_single_quotes: [], opening_double_quote: Cst { data: (), kind: DoubleQuote } } }, parts: [Cst { data: (), kind: TextPart("Core") }], closing: Cst { data: (), kind: ClosingText { closing_double_quote: Cst { data: (), kind: DoubleQuote }, closing_single_quotes: [] } } } }] } }] } }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("main") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: ColonEqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: Function { opening_curly_brace: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: OpeningCurlyBrace }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, parameters_and_arrow: Some(([Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("environment") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }], Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Arrow }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }] } })), body: [Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("print") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Identifier("message") }] } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("environment") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("stdout") } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Identifier("message") }] } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("c") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("clock") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("fromSystemClock") } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("environment") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("systemClock") } } }] } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("now") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("clock") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("now") } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Identifier("c") }] } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("print") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Text { opening: Cst { data: (), kind: OpeningText { opening_single_quotes: [], opening_double_quote: Cst { data: (), kind: DoubleQuote } } }, parts: [Cst { data: (), kind: TextPart("It has been ") }, Cst { data: (), kind: TextInterpolation { opening_curly_braces: [Cst { data: (), kind: OpeningCurlyBrace }], expression: Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("now") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("instant") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("toUnixTimeDuration") } } } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("duration") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("toText") } } } } }, closing_curly_braces: [Cst { data: (), kind: ClosingCurlyBrace }] } }, Cst { data: (), kind: TextPart(" since the start the of Unix epoch") }], closing: Cst { data: (), kind: ClosingText { closing_double_quote: Cst { data: (), kind: DoubleQuote }, closing_single_quotes: [] } } } }] } }, Cst { data: (), kind: Newline("\n") }], closing_curly_brace: Cst { data: (), kind: ClosingCurlyBrace } } }] } }
Cst { data: (), kind: Newline("\n") }
