# MIR for module Examples:_package
#
# Tracing Config:
#
# • Include tracing of fuzzable functions? No
# • Include tracing of calls? Only for panic traces
# • Include tracing of evaluated expressions? No

# anonymous:$generated::needs
$49 = { $2 $3 $4 (+ responsible $1) ->
  $5 = anonymous:$generated::needs
  $6 = builtinEquals
  $7 = Nothing
  $8 = True
  $9 = False
  $10 = call $6 with $2 $8 ($5 is responsible)
  $11 = builtinIfElse
  # anonymous:$generated::needs:isConditionTrue:then
  $14 = { (responsible $12) ->
    $13 = $8
  }
  # anonymous:$generated::needs:isConditionTrue:else
  $17 = { (responsible $15) ->
    $16 = call $6 with $2 $9 ($5 is responsible)
  }
  $18 = call $11 with $10 $14 $17 ($5 is responsible)
  $19 = builtinIfElse
  # anonymous:$generated::needs:isConditionBool:then
  $22 = { (responsible $20) ->
    $21 = $7
  }
  # anonymous:$generated::needs:isConditionBool:else
  $26 = { (responsible $23) ->
    $24 = "The `condition` must be either `True` or `False`."
    $25 = panicking because $24 ($1 is at fault)
  }
  $27 = call $19 with $18 $22 $26 ($5 is responsible)
  $28 = builtinTypeOf
  $29 = call $28 with $3 ($1 is responsible)
  $30 = Text
  $31 = call $6 with $29 $30 ($1 is responsible)
  $32 = builtinIfElse
  # anonymous:$generated::needs:isReasonText:then
  $35 = { (responsible $33) ->
    $34 = $7
  }
  # anonymous:$generated::needs:isReasonText:else
  $39 = { (responsible $36) ->
    $37 = "The `reason` must be a text."
    $38 = panicking because $37 ($1 is at fault)
  }
  $40 = call $32 with $31 $35 $39 ($5 is responsible)
  $41 = builtinIfElse
  # anonymous:$generated::needs:condition:then
  $44 = { (responsible $42) ->
    $43 = $7
  }
  # anonymous:$generated::needs:condition:else
  $47 = { (responsible $45) ->
    $46 = panicking because $3 ($4 is at fault)
  }
  $48 = call $41 with $2 $44 $47 ($5 is responsible)
}
$50 = Examples:_package:
# Examples:_package:use
$54 = { $52 (+ responsible $51) ->
  $53 = use $52 (relative to Examples:_package; $51 is responsible)
}
$55 = "Builtins"
$56 = Examples:_package:1
$57 = builtinEquals
$58 = builtinGetArgumentCount
$59 = builtinTagHasValue
$60 = builtinTagWithValue
$61 = builtinTextConcatenate
$62 = builtinToDebugText
$63 = builtinTypeOf
$64 = call $63 with $54 ($56 is responsible)
$65 = Tag
$66 = call $57 with $64 $65 ($56 is responsible)
$67 = builtinIfElse
# Examples:_package:1:calleeIsTag:then
$79 = { (responsible $68) ->
  $69 = call $59 with $54 ($56 is responsible)
  $70 = builtinIfElse
  # Examples:_package:1:doesTagHaveValue:then
  $74 = { (responsible $71) ->
    $72 = "You called a tag that already has a value."
    $73 = panicking because $72 ($56 is at fault)
  }
  # Examples:_package:1:doesTagHaveValue:else
  $77 = { (responsible $75) ->
    $76 = call $60 with $54 $55 ($56 is responsible)
  }
  $78 = call $70 with $69 $74 $77 ($56 is responsible)
}
# Examples:_package:1:calleeIsTag:else
$111 = { (responsible $80) ->
  $81 = Function
  $82 = call $57 with $64 $81 ($56 is responsible)
  $83 = builtinIfElse
  # Examples:_package:1:calleeIsFunction:then
  $105 = { (responsible $84) ->
    $85 = call $58 with $54 ($56 is responsible)
    $86 = 1
    $87 = call $57 with $85 $86 ($56 is responsible)
    $88 = builtinIfElse
    # Examples:_package:1:hasCorrectNumberOfArguments:then
    $95 = { (responsible $89) ->
      $90 = Examples:_package:1
      $91 = trace: start of call of $54 with $55 ($56 is responsible, code is at $90)
      $92 = call $54 with $55 ($56 is responsible)
      $93 = trace: end of call
      $94 = $92
    }
    # Examples:_package:1:hasCorrectNumberOfArguments:else
    $103 = { (responsible $96) ->
      $97 = "You called a function that expects "
      $98 = call $62 with $85 ($56 is responsible)
      $99 = " arguments with 1 arguments."
      $100 = call $61 with $97 $98 ($56 is responsible)
      $101 = call $61 with $100 $99 ($56 is responsible)
      $102 = panicking because $101 ($56 is at fault)
    }
    $104 = call $88 with $87 $95 $103 ($56 is responsible)
  }
  # Examples:_package:1:calleeIsFunction:else
  $109 = { (responsible $106) ->
    $107 = "You can only call tags or functions."
    $108 = panicking because $107 ($56 is at fault)
  }
  $110 = call $83 with $82 $105 $109 ($56 is responsible)
}
$112 = call $67 with $66 $79 $111 ($56 is responsible)
$113 = Nothing
$114 = []
$115 = builtinStructHasKey
$116 = Main
$117 = call $115 with $114 $116 ($50 is responsible)
$118 = "The module doesn't export a main function."
$119 = builtinIfElse
# Examples:_package:then
$122 = { (responsible $120) ->
  $121 = Nothing
}
# Examples:_package:else
$125 = { (responsible $123) ->
  $124 = panicking because $118 ($50 is at fault)
}
$126 = call $119 with $117 $122 $125 ($50 is responsible)
$127 = builtinStructGet
$128 = call $127 with $114 $116 ($50 is responsible)
$129 = builtinTypeOf
$130 = call $129 with $128 ($50 is responsible)
$131 = builtinEquals
$132 = Function
$133 = call $131 with $130 $132 ($50 is responsible)
$134 = "The exported main value is not a function."
$135 = builtinIfElse
# Examples:_package:then
$138 = { (responsible $136) ->
  $137 = Nothing
}
# Examples:_package:else
$141 = { (responsible $139) ->
  $140 = panicking because $134 ($50 is at fault)
}
$142 = call $135 with $133 $138 $141 ($50 is responsible)
$143 = builtinGetArgumentCount
$144 = call $143 with $128 ($50 is responsible)
$145 = 1
$146 = call $131 with $144 $145 ($50 is responsible)
$147 = "The exported main function doesn't accept exactly one parameter."
$148 = builtinIfElse
# Examples:_package:then
$151 = { (responsible $149) ->
  $150 = Nothing
}
# Examples:_package:else
$154 = { (responsible $152) ->
  $153 = panicking because $147 ($50 is at fault)
}
$155 = call $148 with $146 $151 $154 ($50 is responsible)
$156 = $128
