# MIR for module Examples:_package
#
# Tracing Config:
#
# • Include tracing of fuzzable functions? No
# • Include tracing of calls? No
# • Include tracing of evaluated expressions? No

# anonymous:$generated::needs
$49 = { $2 $3 $4 (+ responsible $1) ->
  $5 = anonymous:$generated::needs
  $6 = builtinEquals
  $7 = Nothing
  $8 = True
  $9 = False
  $10 = call $6 with $2 $8 ($5 is responsible)
  $11 = builtinIfElse
  # anonymous:$generated::needs:isConditionTrue:then
  $14 = { (responsible $12) ->
    $13 = $8
  }
  # anonymous:$generated::needs:isConditionTrue:else
  $17 = { (responsible $15) ->
    $16 = call $6 with $2 $9 ($5 is responsible)
  }
  $18 = call $11 with $10 $14 $17 ($5 is responsible)
  $19 = builtinIfElse
  # anonymous:$generated::needs:isConditionBool:then
  $22 = { (responsible $20) ->
    $21 = $7
  }
  # anonymous:$generated::needs:isConditionBool:else
  $26 = { (responsible $23) ->
    $24 = "The `condition` must be either `True` or `False`."
    $25 = panicking because $24 ($1 is at fault)
  }
  $27 = call $19 with $18 $22 $26 ($5 is responsible)
  $28 = builtinTypeOf
  $29 = call $28 with $3 ($1 is responsible)
  $30 = Text
  $31 = call $6 with $29 $30 ($1 is responsible)
  $32 = builtinIfElse
  # anonymous:$generated::needs:isReasonText:then
  $35 = { (responsible $33) ->
    $34 = $7
  }
  # anonymous:$generated::needs:isReasonText:else
  $39 = { (responsible $36) ->
    $37 = "The `reason` must be a text."
    $38 = panicking because $37 ($1 is at fault)
  }
  $40 = call $32 with $31 $35 $39 ($5 is responsible)
  $41 = builtinIfElse
  # anonymous:$generated::needs:condition:then
  $44 = { (responsible $42) ->
    $43 = $7
  }
  # anonymous:$generated::needs:condition:else
  $47 = { (responsible $45) ->
    $46 = panicking because $3 ($4 is at fault)
  }
  $48 = call $41 with $2 $44 $47 ($5 is responsible)
}
$50 = Examples:_package:
# Examples:_package:use
$54 = { $52 (+ responsible $51) ->
  $53 = use $52 (relative to Examples:_package; $51 is responsible)
}
$55 = "Builtins"
$56 = Examples:_package:1
$57 = call $54 with $55 ($56 is responsible)
$58 = Nothing
$59 = []
$60 = builtinStructHasKey
$61 = Main
$62 = call $60 with $59 $61 ($50 is responsible)
$63 = "The module doesn't export a main function."
$64 = builtinIfElse
# Examples:_package:then
$67 = { (responsible $65) ->
  $66 = Nothing
}
# Examples:_package:else
$70 = { (responsible $68) ->
  $69 = panicking because $63 ($50 is at fault)
}
$71 = call $64 with $62 $67 $70 ($50 is responsible)
$72 = builtinStructGet
$73 = call $72 with $59 $61 ($50 is responsible)
$74 = builtinTypeOf
$75 = call $74 with $73 ($50 is responsible)
$76 = builtinEquals
$77 = Function
$78 = call $76 with $75 $77 ($50 is responsible)
$79 = "The exported main value is not a function."
$80 = builtinIfElse
# Examples:_package:then
$83 = { (responsible $81) ->
  $82 = Nothing
}
# Examples:_package:else
$86 = { (responsible $84) ->
  $85 = panicking because $79 ($50 is at fault)
}
$87 = call $80 with $78 $83 $86 ($50 is responsible)
$88 = builtinGetArgumentCount
$89 = call $88 with $73 ($50 is responsible)
$90 = 1
$91 = call $76 with $89 $90 ($50 is responsible)
$92 = "The exported main function doesn't accept exactly one parameter."
$93 = builtinIfElse
# Examples:_package:then
$96 = { (responsible $94) ->
  $95 = Nothing
}
# Examples:_package:else
$99 = { (responsible $97) ->
  $98 = panicking because $92 ($50 is at fault)
}
$100 = call $93 with $91 $96 $99 ($50 is responsible)
$101 = $73
