# RCST for module Examples:higherLower
Cst { data: (), kind: Comment { octothorpe: Cst { data: (), kind: Octothorpe }, comment: " Repeatedly asks you for a guess and tells you whether the secret number is" } }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Comment { octothorpe: Cst { data: (), kind: Octothorpe }, comment: " higher or lower. Exits once you found the secret number." } }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Struct { opening_bracket: Cst { data: (), kind: OpeningBracket }, fields: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructField { key_and_colon: None, value: Cst { data: (), kind: Identifier("equals") }, comma: Some(Cst { data: (), kind: Comma }) } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructField { key_and_colon: None, value: Cst { data: (), kind: Identifier("ifElse") }, comma: Some(Cst { data: (), kind: Comma }) } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructField { key_and_colon: None, value: Cst { data: (), kind: Identifier("int") }, comma: Some(Cst { data: (), kind: Comma }) } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructField { key_and_colon: None, value: Cst { data: (), kind: Identifier("loop") }, comma: Some(Cst { data: (), kind: Comma }) } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructField { key_and_colon: None, value: Cst { data: (), kind: Identifier("result") }, comma: Some(Cst { data: (), kind: Comma }) } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructField { key_and_colon: None, value: Cst { data: (), kind: Identifier("function") }, comma: Some(Cst { data: (), kind: Comma }) } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: StructField { key_and_colon: None, value: Cst { data: (), kind: Identifier("text") }, comma: None } }], closing_bracket: Cst { data: (), kind: ClosingBracket } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("use") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Text { opening: Cst { data: (), kind: OpeningText { opening_single_quotes: [], opening_double_quote: Cst { data: (), kind: DoubleQuote } } }, parts: [Cst { data: (), kind: TextPart("Core") }], closing: Cst { data: (), kind: ClosingText { closing_double_quote: Cst { data: (), kind: DoubleQuote }, closing_single_quotes: [] } } } }] } }] } }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Struct { opening_bracket: Cst { data: (), kind: OpeningBracket }, fields: [Cst { data: (), kind: StructField { key_and_colon: None, value: Cst { data: (), kind: Identifier("run") }, comma: None } }], closing_bracket: Cst { data: (), kind: ClosingBracket } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: Identifier("function") }] } }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("main") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: ColonEqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: Function { opening_curly_brace: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: OpeningCurlyBrace }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, parameters_and_arrow: Some(([Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("environment") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }], Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Arrow }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }] } })), body: [Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("print") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Identifier("message") }] } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("environment") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("stdout") } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Identifier("message") }] } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("read") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: Function { opening_curly_brace: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: OpeningCurlyBrace }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, parameters_and_arrow: None, body: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("run") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("environment") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("stdin") } } }] } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }], closing_curly_brace: Cst { data: (), kind: ClosingCurlyBrace } } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("print") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Text { opening: Cst { data: (), kind: OpeningText { opening_single_quotes: [], opening_double_quote: Cst { data: (), kind: DoubleQuote } } }, parts: [Cst { data: (), kind: TextPart("Welcome to the number guessing game!") }], closing: Cst { data: (), kind: ClosingText { closing_double_quote: Cst { data: (), kind: DoubleQuote }, closing_single_quotes: [] } } } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("correct") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: Int { radix_prefix: None, value: 42, string: "42" } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("loop") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Function { opening_curly_brace: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: OpeningCurlyBrace }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("    ") }] } }, parameters_and_arrow: None, body: [Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("print") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Text { opening: Cst { data: (), kind: OpeningText { opening_single_quotes: [], opening_double_quote: Cst { data: (), kind: DoubleQuote } } }, parts: [Cst { data: (), kind: TextPart("What's your guess?") }], closing: Cst { data: (), kind: ClosingText { closing_double_quote: Cst { data: (), kind: DoubleQuote }, closing_single_quotes: [] } } } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("    ") }, Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("guess") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("run") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Identifier("read") }] } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("text") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("trim") } } } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("int") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("parse") } } } } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("    ") }, Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("guess") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("result") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("mapOrElse") } } }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("      ") }] } }, arguments: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Function { opening_curly_brace: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: OpeningCurlyBrace }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, parameters_and_arrow: Some(([Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("guess") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }], Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Arrow }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("        ") }] } })), body: [Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("ifElse") }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("          ") }] } }, arguments: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("equals") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("guess") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: Identifier("correct") }] } }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("          ") }] } }, Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Function { opening_curly_brace: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: OpeningCurlyBrace }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("            ") }] } }, parameters_and_arrow: None, body: [Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("print") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Text { opening: Cst { data: (), kind: OpeningText { opening_single_quotes: [], opening_double_quote: Cst { data: (), kind: DoubleQuote } } }, parts: [Cst { data: (), kind: TextPart("You did it!") }], closing: Cst { data: (), kind: ClosingText { closing_double_quote: Cst { data: (), kind: DoubleQuote }, closing_single_quotes: [] } } } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("            ") }, Cst { data: (), kind: Symbol("Break") }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("          ") }], closing_curly_brace: Cst { data: (), kind: ClosingCurlyBrace } } }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("          ") }] } }, Cst { data: (), kind: Function { opening_curly_brace: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: OpeningCurlyBrace }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("            ") }] } }, parameters_and_arrow: None, body: [Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("print") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Parenthesized { opening_parenthesis: Cst { data: (), kind: OpeningParenthesis }, inner: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("ifElse") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Parenthesized { opening_parenthesis: Cst { data: (), kind: OpeningParenthesis }, inner: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("int") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("isLessThan") } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("correct") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: Identifier("guess") }] } }, closing_parenthesis: Cst { data: (), kind: ClosingParenthesis } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Function { opening_curly_brace: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: OpeningCurlyBrace }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, parameters_and_arrow: None, body: [Cst { data: (), kind: Text { opening: Cst { data: (), kind: OpeningText { opening_single_quotes: [], opening_double_quote: Cst { data: (), kind: DoubleQuote } } }, parts: [Cst { data: (), kind: TextPart("Lower!") }], closing: Cst { data: (), kind: ClosingText { closing_double_quote: Cst { data: (), kind: DoubleQuote }, closing_single_quotes: [] } } } }, Cst { data: (), kind: Whitespace(" ") }], closing_curly_brace: Cst { data: (), kind: ClosingCurlyBrace } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: Function { opening_curly_brace: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: OpeningCurlyBrace }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, parameters_and_arrow: None, body: [Cst { data: (), kind: Text { opening: Cst { data: (), kind: OpeningText { opening_single_quotes: [], opening_double_quote: Cst { data: (), kind: DoubleQuote } } }, parts: [Cst { data: (), kind: TextPart("Higher!") }], closing: Cst { data: (), kind: ClosingText { closing_double_quote: Cst { data: (), kind: DoubleQuote }, closing_single_quotes: [] } } } }, Cst { data: (), kind: Whitespace(" ") }], closing_curly_brace: Cst { data: (), kind: ClosingCurlyBrace } } }] } }, closing_parenthesis: Cst { data: (), kind: ClosingParenthesis } } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("            ") }, Cst { data: (), kind: Symbol("Continue") }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("          ") }], closing_curly_brace: Cst { data: (), kind: ClosingCurlyBrace } } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("      ") }], closing_curly_brace: Cst { data: (), kind: ClosingCurlyBrace } } }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("      ") }] } }, Cst { data: (), kind: Function { opening_curly_brace: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: OpeningCurlyBrace }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, parameters_and_arrow: Some(([Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("error") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }], Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Arrow }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("        ") }] } })), body: [Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("print") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Text { opening: Cst { data: (), kind: OpeningText { opening_single_quotes: [], opening_double_quote: Cst { data: (), kind: DoubleQuote } } }, parts: [Cst { data: (), kind: TextPart("Your guess must be a number.") }], closing: Cst { data: (), kind: ClosingText { closing_double_quote: Cst { data: (), kind: DoubleQuote }, closing_single_quotes: [] } } } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("        ") }, Cst { data: (), kind: Symbol("Continue") }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("      ") }], closing_curly_brace: Cst { data: (), kind: ClosingCurlyBrace } } }] } } } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }], closing_curly_brace: Cst { data: (), kind: ClosingCurlyBrace } } }] } }, Cst { data: (), kind: Newline("\n") }], closing_curly_brace: Cst { data: (), kind: ClosingCurlyBrace } } }] } }
Cst { data: (), kind: Newline("\n") }
