# RCST for module Examples:iterable
Cst { data: (), kind: Error { unparsable_input: "builtins = use \"Builtins\"\n[bool, equals, ifElse, iterable, list, result, text] = use \"Core\"\n\nsplitWhereFirst iter checker =\n  # Splits the iterable into a list and an iterable of the remaining items. The\n  # matching item itself is still the first item of the remaining iterable.\n  builtins.print \"Getting leading items\"\n  firstPart = iter | iterable.takeUntil { item -> checker item } | iterable.toList\n  builtins.print \"Turned into list\"\n  (firstPart, iter | iterable.skip (firstPart | list.length))\n\nsplit iter delimeter = iterable.generateWithState iter { state ->\n  state | iterable.takeUntil { item -> equals item delimeter }\n  state | iterable.next | result.map { }\n}\n\nmain := { env ->\n  print message = env.stdout message\n\n  foo =\n    \"Hello, world! This is some long text. Bla bla blub.\" | text.characters | iterable.fromList\n  #| splitWhereFirst { c ->\n  #  builtins.print c\n  #  equals c \",\"\n  #}\n  #builtins.print \"Hi\"\n  #builtins.print foo\n  | iterable.forEach { item -> print item }\n}", error: UnparsedRest } }
Cst { data: (), kind: Newline("\n") }
