# HIR for module Examples:fibonacci
$use = { (non-fuzzable, but passes on responsibility) $use:relativePath ->
  $use:importedModule = relative to module Examples:fibonacci, use $use:relativePath
}
$0 = "Builtins"
$1 = call $use with $0
$2 = $use
$3 = builtinTextConcatenate
$4 = builtinTypeOf
$5 = Text
$6 = builtinEquals
$7 = builtinIfElse
$8 = builtinToDebugText
$9 = "Builtins"
$10 = call $2 with $9
$builtins = $10
$builtins#1 = $builtins
$11 = Nothing
$12 = $use
$13 = builtinTextConcatenate
$14 = builtinTypeOf
$15 = Text
$16 = builtinEquals
$17 = builtinIfElse
$18 = builtinToDebugText
$19 = "Core"
$20 = call $12 with $19
$21 = destructure $20 into [Int: p$0, Result: p$1, ToDebugText: p$2]
$int = p$0
$result = p$1
$toDebugText = p$2
$22 = Nothing
$recursive = { (fuzzable) $recursive:initialArg $recursive:body ->
  $recursive:0 = { (non-fuzzable) $recursive:0:recurse $recursive:0:arg ->
    $recursive:0:0 = { (non-fuzzable) $recursive:0:0:arg ->
      $recursive:0:0:0 = $recursive:0:recurse
      $recursive:0:0:1 = $recursive:0:recurse
      $recursive:0:0:2 = $recursive:0:0:arg
      $recursive:0:0:3 = call $recursive:0:0:0 with $recursive:0:0:1 $recursive:0:0:2
    }
    $recursive:0:rec = $recursive:0:0
    $recursive:0:rec#1 = $recursive:0:rec
    $recursive:0:1 = Nothing
    $recursive:0:2 = $recursive:body
    $recursive:0:3 = $recursive:0:rec#1
    $recursive:0:4 = $recursive:0:arg
    $recursive:0:5 = call $recursive:0:2 with $recursive:0:3 $recursive:0:4
  }
  $recursive:recurse = $recursive:0
  $recursive:recurse#1 = $recursive:recurse
  $recursive:1 = Nothing
  $recursive:2 = $recursive:recurse#1
  $recursive:3 = $recursive:recurse#1
  $recursive:4 = $recursive:initialArg
  $recursive:5 = call $recursive:2 with $recursive:3 $recursive:4
}
$recursive#1 = $recursive
$compareTo = { (fuzzable) $compareTo:valueA $compareTo:valueB ->
  $compareTo:0 = $compareTo:valueA
  $compareTo:1 = builtinStructGet
  $compareTo:2 = StructGet
  $compareTo:3 = call $compareTo:1 with $1 $compareTo:2
  $compareTo:4 = $builtins#1
  $compareTo:5 = IntCompareTo
  $compareTo:6 = call $compareTo:3 with $compareTo:4 $compareTo:5
  $compareTo:7 = $compareTo:valueB
  $compareTo:8 = call $compareTo:6 with $compareTo:0 $compareTo:7
  $compareTo:result = $compareTo:8
  $compareTo:result#1 = $compareTo:result
  $compareTo:9 = Nothing
  $compareTo:10 = $compareTo:result#1
}
$compareTo#1 = $compareTo
$isLessThan = { (fuzzable) $isLessThan:valueA $isLessThan:valueB ->
  $isLessThan:0 = builtinStructGet
  $isLessThan:1 = StructGet
  $isLessThan:2 = call $isLessThan:0 with $1 $isLessThan:1
  $isLessThan:3 = $builtins#1
  $isLessThan:4 = Equals
  $isLessThan:5 = call $isLessThan:2 with $isLessThan:3 $isLessThan:4
  $isLessThan:6 = $compareTo#1
  $isLessThan:7 = $isLessThan:valueA
  $isLessThan:8 = $isLessThan:valueB
  $isLessThan:9 = call $isLessThan:6 with $isLessThan:7 $isLessThan:8
  $isLessThan:10 = Less
  $isLessThan:11 = call $isLessThan:5 with $isLessThan:9 $isLessThan:10
}
$isLessThan#1 = $isLessThan
$fibonacci = { (fuzzable) $fibonacci:n ->
  $fibonacci:0 = $recursive#1
  $fibonacci:1 = $fibonacci:n
  $fibonacci:2 = { (non-fuzzable) $fibonacci:2:recurse $fibonacci:2:n ->
    $fibonacci:2:0 = builtinStructGet
    $fibonacci:2:1 = StructGet
    $fibonacci:2:2 = call $fibonacci:2:0 with $1 $fibonacci:2:1
    $fibonacci:2:3 = $builtins#1
    $fibonacci:2:4 = IfElse
    $fibonacci:2:5 = call $fibonacci:2:2 with $fibonacci:2:3 $fibonacci:2:4
    $fibonacci:2:6 = $fibonacci:2:n
    $fibonacci:2:7 = $isLessThan#1
    $fibonacci:2:8 = 2
    $fibonacci:2:9 = call $fibonacci:2:7 with $fibonacci:2:6 $fibonacci:2:8
    $fibonacci:2:10 = { (non-fuzzable) ->
      $fibonacci:2:10:0 = $fibonacci:2:n
    }
    $fibonacci:2:11 = { (non-fuzzable) ->
      $fibonacci:2:11:0 = $fibonacci:2:recurse
      $fibonacci:2:11:1 = $fibonacci:2:n
      $fibonacci:2:11:2 = builtinStructGet
      $fibonacci:2:11:3 = StructGet
      $fibonacci:2:11:4 = call $fibonacci:2:11:2 with $1 $fibonacci:2:11:3
      $fibonacci:2:11:5 = $builtins#1
      $fibonacci:2:11:6 = IntSubtract
      $fibonacci:2:11:7 = call $fibonacci:2:11:4 with $fibonacci:2:11:5 $fibonacci:2:11:6
      $fibonacci:2:11:8 = 1
      $fibonacci:2:11:9 = call $fibonacci:2:11:7 with $fibonacci:2:11:1 $fibonacci:2:11:8
      $fibonacci:2:11:10 = call $fibonacci:2:11:0 with $fibonacci:2:11:9
      $fibonacci:2:11:11 = builtinStructGet
      $fibonacci:2:11:12 = StructGet
      $fibonacci:2:11:13 = call $fibonacci:2:11:11 with $1 $fibonacci:2:11:12
      $fibonacci:2:11:14 = $builtins#1
      $fibonacci:2:11:15 = IntAdd
      $fibonacci:2:11:16 = call $fibonacci:2:11:13 with $fibonacci:2:11:14 $fibonacci:2:11:15
      $fibonacci:2:11:17 = $fibonacci:2:recurse
      $fibonacci:2:11:18 = $fibonacci:2:n
      $fibonacci:2:11:19 = builtinStructGet
      $fibonacci:2:11:20 = StructGet
      $fibonacci:2:11:21 = call $fibonacci:2:11:19 with $1 $fibonacci:2:11:20
      $fibonacci:2:11:22 = $builtins#1
      $fibonacci:2:11:23 = IntSubtract
      $fibonacci:2:11:24 = call $fibonacci:2:11:21 with $fibonacci:2:11:22 $fibonacci:2:11:23
      $fibonacci:2:11:25 = 2
      $fibonacci:2:11:26 = call $fibonacci:2:11:24 with $fibonacci:2:11:18 $fibonacci:2:11:25
      $fibonacci:2:11:27 = call $fibonacci:2:11:17 with $fibonacci:2:11:26
      $fibonacci:2:11:28 = call $fibonacci:2:11:16 with $fibonacci:2:11:10 $fibonacci:2:11:27
    }
    $fibonacci:2:12 = call $fibonacci:2:5 with $fibonacci:2:9 $fibonacci:2:10 $fibonacci:2:11
  }
  $fibonacci:3 = call $fibonacci:0 with $fibonacci:1 $fibonacci:2
}
$fibonacci#1 = $fibonacci
$23 = { (non-fuzzable) $23:environment ->
  $23:0 = builtinStructGet
  $23:1 = StructGet
  $23:2 = call $23:0 with $1 $23:1
  $23:3 = $23:environment
  $23:4 = Arguments
  $23:5 = call $23:2 with $23:3 $23:4
  $23:6 = $23:5 %
    (p$0,) ->
      $23:6:n = p$0
      $23:6:0 = $23:6:n
      $23:6:1 = builtinStructGet
      $23:6:2 = StructGet
      $23:6:3 = call $23:6:1 with $1 $23:6:2
      $23:6:4 = $int
      $23:6:5 = Parse
      $23:6:6 = call $23:6:3 with $23:6:4 $23:6:5
      $23:6:7 = call $23:6:6 with $23:6:0
      $23:6:8 = builtinStructGet
      $23:6:9 = StructGet
      $23:6:10 = call $23:6:8 with $1 $23:6:9
      $23:6:11 = $result
      $23:6:12 = Map
      $23:6:13 = call $23:6:10 with $23:6:11 $23:6:12
      $23:6:14 = { (non-fuzzable) $23:6:14:it ->
        $23:6:14:0 = $fibonacci#1
        $23:6:14:1 = $23:6:14:it
        $23:6:14:2 = call $23:6:14:0 with $23:6:14:1
        $23:6:14:3 = $toDebugText
        $23:6:14:4 = call $23:6:14:3 with $23:6:14:2
      }
      $23:6:15 = call $23:6:13 with $23:6:7 $23:6:14
      $23:6:16 = builtinStructGet
      $23:6:17 = StructGet
      $23:6:18 = call $23:6:16 with $1 $23:6:17
      $23:6:19 = $result
      $23:6:20 = GetValue
      $23:6:21 = call $23:6:18 with $23:6:19 $23:6:20
      $23:6:22 = call $23:6:21 with $23:6:15
    p$0 ->
      $23:6:_ = p$0
      $23:6:23 = builtinTextConcatenate
      $23:6:24 = builtinTypeOf
      $23:6:25 = Text
      $23:6:26 = builtinEquals
      $23:6:27 = builtinIfElse
      $23:6:28 = builtinToDebugText
      $23:6:29 = "Usage: `cargo run -- run fibonacci.candy -- <number>`"
  $23:7 = builtinStructGet
  $23:8 = StructGet
  $23:9 = call $23:7 with $1 $23:8
  $23:10 = $23:environment
  $23:11 = Stdout
  $23:12 = call $23:9 with $23:10 $23:11
  $23:13 = call $23:12 with $23:6
}
$main = $23
$main#1 = $main
$24 = Nothing
$25 = Main
$26 = [$25: $main#1]
