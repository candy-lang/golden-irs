# HIR for module Examples:fibonacci
$use = { (non-fuzzable) $use:relativePath ->
  $use:importedModule = relative to module Examples:fibonacci, use $use:relativePath
}
$0 = $use
$1 = builtinTextConcatenate
$2 = builtinTypeOf
$3 = Text
$4 = builtinEquals
$5 = builtinIfElse
$6 = builtinToDebugText
$7 = "Builtins"
$8 = call $0 with $7
$9 = destructure $8 into p$0
$builtins = p$0
$10 = Nothing
$recursive = { (fuzzable) $recursive:initialArg $recursive:body ->
  $recursive:0 = { (non-fuzzable) $recursive:0:recurse $recursive:0:arg ->
    $recursive:0:0 = { (non-fuzzable) $recursive:0:0:arg ->
      $recursive:0:0:0 = $recursive:0:recurse
      $recursive:0:0:1 = $recursive:0:recurse
      $recursive:0:0:2 = $recursive:0:0:arg
      $recursive:0:0:3 = call $recursive:0:0:0 with $recursive:0:0:1 $recursive:0:0:2
    }
    $recursive:0:1 = destructure $recursive:0:0 into p$0
    $recursive:0:rec = p$0
    $recursive:0:2 = Nothing
    $recursive:0:3 = $recursive:body
    $recursive:0:4 = $recursive:0:rec
    $recursive:0:5 = $recursive:0:arg
    $recursive:0:6 = call $recursive:0:3 with $recursive:0:4 $recursive:0:5
  }
  $recursive:1 = destructure $recursive:0 into p$0
  $recursive:recurse = p$0
  $recursive:2 = Nothing
  $recursive:3 = $recursive:recurse
  $recursive:4 = $recursive:recurse
  $recursive:5 = $recursive:initialArg
  $recursive:6 = call $recursive:3 with $recursive:4 $recursive:5
}
$recursive#1 = $recursive
$compareTo = { (fuzzable) $compareTo:valueA $compareTo:valueB ->
  $compareTo:0 = $compareTo:valueA
  $compareTo:1 = "Builtins"
  $compareTo:2 = call $use with $compareTo:1
  $compareTo:3 = builtinStructGet
  $compareTo:4 = StructGet
  $compareTo:5 = call $compareTo:3 with $compareTo:2 $compareTo:4
  $compareTo:6 = $builtins
  $compareTo:7 = IntCompareTo
  $compareTo:8 = call $compareTo:5 with $compareTo:6 $compareTo:7
  $compareTo:9 = $compareTo:valueB
  $compareTo:10 = call $compareTo:8 with $compareTo:0 $compareTo:9
  $compareTo:11 = destructure $compareTo:10 into p$0
  $compareTo:result = p$0
  $compareTo:12 = Nothing
  $compareTo:13 = $compareTo:result
}
$compareTo#1 = $compareTo
$isLessThan = { (fuzzable) $isLessThan:valueA $isLessThan:valueB ->
  $isLessThan:0 = "Builtins"
  $isLessThan:1 = call $use with $isLessThan:0
  $isLessThan:2 = builtinStructGet
  $isLessThan:3 = StructGet
  $isLessThan:4 = call $isLessThan:2 with $isLessThan:1 $isLessThan:3
  $isLessThan:5 = $builtins
  $isLessThan:6 = Equals
  $isLessThan:7 = call $isLessThan:4 with $isLessThan:5 $isLessThan:6
  $isLessThan:8 = $compareTo#1
  $isLessThan:9 = $isLessThan:valueA
  $isLessThan:10 = $isLessThan:valueB
  $isLessThan:11 = call $isLessThan:8 with $isLessThan:9 $isLessThan:10
  $isLessThan:12 = Less
  $isLessThan:13 = call $isLessThan:7 with $isLessThan:11 $isLessThan:12
}
$isLessThan#1 = $isLessThan
$fibonacci = { (fuzzable) $fibonacci:n ->
  $fibonacci:0 = $recursive#1
  $fibonacci:1 = $fibonacci:n
  $fibonacci:2 = { (non-fuzzable) $fibonacci:2:recurse $fibonacci:2:n ->
    $fibonacci:2:0 = "Builtins"
    $fibonacci:2:1 = call $use with $fibonacci:2:0
    $fibonacci:2:2 = builtinStructGet
    $fibonacci:2:3 = StructGet
    $fibonacci:2:4 = call $fibonacci:2:2 with $fibonacci:2:1 $fibonacci:2:3
    $fibonacci:2:5 = $builtins
    $fibonacci:2:6 = IfElse
    $fibonacci:2:7 = call $fibonacci:2:4 with $fibonacci:2:5 $fibonacci:2:6
    $fibonacci:2:8 = $fibonacci:2:n
    $fibonacci:2:9 = $isLessThan#1
    $fibonacci:2:10 = 2
    $fibonacci:2:11 = call $fibonacci:2:9 with $fibonacci:2:8 $fibonacci:2:10
    $fibonacci:2:12 = { (non-fuzzable) ->
      $fibonacci:2:12:0 = $fibonacci:2:n
    }
    $fibonacci:2:13 = { (non-fuzzable) ->
      $fibonacci:2:13:0 = $fibonacci:2:recurse
      $fibonacci:2:13:1 = $fibonacci:2:n
      $fibonacci:2:13:2 = "Builtins"
      $fibonacci:2:13:3 = call $use with $fibonacci:2:13:2
      $fibonacci:2:13:4 = builtinStructGet
      $fibonacci:2:13:5 = StructGet
      $fibonacci:2:13:6 = call $fibonacci:2:13:4 with $fibonacci:2:13:3 $fibonacci:2:13:5
      $fibonacci:2:13:7 = $builtins
      $fibonacci:2:13:8 = IntSubtract
      $fibonacci:2:13:9 = call $fibonacci:2:13:6 with $fibonacci:2:13:7 $fibonacci:2:13:8
      $fibonacci:2:13:10 = 1
      $fibonacci:2:13:11 = call $fibonacci:2:13:9 with $fibonacci:2:13:1 $fibonacci:2:13:10
      $fibonacci:2:13:12 = call $fibonacci:2:13:0 with $fibonacci:2:13:11
      $fibonacci:2:13:13 = "Builtins"
      $fibonacci:2:13:14 = call $use with $fibonacci:2:13:13
      $fibonacci:2:13:15 = builtinStructGet
      $fibonacci:2:13:16 = StructGet
      $fibonacci:2:13:17 = call $fibonacci:2:13:15 with $fibonacci:2:13:14 $fibonacci:2:13:16
      $fibonacci:2:13:18 = $builtins
      $fibonacci:2:13:19 = IntAdd
      $fibonacci:2:13:20 = call $fibonacci:2:13:17 with $fibonacci:2:13:18 $fibonacci:2:13:19
      $fibonacci:2:13:21 = $fibonacci:2:recurse
      $fibonacci:2:13:22 = $fibonacci:2:n
      $fibonacci:2:13:23 = "Builtins"
      $fibonacci:2:13:24 = call $use with $fibonacci:2:13:23
      $fibonacci:2:13:25 = builtinStructGet
      $fibonacci:2:13:26 = StructGet
      $fibonacci:2:13:27 = call $fibonacci:2:13:25 with $fibonacci:2:13:24 $fibonacci:2:13:26
      $fibonacci:2:13:28 = $builtins
      $fibonacci:2:13:29 = IntSubtract
      $fibonacci:2:13:30 = call $fibonacci:2:13:27 with $fibonacci:2:13:28 $fibonacci:2:13:29
      $fibonacci:2:13:31 = 2
      $fibonacci:2:13:32 = call $fibonacci:2:13:30 with $fibonacci:2:13:22 $fibonacci:2:13:31
      $fibonacci:2:13:33 = call $fibonacci:2:13:21 with $fibonacci:2:13:32
      $fibonacci:2:13:34 = call $fibonacci:2:13:20 with $fibonacci:2:13:12 $fibonacci:2:13:33
    }
    $fibonacci:2:14 = call $fibonacci:2:7 with $fibonacci:2:11 $fibonacci:2:12 $fibonacci:2:13
  }
  $fibonacci:3 = call $fibonacci:0 with $fibonacci:1 $fibonacci:2
}
$fibonacci#1 = $fibonacci
$main = { (fuzzable) $main:environment ->
  $main:0 = $fibonacci#1
  $main:1 = 15
  $main:2 = call $main:0 with $main:1
}
$main#1 = $main
$11 = Main
$12 = [$11: $main#1]
