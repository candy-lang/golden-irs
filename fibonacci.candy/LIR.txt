# LIR for module Examples:fibonacci
#
# Tracing Config:
#
# • Include tracing of fuzzable functions? No
# • Include tracing of calls? Only for panic traces
# • Include tracing of evaluated expressions? No

# Constants
%0 = Builtins::equals:6
%1 = Builtins::getArgumentCount:11
%2 = Builtins::getArgumentCount:5
%3 = Builtins::ifElse:1
%4 = Builtins::ifElse:11
%5 = Builtins::ifElse:14
%6 = Builtins::ifElse:19
%7 = Builtins::ifElse:25
%8 = Builtins::ifElse:28
%9 = Builtins::ifElse:33
%10 = Builtins::ifElse:41
%11 = Builtins::ifElse:5
%12 = Builtins::intAdd:11
%13 = Builtins::intAdd:18
%14 = Builtins::intAdd:5
%15 = Builtins::intCompareTo:11
%16 = Builtins::intCompareTo:18
%17 = Builtins::intCompareTo:5
%18 = Builtins::intParse:11
%19 = Builtins::intParse:5
%20 = Builtins::intSubtract:11
%21 = Builtins::intSubtract:18
%22 = Builtins::intSubtract:5
%23 = Builtins::structGet:12
%24 = Builtins::structGet:14
%25 = Builtins::structGet:21
%26 = Builtins::structGet:5
%27 = Builtins::tagGetValue:11
%28 = Builtins::tagGetValue:13
%29 = Builtins::tagGetValue:19
%30 = Builtins::tagGetValue:5
%31 = Builtins::toDebugText:5
%32 = Builtins::typeIs:19
%33 = Builtins::typeIs:25
%34 = Builtins::typeOf:5
%35 = Core:function:is1:11
%36 = Core:function:is1:9:3
%37 = Core:result:flatMap:12
%38 = Core:result:flatMap:14
%39 = Core:result:flatMap:17:2
%40 = Core:result:flatMap:19
%41 = Core:result:flatMap:2
%42 = Core:result:flatMap:4
%43 = Core:result:getValue:12
%44 = Core:result:getValue:2
%45 = Core:result:getValue:4
%46 = Core:result:is:1
%47 = Core:result:map:12
%48 = Core:result:map:14
%49 = Core:result:map:17:3
%50 = Core:result:map:18
%51 = Core:result:map:2
%52 = Core:result:map:4
%53 = Core:result:mapOr:12
%54 = Core:result:mapOr:14
%55 = Core:result:mapOr:19
%56 = Core:result:mapOr:2
%57 = Core:result:mapOr:4
%58 = Core:result:mapOrElse:12
%59 = Core:result:mapOrElse:14
%60 = Core:result:mapOrElse:2
%61 = Core:result:mapOrElse:22
%62 = Core:result:mapOrElse:24
%63 = Core:result:mapOrElse:26
%64 = Core:result:mapOrElse:26:2
%65 = Core:result:mapOrElse:26:5
%66 = Core:result:mapOrElse:26:value
%67 = Core:result:mapOrElse:26:value#1
%68 = Core:result:mapOrElse:4
%69 = Examples:fibonacci:23:12
%70 = Examples:fibonacci:23:13
%71 = Examples:fibonacci:23:5
%72 = Examples:fibonacci:23:6
%73 = Examples:fibonacci:23:6:14:2
%74 = Examples:fibonacci:23:6:15
%75 = Examples:fibonacci:23:6:22
%76 = Examples:fibonacci:23:6:7
%77 = Examples:fibonacci:23:6:n
%78 = Examples:fibonacci:compareTo:8
%79 = Examples:fibonacci:fibonacci:2:11:10
%80 = Examples:fibonacci:fibonacci:2:11:26
%81 = Examples:fibonacci:fibonacci:2:11:27
%82 = Examples:fibonacci:fibonacci:2:11:28
%83 = Examples:fibonacci:fibonacci:2:11:9
%84 = Examples:fibonacci:fibonacci:2:12
%85 = Examples:fibonacci:fibonacci:2:9
%86 = Examples:fibonacci:fibonacci:3
%87 = Examples:fibonacci:isLessThan:9
%88 = Examples:fibonacci:recursive:0:0:3
%89 = Examples:fibonacci:recursive:0:5
%90 = Examples:fibonacci:recursive:5
%91 = anonymous:$generated::needs
%92 = builtinEquals
%93 = builtinGetArgumentCount
%94 = builtinIfElse
%95 = builtinIntAdd
%96 = builtinIntCompareTo
%97 = builtinIntParse
%98 = builtinIntSubtract
%99 = builtinListGet
%100 = builtinListLength
%101 = builtinStructGet
%102 = builtinStructHasKey
%103 = builtinTagGetValue
%104 = builtinTagHasValue
%105 = builtinTagWithValue
%106 = builtinTagWithoutValue
%107 = builtinTextConcatenate
%108 = builtinToDebugText
%109 = builtinTypeOf
%110 = Arguments
%111 = Error
%112 = False
%113 = Function
%114 = Int
%115 = Less
%116 = List
%117 = Match
%118 = NoMatch
%119 = Nothing
%120 = Ok
%121 = Stdout
%122 = Struct
%123 = Tag
%124 = Text
%125 = True
%126 = 0
%127 = 1
%128 = 2
%129 = " arguments with 1 arguments."
%130 = " arguments with 2 arguments."
%131 = "No case matched the given expression."
%132 = "Tags can only be created with one value."
%133 = "The `condition` must be either `True` or `False`."
%134 = "The `reason` must be a text."
%135 = "Usage: `cargo run -- run fibonacci.candy -- <number>`"
%136 = "You called a function that expects "
%137 = "You called a tag that already has a value."
%138 = "You can only call tags or functions."
%139 = "`a | typeIs Int` was not satisfied"
%140 = "`b | typeIs Int` was not satisfied"
%141 = "`conditionIsBool` was not satisfied"
%142 = "`else | getArgumentCount | equals 0` was not satisfied"
%143 = "`else | typeIs Function` was not satisfied"
%144 = "`function | typeIs Function` was not satisfied"
%145 = "`function.is1 errorMapper` was not satisfied"
%146 = "`function.is1 okMapper` was not satisfied"
%147 = "`is result` was not satisfied"
%148 = "`minuend | typeIs Int` was not satisfied"
%149 = "`struct | typeIs Struct` was not satisfied"
%150 = "`struct | ✨.structHasKey key` was not satisfied"
%151 = "`subtrahend | typeIs Int` was not satisfied"
%152 = "`tag | typeIs Tag` was not satisfied"
%153 = "`tag | ✨.tagHasValue` was not satisfied"
%154 = "`text | typeIs Text` was not satisfied"
%155 = "`then | getArgumentCount | equals 0` was not satisfied"
%156 = "`then | typeIs Function` was not satisfied"
%157 = { body_0 }
%158 = { body_1 }
%159 = { body_6 }
%160 = (,)
%161 = Match %160<(,)>
%162 = { body_7 }
%163 = { body_8 }
%164 = { body_9 }
%165 = { body_10 }
%166 = { body_13 }
%167 = { body_14 }
%168 = { body_15 }
%169 = { body_16 }
%170 = { body_17 }
%171 = { body_18 }
%172 = { body_19 }
%173 = { body_21 }
%174 = { body_30 }
%175 = { body_31 }
%176 = { body_32 }
%177 = { body_33 }
%178 = { body_34 }
%179 = { body_35 }
%180 = { body_67 }
%181 = { body_76 }
%182 = { body_87 }
%183 = { body_88 }
%184 = { body_89 }
%185 = { body_106 }
%186 = { body_107 }
%187 = { body_108 }
%188 = { body_125 }
%189 = { body_126 }
%190 = { body_127 }
%191 = { body_128 }
%192 = { body_129 }
%193 = { body_130 }
%194 = { body_131 }
%195 = { body_144 }
%196 = { body_145 }
%197 = { body_146 }
%198 = { body_147 }
%199 = { body_148 }
%200 = { body_149 }
%201 = { body_150 }
%202 = { body_165 }
%203 = { body_172 }
%204 = { body_173 }
%205 = { body_174 }
%206 = { body_175 }
%207 = { body_176 }
%208 = { body_177 }
%209 = { body_187 }

# Bodies
body_0 (responsible $0) =
  # Original HIR IDs: Builtins::ifElse:1:case-0:matched, Builtins::isLessThanOrEqualTo:19:case-0:matched, Builtins::isNonNegative:13:case-0:matched, Builtins::not:1:case-1:matched, Core:bool:is:1:case-0:matched, Core:bool:lazyOr:16:case-0:matched, Core:bool:not:6:case-1:matched, Core:check:check:1:case-0:matched, Core:result:is:1:case-0:matched, Core:text:isAsciiDigit:14:case-0:matched, anonymous:$generated::needs:isConditionTrue:then
  # Captured IDs: none
  $1 = %125<True>
body_1 (responsible $0) =
  # Original HIR IDs: Core::21:isMatch:then, Core::32:isMatch:then, Core::43:isMatch:then, Core::104:isMatch:then, Core::155:isMatch:then, Core::166:isMatch:then, Core:bool:11:isMatch:then, Core:check:11:isMatch:then, Core:controlFlow:if:23, Core:controlFlow:31:isMatch:then, Core:controlFlow:52:isMatch:then, Core:fixedDecimal:21:isMatch:then, Core:fixedDecimal:32:isMatch:then, Core:fixedDecimal:43:isMatch:then, Core:fixedDecimal:54:isMatch:then, Core:fixedDecimal:105:isMatch:then, Core:function:21:isMatch:then, Core:int:pow:21:1:isMatch:then, Core:int:31:isMatch:then, Core:int:42:isMatch:then, Core:iterator:foldLeft:21:1:isMatch:then, Core:iterator:next:6:isMatch:then, Core:iterator:skip:26:6:1:isMatch:then, Core:iterator:take:27:1:isMatch:then, Core:iterator:withIndex:11:1:isMatch:then, Core:iterator:21:isMatch:then, Core:iterator:32:isMatch:then, Core:list:firstIndexWhere:21:1:isMatch:then, Core:list:generate:51:1:isMatch:then, Core:list:lastIndexWhere:38:1:isMatch:then, Core:list:31:isMatch:then, Core:list:42:isMatch:then, Core:result:also:16:case-0:didNotMatch, Core:result:21:isMatch:then, Core:result:32:isMatch:then, Core:struct:21:isMatch:then, Core:tag:31:isMatch:then, Core:text:repeat:30:1:isMatch:then, Core:text:31:isMatch:then, Core:text:42:isMatch:then, Core:type:21:isMatch:then, Examples:fibonacci:then, Examples:fibonacci:21:isMatch:then, anonymous:$generated::needs:condition:then, anonymous:$generated::needs:isConditionBool:then, anonymous:$generated::needs:isReasonText:then
  # Captured IDs: none
  $1 = %119<Nothing>
body_2 (responsible $1) =
  # Original HIR IDs: anonymous:$generated::needs:isConditionTrue:else
  # Captured IDs: $0
  $2 = %92<builtinEquals>
  $3 = dup $0 by 1
  $4 = %112<False>
  $5 = %91<anonymous:$generated::needs>
  $6 = call $2<%92<builtinEquals>> with $0 $4<%112<False>> ($5<%91<anonymous:$generated::needs>> is responsible)
body_3 (responsible $1) =
  # Original HIR IDs: anonymous:$generated::needs:isConditionBool:else
  # Captured IDs: $0
  $2 = %133<"The `condition` must be either `True` or `False`.">
  $3 = dup $0 by 1
  $4 = panicking because $2<%133<"The `condition` must be either `True` or `False`.">> ($0 is at fault)
body_4 (responsible $1) =
  # Original HIR IDs: anonymous:$generated::needs:isReasonText:else
  # Captured IDs: $0
  $2 = %134<"The `reason` must be a text.">
  $3 = dup $0 by 1
  $4 = panicking because $2<%134<"The `reason` must be a text.">> ($0 is at fault)
body_5 (responsible $2) =
  # Original HIR IDs: anonymous:$generated::needs:condition:else
  # Captured IDs: $0, $1
  $3 = dup $0 by 1
  $4 = dup $1 by 1
  $5 = panicking because $0 ($1 is at fault)
body_6 $0 $1 $2 (+ responsible $3) =
  # Original HIR IDs: anonymous:$generated::needs
  # Captured IDs: none
  $4 = %92<builtinEquals>
  $5 = dup $0 by 1
  $6 = %125<True>
  $7 = %91<anonymous:$generated::needs>
  $8 = call $4<%92<builtinEquals>> with $0 $6<%125<True>> ($7<%91<anonymous:$generated::needs>> is responsible)
  $9 = dup $0 by 1
  $10 = { body_2 capturing $0 }
  $11 = %94<builtinIfElse>
  $12 = dup $8 by 1
  $13 = %157<{ body_0 }>
  $14 = dup $10 by 1
  $15 = call $11<%94<builtinIfElse>> with $8 $13<%157<{ body_0 }>> $10 ($7<%91<anonymous:$generated::needs>> is responsible)
  $16 = dup $3 by 1
  $17 = { body_3 capturing $3 }
  $18 = dup $15 by 1
  $19 = %158<{ body_1 }>
  $20 = dup $17 by 1
  $21 = call $11<%94<builtinIfElse>> with $15 $19<%158<{ body_1 }>> $17 ($7<%91<anonymous:$generated::needs>> is responsible)
  $22 = %109<builtinTypeOf>
  $23 = dup $1 by 1
  $24 = call $22<%109<builtinTypeOf>> with $1 ($3 is responsible)
  $25 = dup $24 by 1
  $26 = %124<Text>
  $27 = call $4<%92<builtinEquals>> with $24 $26<%124<Text>> ($3 is responsible)
  $28 = dup $3 by 1
  $29 = { body_4 capturing $3 }
  $30 = dup $27 by 1
  $31 = dup $29 by 1
  $32 = call $11<%94<builtinIfElse>> with $27 $19<%158<{ body_1 }>> $29 ($7<%91<anonymous:$generated::needs>> is responsible)
  $33 = dup $1 by 1
  $34 = dup $2 by 1
  $35 = { body_5 capturing $1, $2 }
  $36 = dup $0 by 1
  $37 = dup $35 by 1
  $38 = call $11<%94<builtinIfElse>> with $0 $19<%158<{ body_1 }>> $35 ($7<%91<anonymous:$generated::needs>> is responsible)
  $39 = drop $35
  $40 = drop $32
  $41 = drop $29
  $42 = drop $27
  $43 = drop $24
  $44 = drop $21
  $45 = drop $17
  $46 = drop $15
  $47 = drop $10
  $48 = drop $8
  $49 = drop $2
  $50 = drop $1
  $51 = drop $0
  $52 = $38
body_7 (responsible $0) =
  # Original HIR IDs: Builtins::ifElse:1:equals:then, Builtins::isLessThanOrEqualTo:19:equals:then, Builtins::isNonNegative:13:equals:then, Builtins::not:1:equals:then, Core:bool:is:1:equals:then, Core:bool:lazyAnd:16:equals:then, Core:bool:lazyOr:16:equals:then, Core:bool:not:6:equals:then, Core:check:check:1:equals:then, Core:int:pow:21:4:equals:then, Core:iterator:foldLeft:21:5:equals:then, Core:iterator:generateWithState:12:1:3:equals:then, Core:iterator:map:17:3:equals:then, Core:iterator:reduceLeft:16:equals:then, Core:iterator:skip:26:6:8:3:equals:then, Core:iterator:takeWhile:7:3:equals:then, Core:iterator:where:17:2:3:equals:then, Core:iterator:where:17:2:3:6:5:equals:then, Core:iterator:withIndex:11:5:equals:then, Core:iterator:wrapSafe:14:22:8:equals:then, Core:list:first:6:equals:then, Core:list:firstWhere:19:equals:then, Core:list:lastWhere:19:equals:then, Core:list:single:6:equals:then, Core:text:isAsciiDigit:14:equals:then
  # Captured IDs: none
  $1 = %161<Match %160<(,)>>
body_8 (responsible $0) =
  # Original HIR IDs: Builtins::ifElse:1:equals:else, Builtins::isLessThanOrEqualTo:19:equals:else, Builtins::isNonNegative:13:equals:else, Builtins::not:1:equals:else, Core::21:equals:else, Core::32:equals:else, Core::43:equals:else, Core::104:equals:else, Core::155:equals:else, Core::166:equals:else, Core:bool:is:1:equals:else, Core:bool:lazyAnd:16:equals:else, Core:bool:lazyOr:16:equals:else, Core:bool:not:6:equals:else, Core:bool:11:equals:else, Core:check:check:1:equals:else, Core:check:11:equals:else, Core:controlFlow:31:equals:else, Core:controlFlow:52:equals:else, Core:fixedDecimal:is:1:equals:else, Core:fixedDecimal:is:1:hasKey:else, Core:fixedDecimal:21:equals:else, Core:fixedDecimal:32:equals:else, Core:fixedDecimal:43:equals:else, Core:fixedDecimal:54:equals:else, Core:fixedDecimal:105:equals:else, Core:function:21:equals:else, Core:int:pow:21:1:equals:else, Core:int:pow:21:1:hasKey:else, Core:int:pow:21:4:equals:else, Core:int:31:equals:else, Core:int:42:equals:else, Core:iterator:foldLeft:21:1:equals:else, Core:iterator:foldLeft:21:1:hasKey:else, Core:iterator:foldLeft:21:5:equals:else, Core:iterator:foldLeft:21:5:hasKey:else, Core:iterator:generateWithState:12:1:3:equals:else, Core:iterator:generateWithState:12:1:3:hasKey:else, Core:iterator:map:17:3:equals:else, Core:iterator:map:17:3:hasKey:else, Core:iterator:next:6:equals:else, Core:iterator:reduceLeft:16:equals:else, Core:iterator:reduceLeft:16:hasKey:else, Core:iterator:skip:26:6:1:equals:else, Core:iterator:skip:26:6:1:hasKey:else, Core:iterator:skip:26:6:8:3:equals:else, Core:iterator:skip:26:6:8:3:hasKey:else, Core:iterator:take:27:1:equals:else, Core:iterator:take:27:1:hasKey:else, Core:iterator:takeWhile:7:3:equals:else, Core:iterator:takeWhile:7:3:hasKey:else, Core:iterator:where:17:2:3:equals:else, Core:iterator:where:17:2:3:hasKey:else, Core:iterator:where:17:2:3:6:5:equals:else, Core:iterator:where:17:2:3:6:5:hasKey:else, Core:iterator:withIndex:11:1:equals:else, Core:iterator:withIndex:11:1:hasKey:else, Core:iterator:withIndex:11:5:equals:else, Core:iterator:withIndex:11:5:hasKey:else, Core:iterator:wrapSafe:14:1:equals:else, Core:iterator:wrapSafe:14:22:8:equals:else, Core:iterator:wrapSafe:14:22:8:hasKey:else, Core:iterator:21:equals:else, Core:iterator:32:equals:else, Core:list:first:6:equals:else, Core:list:firstIndexWhere:21:1:equals:else, Core:list:firstIndexWhere:21:1:hasKey:else, Core:list:firstWhere:19:equals:else, Core:list:generate:51:1:equals:else, Core:list:generate:51:1:hasKey:else, Core:list:lastIndexWhere:38:1:equals:else, Core:list:lastIndexWhere:38:1:hasKey:else, Core:list:lastWhere:19:equals:else, Core:list:single:6:equals:else, Core:list:31:equals:else, Core:list:42:equals:else, Core:result:also:16:equals:else, Core:result:is:1:equals:else, Core:result:mapOrElse:26:equals:else, Core:result:21:equals:else, Core:result:32:equals:else, Core:struct:21:equals:else, Core:tag:31:equals:else, Core:text:isAsciiDigit:14:equals:else, Core:text:repeat:30:1:equals:else, Core:text:31:equals:else, Core:text:42:equals:else, Examples:fibonacci:21:equals:else, Examples:fibonacci:23:6:equals:else
  # Captured IDs: none
  $1 = %118<NoMatch>
body_9 (responsible $0) =
  # Original HIR IDs: Builtins::ifElse:1:case-0:didNotMatch, Builtins::isLessThanOrEqualTo:19:case-1:matched, Builtins::isNonNegative:13:case-1:matched, Builtins::not:1:case-0:matched, Core:bool:is:1:case-0:didNotMatch, Core:bool:lazyAnd:16:case-1:matched, Core:bool:not:6:case-0:matched, Core:check:check:1:case-0:didNotMatch, Core:fixedDecimal:is:1:case-0:didNotMatch, Core:function:is0:10, Core:function:is1:10, Core:function:is2:10, Core:function:is3:10, Core:function:is4:10, Core:function:is5:10, Core:list:isValidIndex:19, Core:list:isValidInsertIndex:19, Core:result:is:1:case-0:didNotMatch, Core:text:isAsciiDigit:14:case-0:didNotMatch
  # Captured IDs: none
  $1 = %112<False>
body_10 $0 (+ responsible $1) =
  # Original HIR IDs: Builtins::getArgumentCount
  # Captured IDs: none
  $2 = %109<builtinTypeOf>
  $3 = dup $0 by 1
  $4 = %32<Builtins::typeIs:19>
  $5 = call $2<%109<builtinTypeOf>> with $0 ($4<%32<Builtins::typeIs:19>> is responsible)
  $6 = %92<builtinEquals>
  $7 = dup $5 by 1
  $8 = %113<Function>
  $9 = %33<Builtins::typeIs:25>
  $10 = call $6<%92<builtinEquals>> with $5 $8<%113<Function>> ($9<%33<Builtins::typeIs:25>> is responsible)
  $11 = %2<Builtins::getArgumentCount:5>
  $12 = %159<{ body_6 }>
  $13 = dup $10 by 1
  $14 = %144<"`function | typeIs Function` was not satisfied">
  $15 = dup $1 by 1
  $16 = trace: start of call of $12<%159<{ body_6 }>> with $10 $14<%144<"`function | typeIs Function` was not satisfied">> $1 ($11<%2<Builtins::getArgumentCount:5>> is responsible, code is at $11<%2<Builtins::getArgumentCount:5>>)
  $17 = dup $10 by 1
  $18 = dup $1 by 1
  $19 = call $12<%159<{ body_6 }>> with $10 $14<%144<"`function | typeIs Function` was not satisfied">> $1 ($11<%2<Builtins::getArgumentCount:5>> is responsible)
  $20 = trace: end of call
  $21 = %93<builtinGetArgumentCount>
  $22 = dup $0 by 1
  $23 = %1<Builtins::getArgumentCount:11>
  $24 = call $21<%93<builtinGetArgumentCount>> with $0 ($23<%1<Builtins::getArgumentCount:11>> is responsible)
  $25 = drop $19
  $26 = drop $10
  $27 = drop $5
  $28 = drop $0
  $29 = $24
body_11 (responsible $1) =
  # Original HIR IDs: Builtins::ifElse:1:isMatch:then
  # Captured IDs: $0
  $2 = dup $0 by 1
  $3 = $0
body_12 (responsible $1) =
  # Original HIR IDs: Builtins::ifElse:1:isMatch:else
  # Captured IDs: $0
  $2 = %92<builtinEquals>
  $3 = %112<False>
  $4 = dup $0 by 1
  $5 = %3<Builtins::ifElse:1>
  $6 = call $2<%92<builtinEquals>> with $3<%112<False>> $0 ($5<%3<Builtins::ifElse:1>> is responsible)
  $7 = %94<builtinIfElse>
  $8 = dup $6 by 1
  $9 = %162<{ body_7 }>
  $10 = %163<{ body_8 }>
  $11 = call $7<%94<builtinIfElse>> with $6 $9<%162<{ body_7 }>> $10<%163<{ body_8 }>> ($5<%3<Builtins::ifElse:1>> is responsible)
  $12 = drop $6
  $13 = $11
body_13 $0 $1 $2 (+ responsible $3) =
  # Original HIR IDs: Builtins::ifElse
  # Captured IDs: none
  $4 = %92<builtinEquals>
  $5 = %125<True>
  $6 = dup $0 by 1
  $7 = %3<Builtins::ifElse:1>
  $8 = call $4<%92<builtinEquals>> with $5<%125<True>> $0 ($7<%3<Builtins::ifElse:1>> is responsible)
  $9 = %94<builtinIfElse>
  $10 = dup $8 by 1
  $11 = %162<{ body_7 }>
  $12 = %163<{ body_8 }>
  $13 = call $9<%94<builtinIfElse>> with $8 $11<%162<{ body_7 }>> $12<%163<{ body_8 }>> ($7<%3<Builtins::ifElse:1>> is responsible)
  $14 = %106<builtinTagWithoutValue>
  $15 = dup $13 by 1
  $16 = call $14<%106<builtinTagWithoutValue>> with $13 ($7<%3<Builtins::ifElse:1>> is responsible)
  $17 = dup $16 by 1
  $18 = %117<Match>
  $19 = call $4<%92<builtinEquals>> with $16 $18<%117<Match>> ($7<%3<Builtins::ifElse:1>> is responsible)
  $20 = dup $13 by 1
  $21 = { body_11 capturing $13 }
  $22 = dup $0 by 1
  $23 = { body_12 capturing $0 }
  $24 = dup $19 by 1
  $25 = dup $21 by 1
  $26 = dup $23 by 1
  $27 = call $9<%94<builtinIfElse>> with $19 $21 $23 ($7<%3<Builtins::ifElse:1>> is responsible)
  $28 = dup $27 by 1
  $29 = call $14<%106<builtinTagWithoutValue>> with $27 ($7<%3<Builtins::ifElse:1>> is responsible)
  $30 = dup $29 by 1
  $31 = call $4<%92<builtinEquals>> with $29 $18<%117<Match>> ($7<%3<Builtins::ifElse:1>> is responsible)
  $32 = dup $31 by 1
  $33 = %157<{ body_0 }>
  $34 = %164<{ body_9 }>
  $35 = call $9<%94<builtinIfElse>> with $31 $33<%157<{ body_0 }>> $34<%164<{ body_9 }>> ($7<%3<Builtins::ifElse:1>> is responsible)
  $36 = %11<Builtins::ifElse:5>
  $37 = %159<{ body_6 }>
  $38 = dup $35 by 1
  $39 = %141<"`conditionIsBool` was not satisfied">
  $40 = dup $3 by 1
  $41 = trace: start of call of $37<%159<{ body_6 }>> with $35 $39<%141<"`conditionIsBool` was not satisfied">> $3 ($36<%11<Builtins::ifElse:5>> is responsible, code is at $36<%11<Builtins::ifElse:5>>)
  $42 = dup $35 by 1
  $43 = dup $3 by 1
  $44 = call $37<%159<{ body_6 }>> with $35 $39<%141<"`conditionIsBool` was not satisfied">> $3 ($36<%11<Builtins::ifElse:5>> is responsible)
  $45 = trace: end of call
  $46 = %109<builtinTypeOf>
  $47 = dup $1 by 1
  $48 = %32<Builtins::typeIs:19>
  $49 = call $46<%109<builtinTypeOf>> with $1 ($48<%32<Builtins::typeIs:19>> is responsible)
  $50 = dup $49 by 1
  $51 = %113<Function>
  $52 = %33<Builtins::typeIs:25>
  $53 = call $4<%92<builtinEquals>> with $49 $51<%113<Function>> ($52<%33<Builtins::typeIs:25>> is responsible)
  $54 = %4<Builtins::ifElse:11>
  $55 = dup $53 by 1
  $56 = %156<"`then | typeIs Function` was not satisfied">
  $57 = dup $3 by 1
  $58 = trace: start of call of $37<%159<{ body_6 }>> with $53 $56<%156<"`then | typeIs Function` was not satisfied">> $3 ($54<%4<Builtins::ifElse:11>> is responsible, code is at $54<%4<Builtins::ifElse:11>>)
  $59 = dup $53 by 1
  $60 = dup $3 by 1
  $61 = call $37<%159<{ body_6 }>> with $53 $56<%156<"`then | typeIs Function` was not satisfied">> $3 ($54<%4<Builtins::ifElse:11>> is responsible)
  $62 = trace: end of call
  $63 = %5<Builtins::ifElse:14>
  $64 = %165<{ body_10 }>
  $65 = dup $1 by 1
  $66 = trace: start of call of $64<%165<{ body_10 }>> with $1 ($63<%5<Builtins::ifElse:14>> is responsible, code is at $63<%5<Builtins::ifElse:14>>)
  $67 = dup $49 by 1
  $68 = call $4<%92<builtinEquals>> with $49 $51<%113<Function>> ($52<%33<Builtins::typeIs:25>> is responsible)
  $69 = %2<Builtins::getArgumentCount:5>
  $70 = dup $68 by 1
  $71 = %144<"`function | typeIs Function` was not satisfied">
  $72 = trace: start of call of $37<%159<{ body_6 }>> with $68 $71<%144<"`function | typeIs Function` was not satisfied">> $63<%5<Builtins::ifElse:14>> ($69<%2<Builtins::getArgumentCount:5>> is responsible, code is at $69<%2<Builtins::getArgumentCount:5>>)
  $73 = dup $68 by 1
  $74 = call $37<%159<{ body_6 }>> with $68 $71<%144<"`function | typeIs Function` was not satisfied">> $63<%5<Builtins::ifElse:14>> ($69<%2<Builtins::getArgumentCount:5>> is responsible)
  $75 = trace: end of call
  $76 = %93<builtinGetArgumentCount>
  $77 = dup $1 by 1
  $78 = %1<Builtins::getArgumentCount:11>
  $79 = call $76<%93<builtinGetArgumentCount>> with $1 ($78<%1<Builtins::getArgumentCount:11>> is responsible)
  $80 = trace: end of call
  $81 = dup $79 by 1
  $82 = %126<0>
  $83 = %0<Builtins::equals:6>
  $84 = call $4<%92<builtinEquals>> with $79 $82<%126<0>> ($83<%0<Builtins::equals:6>> is responsible)
  $85 = %6<Builtins::ifElse:19>
  $86 = dup $84 by 1
  $87 = %155<"`then | getArgumentCount | equals 0` was not satisfied">
  $88 = dup $3 by 1
  $89 = trace: start of call of $37<%159<{ body_6 }>> with $84 $87<%155<"`then | getArgumentCount | equals 0` was not satisfied">> $3 ($85<%6<Builtins::ifElse:19>> is responsible, code is at $85<%6<Builtins::ifElse:19>>)
  $90 = dup $84 by 1
  $91 = dup $3 by 1
  $92 = call $37<%159<{ body_6 }>> with $84 $87<%155<"`then | getArgumentCount | equals 0` was not satisfied">> $3 ($85<%6<Builtins::ifElse:19>> is responsible)
  $93 = trace: end of call
  $94 = dup $2 by 1
  $95 = call $46<%109<builtinTypeOf>> with $2 ($48<%32<Builtins::typeIs:19>> is responsible)
  $96 = dup $95 by 1
  $97 = call $4<%92<builtinEquals>> with $95 $51<%113<Function>> ($52<%33<Builtins::typeIs:25>> is responsible)
  $98 = %7<Builtins::ifElse:25>
  $99 = dup $97 by 1
  $100 = %143<"`else | typeIs Function` was not satisfied">
  $101 = dup $3 by 1
  $102 = trace: start of call of $37<%159<{ body_6 }>> with $97 $100<%143<"`else | typeIs Function` was not satisfied">> $3 ($98<%7<Builtins::ifElse:25>> is responsible, code is at $98<%7<Builtins::ifElse:25>>)
  $103 = dup $97 by 1
  $104 = dup $3 by 1
  $105 = call $37<%159<{ body_6 }>> with $97 $100<%143<"`else | typeIs Function` was not satisfied">> $3 ($98<%7<Builtins::ifElse:25>> is responsible)
  $106 = trace: end of call
  $107 = %8<Builtins::ifElse:28>
  $108 = dup $2 by 1
  $109 = trace: start of call of $64<%165<{ body_10 }>> with $2 ($107<%8<Builtins::ifElse:28>> is responsible, code is at $107<%8<Builtins::ifElse:28>>)
  $110 = dup $95 by 1
  $111 = call $4<%92<builtinEquals>> with $95 $51<%113<Function>> ($52<%33<Builtins::typeIs:25>> is responsible)
  $112 = dup $111 by 1
  $113 = trace: start of call of $37<%159<{ body_6 }>> with $111 $71<%144<"`function | typeIs Function` was not satisfied">> $107<%8<Builtins::ifElse:28>> ($69<%2<Builtins::getArgumentCount:5>> is responsible, code is at $69<%2<Builtins::getArgumentCount:5>>)
  $114 = dup $111 by 1
  $115 = call $37<%159<{ body_6 }>> with $111 $71<%144<"`function | typeIs Function` was not satisfied">> $107<%8<Builtins::ifElse:28>> ($69<%2<Builtins::getArgumentCount:5>> is responsible)
  $116 = trace: end of call
  $117 = dup $2 by 1
  $118 = call $76<%93<builtinGetArgumentCount>> with $2 ($78<%1<Builtins::getArgumentCount:11>> is responsible)
  $119 = trace: end of call
  $120 = dup $118 by 1
  $121 = call $4<%92<builtinEquals>> with $118 $82<%126<0>> ($83<%0<Builtins::equals:6>> is responsible)
  $122 = %9<Builtins::ifElse:33>
  $123 = dup $121 by 1
  $124 = %142<"`else | getArgumentCount | equals 0` was not satisfied">
  $125 = dup $3 by 1
  $126 = trace: start of call of $37<%159<{ body_6 }>> with $121 $124<%142<"`else | getArgumentCount | equals 0` was not satisfied">> $3 ($122<%9<Builtins::ifElse:33>> is responsible, code is at $122<%9<Builtins::ifElse:33>>)
  $127 = dup $121 by 1
  $128 = dup $3 by 1
  $129 = call $37<%159<{ body_6 }>> with $121 $124<%142<"`else | getArgumentCount | equals 0` was not satisfied">> $3 ($122<%9<Builtins::ifElse:33>> is responsible)
  $130 = trace: end of call
  $131 = %10<Builtins::ifElse:41>
  $132 = dup $0 by 1
  $133 = dup $1 by 1
  $134 = dup $2 by 1
  $135 = trace: tail call of $9<%94<builtinIfElse>> with $0 $1 $2 ($131<%10<Builtins::ifElse:41>> is responsible, code is at $131<%10<Builtins::ifElse:41>>)
  $136 = dup $0 by 1
  $137 = dup $1 by 1
  $138 = dup $2 by 1
  $139 = call $9<%94<builtinIfElse>> with $0 $1 $2 ($131<%10<Builtins::ifElse:41>> is responsible)
  $140 = drop $129
  $141 = drop $121
  $142 = drop $118
  $143 = drop $115
  $144 = drop $111
  $145 = drop $105
  $146 = drop $97
  $147 = drop $95
  $148 = drop $92
  $149 = drop $84
  $150 = drop $79
  $151 = drop $74
  $152 = drop $68
  $153 = drop $61
  $154 = drop $53
  $155 = drop $49
  $156 = drop $44
  $157 = drop $35
  $158 = drop $31
  $159 = drop $29
  $160 = drop $27
  $161 = drop $23
  $162 = drop $21
  $163 = drop $19
  $164 = drop $16
  $165 = drop $13
  $166 = drop $8
  $167 = drop $2
  $168 = drop $1
  $169 = drop $0
  $170 = $139
body_14 $0 $1 (+ responsible $2) =
  # Original HIR IDs: Builtins::intAdd
  # Captured IDs: none
  $3 = %109<builtinTypeOf>
  $4 = dup $0 by 1
  $5 = %32<Builtins::typeIs:19>
  $6 = call $3<%109<builtinTypeOf>> with $0 ($5<%32<Builtins::typeIs:19>> is responsible)
  $7 = %92<builtinEquals>
  $8 = dup $6 by 1
  $9 = %114<Int>
  $10 = %33<Builtins::typeIs:25>
  $11 = call $7<%92<builtinEquals>> with $6 $9<%114<Int>> ($10<%33<Builtins::typeIs:25>> is responsible)
  $12 = %14<Builtins::intAdd:5>
  $13 = %159<{ body_6 }>
  $14 = dup $11 by 1
  $15 = %139<"`a | typeIs Int` was not satisfied">
  $16 = dup $2 by 1
  $17 = trace: start of call of $13<%159<{ body_6 }>> with $11 $15<%139<"`a | typeIs Int` was not satisfied">> $2 ($12<%14<Builtins::intAdd:5>> is responsible, code is at $12<%14<Builtins::intAdd:5>>)
  $18 = dup $11 by 1
  $19 = dup $2 by 1
  $20 = call $13<%159<{ body_6 }>> with $11 $15<%139<"`a | typeIs Int` was not satisfied">> $2 ($12<%14<Builtins::intAdd:5>> is responsible)
  $21 = trace: end of call
  $22 = dup $1 by 1
  $23 = call $3<%109<builtinTypeOf>> with $1 ($5<%32<Builtins::typeIs:19>> is responsible)
  $24 = dup $23 by 1
  $25 = call $7<%92<builtinEquals>> with $23 $9<%114<Int>> ($10<%33<Builtins::typeIs:25>> is responsible)
  $26 = %12<Builtins::intAdd:11>
  $27 = dup $25 by 1
  $28 = %140<"`b | typeIs Int` was not satisfied">
  $29 = dup $2 by 1
  $30 = trace: start of call of $13<%159<{ body_6 }>> with $25 $28<%140<"`b | typeIs Int` was not satisfied">> $2 ($26<%12<Builtins::intAdd:11>> is responsible, code is at $26<%12<Builtins::intAdd:11>>)
  $31 = dup $25 by 1
  $32 = dup $2 by 1
  $33 = call $13<%159<{ body_6 }>> with $25 $28<%140<"`b | typeIs Int` was not satisfied">> $2 ($26<%12<Builtins::intAdd:11>> is responsible)
  $34 = trace: end of call
  $35 = %95<builtinIntAdd>
  $36 = dup $0 by 1
  $37 = dup $1 by 1
  $38 = %13<Builtins::intAdd:18>
  $39 = call $35<%95<builtinIntAdd>> with $0 $1 ($38<%13<Builtins::intAdd:18>> is responsible)
  $40 = drop $33
  $41 = drop $25
  $42 = drop $23
  $43 = drop $20
  $44 = drop $11
  $45 = drop $6
  $46 = drop $1
  $47 = drop $0
  $48 = $39
body_15 $0 $1 (+ responsible $2) =
  # Original HIR IDs: Builtins::intCompareTo
  # Captured IDs: none
  $3 = %109<builtinTypeOf>
  $4 = dup $0 by 1
  $5 = %32<Builtins::typeIs:19>
  $6 = call $3<%109<builtinTypeOf>> with $0 ($5<%32<Builtins::typeIs:19>> is responsible)
  $7 = %92<builtinEquals>
  $8 = dup $6 by 1
  $9 = %114<Int>
  $10 = %33<Builtins::typeIs:25>
  $11 = call $7<%92<builtinEquals>> with $6 $9<%114<Int>> ($10<%33<Builtins::typeIs:25>> is responsible)
  $12 = %17<Builtins::intCompareTo:5>
  $13 = %159<{ body_6 }>
  $14 = dup $11 by 1
  $15 = %139<"`a | typeIs Int` was not satisfied">
  $16 = dup $2 by 1
  $17 = trace: start of call of $13<%159<{ body_6 }>> with $11 $15<%139<"`a | typeIs Int` was not satisfied">> $2 ($12<%17<Builtins::intCompareTo:5>> is responsible, code is at $12<%17<Builtins::intCompareTo:5>>)
  $18 = dup $11 by 1
  $19 = dup $2 by 1
  $20 = call $13<%159<{ body_6 }>> with $11 $15<%139<"`a | typeIs Int` was not satisfied">> $2 ($12<%17<Builtins::intCompareTo:5>> is responsible)
  $21 = trace: end of call
  $22 = dup $1 by 1
  $23 = call $3<%109<builtinTypeOf>> with $1 ($5<%32<Builtins::typeIs:19>> is responsible)
  $24 = dup $23 by 1
  $25 = call $7<%92<builtinEquals>> with $23 $9<%114<Int>> ($10<%33<Builtins::typeIs:25>> is responsible)
  $26 = %15<Builtins::intCompareTo:11>
  $27 = dup $25 by 1
  $28 = %140<"`b | typeIs Int` was not satisfied">
  $29 = dup $2 by 1
  $30 = trace: start of call of $13<%159<{ body_6 }>> with $25 $28<%140<"`b | typeIs Int` was not satisfied">> $2 ($26<%15<Builtins::intCompareTo:11>> is responsible, code is at $26<%15<Builtins::intCompareTo:11>>)
  $31 = dup $25 by 1
  $32 = dup $2 by 1
  $33 = call $13<%159<{ body_6 }>> with $25 $28<%140<"`b | typeIs Int` was not satisfied">> $2 ($26<%15<Builtins::intCompareTo:11>> is responsible)
  $34 = trace: end of call
  $35 = %96<builtinIntCompareTo>
  $36 = dup $0 by 1
  $37 = dup $1 by 1
  $38 = %16<Builtins::intCompareTo:18>
  $39 = call $35<%96<builtinIntCompareTo>> with $0 $1 ($38<%16<Builtins::intCompareTo:18>> is responsible)
  $40 = drop $33
  $41 = drop $25
  $42 = drop $23
  $43 = drop $20
  $44 = drop $11
  $45 = drop $6
  $46 = drop $1
  $47 = drop $0
  $48 = $39
body_16 $0 (+ responsible $1) =
  # Original HIR IDs: Builtins::intParse
  # Captured IDs: none
  $2 = %109<builtinTypeOf>
  $3 = dup $0 by 1
  $4 = %32<Builtins::typeIs:19>
  $5 = call $2<%109<builtinTypeOf>> with $0 ($4<%32<Builtins::typeIs:19>> is responsible)
  $6 = %92<builtinEquals>
  $7 = dup $5 by 1
  $8 = %124<Text>
  $9 = %33<Builtins::typeIs:25>
  $10 = call $6<%92<builtinEquals>> with $5 $8<%124<Text>> ($9<%33<Builtins::typeIs:25>> is responsible)
  $11 = %19<Builtins::intParse:5>
  $12 = %159<{ body_6 }>
  $13 = dup $10 by 1
  $14 = %154<"`text | typeIs Text` was not satisfied">
  $15 = dup $1 by 1
  $16 = trace: start of call of $12<%159<{ body_6 }>> with $10 $14<%154<"`text | typeIs Text` was not satisfied">> $1 ($11<%19<Builtins::intParse:5>> is responsible, code is at $11<%19<Builtins::intParse:5>>)
  $17 = dup $10 by 1
  $18 = dup $1 by 1
  $19 = call $12<%159<{ body_6 }>> with $10 $14<%154<"`text | typeIs Text` was not satisfied">> $1 ($11<%19<Builtins::intParse:5>> is responsible)
  $20 = trace: end of call
  $21 = %97<builtinIntParse>
  $22 = dup $0 by 1
  $23 = %18<Builtins::intParse:11>
  $24 = call $21<%97<builtinIntParse>> with $0 ($23<%18<Builtins::intParse:11>> is responsible)
  $25 = drop $19
  $26 = drop $10
  $27 = drop $5
  $28 = drop $0
  $29 = $24
body_17 $0 $1 (+ responsible $2) =
  # Original HIR IDs: Builtins::intSubtract
  # Captured IDs: none
  $3 = %109<builtinTypeOf>
  $4 = dup $0 by 1
  $5 = %32<Builtins::typeIs:19>
  $6 = call $3<%109<builtinTypeOf>> with $0 ($5<%32<Builtins::typeIs:19>> is responsible)
  $7 = %92<builtinEquals>
  $8 = dup $6 by 1
  $9 = %114<Int>
  $10 = %33<Builtins::typeIs:25>
  $11 = call $7<%92<builtinEquals>> with $6 $9<%114<Int>> ($10<%33<Builtins::typeIs:25>> is responsible)
  $12 = %22<Builtins::intSubtract:5>
  $13 = %159<{ body_6 }>
  $14 = dup $11 by 1
  $15 = %148<"`minuend | typeIs Int` was not satisfied">
  $16 = dup $2 by 1
  $17 = trace: start of call of $13<%159<{ body_6 }>> with $11 $15<%148<"`minuend | typeIs Int` was not satisfied">> $2 ($12<%22<Builtins::intSubtract:5>> is responsible, code is at $12<%22<Builtins::intSubtract:5>>)
  $18 = dup $11 by 1
  $19 = dup $2 by 1
  $20 = call $13<%159<{ body_6 }>> with $11 $15<%148<"`minuend | typeIs Int` was not satisfied">> $2 ($12<%22<Builtins::intSubtract:5>> is responsible)
  $21 = trace: end of call
  $22 = dup $1 by 1
  $23 = call $3<%109<builtinTypeOf>> with $1 ($5<%32<Builtins::typeIs:19>> is responsible)
  $24 = dup $23 by 1
  $25 = call $7<%92<builtinEquals>> with $23 $9<%114<Int>> ($10<%33<Builtins::typeIs:25>> is responsible)
  $26 = %20<Builtins::intSubtract:11>
  $27 = dup $25 by 1
  $28 = %151<"`subtrahend | typeIs Int` was not satisfied">
  $29 = dup $2 by 1
  $30 = trace: start of call of $13<%159<{ body_6 }>> with $25 $28<%151<"`subtrahend | typeIs Int` was not satisfied">> $2 ($26<%20<Builtins::intSubtract:11>> is responsible, code is at $26<%20<Builtins::intSubtract:11>>)
  $31 = dup $25 by 1
  $32 = dup $2 by 1
  $33 = call $13<%159<{ body_6 }>> with $25 $28<%151<"`subtrahend | typeIs Int` was not satisfied">> $2 ($26<%20<Builtins::intSubtract:11>> is responsible)
  $34 = trace: end of call
  $35 = %98<builtinIntSubtract>
  $36 = dup $0 by 1
  $37 = dup $1 by 1
  $38 = %21<Builtins::intSubtract:18>
  $39 = call $35<%98<builtinIntSubtract>> with $0 $1 ($38<%21<Builtins::intSubtract:18>> is responsible)
  $40 = drop $33
  $41 = drop $25
  $42 = drop $23
  $43 = drop $20
  $44 = drop $11
  $45 = drop $6
  $46 = drop $1
  $47 = drop $0
  $48 = $39
body_18 $0 $1 (+ responsible $2) =
  # Original HIR IDs: Builtins::structGet
  # Captured IDs: none
  $3 = %109<builtinTypeOf>
  $4 = dup $0 by 1
  $5 = %32<Builtins::typeIs:19>
  $6 = call $3<%109<builtinTypeOf>> with $0 ($5<%32<Builtins::typeIs:19>> is responsible)
  $7 = %92<builtinEquals>
  $8 = dup $6 by 1
  $9 = %122<Struct>
  $10 = %33<Builtins::typeIs:25>
  $11 = call $7<%92<builtinEquals>> with $6 $9<%122<Struct>> ($10<%33<Builtins::typeIs:25>> is responsible)
  $12 = %26<Builtins::structGet:5>
  $13 = %159<{ body_6 }>
  $14 = dup $11 by 1
  $15 = %149<"`struct | typeIs Struct` was not satisfied">
  $16 = dup $2 by 1
  $17 = trace: start of call of $13<%159<{ body_6 }>> with $11 $15<%149<"`struct | typeIs Struct` was not satisfied">> $2 ($12<%26<Builtins::structGet:5>> is responsible, code is at $12<%26<Builtins::structGet:5>>)
  $18 = dup $11 by 1
  $19 = dup $2 by 1
  $20 = call $13<%159<{ body_6 }>> with $11 $15<%149<"`struct | typeIs Struct` was not satisfied">> $2 ($12<%26<Builtins::structGet:5>> is responsible)
  $21 = trace: end of call
  $22 = %102<builtinStructHasKey>
  $23 = dup $0 by 1
  $24 = dup $1 by 1
  $25 = %23<Builtins::structGet:12>
  $26 = call $22<%102<builtinStructHasKey>> with $0 $1 ($25<%23<Builtins::structGet:12>> is responsible)
  $27 = %24<Builtins::structGet:14>
  $28 = dup $26 by 1
  $29 = %150<"`struct | ✨.structHasKey key` was not satisfied">
  $30 = dup $2 by 1
  $31 = trace: start of call of $13<%159<{ body_6 }>> with $26 $29<%150<"`struct | ✨.structHasKey key` was not satisfied">> $2 ($27<%24<Builtins::structGet:14>> is responsible, code is at $27<%24<Builtins::structGet:14>>)
  $32 = dup $26 by 1
  $33 = dup $2 by 1
  $34 = call $13<%159<{ body_6 }>> with $26 $29<%150<"`struct | ✨.structHasKey key` was not satisfied">> $2 ($27<%24<Builtins::structGet:14>> is responsible)
  $35 = trace: end of call
  $36 = %101<builtinStructGet>
  $37 = dup $0 by 1
  $38 = dup $1 by 1
  $39 = %25<Builtins::structGet:21>
  $40 = call $36<%101<builtinStructGet>> with $0 $1 ($39<%25<Builtins::structGet:21>> is responsible)
  $41 = drop $34
  $42 = drop $26
  $43 = drop $20
  $44 = drop $11
  $45 = drop $6
  $46 = drop $1
  $47 = drop $0
  $48 = $40
body_19 $0 (+ responsible $1) =
  # Original HIR IDs: Builtins::tagGetValue
  # Captured IDs: none
  $2 = %109<builtinTypeOf>
  $3 = dup $0 by 1
  $4 = %32<Builtins::typeIs:19>
  $5 = call $2<%109<builtinTypeOf>> with $0 ($4<%32<Builtins::typeIs:19>> is responsible)
  $6 = %92<builtinEquals>
  $7 = dup $5 by 1
  $8 = %123<Tag>
  $9 = %33<Builtins::typeIs:25>
  $10 = call $6<%92<builtinEquals>> with $5 $8<%123<Tag>> ($9<%33<Builtins::typeIs:25>> is responsible)
  $11 = %30<Builtins::tagGetValue:5>
  $12 = %159<{ body_6 }>
  $13 = dup $10 by 1
  $14 = %152<"`tag | typeIs Tag` was not satisfied">
  $15 = dup $1 by 1
  $16 = trace: start of call of $12<%159<{ body_6 }>> with $10 $14<%152<"`tag | typeIs Tag` was not satisfied">> $1 ($11<%30<Builtins::tagGetValue:5>> is responsible, code is at $11<%30<Builtins::tagGetValue:5>>)
  $17 = dup $10 by 1
  $18 = dup $1 by 1
  $19 = call $12<%159<{ body_6 }>> with $10 $14<%152<"`tag | typeIs Tag` was not satisfied">> $1 ($11<%30<Builtins::tagGetValue:5>> is responsible)
  $20 = trace: end of call
  $21 = %104<builtinTagHasValue>
  $22 = dup $0 by 1
  $23 = %27<Builtins::tagGetValue:11>
  $24 = call $21<%104<builtinTagHasValue>> with $0 ($23<%27<Builtins::tagGetValue:11>> is responsible)
  $25 = %28<Builtins::tagGetValue:13>
  $26 = dup $24 by 1
  $27 = %153<"`tag | ✨.tagHasValue` was not satisfied">
  $28 = dup $1 by 1
  $29 = trace: start of call of $12<%159<{ body_6 }>> with $24 $27<%153<"`tag | ✨.tagHasValue` was not satisfied">> $1 ($25<%28<Builtins::tagGetValue:13>> is responsible, code is at $25<%28<Builtins::tagGetValue:13>>)
  $30 = dup $24 by 1
  $31 = dup $1 by 1
  $32 = call $12<%159<{ body_6 }>> with $24 $27<%153<"`tag | ✨.tagHasValue` was not satisfied">> $1 ($25<%28<Builtins::tagGetValue:13>> is responsible)
  $33 = trace: end of call
  $34 = %103<builtinTagGetValue>
  $35 = dup $0 by 1
  $36 = %29<Builtins::tagGetValue:19>
  $37 = call $34<%103<builtinTagGetValue>> with $0 ($36<%29<Builtins::tagGetValue:19>> is responsible)
  $38 = drop $32
  $39 = drop $24
  $40 = drop $19
  $41 = drop $10
  $42 = drop $5
  $43 = drop $0
  $44 = $37
body_20 (responsible $1) =
  # Original HIR IDs: Core:function:is1:9
  # Captured IDs: $0
  $2 = %36<Core:function:is1:9:3>
  $3 = %165<{ body_10 }>
  $4 = dup $0 by 1
  $5 = trace: start of call of $3<%165<{ body_10 }>> with $0 ($2<%36<Core:function:is1:9:3>> is responsible, code is at $2<%36<Core:function:is1:9:3>>)
  $6 = %109<builtinTypeOf>
  $7 = dup $0 by 1
  $8 = %32<Builtins::typeIs:19>
  $9 = call $6<%109<builtinTypeOf>> with $0 ($8<%32<Builtins::typeIs:19>> is responsible)
  $10 = %92<builtinEquals>
  $11 = dup $9 by 1
  $12 = %113<Function>
  $13 = %33<Builtins::typeIs:25>
  $14 = call $10<%92<builtinEquals>> with $9 $12<%113<Function>> ($13<%33<Builtins::typeIs:25>> is responsible)
  $15 = %2<Builtins::getArgumentCount:5>
  $16 = %159<{ body_6 }>
  $17 = dup $14 by 1
  $18 = %144<"`function | typeIs Function` was not satisfied">
  $19 = trace: start of call of $16<%159<{ body_6 }>> with $14 $18<%144<"`function | typeIs Function` was not satisfied">> $2<%36<Core:function:is1:9:3>> ($15<%2<Builtins::getArgumentCount:5>> is responsible, code is at $15<%2<Builtins::getArgumentCount:5>>)
  $20 = dup $14 by 1
  $21 = call $16<%159<{ body_6 }>> with $14 $18<%144<"`function | typeIs Function` was not satisfied">> $2<%36<Core:function:is1:9:3>> ($15<%2<Builtins::getArgumentCount:5>> is responsible)
  $22 = trace: end of call
  $23 = %93<builtinGetArgumentCount>
  $24 = dup $0 by 1
  $25 = %1<Builtins::getArgumentCount:11>
  $26 = call $23<%93<builtinGetArgumentCount>> with $0 ($25<%1<Builtins::getArgumentCount:11>> is responsible)
  $27 = trace: end of call
  $28 = dup $26 by 1
  $29 = %127<1>
  $30 = %0<Builtins::equals:6>
  $31 = call $10<%92<builtinEquals>> with $26 $29<%127<1>> ($30<%0<Builtins::equals:6>> is responsible)
  $32 = drop $26
  $33 = drop $21
  $34 = drop $14
  $35 = drop $9
  $36 = $31
body_21 $0 (+ responsible $1) =
  # Original HIR IDs: Core:function:is1
  # Captured IDs: none
  $2 = %109<builtinTypeOf>
  $3 = dup $0 by 1
  $4 = %34<Builtins::typeOf:5>
  $5 = call $2<%109<builtinTypeOf>> with $0 ($4<%34<Builtins::typeOf:5>> is responsible)
  $6 = %92<builtinEquals>
  $7 = dup $5 by 1
  $8 = %113<Function>
  $9 = %0<Builtins::equals:6>
  $10 = call $6<%92<builtinEquals>> with $5 $8<%113<Function>> ($9<%0<Builtins::equals:6>> is responsible)
  $11 = dup $0 by 1
  $12 = { body_20 capturing $0 }
  $13 = %35<Core:function:is1:11>
  $14 = %166<{ body_13 }>
  $15 = dup $10 by 1
  $16 = dup $12 by 1
  $17 = %164<{ body_9 }>
  $18 = trace: tail call of $14<%166<{ body_13 }>> with $10 $12 $17<%164<{ body_9 }>> ($13<%35<Core:function:is1:11>> is responsible, code is at $13<%35<Core:function:is1:11>>)
  $19 = dup $10 by 1
  $20 = dup $12 by 1
  $21 = call $14<%166<{ body_13 }>> with $10 $12 $17<%164<{ body_9 }>> ($13<%35<Core:function:is1:11>> is responsible)
  $22 = drop $12
  $23 = drop $10
  $24 = drop $5
  $25 = drop $0
  $26 = $21
body_22 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %103<builtinTagGetValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%103<builtinTagGetValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = dup $5 by 1
  $7 = ($5,)
  $8 = dup $7 by 1
  $9 = Match $7
  $10 = drop $7
  $11 = drop $5
  $12 = $9
body_23 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %104<builtinTagHasValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%104<builtinTagHasValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %125<True>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%125<True>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_22 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_24 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %106<builtinTagWithoutValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%106<builtinTagWithoutValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %120<Ok>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%120<Ok>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_23 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_25 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:isMatch:then
  # Captured IDs: $0
  $2 = dup $0 by 1
  $3 = $0
body_26 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %103<builtinTagGetValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%103<builtinTagGetValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = dup $5 by 1
  $7 = ($5,)
  $8 = dup $7 by 1
  $9 = Match $7
  $10 = drop $7
  $11 = drop $5
  $12 = $9
body_27 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %104<builtinTagHasValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%104<builtinTagHasValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %125<True>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%125<True>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_26 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_28 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %106<builtinTagWithoutValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%106<builtinTagWithoutValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %111<Error>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%111<Error>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_27 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_29 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:isMatch:else
  # Captured IDs: $0
  $2 = %109<builtinTypeOf>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%109<builtinTypeOf>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %123<Tag>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%123<Tag>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_28 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_30 $0 (+ responsible $1) =
  # Original HIR IDs: Core:result:is
  # Captured IDs: none
  $2 = %109<builtinTypeOf>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%109<builtinTypeOf>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %123<Tag>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%123<Tag>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_24 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = %106<builtinTagWithoutValue>
  $18 = dup $16 by 1
  $19 = call $17<%106<builtinTagWithoutValue>> with $16 ($4<%46<Core:result:is:1>> is responsible)
  $20 = dup $19 by 1
  $21 = %117<Match>
  $22 = call $6<%92<builtinEquals>> with $19 $21<%117<Match>> ($4<%46<Core:result:is:1>> is responsible)
  $23 = dup $16 by 1
  $24 = { body_25 capturing $16 }
  $25 = dup $0 by 1
  $26 = { body_29 capturing $0 }
  $27 = dup $22 by 1
  $28 = dup $24 by 1
  $29 = dup $26 by 1
  $30 = call $12<%94<builtinIfElse>> with $22 $24 $26 ($4<%46<Core:result:is:1>> is responsible)
  $31 = dup $30 by 1
  $32 = call $17<%106<builtinTagWithoutValue>> with $30 ($4<%46<Core:result:is:1>> is responsible)
  $33 = dup $32 by 1
  $34 = call $6<%92<builtinEquals>> with $32 $21<%117<Match>> ($4<%46<Core:result:is:1>> is responsible)
  $35 = dup $34 by 1
  $36 = %157<{ body_0 }>
  $37 = %164<{ body_9 }>
  $38 = call $12<%94<builtinIfElse>> with $34 $36<%157<{ body_0 }>> $37<%164<{ body_9 }>> ($4<%46<Core:result:is:1>> is responsible)
  $39 = drop $34
  $40 = drop $32
  $41 = drop $30
  $42 = drop $26
  $43 = drop $24
  $44 = drop $22
  $45 = drop $19
  $46 = drop $16
  $47 = drop $11
  $48 = drop $9
  $49 = drop $5
  $50 = drop $0
  $51 = $38
body_31 (responsible $0) =
  # Original HIR IDs: Core:result:mapOrElse:26:2:doesTagHaveValue:then
  # Captured IDs: none
  $1 = %137<"You called a tag that already has a value.">
  $2 = %64<Core:result:mapOrElse:26:2>
  $3 = panicking because $1<%137<"You called a tag that already has a value.">> ($2<%64<Core:result:mapOrElse:26:2>> is at fault)
body_32 (responsible $0) =
  # Original HIR IDs: Core:result:mapOrElse:26:2:calleeIsFunction:else
  # Captured IDs: none
  $1 = %138<"You can only call tags or functions.">
  $2 = %64<Core:result:mapOrElse:26:2>
  $3 = panicking because $1<%138<"You can only call tags or functions.">> ($2<%64<Core:result:mapOrElse:26:2>> is at fault)
body_33 (responsible $0) =
  # Original HIR IDs: Core:result:mapOrElse:26:5:doesTagHaveValue:then
  # Captured IDs: none
  $1 = %137<"You called a tag that already has a value.">
  $2 = %65<Core:result:mapOrElse:26:5>
  $3 = panicking because $1<%137<"You called a tag that already has a value.">> ($2<%65<Core:result:mapOrElse:26:5>> is at fault)
body_34 (responsible $0) =
  # Original HIR IDs: Core:result:mapOrElse:26:5:calleeIsFunction:else
  # Captured IDs: none
  $1 = %138<"You can only call tags or functions.">
  $2 = %65<Core:result:mapOrElse:26:5>
  $3 = panicking because $1<%138<"You can only call tags or functions.">> ($2<%65<Core:result:mapOrElse:26:5>> is at fault)
body_35 (responsible $0) =
  # Original HIR IDs: Core:result:mapOrElse:26:case-1:didNotMatch
  # Captured IDs: none
  $1 = %131<"No case matched the given expression.">
  $2 = %63<Core:result:mapOrElse:26>
  $3 = panicking because $1<%131<"No case matched the given expression.">> ($2<%63<Core:result:mapOrElse:26>> is at fault)
body_36 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %103<builtinTagGetValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%103<builtinTagGetValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = dup $5 by 1
  $7 = ($5,)
  $8 = dup $7 by 1
  $9 = Match $7
  $10 = drop $7
  $11 = drop $5
  $12 = $9
body_37 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %104<builtinTagHasValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%104<builtinTagHasValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %125<True>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%125<True>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_36 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_38 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %106<builtinTagWithoutValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%106<builtinTagWithoutValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %120<Ok>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%120<Ok>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_37 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_39 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:isMatch:then
  # Captured IDs: $0
  $2 = dup $0 by 1
  $3 = $0
body_40 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %103<builtinTagGetValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%103<builtinTagGetValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = dup $5 by 1
  $7 = ($5,)
  $8 = dup $7 by 1
  $9 = Match $7
  $10 = drop $7
  $11 = drop $5
  $12 = $9
body_41 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %104<builtinTagHasValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%104<builtinTagHasValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %125<True>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%125<True>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_40 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_42 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %106<builtinTagWithoutValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%106<builtinTagWithoutValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %111<Error>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%111<Error>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_41 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_43 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:isMatch:else
  # Captured IDs: $0
  $2 = %109<builtinTypeOf>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%109<builtinTypeOf>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %123<Tag>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%123<Tag>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_42 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_44 (responsible $1) =
  # Original HIR IDs: Core:function:is1:9
  # Captured IDs: $0
  $2 = %36<Core:function:is1:9:3>
  $3 = %165<{ body_10 }>
  $4 = dup $0 by 1
  $5 = trace: start of call of $3<%165<{ body_10 }>> with $0 ($2<%36<Core:function:is1:9:3>> is responsible, code is at $2<%36<Core:function:is1:9:3>>)
  $6 = %109<builtinTypeOf>
  $7 = dup $0 by 1
  $8 = %32<Builtins::typeIs:19>
  $9 = call $6<%109<builtinTypeOf>> with $0 ($8<%32<Builtins::typeIs:19>> is responsible)
  $10 = %92<builtinEquals>
  $11 = dup $9 by 1
  $12 = %113<Function>
  $13 = %33<Builtins::typeIs:25>
  $14 = call $10<%92<builtinEquals>> with $9 $12<%113<Function>> ($13<%33<Builtins::typeIs:25>> is responsible)
  $15 = %2<Builtins::getArgumentCount:5>
  $16 = %159<{ body_6 }>
  $17 = dup $14 by 1
  $18 = %144<"`function | typeIs Function` was not satisfied">
  $19 = trace: start of call of $16<%159<{ body_6 }>> with $14 $18<%144<"`function | typeIs Function` was not satisfied">> $2<%36<Core:function:is1:9:3>> ($15<%2<Builtins::getArgumentCount:5>> is responsible, code is at $15<%2<Builtins::getArgumentCount:5>>)
  $20 = dup $14 by 1
  $21 = call $16<%159<{ body_6 }>> with $14 $18<%144<"`function | typeIs Function` was not satisfied">> $2<%36<Core:function:is1:9:3>> ($15<%2<Builtins::getArgumentCount:5>> is responsible)
  $22 = trace: end of call
  $23 = %93<builtinGetArgumentCount>
  $24 = dup $0 by 1
  $25 = %1<Builtins::getArgumentCount:11>
  $26 = call $23<%93<builtinGetArgumentCount>> with $0 ($25<%1<Builtins::getArgumentCount:11>> is responsible)
  $27 = trace: end of call
  $28 = dup $26 by 1
  $29 = %127<1>
  $30 = %0<Builtins::equals:6>
  $31 = call $10<%92<builtinEquals>> with $26 $29<%127<1>> ($30<%0<Builtins::equals:6>> is responsible)
  $32 = drop $26
  $33 = drop $21
  $34 = drop $14
  $35 = drop $9
  $36 = $31
body_45 (responsible $1) =
  # Original HIR IDs: Core:function:is1:9
  # Captured IDs: $0
  $2 = %36<Core:function:is1:9:3>
  $3 = %165<{ body_10 }>
  $4 = dup $0 by 1
  $5 = trace: start of call of $3<%165<{ body_10 }>> with $0 ($2<%36<Core:function:is1:9:3>> is responsible, code is at $2<%36<Core:function:is1:9:3>>)
  $6 = %109<builtinTypeOf>
  $7 = dup $0 by 1
  $8 = %32<Builtins::typeIs:19>
  $9 = call $6<%109<builtinTypeOf>> with $0 ($8<%32<Builtins::typeIs:19>> is responsible)
  $10 = %92<builtinEquals>
  $11 = dup $9 by 1
  $12 = %113<Function>
  $13 = %33<Builtins::typeIs:25>
  $14 = call $10<%92<builtinEquals>> with $9 $12<%113<Function>> ($13<%33<Builtins::typeIs:25>> is responsible)
  $15 = %2<Builtins::getArgumentCount:5>
  $16 = %159<{ body_6 }>
  $17 = dup $14 by 1
  $18 = %144<"`function | typeIs Function` was not satisfied">
  $19 = trace: start of call of $16<%159<{ body_6 }>> with $14 $18<%144<"`function | typeIs Function` was not satisfied">> $2<%36<Core:function:is1:9:3>> ($15<%2<Builtins::getArgumentCount:5>> is responsible, code is at $15<%2<Builtins::getArgumentCount:5>>)
  $20 = dup $14 by 1
  $21 = call $16<%159<{ body_6 }>> with $14 $18<%144<"`function | typeIs Function` was not satisfied">> $2<%36<Core:function:is1:9:3>> ($15<%2<Builtins::getArgumentCount:5>> is responsible)
  $22 = trace: end of call
  $23 = %93<builtinGetArgumentCount>
  $24 = dup $0 by 1
  $25 = %1<Builtins::getArgumentCount:11>
  $26 = call $23<%93<builtinGetArgumentCount>> with $0 ($25<%1<Builtins::getArgumentCount:11>> is responsible)
  $27 = trace: end of call
  $28 = dup $26 by 1
  $29 = %127<1>
  $30 = %0<Builtins::equals:6>
  $31 = call $10<%92<builtinEquals>> with $26 $29<%127<1>> ($30<%0<Builtins::equals:6>> is responsible)
  $32 = drop $26
  $33 = drop $21
  $34 = drop $14
  $35 = drop $9
  $36 = $31
body_46 (responsible $1) =
  # Original HIR IDs: Core:result:mapOrElse:26:equals:then
  # Captured IDs: $0
  $2 = %103<builtinTagGetValue>
  $3 = dup $0 by 1
  $4 = %63<Core:result:mapOrElse:26>
  $5 = call $2<%103<builtinTagGetValue>> with $0 ($4<%63<Core:result:mapOrElse:26>> is responsible)
  $6 = dup $5 by 1
  $7 = ($5,)
  $8 = dup $7 by 1
  $9 = Match $7
  $10 = drop $7
  $11 = drop $5
  $12 = $9
body_47 (responsible $1) =
  # Original HIR IDs: Core:result:mapOrElse:26:equals:then
  # Captured IDs: $0
  $2 = %104<builtinTagHasValue>
  $3 = dup $0 by 1
  $4 = %63<Core:result:mapOrElse:26>
  $5 = call $2<%104<builtinTagHasValue>> with $0 ($4<%63<Core:result:mapOrElse:26>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %125<True>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%125<True>> $5 ($4<%63<Core:result:mapOrElse:26>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_46 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%63<Core:result:mapOrElse:26>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_48 (responsible $1) =
  # Original HIR IDs: Core:result:mapOrElse:26:equals:then
  # Captured IDs: $0
  $2 = %106<builtinTagWithoutValue>
  $3 = dup $0 by 1
  $4 = %63<Core:result:mapOrElse:26>
  $5 = call $2<%106<builtinTagWithoutValue>> with $0 ($4<%63<Core:result:mapOrElse:26>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %120<Ok>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%120<Ok>> $5 ($4<%63<Core:result:mapOrElse:26>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_47 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%63<Core:result:mapOrElse:26>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_49 (responsible $2) =
  # Original HIR IDs: Core:result:mapOrElse:26:2:doesTagHaveValue:else
  # Captured IDs: $0, $1
  $3 = %105<builtinTagWithValue>
  $4 = dup $0 by 1
  $5 = dup $1 by 1
  $6 = %64<Core:result:mapOrElse:26:2>
  $7 = call $3<%105<builtinTagWithValue>> with $0 $1 ($6<%64<Core:result:mapOrElse:26:2>> is responsible)
body_50 (responsible $2) =
  # Original HIR IDs: Core:result:mapOrElse:26:2:calleeIsTag:then
  # Captured IDs: $0, $1
  $3 = %104<builtinTagHasValue>
  $4 = dup $0 by 1
  $5 = %64<Core:result:mapOrElse:26:2>
  $6 = call $3<%104<builtinTagHasValue>> with $0 ($5<%64<Core:result:mapOrElse:26:2>> is responsible)
  $7 = dup $0 by 1
  $8 = dup $1 by 1
  $9 = { body_49 capturing $0, $1 }
  $10 = %94<builtinIfElse>
  $11 = dup $6 by 1
  $12 = %175<{ body_31 }>
  $13 = dup $9 by 1
  $14 = call $10<%94<builtinIfElse>> with $6 $12<%175<{ body_31 }>> $9 ($5<%64<Core:result:mapOrElse:26:2>> is responsible)
  $15 = drop $9
  $16 = drop $6
  $17 = $14
body_51 (responsible $2) =
  # Original HIR IDs: Core:result:mapOrElse:26:2:hasCorrectNumberOfArguments:then
  # Captured IDs: $0, $1
  $3 = %64<Core:result:mapOrElse:26:2>
  $4 = dup $0 by 1
  $5 = dup $1 by 1
  $6 = trace: tail call of $0 with $1 ($3<%64<Core:result:mapOrElse:26:2>> is responsible, code is at $3<%64<Core:result:mapOrElse:26:2>>)
  $7 = dup $0 by 1
  $8 = dup $1 by 1
  $9 = call $0 with $1 ($3<%64<Core:result:mapOrElse:26:2>> is responsible)
body_52 (responsible $1) =
  # Original HIR IDs: Core:result:mapOrElse:26:2:hasCorrectNumberOfArguments:else
  # Captured IDs: $0
  $2 = %108<builtinToDebugText>
  $3 = dup $0 by 1
  $4 = %64<Core:result:mapOrElse:26:2>
  $5 = call $2<%108<builtinToDebugText>> with $0 ($4<%64<Core:result:mapOrElse:26:2>> is responsible)
  $6 = %107<builtinTextConcatenate>
  $7 = %136<"You called a function that expects ">
  $8 = dup $5 by 1
  $9 = call $6<%107<builtinTextConcatenate>> with $7<%136<"You called a function that expects ">> $5 ($4<%64<Core:result:mapOrElse:26:2>> is responsible)
  $10 = dup $9 by 1
  $11 = %129<" arguments with 1 arguments.">
  $12 = call $6<%107<builtinTextConcatenate>> with $9 $11<%129<" arguments with 1 arguments.">> ($4<%64<Core:result:mapOrElse:26:2>> is responsible)
  $13 = dup $12 by 1
  $14 = panicking because $12 ($4<%64<Core:result:mapOrElse:26:2>> is at fault)
  $15 = drop $12
  $16 = drop $9
  $17 = drop $5
  $18 = $14
body_53 (responsible $2) =
  # Original HIR IDs: Core:result:mapOrElse:26:2:calleeIsFunction:then
  # Captured IDs: $0, $1
  $3 = %93<builtinGetArgumentCount>
  $4 = dup $0 by 1
  $5 = %64<Core:result:mapOrElse:26:2>
  $6 = call $3<%93<builtinGetArgumentCount>> with $0 ($5<%64<Core:result:mapOrElse:26:2>> is responsible)
  $7 = %92<builtinEquals>
  $8 = dup $6 by 1
  $9 = %127<1>
  $10 = call $7<%92<builtinEquals>> with $6 $9<%127<1>> ($5<%64<Core:result:mapOrElse:26:2>> is responsible)
  $11 = dup $0 by 1
  $12 = dup $1 by 1
  $13 = { body_51 capturing $0, $1 }
  $14 = dup $6 by 1
  $15 = { body_52 capturing $6 }
  $16 = %94<builtinIfElse>
  $17 = dup $10 by 1
  $18 = dup $13 by 1
  $19 = dup $15 by 1
  $20 = call $16<%94<builtinIfElse>> with $10 $13 $15 ($5<%64<Core:result:mapOrElse:26:2>> is responsible)
  $21 = drop $15
  $22 = drop $13
  $23 = drop $10
  $24 = drop $6
  $25 = $20
body_54 (responsible $3) =
  # Original HIR IDs: Core:result:mapOrElse:26:2:calleeIsTag:else
  # Captured IDs: $0, $1, $2
  $4 = %92<builtinEquals>
  $5 = dup $2 by 1
  $6 = %113<Function>
  $7 = %64<Core:result:mapOrElse:26:2>
  $8 = call $4<%92<builtinEquals>> with $2 $6<%113<Function>> ($7<%64<Core:result:mapOrElse:26:2>> is responsible)
  $9 = dup $0 by 1
  $10 = dup $1 by 1
  $11 = { body_53 capturing $0, $1 }
  $12 = %94<builtinIfElse>
  $13 = dup $8 by 1
  $14 = dup $11 by 1
  $15 = %176<{ body_32 }>
  $16 = call $12<%94<builtinIfElse>> with $8 $11 $15<%176<{ body_32 }>> ($7<%64<Core:result:mapOrElse:26:2>> is responsible)
  $17 = drop $11
  $18 = drop $8
  $19 = $16
body_55 (responsible $2) =
  # Original HIR IDs: Core:result:mapOrElse:26:case-0:matched
  # Captured IDs: $0, $1
  $3 = %103<builtinTagGetValue>
  $4 = dup $1 by 1
  $5 = %66<Core:result:mapOrElse:26:value>
  $6 = call $3<%103<builtinTagGetValue>> with $1 ($5<%66<Core:result:mapOrElse:26:value>> is responsible)
  $7 = %99<builtinListGet>
  $8 = dup $6 by 1
  $9 = %126<0>
  $10 = call $7<%99<builtinListGet>> with $6 $9<%126<0>> ($5<%66<Core:result:mapOrElse:26:value>> is responsible)
  $11 = %109<builtinTypeOf>
  $12 = dup $0 by 1
  $13 = %64<Core:result:mapOrElse:26:2>
  $14 = call $11<%109<builtinTypeOf>> with $0 ($13<%64<Core:result:mapOrElse:26:2>> is responsible)
  $15 = %92<builtinEquals>
  $16 = dup $14 by 1
  $17 = %123<Tag>
  $18 = call $15<%92<builtinEquals>> with $14 $17<%123<Tag>> ($13<%64<Core:result:mapOrElse:26:2>> is responsible)
  $19 = dup $0 by 1
  $20 = dup $10 by 1
  $21 = { body_50 capturing $0, $10 }
  $22 = dup $0 by 1
  $23 = dup $10 by 1
  $24 = dup $14 by 1
  $25 = { body_54 capturing $0, $10, $14 }
  $26 = %94<builtinIfElse>
  $27 = dup $18 by 1
  $28 = dup $21 by 1
  $29 = dup $25 by 1
  $30 = call $26<%94<builtinIfElse>> with $18 $21 $25 ($13<%64<Core:result:mapOrElse:26:2>> is responsible)
  $31 = drop $25
  $32 = drop $21
  $33 = drop $18
  $34 = drop $14
  $35 = drop $10
  $36 = drop $6
  $37 = $30
body_56 (responsible $1) =
  # Original HIR IDs: Core:result:mapOrElse:26:equals:then
  # Captured IDs: $0
  $2 = %103<builtinTagGetValue>
  $3 = dup $0 by 1
  $4 = %63<Core:result:mapOrElse:26>
  $5 = call $2<%103<builtinTagGetValue>> with $0 ($4<%63<Core:result:mapOrElse:26>> is responsible)
  $6 = dup $5 by 1
  $7 = ($5,)
  $8 = dup $7 by 1
  $9 = Match $7
  $10 = drop $7
  $11 = drop $5
  $12 = $9
body_57 (responsible $1) =
  # Original HIR IDs: Core:result:mapOrElse:26:equals:then
  # Captured IDs: $0
  $2 = %104<builtinTagHasValue>
  $3 = dup $0 by 1
  $4 = %63<Core:result:mapOrElse:26>
  $5 = call $2<%104<builtinTagHasValue>> with $0 ($4<%63<Core:result:mapOrElse:26>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %125<True>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%125<True>> $5 ($4<%63<Core:result:mapOrElse:26>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_56 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%63<Core:result:mapOrElse:26>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_58 (responsible $1) =
  # Original HIR IDs: Core:result:mapOrElse:26:equals:then
  # Captured IDs: $0
  $2 = %106<builtinTagWithoutValue>
  $3 = dup $0 by 1
  $4 = %63<Core:result:mapOrElse:26>
  $5 = call $2<%106<builtinTagWithoutValue>> with $0 ($4<%63<Core:result:mapOrElse:26>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %111<Error>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%111<Error>> $5 ($4<%63<Core:result:mapOrElse:26>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_57 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%63<Core:result:mapOrElse:26>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_59 (responsible $2) =
  # Original HIR IDs: Core:result:mapOrElse:26:5:doesTagHaveValue:else
  # Captured IDs: $0, $1
  $3 = %105<builtinTagWithValue>
  $4 = dup $0 by 1
  $5 = dup $1 by 1
  $6 = %65<Core:result:mapOrElse:26:5>
  $7 = call $3<%105<builtinTagWithValue>> with $0 $1 ($6<%65<Core:result:mapOrElse:26:5>> is responsible)
body_60 (responsible $2) =
  # Original HIR IDs: Core:result:mapOrElse:26:5:calleeIsTag:then
  # Captured IDs: $0, $1
  $3 = %104<builtinTagHasValue>
  $4 = dup $0 by 1
  $5 = %65<Core:result:mapOrElse:26:5>
  $6 = call $3<%104<builtinTagHasValue>> with $0 ($5<%65<Core:result:mapOrElse:26:5>> is responsible)
  $7 = dup $0 by 1
  $8 = dup $1 by 1
  $9 = { body_59 capturing $0, $1 }
  $10 = %94<builtinIfElse>
  $11 = dup $6 by 1
  $12 = %177<{ body_33 }>
  $13 = dup $9 by 1
  $14 = call $10<%94<builtinIfElse>> with $6 $12<%177<{ body_33 }>> $9 ($5<%65<Core:result:mapOrElse:26:5>> is responsible)
  $15 = drop $9
  $16 = drop $6
  $17 = $14
body_61 (responsible $2) =
  # Original HIR IDs: Core:result:mapOrElse:26:5:hasCorrectNumberOfArguments:then
  # Captured IDs: $0, $1
  $3 = %65<Core:result:mapOrElse:26:5>
  $4 = dup $0 by 1
  $5 = dup $1 by 1
  $6 = trace: tail call of $0 with $1 ($3<%65<Core:result:mapOrElse:26:5>> is responsible, code is at $3<%65<Core:result:mapOrElse:26:5>>)
  $7 = dup $0 by 1
  $8 = dup $1 by 1
  $9 = call $0 with $1 ($3<%65<Core:result:mapOrElse:26:5>> is responsible)
body_62 (responsible $1) =
  # Original HIR IDs: Core:result:mapOrElse:26:5:hasCorrectNumberOfArguments:else
  # Captured IDs: $0
  $2 = %108<builtinToDebugText>
  $3 = dup $0 by 1
  $4 = %65<Core:result:mapOrElse:26:5>
  $5 = call $2<%108<builtinToDebugText>> with $0 ($4<%65<Core:result:mapOrElse:26:5>> is responsible)
  $6 = %107<builtinTextConcatenate>
  $7 = %136<"You called a function that expects ">
  $8 = dup $5 by 1
  $9 = call $6<%107<builtinTextConcatenate>> with $7<%136<"You called a function that expects ">> $5 ($4<%65<Core:result:mapOrElse:26:5>> is responsible)
  $10 = dup $9 by 1
  $11 = %129<" arguments with 1 arguments.">
  $12 = call $6<%107<builtinTextConcatenate>> with $9 $11<%129<" arguments with 1 arguments.">> ($4<%65<Core:result:mapOrElse:26:5>> is responsible)
  $13 = dup $12 by 1
  $14 = panicking because $12 ($4<%65<Core:result:mapOrElse:26:5>> is at fault)
  $15 = drop $12
  $16 = drop $9
  $17 = drop $5
  $18 = $14
body_63 (responsible $2) =
  # Original HIR IDs: Core:result:mapOrElse:26:5:calleeIsFunction:then
  # Captured IDs: $0, $1
  $3 = %93<builtinGetArgumentCount>
  $4 = dup $0 by 1
  $5 = %65<Core:result:mapOrElse:26:5>
  $6 = call $3<%93<builtinGetArgumentCount>> with $0 ($5<%65<Core:result:mapOrElse:26:5>> is responsible)
  $7 = %92<builtinEquals>
  $8 = dup $6 by 1
  $9 = %127<1>
  $10 = call $7<%92<builtinEquals>> with $6 $9<%127<1>> ($5<%65<Core:result:mapOrElse:26:5>> is responsible)
  $11 = dup $0 by 1
  $12 = dup $1 by 1
  $13 = { body_61 capturing $0, $1 }
  $14 = dup $6 by 1
  $15 = { body_62 capturing $6 }
  $16 = %94<builtinIfElse>
  $17 = dup $10 by 1
  $18 = dup $13 by 1
  $19 = dup $15 by 1
  $20 = call $16<%94<builtinIfElse>> with $10 $13 $15 ($5<%65<Core:result:mapOrElse:26:5>> is responsible)
  $21 = drop $15
  $22 = drop $13
  $23 = drop $10
  $24 = drop $6
  $25 = $20
body_64 (responsible $3) =
  # Original HIR IDs: Core:result:mapOrElse:26:5:calleeIsTag:else
  # Captured IDs: $0, $1, $2
  $4 = %92<builtinEquals>
  $5 = dup $2 by 1
  $6 = %113<Function>
  $7 = %65<Core:result:mapOrElse:26:5>
  $8 = call $4<%92<builtinEquals>> with $2 $6<%113<Function>> ($7<%65<Core:result:mapOrElse:26:5>> is responsible)
  $9 = dup $0 by 1
  $10 = dup $1 by 1
  $11 = { body_63 capturing $0, $1 }
  $12 = %94<builtinIfElse>
  $13 = dup $8 by 1
  $14 = dup $11 by 1
  $15 = %178<{ body_34 }>
  $16 = call $12<%94<builtinIfElse>> with $8 $11 $15<%178<{ body_34 }>> ($7<%65<Core:result:mapOrElse:26:5>> is responsible)
  $17 = drop $11
  $18 = drop $8
  $19 = $16
body_65 (responsible $2) =
  # Original HIR IDs: Core:result:mapOrElse:26:case-1:matched
  # Captured IDs: $0, $1
  $3 = %103<builtinTagGetValue>
  $4 = dup $1 by 1
  $5 = %67<Core:result:mapOrElse:26:value#1>
  $6 = call $3<%103<builtinTagGetValue>> with $1 ($5<%67<Core:result:mapOrElse:26:value#1>> is responsible)
  $7 = %99<builtinListGet>
  $8 = dup $6 by 1
  $9 = %126<0>
  $10 = call $7<%99<builtinListGet>> with $6 $9<%126<0>> ($5<%67<Core:result:mapOrElse:26:value#1>> is responsible)
  $11 = %109<builtinTypeOf>
  $12 = dup $0 by 1
  $13 = %65<Core:result:mapOrElse:26:5>
  $14 = call $11<%109<builtinTypeOf>> with $0 ($13<%65<Core:result:mapOrElse:26:5>> is responsible)
  $15 = %92<builtinEquals>
  $16 = dup $14 by 1
  $17 = %123<Tag>
  $18 = call $15<%92<builtinEquals>> with $14 $17<%123<Tag>> ($13<%65<Core:result:mapOrElse:26:5>> is responsible)
  $19 = dup $0 by 1
  $20 = dup $10 by 1
  $21 = { body_60 capturing $0, $10 }
  $22 = dup $0 by 1
  $23 = dup $10 by 1
  $24 = dup $14 by 1
  $25 = { body_64 capturing $0, $10, $14 }
  $26 = %94<builtinIfElse>
  $27 = dup $18 by 1
  $28 = dup $21 by 1
  $29 = dup $25 by 1
  $30 = call $26<%94<builtinIfElse>> with $18 $21 $25 ($13<%65<Core:result:mapOrElse:26:5>> is responsible)
  $31 = drop $25
  $32 = drop $21
  $33 = drop $18
  $34 = drop $14
  $35 = drop $10
  $36 = drop $6
  $37 = $30
body_66 (responsible $2) =
  # Original HIR IDs: Core:result:mapOrElse:26:case-0:didNotMatch
  # Captured IDs: $0, $1
  $3 = %109<builtinTypeOf>
  $4 = dup $0 by 1
  $5 = %63<Core:result:mapOrElse:26>
  $6 = call $3<%109<builtinTypeOf>> with $0 ($5<%63<Core:result:mapOrElse:26>> is responsible)
  $7 = %92<builtinEquals>
  $8 = %123<Tag>
  $9 = dup $6 by 1
  $10 = call $7<%92<builtinEquals>> with $8<%123<Tag>> $6 ($5<%63<Core:result:mapOrElse:26>> is responsible)
  $11 = dup $0 by 1
  $12 = { body_58 capturing $0 }
  $13 = %94<builtinIfElse>
  $14 = dup $10 by 1
  $15 = dup $12 by 1
  $16 = %163<{ body_8 }>
  $17 = call $13<%94<builtinIfElse>> with $10 $12 $16<%163<{ body_8 }>> ($5<%63<Core:result:mapOrElse:26>> is responsible)
  $18 = %106<builtinTagWithoutValue>
  $19 = dup $17 by 1
  $20 = call $18<%106<builtinTagWithoutValue>> with $17 ($5<%63<Core:result:mapOrElse:26>> is responsible)
  $21 = dup $20 by 1
  $22 = %117<Match>
  $23 = call $7<%92<builtinEquals>> with $20 $22<%117<Match>> ($5<%63<Core:result:mapOrElse:26>> is responsible)
  $24 = dup $1 by 1
  $25 = dup $17 by 1
  $26 = { body_65 capturing $1, $17 }
  $27 = dup $23 by 1
  $28 = dup $26 by 1
  $29 = %179<{ body_35 }>
  $30 = call $13<%94<builtinIfElse>> with $23 $26 $29<%179<{ body_35 }>> ($5<%63<Core:result:mapOrElse:26>> is responsible)
  $31 = drop $26
  $32 = drop $23
  $33 = drop $20
  $34 = drop $17
  $35 = drop $12
  $36 = drop $10
  $37 = drop $6
  $38 = $30
body_67 $0 $1 $2 (+ responsible $3) =
  # Original HIR IDs: Core:result:mapOrElse
  # Captured IDs: none
  $4 = %60<Core:result:mapOrElse:2>
  $5 = %174<{ body_30 }>
  $6 = dup $0 by 1
  $7 = trace: start of call of $5<%174<{ body_30 }>> with $0 ($4<%60<Core:result:mapOrElse:2>> is responsible, code is at $4<%60<Core:result:mapOrElse:2>>)
  $8 = %109<builtinTypeOf>
  $9 = dup $0 by 1
  $10 = %46<Core:result:is:1>
  $11 = call $8<%109<builtinTypeOf>> with $0 ($10<%46<Core:result:is:1>> is responsible)
  $12 = %92<builtinEquals>
  $13 = %123<Tag>
  $14 = dup $11 by 1
  $15 = call $12<%92<builtinEquals>> with $13<%123<Tag>> $11 ($10<%46<Core:result:is:1>> is responsible)
  $16 = dup $0 by 1
  $17 = { body_38 capturing $0 }
  $18 = %94<builtinIfElse>
  $19 = dup $15 by 1
  $20 = dup $17 by 1
  $21 = %163<{ body_8 }>
  $22 = call $18<%94<builtinIfElse>> with $15 $17 $21<%163<{ body_8 }>> ($10<%46<Core:result:is:1>> is responsible)
  $23 = %106<builtinTagWithoutValue>
  $24 = dup $22 by 1
  $25 = call $23<%106<builtinTagWithoutValue>> with $22 ($10<%46<Core:result:is:1>> is responsible)
  $26 = dup $25 by 1
  $27 = %117<Match>
  $28 = call $12<%92<builtinEquals>> with $25 $27<%117<Match>> ($10<%46<Core:result:is:1>> is responsible)
  $29 = dup $22 by 1
  $30 = { body_39 capturing $22 }
  $31 = dup $0 by 1
  $32 = { body_43 capturing $0 }
  $33 = dup $28 by 1
  $34 = dup $30 by 1
  $35 = dup $32 by 1
  $36 = call $18<%94<builtinIfElse>> with $28 $30 $32 ($10<%46<Core:result:is:1>> is responsible)
  $37 = dup $36 by 1
  $38 = call $23<%106<builtinTagWithoutValue>> with $36 ($10<%46<Core:result:is:1>> is responsible)
  $39 = dup $38 by 1
  $40 = call $12<%92<builtinEquals>> with $38 $27<%117<Match>> ($10<%46<Core:result:is:1>> is responsible)
  $41 = dup $40 by 1
  $42 = %157<{ body_0 }>
  $43 = %164<{ body_9 }>
  $44 = call $18<%94<builtinIfElse>> with $40 $42<%157<{ body_0 }>> $43<%164<{ body_9 }>> ($10<%46<Core:result:is:1>> is responsible)
  $45 = trace: end of call
  $46 = %68<Core:result:mapOrElse:4>
  $47 = %159<{ body_6 }>
  $48 = dup $44 by 1
  $49 = %147<"`is result` was not satisfied">
  $50 = dup $3 by 1
  $51 = trace: start of call of $47<%159<{ body_6 }>> with $44 $49<%147<"`is result` was not satisfied">> $3 ($46<%68<Core:result:mapOrElse:4>> is responsible, code is at $46<%68<Core:result:mapOrElse:4>>)
  $52 = dup $44 by 1
  $53 = dup $3 by 1
  $54 = call $47<%159<{ body_6 }>> with $44 $49<%147<"`is result` was not satisfied">> $3 ($46<%68<Core:result:mapOrElse:4>> is responsible)
  $55 = trace: end of call
  $56 = %58<Core:result:mapOrElse:12>
  $57 = %173<{ body_21 }>
  $58 = dup $1 by 1
  $59 = trace: start of call of $57<%173<{ body_21 }>> with $1 ($56<%58<Core:result:mapOrElse:12>> is responsible, code is at $56<%58<Core:result:mapOrElse:12>>)
  $60 = dup $1 by 1
  $61 = %34<Builtins::typeOf:5>
  $62 = call $8<%109<builtinTypeOf>> with $1 ($61<%34<Builtins::typeOf:5>> is responsible)
  $63 = dup $62 by 1
  $64 = %113<Function>
  $65 = %0<Builtins::equals:6>
  $66 = call $12<%92<builtinEquals>> with $62 $64<%113<Function>> ($65<%0<Builtins::equals:6>> is responsible)
  $67 = dup $1 by 1
  $68 = { body_44 capturing $1 }
  $69 = %35<Core:function:is1:11>
  $70 = %166<{ body_13 }>
  $71 = dup $66 by 1
  $72 = dup $68 by 1
  $73 = trace: start of call of $70<%166<{ body_13 }>> with $66 $68 $43<%164<{ body_9 }>> ($69<%35<Core:function:is1:11>> is responsible, code is at $69<%35<Core:function:is1:11>>)
  $74 = dup $66 by 1
  $75 = dup $68 by 1
  $76 = call $70<%166<{ body_13 }>> with $66 $68 $43<%164<{ body_9 }>> ($69<%35<Core:function:is1:11>> is responsible)
  $77 = trace: end of call
  $78 = trace: end of call
  $79 = %59<Core:result:mapOrElse:14>
  $80 = dup $76 by 1
  $81 = %146<"`function.is1 okMapper` was not satisfied">
  $82 = dup $3 by 1
  $83 = trace: start of call of $47<%159<{ body_6 }>> with $76 $81<%146<"`function.is1 okMapper` was not satisfied">> $3 ($79<%59<Core:result:mapOrElse:14>> is responsible, code is at $79<%59<Core:result:mapOrElse:14>>)
  $84 = dup $76 by 1
  $85 = dup $3 by 1
  $86 = call $47<%159<{ body_6 }>> with $76 $81<%146<"`function.is1 okMapper` was not satisfied">> $3 ($79<%59<Core:result:mapOrElse:14>> is responsible)
  $87 = trace: end of call
  $88 = %61<Core:result:mapOrElse:22>
  $89 = dup $2 by 1
  $90 = trace: start of call of $57<%173<{ body_21 }>> with $2 ($88<%61<Core:result:mapOrElse:22>> is responsible, code is at $88<%61<Core:result:mapOrElse:22>>)
  $91 = dup $2 by 1
  $92 = call $8<%109<builtinTypeOf>> with $2 ($61<%34<Builtins::typeOf:5>> is responsible)
  $93 = dup $92 by 1
  $94 = call $12<%92<builtinEquals>> with $92 $64<%113<Function>> ($65<%0<Builtins::equals:6>> is responsible)
  $95 = dup $2 by 1
  $96 = { body_45 capturing $2 }
  $97 = dup $94 by 1
  $98 = dup $96 by 1
  $99 = trace: start of call of $70<%166<{ body_13 }>> with $94 $96 $43<%164<{ body_9 }>> ($69<%35<Core:function:is1:11>> is responsible, code is at $69<%35<Core:function:is1:11>>)
  $100 = dup $94 by 1
  $101 = dup $96 by 1
  $102 = call $70<%166<{ body_13 }>> with $94 $96 $43<%164<{ body_9 }>> ($69<%35<Core:function:is1:11>> is responsible)
  $103 = trace: end of call
  $104 = trace: end of call
  $105 = %62<Core:result:mapOrElse:24>
  $106 = dup $102 by 1
  $107 = %145<"`function.is1 errorMapper` was not satisfied">
  $108 = dup $3 by 1
  $109 = trace: start of call of $47<%159<{ body_6 }>> with $102 $107<%145<"`function.is1 errorMapper` was not satisfied">> $3 ($105<%62<Core:result:mapOrElse:24>> is responsible, code is at $105<%62<Core:result:mapOrElse:24>>)
  $110 = dup $102 by 1
  $111 = dup $3 by 1
  $112 = call $47<%159<{ body_6 }>> with $102 $107<%145<"`function.is1 errorMapper` was not satisfied">> $3 ($105<%62<Core:result:mapOrElse:24>> is responsible)
  $113 = trace: end of call
  $114 = dup $0 by 1
  $115 = %63<Core:result:mapOrElse:26>
  $116 = call $8<%109<builtinTypeOf>> with $0 ($115<%63<Core:result:mapOrElse:26>> is responsible)
  $117 = dup $116 by 1
  $118 = call $12<%92<builtinEquals>> with $13<%123<Tag>> $116 ($115<%63<Core:result:mapOrElse:26>> is responsible)
  $119 = dup $0 by 1
  $120 = { body_48 capturing $0 }
  $121 = dup $118 by 1
  $122 = dup $120 by 1
  $123 = call $18<%94<builtinIfElse>> with $118 $120 $21<%163<{ body_8 }>> ($115<%63<Core:result:mapOrElse:26>> is responsible)
  $124 = dup $123 by 1
  $125 = call $23<%106<builtinTagWithoutValue>> with $123 ($115<%63<Core:result:mapOrElse:26>> is responsible)
  $126 = dup $125 by 1
  $127 = call $12<%92<builtinEquals>> with $125 $27<%117<Match>> ($115<%63<Core:result:mapOrElse:26>> is responsible)
  $128 = dup $1 by 1
  $129 = dup $123 by 1
  $130 = { body_55 capturing $1, $123 }
  $131 = dup $0 by 1
  $132 = dup $2 by 1
  $133 = { body_66 capturing $0, $2 }
  $134 = dup $127 by 1
  $135 = dup $130 by 1
  $136 = dup $133 by 1
  $137 = call $18<%94<builtinIfElse>> with $127 $130 $133 ($115<%63<Core:result:mapOrElse:26>> is responsible)
  $138 = drop $133
  $139 = drop $130
  $140 = drop $127
  $141 = drop $125
  $142 = drop $123
  $143 = drop $120
  $144 = drop $118
  $145 = drop $116
  $146 = drop $112
  $147 = drop $102
  $148 = drop $96
  $149 = drop $94
  $150 = drop $92
  $151 = drop $86
  $152 = drop $76
  $153 = drop $68
  $154 = drop $66
  $155 = drop $62
  $156 = drop $54
  $157 = drop $44
  $158 = drop $40
  $159 = drop $38
  $160 = drop $36
  $161 = drop $32
  $162 = drop $30
  $163 = drop $28
  $164 = drop $25
  $165 = drop $22
  $166 = drop $17
  $167 = drop $15
  $168 = drop $11
  $169 = drop $2
  $170 = drop $1
  $171 = drop $0
  $172 = $137
body_68 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %103<builtinTagGetValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%103<builtinTagGetValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = dup $5 by 1
  $7 = ($5,)
  $8 = dup $7 by 1
  $9 = Match $7
  $10 = drop $7
  $11 = drop $5
  $12 = $9
body_69 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %104<builtinTagHasValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%104<builtinTagHasValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %125<True>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%125<True>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_68 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_70 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %106<builtinTagWithoutValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%106<builtinTagWithoutValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %120<Ok>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%120<Ok>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_69 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_71 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:isMatch:then
  # Captured IDs: $0
  $2 = dup $0 by 1
  $3 = $0
body_72 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %103<builtinTagGetValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%103<builtinTagGetValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = dup $5 by 1
  $7 = ($5,)
  $8 = dup $7 by 1
  $9 = Match $7
  $10 = drop $7
  $11 = drop $5
  $12 = $9
body_73 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %104<builtinTagHasValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%104<builtinTagHasValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %125<True>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%125<True>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_72 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_74 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %106<builtinTagWithoutValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%106<builtinTagWithoutValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %111<Error>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%111<Error>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_73 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_75 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:isMatch:else
  # Captured IDs: $0
  $2 = %109<builtinTypeOf>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%109<builtinTypeOf>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %123<Tag>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%123<Tag>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_74 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_76 $0 (+ responsible $1) =
  # Original HIR IDs: Core:result:getValue
  # Captured IDs: none
  $2 = %44<Core:result:getValue:2>
  $3 = %174<{ body_30 }>
  $4 = dup $0 by 1
  $5 = trace: start of call of $3<%174<{ body_30 }>> with $0 ($2<%44<Core:result:getValue:2>> is responsible, code is at $2<%44<Core:result:getValue:2>>)
  $6 = %109<builtinTypeOf>
  $7 = dup $0 by 1
  $8 = %46<Core:result:is:1>
  $9 = call $6<%109<builtinTypeOf>> with $0 ($8<%46<Core:result:is:1>> is responsible)
  $10 = %92<builtinEquals>
  $11 = %123<Tag>
  $12 = dup $9 by 1
  $13 = call $10<%92<builtinEquals>> with $11<%123<Tag>> $9 ($8<%46<Core:result:is:1>> is responsible)
  $14 = dup $0 by 1
  $15 = { body_70 capturing $0 }
  $16 = %94<builtinIfElse>
  $17 = dup $13 by 1
  $18 = dup $15 by 1
  $19 = %163<{ body_8 }>
  $20 = call $16<%94<builtinIfElse>> with $13 $15 $19<%163<{ body_8 }>> ($8<%46<Core:result:is:1>> is responsible)
  $21 = %106<builtinTagWithoutValue>
  $22 = dup $20 by 1
  $23 = call $21<%106<builtinTagWithoutValue>> with $20 ($8<%46<Core:result:is:1>> is responsible)
  $24 = dup $23 by 1
  $25 = %117<Match>
  $26 = call $10<%92<builtinEquals>> with $23 $25<%117<Match>> ($8<%46<Core:result:is:1>> is responsible)
  $27 = dup $20 by 1
  $28 = { body_71 capturing $20 }
  $29 = dup $0 by 1
  $30 = { body_75 capturing $0 }
  $31 = dup $26 by 1
  $32 = dup $28 by 1
  $33 = dup $30 by 1
  $34 = call $16<%94<builtinIfElse>> with $26 $28 $30 ($8<%46<Core:result:is:1>> is responsible)
  $35 = dup $34 by 1
  $36 = call $21<%106<builtinTagWithoutValue>> with $34 ($8<%46<Core:result:is:1>> is responsible)
  $37 = dup $36 by 1
  $38 = call $10<%92<builtinEquals>> with $36 $25<%117<Match>> ($8<%46<Core:result:is:1>> is responsible)
  $39 = dup $38 by 1
  $40 = %157<{ body_0 }>
  $41 = %164<{ body_9 }>
  $42 = call $16<%94<builtinIfElse>> with $38 $40<%157<{ body_0 }>> $41<%164<{ body_9 }>> ($8<%46<Core:result:is:1>> is responsible)
  $43 = trace: end of call
  $44 = %45<Core:result:getValue:4>
  $45 = %159<{ body_6 }>
  $46 = dup $42 by 1
  $47 = %147<"`is result` was not satisfied">
  $48 = dup $1 by 1
  $49 = trace: start of call of $45<%159<{ body_6 }>> with $42 $47<%147<"`is result` was not satisfied">> $1 ($44<%45<Core:result:getValue:4>> is responsible, code is at $44<%45<Core:result:getValue:4>>)
  $50 = dup $42 by 1
  $51 = dup $1 by 1
  $52 = call $45<%159<{ body_6 }>> with $42 $47<%147<"`is result` was not satisfied">> $1 ($44<%45<Core:result:getValue:4>> is responsible)
  $53 = trace: end of call
  $54 = %43<Core:result:getValue:12>
  $55 = %172<{ body_19 }>
  $56 = dup $0 by 1
  $57 = trace: tail call of $55<%172<{ body_19 }>> with $0 ($54<%43<Core:result:getValue:12>> is responsible, code is at $54<%43<Core:result:getValue:12>>)
  $58 = dup $0 by 1
  $59 = %32<Builtins::typeIs:19>
  $60 = call $6<%109<builtinTypeOf>> with $0 ($59<%32<Builtins::typeIs:19>> is responsible)
  $61 = dup $60 by 1
  $62 = %33<Builtins::typeIs:25>
  $63 = call $10<%92<builtinEquals>> with $60 $11<%123<Tag>> ($62<%33<Builtins::typeIs:25>> is responsible)
  $64 = %30<Builtins::tagGetValue:5>
  $65 = dup $63 by 1
  $66 = %152<"`tag | typeIs Tag` was not satisfied">
  $67 = trace: start of call of $45<%159<{ body_6 }>> with $63 $66<%152<"`tag | typeIs Tag` was not satisfied">> $54<%43<Core:result:getValue:12>> ($64<%30<Builtins::tagGetValue:5>> is responsible, code is at $64<%30<Builtins::tagGetValue:5>>)
  $68 = dup $63 by 1
  $69 = call $45<%159<{ body_6 }>> with $63 $66<%152<"`tag | typeIs Tag` was not satisfied">> $54<%43<Core:result:getValue:12>> ($64<%30<Builtins::tagGetValue:5>> is responsible)
  $70 = trace: end of call
  $71 = %104<builtinTagHasValue>
  $72 = dup $0 by 1
  $73 = %27<Builtins::tagGetValue:11>
  $74 = call $71<%104<builtinTagHasValue>> with $0 ($73<%27<Builtins::tagGetValue:11>> is responsible)
  $75 = %28<Builtins::tagGetValue:13>
  $76 = dup $74 by 1
  $77 = %153<"`tag | ✨.tagHasValue` was not satisfied">
  $78 = trace: start of call of $45<%159<{ body_6 }>> with $74 $77<%153<"`tag | ✨.tagHasValue` was not satisfied">> $54<%43<Core:result:getValue:12>> ($75<%28<Builtins::tagGetValue:13>> is responsible, code is at $75<%28<Builtins::tagGetValue:13>>)
  $79 = dup $74 by 1
  $80 = call $45<%159<{ body_6 }>> with $74 $77<%153<"`tag | ✨.tagHasValue` was not satisfied">> $54<%43<Core:result:getValue:12>> ($75<%28<Builtins::tagGetValue:13>> is responsible)
  $81 = trace: end of call
  $82 = %103<builtinTagGetValue>
  $83 = dup $0 by 1
  $84 = %29<Builtins::tagGetValue:19>
  $85 = call $82<%103<builtinTagGetValue>> with $0 ($84<%29<Builtins::tagGetValue:19>> is responsible)
  $86 = drop $80
  $87 = drop $74
  $88 = drop $69
  $89 = drop $63
  $90 = drop $60
  $91 = drop $52
  $92 = drop $42
  $93 = drop $38
  $94 = drop $36
  $95 = drop $34
  $96 = drop $30
  $97 = drop $28
  $98 = drop $26
  $99 = drop $23
  $100 = drop $20
  $101 = drop $15
  $102 = drop $13
  $103 = drop $9
  $104 = drop $0
  $105 = $85
body_77 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %103<builtinTagGetValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%103<builtinTagGetValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = dup $5 by 1
  $7 = ($5,)
  $8 = dup $7 by 1
  $9 = Match $7
  $10 = drop $7
  $11 = drop $5
  $12 = $9
body_78 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %104<builtinTagHasValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%104<builtinTagHasValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %125<True>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%125<True>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_77 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_79 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %106<builtinTagWithoutValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%106<builtinTagWithoutValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %120<Ok>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%120<Ok>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_78 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_80 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:isMatch:then
  # Captured IDs: $0
  $2 = dup $0 by 1
  $3 = $0
body_81 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %103<builtinTagGetValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%103<builtinTagGetValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = dup $5 by 1
  $7 = ($5,)
  $8 = dup $7 by 1
  $9 = Match $7
  $10 = drop $7
  $11 = drop $5
  $12 = $9
body_82 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %104<builtinTagHasValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%104<builtinTagHasValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %125<True>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%125<True>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_81 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_83 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %106<builtinTagWithoutValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%106<builtinTagWithoutValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %111<Error>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%111<Error>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_82 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_84 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:isMatch:else
  # Captured IDs: $0
  $2 = %109<builtinTypeOf>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%109<builtinTypeOf>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %123<Tag>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%123<Tag>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_83 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_85 (responsible $1) =
  # Original HIR IDs: Core:function:is1:9
  # Captured IDs: $0
  $2 = %36<Core:function:is1:9:3>
  $3 = %165<{ body_10 }>
  $4 = dup $0 by 1
  $5 = trace: start of call of $3<%165<{ body_10 }>> with $0 ($2<%36<Core:function:is1:9:3>> is responsible, code is at $2<%36<Core:function:is1:9:3>>)
  $6 = %109<builtinTypeOf>
  $7 = dup $0 by 1
  $8 = %32<Builtins::typeIs:19>
  $9 = call $6<%109<builtinTypeOf>> with $0 ($8<%32<Builtins::typeIs:19>> is responsible)
  $10 = %92<builtinEquals>
  $11 = dup $9 by 1
  $12 = %113<Function>
  $13 = %33<Builtins::typeIs:25>
  $14 = call $10<%92<builtinEquals>> with $9 $12<%113<Function>> ($13<%33<Builtins::typeIs:25>> is responsible)
  $15 = %2<Builtins::getArgumentCount:5>
  $16 = %159<{ body_6 }>
  $17 = dup $14 by 1
  $18 = %144<"`function | typeIs Function` was not satisfied">
  $19 = trace: start of call of $16<%159<{ body_6 }>> with $14 $18<%144<"`function | typeIs Function` was not satisfied">> $2<%36<Core:function:is1:9:3>> ($15<%2<Builtins::getArgumentCount:5>> is responsible, code is at $15<%2<Builtins::getArgumentCount:5>>)
  $20 = dup $14 by 1
  $21 = call $16<%159<{ body_6 }>> with $14 $18<%144<"`function | typeIs Function` was not satisfied">> $2<%36<Core:function:is1:9:3>> ($15<%2<Builtins::getArgumentCount:5>> is responsible)
  $22 = trace: end of call
  $23 = %93<builtinGetArgumentCount>
  $24 = dup $0 by 1
  $25 = %1<Builtins::getArgumentCount:11>
  $26 = call $23<%93<builtinGetArgumentCount>> with $0 ($25<%1<Builtins::getArgumentCount:11>> is responsible)
  $27 = trace: end of call
  $28 = dup $26 by 1
  $29 = %127<1>
  $30 = %0<Builtins::equals:6>
  $31 = call $10<%92<builtinEquals>> with $26 $29<%127<1>> ($30<%0<Builtins::equals:6>> is responsible)
  $32 = drop $26
  $33 = drop $21
  $34 = drop $14
  $35 = drop $9
  $36 = $31
body_86 $1 (+ responsible $2) =
  # Original HIR IDs: Core:result:mapOr:18
  # Captured IDs: $0
  $3 = dup $0 by 1
  $4 = $0
  $5 = drop $1
  $6 = $4
body_87 $0 $1 $2 (+ responsible $3) =
  # Original HIR IDs: Core:result:mapOr
  # Captured IDs: none
  $4 = %56<Core:result:mapOr:2>
  $5 = %174<{ body_30 }>
  $6 = dup $0 by 1
  $7 = trace: start of call of $5<%174<{ body_30 }>> with $0 ($4<%56<Core:result:mapOr:2>> is responsible, code is at $4<%56<Core:result:mapOr:2>>)
  $8 = %109<builtinTypeOf>
  $9 = dup $0 by 1
  $10 = %46<Core:result:is:1>
  $11 = call $8<%109<builtinTypeOf>> with $0 ($10<%46<Core:result:is:1>> is responsible)
  $12 = %92<builtinEquals>
  $13 = %123<Tag>
  $14 = dup $11 by 1
  $15 = call $12<%92<builtinEquals>> with $13<%123<Tag>> $11 ($10<%46<Core:result:is:1>> is responsible)
  $16 = dup $0 by 1
  $17 = { body_79 capturing $0 }
  $18 = %94<builtinIfElse>
  $19 = dup $15 by 1
  $20 = dup $17 by 1
  $21 = %163<{ body_8 }>
  $22 = call $18<%94<builtinIfElse>> with $15 $17 $21<%163<{ body_8 }>> ($10<%46<Core:result:is:1>> is responsible)
  $23 = %106<builtinTagWithoutValue>
  $24 = dup $22 by 1
  $25 = call $23<%106<builtinTagWithoutValue>> with $22 ($10<%46<Core:result:is:1>> is responsible)
  $26 = dup $25 by 1
  $27 = %117<Match>
  $28 = call $12<%92<builtinEquals>> with $25 $27<%117<Match>> ($10<%46<Core:result:is:1>> is responsible)
  $29 = dup $22 by 1
  $30 = { body_80 capturing $22 }
  $31 = dup $0 by 1
  $32 = { body_84 capturing $0 }
  $33 = dup $28 by 1
  $34 = dup $30 by 1
  $35 = dup $32 by 1
  $36 = call $18<%94<builtinIfElse>> with $28 $30 $32 ($10<%46<Core:result:is:1>> is responsible)
  $37 = dup $36 by 1
  $38 = call $23<%106<builtinTagWithoutValue>> with $36 ($10<%46<Core:result:is:1>> is responsible)
  $39 = dup $38 by 1
  $40 = call $12<%92<builtinEquals>> with $38 $27<%117<Match>> ($10<%46<Core:result:is:1>> is responsible)
  $41 = dup $40 by 1
  $42 = %157<{ body_0 }>
  $43 = %164<{ body_9 }>
  $44 = call $18<%94<builtinIfElse>> with $40 $42<%157<{ body_0 }>> $43<%164<{ body_9 }>> ($10<%46<Core:result:is:1>> is responsible)
  $45 = trace: end of call
  $46 = %57<Core:result:mapOr:4>
  $47 = %159<{ body_6 }>
  $48 = dup $44 by 1
  $49 = %147<"`is result` was not satisfied">
  $50 = dup $3 by 1
  $51 = trace: start of call of $47<%159<{ body_6 }>> with $44 $49<%147<"`is result` was not satisfied">> $3 ($46<%57<Core:result:mapOr:4>> is responsible, code is at $46<%57<Core:result:mapOr:4>>)
  $52 = dup $44 by 1
  $53 = dup $3 by 1
  $54 = call $47<%159<{ body_6 }>> with $44 $49<%147<"`is result` was not satisfied">> $3 ($46<%57<Core:result:mapOr:4>> is responsible)
  $55 = trace: end of call
  $56 = %53<Core:result:mapOr:12>
  $57 = %173<{ body_21 }>
  $58 = dup $1 by 1
  $59 = trace: start of call of $57<%173<{ body_21 }>> with $1 ($56<%53<Core:result:mapOr:12>> is responsible, code is at $56<%53<Core:result:mapOr:12>>)
  $60 = dup $1 by 1
  $61 = %34<Builtins::typeOf:5>
  $62 = call $8<%109<builtinTypeOf>> with $1 ($61<%34<Builtins::typeOf:5>> is responsible)
  $63 = dup $62 by 1
  $64 = %113<Function>
  $65 = %0<Builtins::equals:6>
  $66 = call $12<%92<builtinEquals>> with $62 $64<%113<Function>> ($65<%0<Builtins::equals:6>> is responsible)
  $67 = dup $1 by 1
  $68 = { body_85 capturing $1 }
  $69 = %35<Core:function:is1:11>
  $70 = %166<{ body_13 }>
  $71 = dup $66 by 1
  $72 = dup $68 by 1
  $73 = trace: start of call of $70<%166<{ body_13 }>> with $66 $68 $43<%164<{ body_9 }>> ($69<%35<Core:function:is1:11>> is responsible, code is at $69<%35<Core:function:is1:11>>)
  $74 = dup $66 by 1
  $75 = dup $68 by 1
  $76 = call $70<%166<{ body_13 }>> with $66 $68 $43<%164<{ body_9 }>> ($69<%35<Core:function:is1:11>> is responsible)
  $77 = trace: end of call
  $78 = trace: end of call
  $79 = %54<Core:result:mapOr:14>
  $80 = dup $76 by 1
  $81 = %146<"`function.is1 okMapper` was not satisfied">
  $82 = dup $3 by 1
  $83 = trace: start of call of $47<%159<{ body_6 }>> with $76 $81<%146<"`function.is1 okMapper` was not satisfied">> $3 ($79<%54<Core:result:mapOr:14>> is responsible, code is at $79<%54<Core:result:mapOr:14>>)
  $84 = dup $76 by 1
  $85 = dup $3 by 1
  $86 = call $47<%159<{ body_6 }>> with $76 $81<%146<"`function.is1 okMapper` was not satisfied">> $3 ($79<%54<Core:result:mapOr:14>> is responsible)
  $87 = trace: end of call
  $88 = dup $2 by 1
  $89 = { body_86 capturing $2 }
  $90 = %55<Core:result:mapOr:19>
  $91 = %180<{ body_67 }>
  $92 = dup $0 by 1
  $93 = dup $1 by 1
  $94 = dup $89 by 1
  $95 = trace: tail call of $91<%180<{ body_67 }>> with $0 $1 $89 ($90<%55<Core:result:mapOr:19>> is responsible, code is at $90<%55<Core:result:mapOr:19>>)
  $96 = dup $0 by 1
  $97 = dup $1 by 1
  $98 = dup $89 by 1
  $99 = call $91<%180<{ body_67 }>> with $0 $1 $89 ($90<%55<Core:result:mapOr:19>> is responsible)
  $100 = drop $89
  $101 = drop $86
  $102 = drop $76
  $103 = drop $68
  $104 = drop $66
  $105 = drop $62
  $106 = drop $54
  $107 = drop $44
  $108 = drop $40
  $109 = drop $38
  $110 = drop $36
  $111 = drop $32
  $112 = drop $30
  $113 = drop $28
  $114 = drop $25
  $115 = drop $22
  $116 = drop $17
  $117 = drop $15
  $118 = drop $11
  $119 = drop $2
  $120 = drop $1
  $121 = drop $0
  $122 = $99
body_88 (responsible $0) =
  # Original HIR IDs: Core:result:flatMap:17:2:doesTagHaveValue:then
  # Captured IDs: none
  $1 = %137<"You called a tag that already has a value.">
  $2 = %39<Core:result:flatMap:17:2>
  $3 = panicking because $1<%137<"You called a tag that already has a value.">> ($2<%39<Core:result:flatMap:17:2>> is at fault)
body_89 (responsible $0) =
  # Original HIR IDs: Core:result:flatMap:17:2:calleeIsFunction:else
  # Captured IDs: none
  $1 = %138<"You can only call tags or functions.">
  $2 = %39<Core:result:flatMap:17:2>
  $3 = panicking because $1<%138<"You can only call tags or functions.">> ($2<%39<Core:result:flatMap:17:2>> is at fault)
body_90 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %103<builtinTagGetValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%103<builtinTagGetValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = dup $5 by 1
  $7 = ($5,)
  $8 = dup $7 by 1
  $9 = Match $7
  $10 = drop $7
  $11 = drop $5
  $12 = $9
body_91 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %104<builtinTagHasValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%104<builtinTagHasValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %125<True>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%125<True>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_90 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_92 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %106<builtinTagWithoutValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%106<builtinTagWithoutValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %120<Ok>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%120<Ok>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_91 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_93 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:isMatch:then
  # Captured IDs: $0
  $2 = dup $0 by 1
  $3 = $0
body_94 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %103<builtinTagGetValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%103<builtinTagGetValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = dup $5 by 1
  $7 = ($5,)
  $8 = dup $7 by 1
  $9 = Match $7
  $10 = drop $7
  $11 = drop $5
  $12 = $9
body_95 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %104<builtinTagHasValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%104<builtinTagHasValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %125<True>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%125<True>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_94 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_96 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %106<builtinTagWithoutValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%106<builtinTagWithoutValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %111<Error>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%111<Error>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_95 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_97 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:isMatch:else
  # Captured IDs: $0
  $2 = %109<builtinTypeOf>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%109<builtinTypeOf>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %123<Tag>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%123<Tag>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_96 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_98 (responsible $1) =
  # Original HIR IDs: Core:function:is1:9
  # Captured IDs: $0
  $2 = %36<Core:function:is1:9:3>
  $3 = %165<{ body_10 }>
  $4 = dup $0 by 1
  $5 = trace: start of call of $3<%165<{ body_10 }>> with $0 ($2<%36<Core:function:is1:9:3>> is responsible, code is at $2<%36<Core:function:is1:9:3>>)
  $6 = %109<builtinTypeOf>
  $7 = dup $0 by 1
  $8 = %32<Builtins::typeIs:19>
  $9 = call $6<%109<builtinTypeOf>> with $0 ($8<%32<Builtins::typeIs:19>> is responsible)
  $10 = %92<builtinEquals>
  $11 = dup $9 by 1
  $12 = %113<Function>
  $13 = %33<Builtins::typeIs:25>
  $14 = call $10<%92<builtinEquals>> with $9 $12<%113<Function>> ($13<%33<Builtins::typeIs:25>> is responsible)
  $15 = %2<Builtins::getArgumentCount:5>
  $16 = %159<{ body_6 }>
  $17 = dup $14 by 1
  $18 = %144<"`function | typeIs Function` was not satisfied">
  $19 = trace: start of call of $16<%159<{ body_6 }>> with $14 $18<%144<"`function | typeIs Function` was not satisfied">> $2<%36<Core:function:is1:9:3>> ($15<%2<Builtins::getArgumentCount:5>> is responsible, code is at $15<%2<Builtins::getArgumentCount:5>>)
  $20 = dup $14 by 1
  $21 = call $16<%159<{ body_6 }>> with $14 $18<%144<"`function | typeIs Function` was not satisfied">> $2<%36<Core:function:is1:9:3>> ($15<%2<Builtins::getArgumentCount:5>> is responsible)
  $22 = trace: end of call
  $23 = %93<builtinGetArgumentCount>
  $24 = dup $0 by 1
  $25 = %1<Builtins::getArgumentCount:11>
  $26 = call $23<%93<builtinGetArgumentCount>> with $0 ($25<%1<Builtins::getArgumentCount:11>> is responsible)
  $27 = trace: end of call
  $28 = dup $26 by 1
  $29 = %127<1>
  $30 = %0<Builtins::equals:6>
  $31 = call $10<%92<builtinEquals>> with $26 $29<%127<1>> ($30<%0<Builtins::equals:6>> is responsible)
  $32 = drop $26
  $33 = drop $21
  $34 = drop $14
  $35 = drop $9
  $36 = $31
body_99 (responsible $2) =
  # Original HIR IDs: Core:result:flatMap:17:2:doesTagHaveValue:else
  # Captured IDs: $0, $1
  $3 = %105<builtinTagWithValue>
  $4 = dup $0 by 1
  $5 = dup $1 by 1
  $6 = %39<Core:result:flatMap:17:2>
  $7 = call $3<%105<builtinTagWithValue>> with $0 $1 ($6<%39<Core:result:flatMap:17:2>> is responsible)
body_100 (responsible $2) =
  # Original HIR IDs: Core:result:flatMap:17:2:calleeIsTag:then
  # Captured IDs: $0, $1
  $3 = %104<builtinTagHasValue>
  $4 = dup $0 by 1
  $5 = %39<Core:result:flatMap:17:2>
  $6 = call $3<%104<builtinTagHasValue>> with $0 ($5<%39<Core:result:flatMap:17:2>> is responsible)
  $7 = dup $0 by 1
  $8 = dup $1 by 1
  $9 = { body_99 capturing $0, $1 }
  $10 = %94<builtinIfElse>
  $11 = dup $6 by 1
  $12 = %183<{ body_88 }>
  $13 = dup $9 by 1
  $14 = call $10<%94<builtinIfElse>> with $6 $12<%183<{ body_88 }>> $9 ($5<%39<Core:result:flatMap:17:2>> is responsible)
  $15 = drop $9
  $16 = drop $6
  $17 = $14
body_101 (responsible $2) =
  # Original HIR IDs: Core:result:flatMap:17:2:hasCorrectNumberOfArguments:then
  # Captured IDs: $0, $1
  $3 = %39<Core:result:flatMap:17:2>
  $4 = dup $0 by 1
  $5 = dup $1 by 1
  $6 = trace: tail call of $0 with $1 ($3<%39<Core:result:flatMap:17:2>> is responsible, code is at $3<%39<Core:result:flatMap:17:2>>)
  $7 = dup $0 by 1
  $8 = dup $1 by 1
  $9 = call $0 with $1 ($3<%39<Core:result:flatMap:17:2>> is responsible)
body_102 (responsible $1) =
  # Original HIR IDs: Core:result:flatMap:17:2:hasCorrectNumberOfArguments:else
  # Captured IDs: $0
  $2 = %108<builtinToDebugText>
  $3 = dup $0 by 1
  $4 = %39<Core:result:flatMap:17:2>
  $5 = call $2<%108<builtinToDebugText>> with $0 ($4<%39<Core:result:flatMap:17:2>> is responsible)
  $6 = %107<builtinTextConcatenate>
  $7 = %136<"You called a function that expects ">
  $8 = dup $5 by 1
  $9 = call $6<%107<builtinTextConcatenate>> with $7<%136<"You called a function that expects ">> $5 ($4<%39<Core:result:flatMap:17:2>> is responsible)
  $10 = dup $9 by 1
  $11 = %129<" arguments with 1 arguments.">
  $12 = call $6<%107<builtinTextConcatenate>> with $9 $11<%129<" arguments with 1 arguments.">> ($4<%39<Core:result:flatMap:17:2>> is responsible)
  $13 = dup $12 by 1
  $14 = panicking because $12 ($4<%39<Core:result:flatMap:17:2>> is at fault)
  $15 = drop $12
  $16 = drop $9
  $17 = drop $5
  $18 = $14
body_103 (responsible $2) =
  # Original HIR IDs: Core:result:flatMap:17:2:calleeIsFunction:then
  # Captured IDs: $0, $1
  $3 = %93<builtinGetArgumentCount>
  $4 = dup $0 by 1
  $5 = %39<Core:result:flatMap:17:2>
  $6 = call $3<%93<builtinGetArgumentCount>> with $0 ($5<%39<Core:result:flatMap:17:2>> is responsible)
  $7 = %92<builtinEquals>
  $8 = dup $6 by 1
  $9 = %127<1>
  $10 = call $7<%92<builtinEquals>> with $6 $9<%127<1>> ($5<%39<Core:result:flatMap:17:2>> is responsible)
  $11 = dup $0 by 1
  $12 = dup $1 by 1
  $13 = { body_101 capturing $0, $1 }
  $14 = dup $6 by 1
  $15 = { body_102 capturing $6 }
  $16 = %94<builtinIfElse>
  $17 = dup $10 by 1
  $18 = dup $13 by 1
  $19 = dup $15 by 1
  $20 = call $16<%94<builtinIfElse>> with $10 $13 $15 ($5<%39<Core:result:flatMap:17:2>> is responsible)
  $21 = drop $15
  $22 = drop $13
  $23 = drop $10
  $24 = drop $6
  $25 = $20
body_104 (responsible $3) =
  # Original HIR IDs: Core:result:flatMap:17:2:calleeIsTag:else
  # Captured IDs: $0, $1, $2
  $4 = %92<builtinEquals>
  $5 = dup $2 by 1
  $6 = %113<Function>
  $7 = %39<Core:result:flatMap:17:2>
  $8 = call $4<%92<builtinEquals>> with $2 $6<%113<Function>> ($7<%39<Core:result:flatMap:17:2>> is responsible)
  $9 = dup $0 by 1
  $10 = dup $1 by 1
  $11 = { body_103 capturing $0, $1 }
  $12 = %94<builtinIfElse>
  $13 = dup $8 by 1
  $14 = dup $11 by 1
  $15 = %184<{ body_89 }>
  $16 = call $12<%94<builtinIfElse>> with $8 $11 $15<%184<{ body_89 }>> ($7<%39<Core:result:flatMap:17:2>> is responsible)
  $17 = drop $11
  $18 = drop $8
  $19 = $16
body_105 $1 (+ responsible $2) =
  # Original HIR IDs: Core:result:flatMap:17
  # Captured IDs: $0
  $3 = %109<builtinTypeOf>
  $4 = dup $0 by 1
  $5 = %39<Core:result:flatMap:17:2>
  $6 = call $3<%109<builtinTypeOf>> with $0 ($5<%39<Core:result:flatMap:17:2>> is responsible)
  $7 = %92<builtinEquals>
  $8 = dup $6 by 1
  $9 = %123<Tag>
  $10 = call $7<%92<builtinEquals>> with $6 $9<%123<Tag>> ($5<%39<Core:result:flatMap:17:2>> is responsible)
  $11 = dup $0 by 1
  $12 = dup $1 by 1
  $13 = { body_100 capturing $0, $1 }
  $14 = dup $0 by 1
  $15 = dup $1 by 1
  $16 = dup $6 by 1
  $17 = { body_104 capturing $0, $1, $6 }
  $18 = %94<builtinIfElse>
  $19 = dup $10 by 1
  $20 = dup $13 by 1
  $21 = dup $17 by 1
  $22 = call $18<%94<builtinIfElse>> with $10 $13 $17 ($5<%39<Core:result:flatMap:17:2>> is responsible)
  $23 = drop $17
  $24 = drop $13
  $25 = drop $10
  $26 = drop $6
  $27 = drop $1
  $28 = $22
body_106 $0 $1 (+ responsible $2) =
  # Original HIR IDs: Core:result:flatMap
  # Captured IDs: none
  $3 = %41<Core:result:flatMap:2>
  $4 = %174<{ body_30 }>
  $5 = dup $0 by 1
  $6 = trace: start of call of $4<%174<{ body_30 }>> with $0 ($3<%41<Core:result:flatMap:2>> is responsible, code is at $3<%41<Core:result:flatMap:2>>)
  $7 = %109<builtinTypeOf>
  $8 = dup $0 by 1
  $9 = %46<Core:result:is:1>
  $10 = call $7<%109<builtinTypeOf>> with $0 ($9<%46<Core:result:is:1>> is responsible)
  $11 = %92<builtinEquals>
  $12 = %123<Tag>
  $13 = dup $10 by 1
  $14 = call $11<%92<builtinEquals>> with $12<%123<Tag>> $10 ($9<%46<Core:result:is:1>> is responsible)
  $15 = dup $0 by 1
  $16 = { body_92 capturing $0 }
  $17 = %94<builtinIfElse>
  $18 = dup $14 by 1
  $19 = dup $16 by 1
  $20 = %163<{ body_8 }>
  $21 = call $17<%94<builtinIfElse>> with $14 $16 $20<%163<{ body_8 }>> ($9<%46<Core:result:is:1>> is responsible)
  $22 = %106<builtinTagWithoutValue>
  $23 = dup $21 by 1
  $24 = call $22<%106<builtinTagWithoutValue>> with $21 ($9<%46<Core:result:is:1>> is responsible)
  $25 = dup $24 by 1
  $26 = %117<Match>
  $27 = call $11<%92<builtinEquals>> with $24 $26<%117<Match>> ($9<%46<Core:result:is:1>> is responsible)
  $28 = dup $21 by 1
  $29 = { body_93 capturing $21 }
  $30 = dup $0 by 1
  $31 = { body_97 capturing $0 }
  $32 = dup $27 by 1
  $33 = dup $29 by 1
  $34 = dup $31 by 1
  $35 = call $17<%94<builtinIfElse>> with $27 $29 $31 ($9<%46<Core:result:is:1>> is responsible)
  $36 = dup $35 by 1
  $37 = call $22<%106<builtinTagWithoutValue>> with $35 ($9<%46<Core:result:is:1>> is responsible)
  $38 = dup $37 by 1
  $39 = call $11<%92<builtinEquals>> with $37 $26<%117<Match>> ($9<%46<Core:result:is:1>> is responsible)
  $40 = dup $39 by 1
  $41 = %157<{ body_0 }>
  $42 = %164<{ body_9 }>
  $43 = call $17<%94<builtinIfElse>> with $39 $41<%157<{ body_0 }>> $42<%164<{ body_9 }>> ($9<%46<Core:result:is:1>> is responsible)
  $44 = trace: end of call
  $45 = %42<Core:result:flatMap:4>
  $46 = %159<{ body_6 }>
  $47 = dup $43 by 1
  $48 = %147<"`is result` was not satisfied">
  $49 = dup $2 by 1
  $50 = trace: start of call of $46<%159<{ body_6 }>> with $43 $48<%147<"`is result` was not satisfied">> $2 ($45<%42<Core:result:flatMap:4>> is responsible, code is at $45<%42<Core:result:flatMap:4>>)
  $51 = dup $43 by 1
  $52 = dup $2 by 1
  $53 = call $46<%159<{ body_6 }>> with $43 $48<%147<"`is result` was not satisfied">> $2 ($45<%42<Core:result:flatMap:4>> is responsible)
  $54 = trace: end of call
  $55 = %37<Core:result:flatMap:12>
  $56 = %173<{ body_21 }>
  $57 = dup $1 by 1
  $58 = trace: start of call of $56<%173<{ body_21 }>> with $1 ($55<%37<Core:result:flatMap:12>> is responsible, code is at $55<%37<Core:result:flatMap:12>>)
  $59 = dup $1 by 1
  $60 = %34<Builtins::typeOf:5>
  $61 = call $7<%109<builtinTypeOf>> with $1 ($60<%34<Builtins::typeOf:5>> is responsible)
  $62 = dup $61 by 1
  $63 = %113<Function>
  $64 = %0<Builtins::equals:6>
  $65 = call $11<%92<builtinEquals>> with $61 $63<%113<Function>> ($64<%0<Builtins::equals:6>> is responsible)
  $66 = dup $1 by 1
  $67 = { body_98 capturing $1 }
  $68 = %35<Core:function:is1:11>
  $69 = %166<{ body_13 }>
  $70 = dup $65 by 1
  $71 = dup $67 by 1
  $72 = trace: start of call of $69<%166<{ body_13 }>> with $65 $67 $42<%164<{ body_9 }>> ($68<%35<Core:function:is1:11>> is responsible, code is at $68<%35<Core:function:is1:11>>)
  $73 = dup $65 by 1
  $74 = dup $67 by 1
  $75 = call $69<%166<{ body_13 }>> with $65 $67 $42<%164<{ body_9 }>> ($68<%35<Core:function:is1:11>> is responsible)
  $76 = trace: end of call
  $77 = trace: end of call
  $78 = %38<Core:result:flatMap:14>
  $79 = dup $75 by 1
  $80 = %146<"`function.is1 okMapper` was not satisfied">
  $81 = dup $2 by 1
  $82 = trace: start of call of $46<%159<{ body_6 }>> with $75 $80<%146<"`function.is1 okMapper` was not satisfied">> $2 ($78<%38<Core:result:flatMap:14>> is responsible, code is at $78<%38<Core:result:flatMap:14>>)
  $83 = dup $75 by 1
  $84 = dup $2 by 1
  $85 = call $46<%159<{ body_6 }>> with $75 $80<%146<"`function.is1 okMapper` was not satisfied">> $2 ($78<%38<Core:result:flatMap:14>> is responsible)
  $86 = trace: end of call
  $87 = dup $1 by 1
  $88 = { body_105 capturing $1 }
  $89 = %40<Core:result:flatMap:19>
  $90 = %182<{ body_87 }>
  $91 = dup $0 by 1
  $92 = dup $88 by 1
  $93 = dup $0 by 1
  $94 = trace: tail call of $90<%182<{ body_87 }>> with $0 $88 $0 ($89<%40<Core:result:flatMap:19>> is responsible, code is at $89<%40<Core:result:flatMap:19>>)
  $95 = dup $0 by 1
  $96 = dup $88 by 1
  $97 = dup $0 by 1
  $98 = call $90<%182<{ body_87 }>> with $0 $88 $0 ($89<%40<Core:result:flatMap:19>> is responsible)
  $99 = drop $88
  $100 = drop $85
  $101 = drop $75
  $102 = drop $67
  $103 = drop $65
  $104 = drop $61
  $105 = drop $53
  $106 = drop $43
  $107 = drop $39
  $108 = drop $37
  $109 = drop $35
  $110 = drop $31
  $111 = drop $29
  $112 = drop $27
  $113 = drop $24
  $114 = drop $21
  $115 = drop $16
  $116 = drop $14
  $117 = drop $10
  $118 = drop $1
  $119 = drop $0
  $120 = $98
body_107 (responsible $0) =
  # Original HIR IDs: Core:result:map:17:3:doesTagHaveValue:then
  # Captured IDs: none
  $1 = %137<"You called a tag that already has a value.">
  $2 = %49<Core:result:map:17:3>
  $3 = panicking because $1<%137<"You called a tag that already has a value.">> ($2<%49<Core:result:map:17:3>> is at fault)
body_108 (responsible $0) =
  # Original HIR IDs: Core:result:map:17:3:calleeIsFunction:else
  # Captured IDs: none
  $1 = %138<"You can only call tags or functions.">
  $2 = %49<Core:result:map:17:3>
  $3 = panicking because $1<%138<"You can only call tags or functions.">> ($2<%49<Core:result:map:17:3>> is at fault)
body_109 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %103<builtinTagGetValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%103<builtinTagGetValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = dup $5 by 1
  $7 = ($5,)
  $8 = dup $7 by 1
  $9 = Match $7
  $10 = drop $7
  $11 = drop $5
  $12 = $9
body_110 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %104<builtinTagHasValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%104<builtinTagHasValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %125<True>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%125<True>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_109 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_111 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %106<builtinTagWithoutValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%106<builtinTagWithoutValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %120<Ok>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%120<Ok>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_110 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_112 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:isMatch:then
  # Captured IDs: $0
  $2 = dup $0 by 1
  $3 = $0
body_113 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %103<builtinTagGetValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%103<builtinTagGetValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = dup $5 by 1
  $7 = ($5,)
  $8 = dup $7 by 1
  $9 = Match $7
  $10 = drop $7
  $11 = drop $5
  $12 = $9
body_114 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %104<builtinTagHasValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%104<builtinTagHasValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %125<True>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%125<True>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_113 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_115 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:equals:then
  # Captured IDs: $0
  $2 = %106<builtinTagWithoutValue>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%106<builtinTagWithoutValue>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %111<Error>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%111<Error>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_114 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_116 (responsible $1) =
  # Original HIR IDs: Core:result:is:1:isMatch:else
  # Captured IDs: $0
  $2 = %109<builtinTypeOf>
  $3 = dup $0 by 1
  $4 = %46<Core:result:is:1>
  $5 = call $2<%109<builtinTypeOf>> with $0 ($4<%46<Core:result:is:1>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %123<Tag>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%123<Tag>> $5 ($4<%46<Core:result:is:1>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_115 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%46<Core:result:is:1>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_117 (responsible $1) =
  # Original HIR IDs: Core:function:is1:9
  # Captured IDs: $0
  $2 = %36<Core:function:is1:9:3>
  $3 = %165<{ body_10 }>
  $4 = dup $0 by 1
  $5 = trace: start of call of $3<%165<{ body_10 }>> with $0 ($2<%36<Core:function:is1:9:3>> is responsible, code is at $2<%36<Core:function:is1:9:3>>)
  $6 = %109<builtinTypeOf>
  $7 = dup $0 by 1
  $8 = %32<Builtins::typeIs:19>
  $9 = call $6<%109<builtinTypeOf>> with $0 ($8<%32<Builtins::typeIs:19>> is responsible)
  $10 = %92<builtinEquals>
  $11 = dup $9 by 1
  $12 = %113<Function>
  $13 = %33<Builtins::typeIs:25>
  $14 = call $10<%92<builtinEquals>> with $9 $12<%113<Function>> ($13<%33<Builtins::typeIs:25>> is responsible)
  $15 = %2<Builtins::getArgumentCount:5>
  $16 = %159<{ body_6 }>
  $17 = dup $14 by 1
  $18 = %144<"`function | typeIs Function` was not satisfied">
  $19 = trace: start of call of $16<%159<{ body_6 }>> with $14 $18<%144<"`function | typeIs Function` was not satisfied">> $2<%36<Core:function:is1:9:3>> ($15<%2<Builtins::getArgumentCount:5>> is responsible, code is at $15<%2<Builtins::getArgumentCount:5>>)
  $20 = dup $14 by 1
  $21 = call $16<%159<{ body_6 }>> with $14 $18<%144<"`function | typeIs Function` was not satisfied">> $2<%36<Core:function:is1:9:3>> ($15<%2<Builtins::getArgumentCount:5>> is responsible)
  $22 = trace: end of call
  $23 = %93<builtinGetArgumentCount>
  $24 = dup $0 by 1
  $25 = %1<Builtins::getArgumentCount:11>
  $26 = call $23<%93<builtinGetArgumentCount>> with $0 ($25<%1<Builtins::getArgumentCount:11>> is responsible)
  $27 = trace: end of call
  $28 = dup $26 by 1
  $29 = %127<1>
  $30 = %0<Builtins::equals:6>
  $31 = call $10<%92<builtinEquals>> with $26 $29<%127<1>> ($30<%0<Builtins::equals:6>> is responsible)
  $32 = drop $26
  $33 = drop $21
  $34 = drop $14
  $35 = drop $9
  $36 = $31
body_118 (responsible $2) =
  # Original HIR IDs: Core:result:map:17:3:doesTagHaveValue:else
  # Captured IDs: $0, $1
  $3 = %105<builtinTagWithValue>
  $4 = dup $0 by 1
  $5 = dup $1 by 1
  $6 = %49<Core:result:map:17:3>
  $7 = call $3<%105<builtinTagWithValue>> with $0 $1 ($6<%49<Core:result:map:17:3>> is responsible)
body_119 (responsible $2) =
  # Original HIR IDs: Core:result:map:17:3:calleeIsTag:then
  # Captured IDs: $0, $1
  $3 = %104<builtinTagHasValue>
  $4 = dup $0 by 1
  $5 = %49<Core:result:map:17:3>
  $6 = call $3<%104<builtinTagHasValue>> with $0 ($5<%49<Core:result:map:17:3>> is responsible)
  $7 = dup $0 by 1
  $8 = dup $1 by 1
  $9 = { body_118 capturing $0, $1 }
  $10 = %94<builtinIfElse>
  $11 = dup $6 by 1
  $12 = %186<{ body_107 }>
  $13 = dup $9 by 1
  $14 = call $10<%94<builtinIfElse>> with $6 $12<%186<{ body_107 }>> $9 ($5<%49<Core:result:map:17:3>> is responsible)
  $15 = drop $9
  $16 = drop $6
  $17 = $14
body_120 (responsible $2) =
  # Original HIR IDs: Core:result:map:17:3:hasCorrectNumberOfArguments:then
  # Captured IDs: $0, $1
  $3 = %49<Core:result:map:17:3>
  $4 = dup $0 by 1
  $5 = dup $1 by 1
  $6 = trace: tail call of $0 with $1 ($3<%49<Core:result:map:17:3>> is responsible, code is at $3<%49<Core:result:map:17:3>>)
  $7 = dup $0 by 1
  $8 = dup $1 by 1
  $9 = call $0 with $1 ($3<%49<Core:result:map:17:3>> is responsible)
body_121 (responsible $1) =
  # Original HIR IDs: Core:result:map:17:3:hasCorrectNumberOfArguments:else
  # Captured IDs: $0
  $2 = %108<builtinToDebugText>
  $3 = dup $0 by 1
  $4 = %49<Core:result:map:17:3>
  $5 = call $2<%108<builtinToDebugText>> with $0 ($4<%49<Core:result:map:17:3>> is responsible)
  $6 = %107<builtinTextConcatenate>
  $7 = %136<"You called a function that expects ">
  $8 = dup $5 by 1
  $9 = call $6<%107<builtinTextConcatenate>> with $7<%136<"You called a function that expects ">> $5 ($4<%49<Core:result:map:17:3>> is responsible)
  $10 = dup $9 by 1
  $11 = %129<" arguments with 1 arguments.">
  $12 = call $6<%107<builtinTextConcatenate>> with $9 $11<%129<" arguments with 1 arguments.">> ($4<%49<Core:result:map:17:3>> is responsible)
  $13 = dup $12 by 1
  $14 = panicking because $12 ($4<%49<Core:result:map:17:3>> is at fault)
  $15 = drop $12
  $16 = drop $9
  $17 = drop $5
  $18 = $14
body_122 (responsible $2) =
  # Original HIR IDs: Core:result:map:17:3:calleeIsFunction:then
  # Captured IDs: $0, $1
  $3 = %93<builtinGetArgumentCount>
  $4 = dup $0 by 1
  $5 = %49<Core:result:map:17:3>
  $6 = call $3<%93<builtinGetArgumentCount>> with $0 ($5<%49<Core:result:map:17:3>> is responsible)
  $7 = %92<builtinEquals>
  $8 = dup $6 by 1
  $9 = %127<1>
  $10 = call $7<%92<builtinEquals>> with $6 $9<%127<1>> ($5<%49<Core:result:map:17:3>> is responsible)
  $11 = dup $0 by 1
  $12 = dup $1 by 1
  $13 = { body_120 capturing $0, $1 }
  $14 = dup $6 by 1
  $15 = { body_121 capturing $6 }
  $16 = %94<builtinIfElse>
  $17 = dup $10 by 1
  $18 = dup $13 by 1
  $19 = dup $15 by 1
  $20 = call $16<%94<builtinIfElse>> with $10 $13 $15 ($5<%49<Core:result:map:17:3>> is responsible)
  $21 = drop $15
  $22 = drop $13
  $23 = drop $10
  $24 = drop $6
  $25 = $20
body_123 (responsible $3) =
  # Original HIR IDs: Core:result:map:17:3:calleeIsTag:else
  # Captured IDs: $0, $1, $2
  $4 = %92<builtinEquals>
  $5 = dup $2 by 1
  $6 = %113<Function>
  $7 = %49<Core:result:map:17:3>
  $8 = call $4<%92<builtinEquals>> with $2 $6<%113<Function>> ($7<%49<Core:result:map:17:3>> is responsible)
  $9 = dup $0 by 1
  $10 = dup $1 by 1
  $11 = { body_122 capturing $0, $1 }
  $12 = %94<builtinIfElse>
  $13 = dup $8 by 1
  $14 = dup $11 by 1
  $15 = %187<{ body_108 }>
  $16 = call $12<%94<builtinIfElse>> with $8 $11 $15<%187<{ body_108 }>> ($7<%49<Core:result:map:17:3>> is responsible)
  $17 = drop $11
  $18 = drop $8
  $19 = $16
body_124 $1 (+ responsible $2) =
  # Original HIR IDs: Core:result:map:17
  # Captured IDs: $0
  $3 = %109<builtinTypeOf>
  $4 = dup $0 by 1
  $5 = %49<Core:result:map:17:3>
  $6 = call $3<%109<builtinTypeOf>> with $0 ($5<%49<Core:result:map:17:3>> is responsible)
  $7 = %92<builtinEquals>
  $8 = dup $6 by 1
  $9 = %123<Tag>
  $10 = call $7<%92<builtinEquals>> with $6 $9<%123<Tag>> ($5<%49<Core:result:map:17:3>> is responsible)
  $11 = dup $0 by 1
  $12 = dup $1 by 1
  $13 = { body_119 capturing $0, $1 }
  $14 = dup $0 by 1
  $15 = dup $1 by 1
  $16 = dup $6 by 1
  $17 = { body_123 capturing $0, $1, $6 }
  $18 = %94<builtinIfElse>
  $19 = dup $10 by 1
  $20 = dup $13 by 1
  $21 = dup $17 by 1
  $22 = call $18<%94<builtinIfElse>> with $10 $13 $17 ($5<%49<Core:result:map:17:3>> is responsible)
  $23 = dup $22 by 1
  $24 = Ok $22
  $25 = drop $22
  $26 = drop $17
  $27 = drop $13
  $28 = drop $10
  $29 = drop $6
  $30 = drop $1
  $31 = $24
body_125 $0 $1 (+ responsible $2) =
  # Original HIR IDs: Core:result:map
  # Captured IDs: none
  $3 = %51<Core:result:map:2>
  $4 = %174<{ body_30 }>
  $5 = dup $0 by 1
  $6 = trace: start of call of $4<%174<{ body_30 }>> with $0 ($3<%51<Core:result:map:2>> is responsible, code is at $3<%51<Core:result:map:2>>)
  $7 = %109<builtinTypeOf>
  $8 = dup $0 by 1
  $9 = %46<Core:result:is:1>
  $10 = call $7<%109<builtinTypeOf>> with $0 ($9<%46<Core:result:is:1>> is responsible)
  $11 = %92<builtinEquals>
  $12 = %123<Tag>
  $13 = dup $10 by 1
  $14 = call $11<%92<builtinEquals>> with $12<%123<Tag>> $10 ($9<%46<Core:result:is:1>> is responsible)
  $15 = dup $0 by 1
  $16 = { body_111 capturing $0 }
  $17 = %94<builtinIfElse>
  $18 = dup $14 by 1
  $19 = dup $16 by 1
  $20 = %163<{ body_8 }>
  $21 = call $17<%94<builtinIfElse>> with $14 $16 $20<%163<{ body_8 }>> ($9<%46<Core:result:is:1>> is responsible)
  $22 = %106<builtinTagWithoutValue>
  $23 = dup $21 by 1
  $24 = call $22<%106<builtinTagWithoutValue>> with $21 ($9<%46<Core:result:is:1>> is responsible)
  $25 = dup $24 by 1
  $26 = %117<Match>
  $27 = call $11<%92<builtinEquals>> with $24 $26<%117<Match>> ($9<%46<Core:result:is:1>> is responsible)
  $28 = dup $21 by 1
  $29 = { body_112 capturing $21 }
  $30 = dup $0 by 1
  $31 = { body_116 capturing $0 }
  $32 = dup $27 by 1
  $33 = dup $29 by 1
  $34 = dup $31 by 1
  $35 = call $17<%94<builtinIfElse>> with $27 $29 $31 ($9<%46<Core:result:is:1>> is responsible)
  $36 = dup $35 by 1
  $37 = call $22<%106<builtinTagWithoutValue>> with $35 ($9<%46<Core:result:is:1>> is responsible)
  $38 = dup $37 by 1
  $39 = call $11<%92<builtinEquals>> with $37 $26<%117<Match>> ($9<%46<Core:result:is:1>> is responsible)
  $40 = dup $39 by 1
  $41 = %157<{ body_0 }>
  $42 = %164<{ body_9 }>
  $43 = call $17<%94<builtinIfElse>> with $39 $41<%157<{ body_0 }>> $42<%164<{ body_9 }>> ($9<%46<Core:result:is:1>> is responsible)
  $44 = trace: end of call
  $45 = %52<Core:result:map:4>
  $46 = %159<{ body_6 }>
  $47 = dup $43 by 1
  $48 = %147<"`is result` was not satisfied">
  $49 = dup $2 by 1
  $50 = trace: start of call of $46<%159<{ body_6 }>> with $43 $48<%147<"`is result` was not satisfied">> $2 ($45<%52<Core:result:map:4>> is responsible, code is at $45<%52<Core:result:map:4>>)
  $51 = dup $43 by 1
  $52 = dup $2 by 1
  $53 = call $46<%159<{ body_6 }>> with $43 $48<%147<"`is result` was not satisfied">> $2 ($45<%52<Core:result:map:4>> is responsible)
  $54 = trace: end of call
  $55 = %47<Core:result:map:12>
  $56 = %173<{ body_21 }>
  $57 = dup $1 by 1
  $58 = trace: start of call of $56<%173<{ body_21 }>> with $1 ($55<%47<Core:result:map:12>> is responsible, code is at $55<%47<Core:result:map:12>>)
  $59 = dup $1 by 1
  $60 = %34<Builtins::typeOf:5>
  $61 = call $7<%109<builtinTypeOf>> with $1 ($60<%34<Builtins::typeOf:5>> is responsible)
  $62 = dup $61 by 1
  $63 = %113<Function>
  $64 = %0<Builtins::equals:6>
  $65 = call $11<%92<builtinEquals>> with $61 $63<%113<Function>> ($64<%0<Builtins::equals:6>> is responsible)
  $66 = dup $1 by 1
  $67 = { body_117 capturing $1 }
  $68 = %35<Core:function:is1:11>
  $69 = %166<{ body_13 }>
  $70 = dup $65 by 1
  $71 = dup $67 by 1
  $72 = trace: start of call of $69<%166<{ body_13 }>> with $65 $67 $42<%164<{ body_9 }>> ($68<%35<Core:function:is1:11>> is responsible, code is at $68<%35<Core:function:is1:11>>)
  $73 = dup $65 by 1
  $74 = dup $67 by 1
  $75 = call $69<%166<{ body_13 }>> with $65 $67 $42<%164<{ body_9 }>> ($68<%35<Core:function:is1:11>> is responsible)
  $76 = trace: end of call
  $77 = trace: end of call
  $78 = %48<Core:result:map:14>
  $79 = dup $75 by 1
  $80 = %146<"`function.is1 okMapper` was not satisfied">
  $81 = dup $2 by 1
  $82 = trace: start of call of $46<%159<{ body_6 }>> with $75 $80<%146<"`function.is1 okMapper` was not satisfied">> $2 ($78<%48<Core:result:map:14>> is responsible, code is at $78<%48<Core:result:map:14>>)
  $83 = dup $75 by 1
  $84 = dup $2 by 1
  $85 = call $46<%159<{ body_6 }>> with $75 $80<%146<"`function.is1 okMapper` was not satisfied">> $2 ($78<%48<Core:result:map:14>> is responsible)
  $86 = trace: end of call
  $87 = dup $1 by 1
  $88 = { body_124 capturing $1 }
  $89 = %50<Core:result:map:18>
  $90 = %185<{ body_106 }>
  $91 = dup $0 by 1
  $92 = dup $88 by 1
  $93 = trace: tail call of $90<%185<{ body_106 }>> with $0 $88 ($89<%50<Core:result:map:18>> is responsible, code is at $89<%50<Core:result:map:18>>)
  $94 = dup $0 by 1
  $95 = dup $88 by 1
  $96 = call $90<%185<{ body_106 }>> with $0 $88 ($89<%50<Core:result:map:18>> is responsible)
  $97 = drop $88
  $98 = drop $85
  $99 = drop $75
  $100 = drop $67
  $101 = drop $65
  $102 = drop $61
  $103 = drop $53
  $104 = drop $43
  $105 = drop $39
  $106 = drop $37
  $107 = drop $35
  $108 = drop $31
  $109 = drop $29
  $110 = drop $27
  $111 = drop $24
  $112 = drop $21
  $113 = drop $16
  $114 = drop $14
  $115 = drop $10
  $116 = drop $1
  $117 = drop $0
  $118 = $96
body_126 (responsible $0) =
  # Original HIR IDs: Examples:fibonacci:recursive:0:0:3:doesTagHaveValue:then
  # Captured IDs: none
  $1 = %137<"You called a tag that already has a value.">
  $2 = %88<Examples:fibonacci:recursive:0:0:3>
  $3 = panicking because $1<%137<"You called a tag that already has a value.">> ($2<%88<Examples:fibonacci:recursive:0:0:3>> is at fault)
body_127 (responsible $0) =
  # Original HIR IDs: Examples:fibonacci:recursive:0:0:3:doesTagHaveValue:else
  # Captured IDs: none
  $1 = %132<"Tags can only be created with one value.">
  $2 = %88<Examples:fibonacci:recursive:0:0:3>
  $3 = panicking because $1<%132<"Tags can only be created with one value.">> ($2<%88<Examples:fibonacci:recursive:0:0:3>> is at fault)
body_128 (responsible $0) =
  # Original HIR IDs: Examples:fibonacci:recursive:0:0:3:calleeIsFunction:else
  # Captured IDs: none
  $1 = %138<"You can only call tags or functions.">
  $2 = %88<Examples:fibonacci:recursive:0:0:3>
  $3 = panicking because $1<%138<"You can only call tags or functions.">> ($2<%88<Examples:fibonacci:recursive:0:0:3>> is at fault)
body_129 (responsible $0) =
  # Original HIR IDs: Examples:fibonacci:recursive:0:5:doesTagHaveValue:then
  # Captured IDs: none
  $1 = %137<"You called a tag that already has a value.">
  $2 = %89<Examples:fibonacci:recursive:0:5>
  $3 = panicking because $1<%137<"You called a tag that already has a value.">> ($2<%89<Examples:fibonacci:recursive:0:5>> is at fault)
body_130 (responsible $0) =
  # Original HIR IDs: Examples:fibonacci:recursive:0:5:doesTagHaveValue:else
  # Captured IDs: none
  $1 = %132<"Tags can only be created with one value.">
  $2 = %89<Examples:fibonacci:recursive:0:5>
  $3 = panicking because $1<%132<"Tags can only be created with one value.">> ($2<%89<Examples:fibonacci:recursive:0:5>> is at fault)
body_131 (responsible $0) =
  # Original HIR IDs: Examples:fibonacci:recursive:0:5:calleeIsFunction:else
  # Captured IDs: none
  $1 = %138<"You can only call tags or functions.">
  $2 = %89<Examples:fibonacci:recursive:0:5>
  $3 = panicking because $1<%138<"You can only call tags or functions.">> ($2<%89<Examples:fibonacci:recursive:0:5>> is at fault)
body_132 (responsible $1) =
  # Original HIR IDs: Examples:fibonacci:recursive:0:0:3:calleeIsTag:then
  # Captured IDs: $0
  $2 = %104<builtinTagHasValue>
  $3 = dup $0 by 1
  $4 = %88<Examples:fibonacci:recursive:0:0:3>
  $5 = call $2<%104<builtinTagHasValue>> with $0 ($4<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $6 = %94<builtinIfElse>
  $7 = dup $5 by 1
  $8 = %189<{ body_126 }>
  $9 = %190<{ body_127 }>
  $10 = call $6<%94<builtinIfElse>> with $5 $8<%189<{ body_126 }>> $9<%190<{ body_127 }>> ($4<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $11 = drop $5
  $12 = $10
body_133 (responsible $2) =
  # Original HIR IDs: Examples:fibonacci:recursive:0:0:3:hasCorrectNumberOfArguments:then
  # Captured IDs: $0, $1
  $3 = %88<Examples:fibonacci:recursive:0:0:3>
  $4 = dup $0 by 1
  $5 = dup $0 by 1
  $6 = dup $1 by 1
  $7 = trace: tail call of $0 with $0 $1 ($3<%88<Examples:fibonacci:recursive:0:0:3>> is responsible, code is at $3<%88<Examples:fibonacci:recursive:0:0:3>>)
  $8 = dup $0 by 1
  $9 = dup $0 by 1
  $10 = dup $1 by 1
  $11 = call $0 with $0 $1 ($3<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
body_134 (responsible $1) =
  # Original HIR IDs: Examples:fibonacci:recursive:0:0:3:hasCorrectNumberOfArguments:else
  # Captured IDs: $0
  $2 = %108<builtinToDebugText>
  $3 = dup $0 by 1
  $4 = %88<Examples:fibonacci:recursive:0:0:3>
  $5 = call $2<%108<builtinToDebugText>> with $0 ($4<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $6 = %107<builtinTextConcatenate>
  $7 = %136<"You called a function that expects ">
  $8 = dup $5 by 1
  $9 = call $6<%107<builtinTextConcatenate>> with $7<%136<"You called a function that expects ">> $5 ($4<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $10 = dup $9 by 1
  $11 = %130<" arguments with 2 arguments.">
  $12 = call $6<%107<builtinTextConcatenate>> with $9 $11<%130<" arguments with 2 arguments.">> ($4<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $13 = dup $12 by 1
  $14 = panicking because $12 ($4<%88<Examples:fibonacci:recursive:0:0:3>> is at fault)
  $15 = drop $12
  $16 = drop $9
  $17 = drop $5
  $18 = $14
body_135 (responsible $2) =
  # Original HIR IDs: Examples:fibonacci:recursive:0:0:3:calleeIsFunction:then
  # Captured IDs: $0, $1
  $3 = %93<builtinGetArgumentCount>
  $4 = dup $0 by 1
  $5 = %88<Examples:fibonacci:recursive:0:0:3>
  $6 = call $3<%93<builtinGetArgumentCount>> with $0 ($5<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $7 = %92<builtinEquals>
  $8 = dup $6 by 1
  $9 = %128<2>
  $10 = call $7<%92<builtinEquals>> with $6 $9<%128<2>> ($5<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $11 = dup $0 by 1
  $12 = dup $1 by 1
  $13 = { body_133 capturing $0, $1 }
  $14 = dup $6 by 1
  $15 = { body_134 capturing $6 }
  $16 = %94<builtinIfElse>
  $17 = dup $10 by 1
  $18 = dup $13 by 1
  $19 = dup $15 by 1
  $20 = call $16<%94<builtinIfElse>> with $10 $13 $15 ($5<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $21 = drop $15
  $22 = drop $13
  $23 = drop $10
  $24 = drop $6
  $25 = $20
body_136 (responsible $3) =
  # Original HIR IDs: Examples:fibonacci:recursive:0:0:3:calleeIsTag:else
  # Captured IDs: $0, $1, $2
  $4 = %92<builtinEquals>
  $5 = dup $2 by 1
  $6 = %113<Function>
  $7 = %88<Examples:fibonacci:recursive:0:0:3>
  $8 = call $4<%92<builtinEquals>> with $2 $6<%113<Function>> ($7<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $9 = dup $0 by 1
  $10 = dup $1 by 1
  $11 = { body_135 capturing $0, $1 }
  $12 = %94<builtinIfElse>
  $13 = dup $8 by 1
  $14 = dup $11 by 1
  $15 = %191<{ body_128 }>
  $16 = call $12<%94<builtinIfElse>> with $8 $11 $15<%191<{ body_128 }>> ($7<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $17 = drop $11
  $18 = drop $8
  $19 = $16
body_137 $1 (+ responsible $2) =
  # Original HIR IDs: Examples:fibonacci:recursive:0:0
  # Captured IDs: $0
  $3 = %109<builtinTypeOf>
  $4 = dup $0 by 1
  $5 = %88<Examples:fibonacci:recursive:0:0:3>
  $6 = call $3<%109<builtinTypeOf>> with $0 ($5<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $7 = %92<builtinEquals>
  $8 = dup $6 by 1
  $9 = %123<Tag>
  $10 = call $7<%92<builtinEquals>> with $6 $9<%123<Tag>> ($5<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $11 = dup $0 by 1
  $12 = { body_132 capturing $0 }
  $13 = dup $0 by 1
  $14 = dup $1 by 1
  $15 = dup $6 by 1
  $16 = { body_136 capturing $0, $1, $6 }
  $17 = %94<builtinIfElse>
  $18 = dup $10 by 1
  $19 = dup $12 by 1
  $20 = dup $16 by 1
  $21 = call $17<%94<builtinIfElse>> with $10 $12 $16 ($5<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $22 = drop $16
  $23 = drop $12
  $24 = drop $10
  $25 = drop $6
  $26 = drop $1
  $27 = $21
body_138 (responsible $1) =
  # Original HIR IDs: Examples:fibonacci:recursive:0:5:calleeIsTag:then
  # Captured IDs: $0
  $2 = %104<builtinTagHasValue>
  $3 = dup $0 by 1
  $4 = %89<Examples:fibonacci:recursive:0:5>
  $5 = call $2<%104<builtinTagHasValue>> with $0 ($4<%89<Examples:fibonacci:recursive:0:5>> is responsible)
  $6 = %94<builtinIfElse>
  $7 = dup $5 by 1
  $8 = %192<{ body_129 }>
  $9 = %193<{ body_130 }>
  $10 = call $6<%94<builtinIfElse>> with $5 $8<%192<{ body_129 }>> $9<%193<{ body_130 }>> ($4<%89<Examples:fibonacci:recursive:0:5>> is responsible)
  $11 = drop $5
  $12 = $10
body_139 (responsible $3) =
  # Original HIR IDs: Examples:fibonacci:recursive:0:5:hasCorrectNumberOfArguments:then
  # Captured IDs: $0, $1, $2
  $4 = %89<Examples:fibonacci:recursive:0:5>
  $5 = dup $0 by 1
  $6 = dup $2 by 1
  $7 = dup $1 by 1
  $8 = trace: tail call of $0 with $2 $1 ($4<%89<Examples:fibonacci:recursive:0:5>> is responsible, code is at $4<%89<Examples:fibonacci:recursive:0:5>>)
  $9 = dup $0 by 1
  $10 = dup $2 by 1
  $11 = dup $1 by 1
  $12 = call $0 with $2 $1 ($4<%89<Examples:fibonacci:recursive:0:5>> is responsible)
body_140 (responsible $1) =
  # Original HIR IDs: Examples:fibonacci:recursive:0:5:hasCorrectNumberOfArguments:else
  # Captured IDs: $0
  $2 = %108<builtinToDebugText>
  $3 = dup $0 by 1
  $4 = %89<Examples:fibonacci:recursive:0:5>
  $5 = call $2<%108<builtinToDebugText>> with $0 ($4<%89<Examples:fibonacci:recursive:0:5>> is responsible)
  $6 = %107<builtinTextConcatenate>
  $7 = %136<"You called a function that expects ">
  $8 = dup $5 by 1
  $9 = call $6<%107<builtinTextConcatenate>> with $7<%136<"You called a function that expects ">> $5 ($4<%89<Examples:fibonacci:recursive:0:5>> is responsible)
  $10 = dup $9 by 1
  $11 = %130<" arguments with 2 arguments.">
  $12 = call $6<%107<builtinTextConcatenate>> with $9 $11<%130<" arguments with 2 arguments.">> ($4<%89<Examples:fibonacci:recursive:0:5>> is responsible)
  $13 = dup $12 by 1
  $14 = panicking because $12 ($4<%89<Examples:fibonacci:recursive:0:5>> is at fault)
  $15 = drop $12
  $16 = drop $9
  $17 = drop $5
  $18 = $14
body_141 (responsible $3) =
  # Original HIR IDs: Examples:fibonacci:recursive:0:5:calleeIsFunction:then
  # Captured IDs: $0, $1, $2
  $4 = %93<builtinGetArgumentCount>
  $5 = dup $0 by 1
  $6 = %89<Examples:fibonacci:recursive:0:5>
  $7 = call $4<%93<builtinGetArgumentCount>> with $0 ($6<%89<Examples:fibonacci:recursive:0:5>> is responsible)
  $8 = %92<builtinEquals>
  $9 = dup $7 by 1
  $10 = %128<2>
  $11 = call $8<%92<builtinEquals>> with $7 $10<%128<2>> ($6<%89<Examples:fibonacci:recursive:0:5>> is responsible)
  $12 = dup $0 by 1
  $13 = dup $1 by 1
  $14 = dup $2 by 1
  $15 = { body_139 capturing $0, $1, $2 }
  $16 = dup $7 by 1
  $17 = { body_140 capturing $7 }
  $18 = %94<builtinIfElse>
  $19 = dup $11 by 1
  $20 = dup $15 by 1
  $21 = dup $17 by 1
  $22 = call $18<%94<builtinIfElse>> with $11 $15 $17 ($6<%89<Examples:fibonacci:recursive:0:5>> is responsible)
  $23 = drop $17
  $24 = drop $15
  $25 = drop $11
  $26 = drop $7
  $27 = $22
body_142 (responsible $4) =
  # Original HIR IDs: Examples:fibonacci:recursive:0:5:calleeIsTag:else
  # Captured IDs: $0, $1, $2, $3
  $5 = %92<builtinEquals>
  $6 = dup $3 by 1
  $7 = %113<Function>
  $8 = %89<Examples:fibonacci:recursive:0:5>
  $9 = call $5<%92<builtinEquals>> with $3 $7<%113<Function>> ($8<%89<Examples:fibonacci:recursive:0:5>> is responsible)
  $10 = dup $0 by 1
  $11 = dup $1 by 1
  $12 = dup $2 by 1
  $13 = { body_141 capturing $0, $1, $2 }
  $14 = %94<builtinIfElse>
  $15 = dup $9 by 1
  $16 = dup $13 by 1
  $17 = %194<{ body_131 }>
  $18 = call $14<%94<builtinIfElse>> with $9 $13 $17<%194<{ body_131 }>> ($8<%89<Examples:fibonacci:recursive:0:5>> is responsible)
  $19 = drop $13
  $20 = drop $9
  $21 = $18
body_143 $1 $2 (+ responsible $3) =
  # Original HIR IDs: Examples:fibonacci:recursive:0
  # Captured IDs: $0
  $4 = dup $1 by 1
  $5 = { body_137 capturing $1 }
  $6 = %109<builtinTypeOf>
  $7 = dup $0 by 1
  $8 = %89<Examples:fibonacci:recursive:0:5>
  $9 = call $6<%109<builtinTypeOf>> with $0 ($8<%89<Examples:fibonacci:recursive:0:5>> is responsible)
  $10 = %92<builtinEquals>
  $11 = dup $9 by 1
  $12 = %123<Tag>
  $13 = call $10<%92<builtinEquals>> with $9 $12<%123<Tag>> ($8<%89<Examples:fibonacci:recursive:0:5>> is responsible)
  $14 = dup $0 by 1
  $15 = { body_138 capturing $0 }
  $16 = dup $0 by 1
  $17 = dup $2 by 1
  $18 = dup $5 by 1
  $19 = dup $9 by 1
  $20 = { body_142 capturing $0, $2, $5, $9 }
  $21 = %94<builtinIfElse>
  $22 = dup $13 by 1
  $23 = dup $15 by 1
  $24 = dup $20 by 1
  $25 = call $21<%94<builtinIfElse>> with $13 $15 $20 ($8<%89<Examples:fibonacci:recursive:0:5>> is responsible)
  $26 = drop $20
  $27 = drop $15
  $28 = drop $13
  $29 = drop $9
  $30 = drop $5
  $31 = drop $2
  $32 = drop $1
  $33 = $25
body_144 $0 $1 (+ responsible $2) =
  # Original HIR IDs: Examples:fibonacci:recursive
  # Captured IDs: none
  $3 = dup $1 by 1
  $4 = { body_143 capturing $1 }
  $5 = %90<Examples:fibonacci:recursive:5>
  $6 = dup $4 by 1
  $7 = dup $4 by 1
  $8 = dup $0 by 1
  $9 = trace: tail call of $4 with $4 $0 ($5<%90<Examples:fibonacci:recursive:5>> is responsible, code is at $5<%90<Examples:fibonacci:recursive:5>>)
  $10 = dup $4 by 1
  $11 = dup $4 by 1
  $12 = dup $0 by 1
  $13 = call $4 with $4 $0 ($5<%90<Examples:fibonacci:recursive:5>> is responsible)
  $14 = drop $4
  $15 = drop $1
  $16 = drop $0
  $17 = $13
body_145 $0 $1 (+ responsible $2) =
  # Original HIR IDs: Examples:fibonacci:compareTo
  # Captured IDs: none
  $3 = %78<Examples:fibonacci:compareTo:8>
  $4 = %168<{ body_15 }>
  $5 = dup $0 by 1
  $6 = dup $1 by 1
  $7 = trace: tail call of $4<%168<{ body_15 }>> with $0 $1 ($3<%78<Examples:fibonacci:compareTo:8>> is responsible, code is at $3<%78<Examples:fibonacci:compareTo:8>>)
  $8 = %109<builtinTypeOf>
  $9 = dup $0 by 1
  $10 = %32<Builtins::typeIs:19>
  $11 = call $8<%109<builtinTypeOf>> with $0 ($10<%32<Builtins::typeIs:19>> is responsible)
  $12 = %92<builtinEquals>
  $13 = dup $11 by 1
  $14 = %114<Int>
  $15 = %33<Builtins::typeIs:25>
  $16 = call $12<%92<builtinEquals>> with $11 $14<%114<Int>> ($15<%33<Builtins::typeIs:25>> is responsible)
  $17 = %17<Builtins::intCompareTo:5>
  $18 = %159<{ body_6 }>
  $19 = dup $16 by 1
  $20 = %139<"`a | typeIs Int` was not satisfied">
  $21 = trace: start of call of $18<%159<{ body_6 }>> with $16 $20<%139<"`a | typeIs Int` was not satisfied">> $3<%78<Examples:fibonacci:compareTo:8>> ($17<%17<Builtins::intCompareTo:5>> is responsible, code is at $17<%17<Builtins::intCompareTo:5>>)
  $22 = dup $16 by 1
  $23 = call $18<%159<{ body_6 }>> with $16 $20<%139<"`a | typeIs Int` was not satisfied">> $3<%78<Examples:fibonacci:compareTo:8>> ($17<%17<Builtins::intCompareTo:5>> is responsible)
  $24 = trace: end of call
  $25 = dup $1 by 1
  $26 = call $8<%109<builtinTypeOf>> with $1 ($10<%32<Builtins::typeIs:19>> is responsible)
  $27 = dup $26 by 1
  $28 = call $12<%92<builtinEquals>> with $26 $14<%114<Int>> ($15<%33<Builtins::typeIs:25>> is responsible)
  $29 = %15<Builtins::intCompareTo:11>
  $30 = dup $28 by 1
  $31 = %140<"`b | typeIs Int` was not satisfied">
  $32 = trace: start of call of $18<%159<{ body_6 }>> with $28 $31<%140<"`b | typeIs Int` was not satisfied">> $3<%78<Examples:fibonacci:compareTo:8>> ($29<%15<Builtins::intCompareTo:11>> is responsible, code is at $29<%15<Builtins::intCompareTo:11>>)
  $33 = dup $28 by 1
  $34 = call $18<%159<{ body_6 }>> with $28 $31<%140<"`b | typeIs Int` was not satisfied">> $3<%78<Examples:fibonacci:compareTo:8>> ($29<%15<Builtins::intCompareTo:11>> is responsible)
  $35 = trace: end of call
  $36 = %96<builtinIntCompareTo>
  $37 = dup $0 by 1
  $38 = dup $1 by 1
  $39 = %16<Builtins::intCompareTo:18>
  $40 = call $36<%96<builtinIntCompareTo>> with $0 $1 ($39<%16<Builtins::intCompareTo:18>> is responsible)
  $41 = drop $34
  $42 = drop $28
  $43 = drop $26
  $44 = drop $23
  $45 = drop $16
  $46 = drop $11
  $47 = drop $1
  $48 = drop $0
  $49 = $40
body_146 $0 $1 (+ responsible $2) =
  # Original HIR IDs: Examples:fibonacci:isLessThan
  # Captured IDs: none
  $3 = %87<Examples:fibonacci:isLessThan:9>
  $4 = %196<{ body_145 }>
  $5 = dup $0 by 1
  $6 = dup $1 by 1
  $7 = trace: start of call of $4<%196<{ body_145 }>> with $0 $1 ($3<%87<Examples:fibonacci:isLessThan:9>> is responsible, code is at $3<%87<Examples:fibonacci:isLessThan:9>>)
  $8 = %78<Examples:fibonacci:compareTo:8>
  $9 = %168<{ body_15 }>
  $10 = dup $0 by 1
  $11 = dup $1 by 1
  $12 = trace: start of call of $9<%168<{ body_15 }>> with $0 $1 ($8<%78<Examples:fibonacci:compareTo:8>> is responsible, code is at $8<%78<Examples:fibonacci:compareTo:8>>)
  $13 = %109<builtinTypeOf>
  $14 = dup $0 by 1
  $15 = %32<Builtins::typeIs:19>
  $16 = call $13<%109<builtinTypeOf>> with $0 ($15<%32<Builtins::typeIs:19>> is responsible)
  $17 = %92<builtinEquals>
  $18 = dup $16 by 1
  $19 = %114<Int>
  $20 = %33<Builtins::typeIs:25>
  $21 = call $17<%92<builtinEquals>> with $16 $19<%114<Int>> ($20<%33<Builtins::typeIs:25>> is responsible)
  $22 = %17<Builtins::intCompareTo:5>
  $23 = %159<{ body_6 }>
  $24 = dup $21 by 1
  $25 = %139<"`a | typeIs Int` was not satisfied">
  $26 = trace: start of call of $23<%159<{ body_6 }>> with $21 $25<%139<"`a | typeIs Int` was not satisfied">> $8<%78<Examples:fibonacci:compareTo:8>> ($22<%17<Builtins::intCompareTo:5>> is responsible, code is at $22<%17<Builtins::intCompareTo:5>>)
  $27 = dup $21 by 1
  $28 = call $23<%159<{ body_6 }>> with $21 $25<%139<"`a | typeIs Int` was not satisfied">> $8<%78<Examples:fibonacci:compareTo:8>> ($22<%17<Builtins::intCompareTo:5>> is responsible)
  $29 = trace: end of call
  $30 = dup $1 by 1
  $31 = call $13<%109<builtinTypeOf>> with $1 ($15<%32<Builtins::typeIs:19>> is responsible)
  $32 = dup $31 by 1
  $33 = call $17<%92<builtinEquals>> with $31 $19<%114<Int>> ($20<%33<Builtins::typeIs:25>> is responsible)
  $34 = %15<Builtins::intCompareTo:11>
  $35 = dup $33 by 1
  $36 = %140<"`b | typeIs Int` was not satisfied">
  $37 = trace: start of call of $23<%159<{ body_6 }>> with $33 $36<%140<"`b | typeIs Int` was not satisfied">> $8<%78<Examples:fibonacci:compareTo:8>> ($34<%15<Builtins::intCompareTo:11>> is responsible, code is at $34<%15<Builtins::intCompareTo:11>>)
  $38 = dup $33 by 1
  $39 = call $23<%159<{ body_6 }>> with $33 $36<%140<"`b | typeIs Int` was not satisfied">> $8<%78<Examples:fibonacci:compareTo:8>> ($34<%15<Builtins::intCompareTo:11>> is responsible)
  $40 = trace: end of call
  $41 = %96<builtinIntCompareTo>
  $42 = dup $0 by 1
  $43 = dup $1 by 1
  $44 = %16<Builtins::intCompareTo:18>
  $45 = call $41<%96<builtinIntCompareTo>> with $0 $1 ($44<%16<Builtins::intCompareTo:18>> is responsible)
  $46 = trace: end of call
  $47 = trace: end of call
  $48 = dup $45 by 1
  $49 = %115<Less>
  $50 = %0<Builtins::equals:6>
  $51 = call $17<%92<builtinEquals>> with $45 $49<%115<Less>> ($50<%0<Builtins::equals:6>> is responsible)
  $52 = drop $45
  $53 = drop $39
  $54 = drop $33
  $55 = drop $31
  $56 = drop $28
  $57 = drop $21
  $58 = drop $16
  $59 = drop $1
  $60 = drop $0
  $61 = $51
body_147 (responsible $0) =
  # Original HIR IDs: Examples:fibonacci:fibonacci:2:11:10:doesTagHaveValue:then
  # Captured IDs: none
  $1 = %137<"You called a tag that already has a value.">
  $2 = %79<Examples:fibonacci:fibonacci:2:11:10>
  $3 = panicking because $1<%137<"You called a tag that already has a value.">> ($2<%79<Examples:fibonacci:fibonacci:2:11:10>> is at fault)
body_148 (responsible $0) =
  # Original HIR IDs: Examples:fibonacci:fibonacci:2:11:10:calleeIsFunction:else
  # Captured IDs: none
  $1 = %138<"You can only call tags or functions.">
  $2 = %79<Examples:fibonacci:fibonacci:2:11:10>
  $3 = panicking because $1<%138<"You can only call tags or functions.">> ($2<%79<Examples:fibonacci:fibonacci:2:11:10>> is at fault)
body_149 (responsible $0) =
  # Original HIR IDs: Examples:fibonacci:fibonacci:2:11:27:doesTagHaveValue:then
  # Captured IDs: none
  $1 = %137<"You called a tag that already has a value.">
  $2 = %81<Examples:fibonacci:fibonacci:2:11:27>
  $3 = panicking because $1<%137<"You called a tag that already has a value.">> ($2<%81<Examples:fibonacci:fibonacci:2:11:27>> is at fault)
body_150 (responsible $0) =
  # Original HIR IDs: Examples:fibonacci:fibonacci:2:11:27:calleeIsFunction:else
  # Captured IDs: none
  $1 = %138<"You can only call tags or functions.">
  $2 = %81<Examples:fibonacci:fibonacci:2:11:27>
  $3 = panicking because $1<%138<"You can only call tags or functions.">> ($2<%81<Examples:fibonacci:fibonacci:2:11:27>> is at fault)
body_151 (responsible $1) =
  # Original HIR IDs: Examples:fibonacci:fibonacci:2:10
  # Captured IDs: $0
  $2 = dup $0 by 1
  $3 = $0
body_152 (responsible $2) =
  # Original HIR IDs: Examples:fibonacci:fibonacci:2:11:10:doesTagHaveValue:else
  # Captured IDs: $0, $1
  $3 = %105<builtinTagWithValue>
  $4 = dup $0 by 1
  $5 = dup $1 by 1
  $6 = %79<Examples:fibonacci:fibonacci:2:11:10>
  $7 = call $3<%105<builtinTagWithValue>> with $0 $1 ($6<%79<Examples:fibonacci:fibonacci:2:11:10>> is responsible)
body_153 (responsible $2) =
  # Original HIR IDs: Examples:fibonacci:fibonacci:2:11:10:calleeIsTag:then
  # Captured IDs: $0, $1
  $3 = %104<builtinTagHasValue>
  $4 = dup $0 by 1
  $5 = %79<Examples:fibonacci:fibonacci:2:11:10>
  $6 = call $3<%104<builtinTagHasValue>> with $0 ($5<%79<Examples:fibonacci:fibonacci:2:11:10>> is responsible)
  $7 = dup $0 by 1
  $8 = dup $1 by 1
  $9 = { body_152 capturing $0, $1 }
  $10 = %94<builtinIfElse>
  $11 = dup $6 by 1
  $12 = %198<{ body_147 }>
  $13 = dup $9 by 1
  $14 = call $10<%94<builtinIfElse>> with $6 $12<%198<{ body_147 }>> $9 ($5<%79<Examples:fibonacci:fibonacci:2:11:10>> is responsible)
  $15 = drop $9
  $16 = drop $6
  $17 = $14
body_154 (responsible $2) =
  # Original HIR IDs: Examples:fibonacci:fibonacci:2:11:10:hasCorrectNumberOfArguments:then
  # Captured IDs: $0, $1
  $3 = %79<Examples:fibonacci:fibonacci:2:11:10>
  $4 = dup $0 by 1
  $5 = dup $1 by 1
  $6 = trace: tail call of $0 with $1 ($3<%79<Examples:fibonacci:fibonacci:2:11:10>> is responsible, code is at $3<%79<Examples:fibonacci:fibonacci:2:11:10>>)
  $7 = dup $0 by 1
  $8 = dup $1 by 1
  $9 = call $0 with $1 ($3<%79<Examples:fibonacci:fibonacci:2:11:10>> is responsible)
body_155 (responsible $1) =
  # Original HIR IDs: Examples:fibonacci:fibonacci:2:11:10:hasCorrectNumberOfArguments:else
  # Captured IDs: $0
  $2 = %108<builtinToDebugText>
  $3 = dup $0 by 1
  $4 = %79<Examples:fibonacci:fibonacci:2:11:10>
  $5 = call $2<%108<builtinToDebugText>> with $0 ($4<%79<Examples:fibonacci:fibonacci:2:11:10>> is responsible)
  $6 = %107<builtinTextConcatenate>
  $7 = %136<"You called a function that expects ">
  $8 = dup $5 by 1
  $9 = call $6<%107<builtinTextConcatenate>> with $7<%136<"You called a function that expects ">> $5 ($4<%79<Examples:fibonacci:fibonacci:2:11:10>> is responsible)
  $10 = dup $9 by 1
  $11 = %129<" arguments with 1 arguments.">
  $12 = call $6<%107<builtinTextConcatenate>> with $9 $11<%129<" arguments with 1 arguments.">> ($4<%79<Examples:fibonacci:fibonacci:2:11:10>> is responsible)
  $13 = dup $12 by 1
  $14 = panicking because $12 ($4<%79<Examples:fibonacci:fibonacci:2:11:10>> is at fault)
  $15 = drop $12
  $16 = drop $9
  $17 = drop $5
  $18 = $14
body_156 (responsible $2) =
  # Original HIR IDs: Examples:fibonacci:fibonacci:2:11:10:calleeIsFunction:then
  # Captured IDs: $0, $1
  $3 = %93<builtinGetArgumentCount>
  $4 = dup $0 by 1
  $5 = %79<Examples:fibonacci:fibonacci:2:11:10>
  $6 = call $3<%93<builtinGetArgumentCount>> with $0 ($5<%79<Examples:fibonacci:fibonacci:2:11:10>> is responsible)
  $7 = %92<builtinEquals>
  $8 = dup $6 by 1
  $9 = %127<1>
  $10 = call $7<%92<builtinEquals>> with $6 $9<%127<1>> ($5<%79<Examples:fibonacci:fibonacci:2:11:10>> is responsible)
  $11 = dup $0 by 1
  $12 = dup $1 by 1
  $13 = { body_154 capturing $0, $1 }
  $14 = dup $6 by 1
  $15 = { body_155 capturing $6 }
  $16 = %94<builtinIfElse>
  $17 = dup $10 by 1
  $18 = dup $13 by 1
  $19 = dup $15 by 1
  $20 = call $16<%94<builtinIfElse>> with $10 $13 $15 ($5<%79<Examples:fibonacci:fibonacci:2:11:10>> is responsible)
  $21 = drop $15
  $22 = drop $13
  $23 = drop $10
  $24 = drop $6
  $25 = $20
body_157 (responsible $3) =
  # Original HIR IDs: Examples:fibonacci:fibonacci:2:11:10:calleeIsTag:else
  # Captured IDs: $0, $1, $2
  $4 = %92<builtinEquals>
  $5 = dup $2 by 1
  $6 = %113<Function>
  $7 = %79<Examples:fibonacci:fibonacci:2:11:10>
  $8 = call $4<%92<builtinEquals>> with $2 $6<%113<Function>> ($7<%79<Examples:fibonacci:fibonacci:2:11:10>> is responsible)
  $9 = dup $0 by 1
  $10 = dup $1 by 1
  $11 = { body_156 capturing $0, $1 }
  $12 = %94<builtinIfElse>
  $13 = dup $8 by 1
  $14 = dup $11 by 1
  $15 = %199<{ body_148 }>
  $16 = call $12<%94<builtinIfElse>> with $8 $11 $15<%199<{ body_148 }>> ($7<%79<Examples:fibonacci:fibonacci:2:11:10>> is responsible)
  $17 = drop $11
  $18 = drop $8
  $19 = $16
body_158 (responsible $2) =
  # Original HIR IDs: Examples:fibonacci:fibonacci:2:11:27:doesTagHaveValue:else
  # Captured IDs: $0, $1
  $3 = %105<builtinTagWithValue>
  $4 = dup $0 by 1
  $5 = dup $1 by 1
  $6 = %81<Examples:fibonacci:fibonacci:2:11:27>
  $7 = call $3<%105<builtinTagWithValue>> with $0 $1 ($6<%81<Examples:fibonacci:fibonacci:2:11:27>> is responsible)
body_159 (responsible $2) =
  # Original HIR IDs: Examples:fibonacci:fibonacci:2:11:27:calleeIsTag:then
  # Captured IDs: $0, $1
  $3 = %104<builtinTagHasValue>
  $4 = dup $0 by 1
  $5 = %81<Examples:fibonacci:fibonacci:2:11:27>
  $6 = call $3<%104<builtinTagHasValue>> with $0 ($5<%81<Examples:fibonacci:fibonacci:2:11:27>> is responsible)
  $7 = dup $0 by 1
  $8 = dup $1 by 1
  $9 = { body_158 capturing $0, $1 }
  $10 = %94<builtinIfElse>
  $11 = dup $6 by 1
  $12 = %200<{ body_149 }>
  $13 = dup $9 by 1
  $14 = call $10<%94<builtinIfElse>> with $6 $12<%200<{ body_149 }>> $9 ($5<%81<Examples:fibonacci:fibonacci:2:11:27>> is responsible)
  $15 = drop $9
  $16 = drop $6
  $17 = $14
body_160 (responsible $2) =
  # Original HIR IDs: Examples:fibonacci:fibonacci:2:11:27:hasCorrectNumberOfArguments:then
  # Captured IDs: $0, $1
  $3 = %81<Examples:fibonacci:fibonacci:2:11:27>
  $4 = dup $0 by 1
  $5 = dup $1 by 1
  $6 = trace: tail call of $0 with $1 ($3<%81<Examples:fibonacci:fibonacci:2:11:27>> is responsible, code is at $3<%81<Examples:fibonacci:fibonacci:2:11:27>>)
  $7 = dup $0 by 1
  $8 = dup $1 by 1
  $9 = call $0 with $1 ($3<%81<Examples:fibonacci:fibonacci:2:11:27>> is responsible)
body_161 (responsible $1) =
  # Original HIR IDs: Examples:fibonacci:fibonacci:2:11:27:hasCorrectNumberOfArguments:else
  # Captured IDs: $0
  $2 = %108<builtinToDebugText>
  $3 = dup $0 by 1
  $4 = %81<Examples:fibonacci:fibonacci:2:11:27>
  $5 = call $2<%108<builtinToDebugText>> with $0 ($4<%81<Examples:fibonacci:fibonacci:2:11:27>> is responsible)
  $6 = %107<builtinTextConcatenate>
  $7 = %136<"You called a function that expects ">
  $8 = dup $5 by 1
  $9 = call $6<%107<builtinTextConcatenate>> with $7<%136<"You called a function that expects ">> $5 ($4<%81<Examples:fibonacci:fibonacci:2:11:27>> is responsible)
  $10 = dup $9 by 1
  $11 = %129<" arguments with 1 arguments.">
  $12 = call $6<%107<builtinTextConcatenate>> with $9 $11<%129<" arguments with 1 arguments.">> ($4<%81<Examples:fibonacci:fibonacci:2:11:27>> is responsible)
  $13 = dup $12 by 1
  $14 = panicking because $12 ($4<%81<Examples:fibonacci:fibonacci:2:11:27>> is at fault)
  $15 = drop $12
  $16 = drop $9
  $17 = drop $5
  $18 = $14
body_162 (responsible $2) =
  # Original HIR IDs: Examples:fibonacci:fibonacci:2:11:27:calleeIsFunction:then
  # Captured IDs: $0, $1
  $3 = %93<builtinGetArgumentCount>
  $4 = dup $0 by 1
  $5 = %81<Examples:fibonacci:fibonacci:2:11:27>
  $6 = call $3<%93<builtinGetArgumentCount>> with $0 ($5<%81<Examples:fibonacci:fibonacci:2:11:27>> is responsible)
  $7 = %92<builtinEquals>
  $8 = dup $6 by 1
  $9 = %127<1>
  $10 = call $7<%92<builtinEquals>> with $6 $9<%127<1>> ($5<%81<Examples:fibonacci:fibonacci:2:11:27>> is responsible)
  $11 = dup $0 by 1
  $12 = dup $1 by 1
  $13 = { body_160 capturing $0, $1 }
  $14 = dup $6 by 1
  $15 = { body_161 capturing $6 }
  $16 = %94<builtinIfElse>
  $17 = dup $10 by 1
  $18 = dup $13 by 1
  $19 = dup $15 by 1
  $20 = call $16<%94<builtinIfElse>> with $10 $13 $15 ($5<%81<Examples:fibonacci:fibonacci:2:11:27>> is responsible)
  $21 = drop $15
  $22 = drop $13
  $23 = drop $10
  $24 = drop $6
  $25 = $20
body_163 (responsible $3) =
  # Original HIR IDs: Examples:fibonacci:fibonacci:2:11:27:calleeIsTag:else
  # Captured IDs: $0, $1, $2
  $4 = %92<builtinEquals>
  $5 = dup $2 by 1
  $6 = %113<Function>
  $7 = %81<Examples:fibonacci:fibonacci:2:11:27>
  $8 = call $4<%92<builtinEquals>> with $2 $6<%113<Function>> ($7<%81<Examples:fibonacci:fibonacci:2:11:27>> is responsible)
  $9 = dup $0 by 1
  $10 = dup $1 by 1
  $11 = { body_162 capturing $0, $1 }
  $12 = %94<builtinIfElse>
  $13 = dup $8 by 1
  $14 = dup $11 by 1
  $15 = %201<{ body_150 }>
  $16 = call $12<%94<builtinIfElse>> with $8 $11 $15<%201<{ body_150 }>> ($7<%81<Examples:fibonacci:fibonacci:2:11:27>> is responsible)
  $17 = drop $11
  $18 = drop $8
  $19 = $16
body_164 (responsible $2) =
  # Original HIR IDs: Examples:fibonacci:fibonacci:2:11
  # Captured IDs: $0, $1
  $3 = %83<Examples:fibonacci:fibonacci:2:11:9>
  $4 = %170<{ body_17 }>
  $5 = dup $1 by 1
  $6 = %127<1>
  $7 = trace: start of call of $4<%170<{ body_17 }>> with $1 $6<%127<1>> ($3<%83<Examples:fibonacci:fibonacci:2:11:9>> is responsible, code is at $3<%83<Examples:fibonacci:fibonacci:2:11:9>>)
  $8 = %109<builtinTypeOf>
  $9 = dup $1 by 1
  $10 = %32<Builtins::typeIs:19>
  $11 = call $8<%109<builtinTypeOf>> with $1 ($10<%32<Builtins::typeIs:19>> is responsible)
  $12 = %92<builtinEquals>
  $13 = dup $11 by 1
  $14 = %114<Int>
  $15 = %33<Builtins::typeIs:25>
  $16 = call $12<%92<builtinEquals>> with $11 $14<%114<Int>> ($15<%33<Builtins::typeIs:25>> is responsible)
  $17 = %22<Builtins::intSubtract:5>
  $18 = %159<{ body_6 }>
  $19 = dup $16 by 1
  $20 = %148<"`minuend | typeIs Int` was not satisfied">
  $21 = trace: start of call of $18<%159<{ body_6 }>> with $16 $20<%148<"`minuend | typeIs Int` was not satisfied">> $3<%83<Examples:fibonacci:fibonacci:2:11:9>> ($17<%22<Builtins::intSubtract:5>> is responsible, code is at $17<%22<Builtins::intSubtract:5>>)
  $22 = dup $16 by 1
  $23 = call $18<%159<{ body_6 }>> with $16 $20<%148<"`minuend | typeIs Int` was not satisfied">> $3<%83<Examples:fibonacci:fibonacci:2:11:9>> ($17<%22<Builtins::intSubtract:5>> is responsible)
  $24 = trace: end of call
  $25 = %98<builtinIntSubtract>
  $26 = dup $1 by 1
  $27 = %21<Builtins::intSubtract:18>
  $28 = call $25<%98<builtinIntSubtract>> with $1 $6<%127<1>> ($27<%21<Builtins::intSubtract:18>> is responsible)
  $29 = trace: end of call
  $30 = dup $0 by 1
  $31 = %79<Examples:fibonacci:fibonacci:2:11:10>
  $32 = call $8<%109<builtinTypeOf>> with $0 ($31<%79<Examples:fibonacci:fibonacci:2:11:10>> is responsible)
  $33 = dup $32 by 1
  $34 = %123<Tag>
  $35 = call $12<%92<builtinEquals>> with $32 $34<%123<Tag>> ($31<%79<Examples:fibonacci:fibonacci:2:11:10>> is responsible)
  $36 = dup $0 by 1
  $37 = dup $28 by 1
  $38 = { body_153 capturing $0, $28 }
  $39 = dup $0 by 1
  $40 = dup $28 by 1
  $41 = dup $32 by 1
  $42 = { body_157 capturing $0, $28, $32 }
  $43 = %94<builtinIfElse>
  $44 = dup $35 by 1
  $45 = dup $38 by 1
  $46 = dup $42 by 1
  $47 = call $43<%94<builtinIfElse>> with $35 $38 $42 ($31<%79<Examples:fibonacci:fibonacci:2:11:10>> is responsible)
  $48 = %80<Examples:fibonacci:fibonacci:2:11:26>
  $49 = dup $1 by 1
  $50 = %128<2>
  $51 = trace: start of call of $4<%170<{ body_17 }>> with $1 $50<%128<2>> ($48<%80<Examples:fibonacci:fibonacci:2:11:26>> is responsible, code is at $48<%80<Examples:fibonacci:fibonacci:2:11:26>>)
  $52 = dup $16 by 1
  $53 = trace: start of call of $18<%159<{ body_6 }>> with $16 $20<%148<"`minuend | typeIs Int` was not satisfied">> $48<%80<Examples:fibonacci:fibonacci:2:11:26>> ($17<%22<Builtins::intSubtract:5>> is responsible, code is at $17<%22<Builtins::intSubtract:5>>)
  $54 = dup $16 by 1
  $55 = call $18<%159<{ body_6 }>> with $16 $20<%148<"`minuend | typeIs Int` was not satisfied">> $48<%80<Examples:fibonacci:fibonacci:2:11:26>> ($17<%22<Builtins::intSubtract:5>> is responsible)
  $56 = trace: end of call
  $57 = dup $1 by 1
  $58 = call $25<%98<builtinIntSubtract>> with $1 $50<%128<2>> ($27<%21<Builtins::intSubtract:18>> is responsible)
  $59 = trace: end of call
  $60 = dup $0 by 1
  $61 = %81<Examples:fibonacci:fibonacci:2:11:27>
  $62 = call $8<%109<builtinTypeOf>> with $0 ($61<%81<Examples:fibonacci:fibonacci:2:11:27>> is responsible)
  $63 = dup $62 by 1
  $64 = call $12<%92<builtinEquals>> with $62 $34<%123<Tag>> ($61<%81<Examples:fibonacci:fibonacci:2:11:27>> is responsible)
  $65 = dup $0 by 1
  $66 = dup $58 by 1
  $67 = { body_159 capturing $0, $58 }
  $68 = dup $0 by 1
  $69 = dup $58 by 1
  $70 = dup $62 by 1
  $71 = { body_163 capturing $0, $58, $62 }
  $72 = dup $64 by 1
  $73 = dup $67 by 1
  $74 = dup $71 by 1
  $75 = call $43<%94<builtinIfElse>> with $64 $67 $71 ($61<%81<Examples:fibonacci:fibonacci:2:11:27>> is responsible)
  $76 = %82<Examples:fibonacci:fibonacci:2:11:28>
  $77 = %167<{ body_14 }>
  $78 = dup $47 by 1
  $79 = dup $75 by 1
  $80 = trace: tail call of $77<%167<{ body_14 }>> with $47 $75 ($76<%82<Examples:fibonacci:fibonacci:2:11:28>> is responsible, code is at $76<%82<Examples:fibonacci:fibonacci:2:11:28>>)
  $81 = dup $47 by 1
  $82 = dup $75 by 1
  $83 = call $77<%167<{ body_14 }>> with $47 $75 ($76<%82<Examples:fibonacci:fibonacci:2:11:28>> is responsible)
  $84 = drop $75
  $85 = drop $71
  $86 = drop $67
  $87 = drop $64
  $88 = drop $62
  $89 = drop $58
  $90 = drop $55
  $91 = drop $47
  $92 = drop $42
  $93 = drop $38
  $94 = drop $35
  $95 = drop $32
  $96 = drop $28
  $97 = drop $23
  $98 = drop $16
  $99 = drop $11
  $100 = $83
body_165 $0 $1 (+ responsible $2) =
  # Original HIR IDs: Examples:fibonacci:fibonacci:2
  # Captured IDs: none
  $3 = %85<Examples:fibonacci:fibonacci:2:9>
  $4 = %197<{ body_146 }>
  $5 = dup $1 by 1
  $6 = %128<2>
  $7 = trace: start of call of $4<%197<{ body_146 }>> with $1 $6<%128<2>> ($3<%85<Examples:fibonacci:fibonacci:2:9>> is responsible, code is at $3<%85<Examples:fibonacci:fibonacci:2:9>>)
  $8 = %87<Examples:fibonacci:isLessThan:9>
  $9 = %196<{ body_145 }>
  $10 = dup $1 by 1
  $11 = trace: start of call of $9<%196<{ body_145 }>> with $1 $6<%128<2>> ($8<%87<Examples:fibonacci:isLessThan:9>> is responsible, code is at $8<%87<Examples:fibonacci:isLessThan:9>>)
  $12 = %78<Examples:fibonacci:compareTo:8>
  $13 = %168<{ body_15 }>
  $14 = dup $1 by 1
  $15 = trace: start of call of $13<%168<{ body_15 }>> with $1 $6<%128<2>> ($12<%78<Examples:fibonacci:compareTo:8>> is responsible, code is at $12<%78<Examples:fibonacci:compareTo:8>>)
  $16 = %109<builtinTypeOf>
  $17 = dup $1 by 1
  $18 = %32<Builtins::typeIs:19>
  $19 = call $16<%109<builtinTypeOf>> with $1 ($18<%32<Builtins::typeIs:19>> is responsible)
  $20 = %92<builtinEquals>
  $21 = dup $19 by 1
  $22 = %114<Int>
  $23 = %33<Builtins::typeIs:25>
  $24 = call $20<%92<builtinEquals>> with $19 $22<%114<Int>> ($23<%33<Builtins::typeIs:25>> is responsible)
  $25 = %17<Builtins::intCompareTo:5>
  $26 = %159<{ body_6 }>
  $27 = dup $24 by 1
  $28 = %139<"`a | typeIs Int` was not satisfied">
  $29 = trace: start of call of $26<%159<{ body_6 }>> with $24 $28<%139<"`a | typeIs Int` was not satisfied">> $12<%78<Examples:fibonacci:compareTo:8>> ($25<%17<Builtins::intCompareTo:5>> is responsible, code is at $25<%17<Builtins::intCompareTo:5>>)
  $30 = dup $24 by 1
  $31 = call $26<%159<{ body_6 }>> with $24 $28<%139<"`a | typeIs Int` was not satisfied">> $12<%78<Examples:fibonacci:compareTo:8>> ($25<%17<Builtins::intCompareTo:5>> is responsible)
  $32 = trace: end of call
  $33 = %96<builtinIntCompareTo>
  $34 = dup $1 by 1
  $35 = %16<Builtins::intCompareTo:18>
  $36 = call $33<%96<builtinIntCompareTo>> with $1 $6<%128<2>> ($35<%16<Builtins::intCompareTo:18>> is responsible)
  $37 = trace: end of call
  $38 = trace: end of call
  $39 = dup $36 by 1
  $40 = %115<Less>
  $41 = %0<Builtins::equals:6>
  $42 = call $20<%92<builtinEquals>> with $36 $40<%115<Less>> ($41<%0<Builtins::equals:6>> is responsible)
  $43 = trace: end of call
  $44 = dup $1 by 1
  $45 = { body_151 capturing $1 }
  $46 = dup $0 by 1
  $47 = dup $1 by 1
  $48 = { body_164 capturing $0, $1 }
  $49 = %84<Examples:fibonacci:fibonacci:2:12>
  $50 = %166<{ body_13 }>
  $51 = dup $42 by 1
  $52 = dup $45 by 1
  $53 = dup $48 by 1
  $54 = trace: tail call of $50<%166<{ body_13 }>> with $42 $45 $48 ($49<%84<Examples:fibonacci:fibonacci:2:12>> is responsible, code is at $49<%84<Examples:fibonacci:fibonacci:2:12>>)
  $55 = dup $42 by 1
  $56 = dup $45 by 1
  $57 = dup $48 by 1
  $58 = call $50<%166<{ body_13 }>> with $42 $45 $48 ($49<%84<Examples:fibonacci:fibonacci:2:12>> is responsible)
  $59 = drop $48
  $60 = drop $45
  $61 = drop $42
  $62 = drop $36
  $63 = drop $31
  $64 = drop $24
  $65 = drop $19
  $66 = drop $1
  $67 = drop $0
  $68 = $58
body_166 (responsible $1) =
  # Original HIR IDs: Examples:fibonacci:recursive:0:0:3:calleeIsTag:then
  # Captured IDs: $0
  $2 = %104<builtinTagHasValue>
  $3 = dup $0 by 1
  $4 = %88<Examples:fibonacci:recursive:0:0:3>
  $5 = call $2<%104<builtinTagHasValue>> with $0 ($4<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $6 = %94<builtinIfElse>
  $7 = dup $5 by 1
  $8 = %189<{ body_126 }>
  $9 = %190<{ body_127 }>
  $10 = call $6<%94<builtinIfElse>> with $5 $8<%189<{ body_126 }>> $9<%190<{ body_127 }>> ($4<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $11 = drop $5
  $12 = $10
body_167 (responsible $2) =
  # Original HIR IDs: Examples:fibonacci:recursive:0:0:3:hasCorrectNumberOfArguments:then
  # Captured IDs: $0, $1
  $3 = %88<Examples:fibonacci:recursive:0:0:3>
  $4 = dup $0 by 1
  $5 = dup $0 by 1
  $6 = dup $1 by 1
  $7 = trace: tail call of $0 with $0 $1 ($3<%88<Examples:fibonacci:recursive:0:0:3>> is responsible, code is at $3<%88<Examples:fibonacci:recursive:0:0:3>>)
  $8 = dup $0 by 1
  $9 = dup $0 by 1
  $10 = dup $1 by 1
  $11 = call $0 with $0 $1 ($3<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
body_168 (responsible $1) =
  # Original HIR IDs: Examples:fibonacci:recursive:0:0:3:hasCorrectNumberOfArguments:else
  # Captured IDs: $0
  $2 = %108<builtinToDebugText>
  $3 = dup $0 by 1
  $4 = %88<Examples:fibonacci:recursive:0:0:3>
  $5 = call $2<%108<builtinToDebugText>> with $0 ($4<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $6 = %107<builtinTextConcatenate>
  $7 = %136<"You called a function that expects ">
  $8 = dup $5 by 1
  $9 = call $6<%107<builtinTextConcatenate>> with $7<%136<"You called a function that expects ">> $5 ($4<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $10 = dup $9 by 1
  $11 = %130<" arguments with 2 arguments.">
  $12 = call $6<%107<builtinTextConcatenate>> with $9 $11<%130<" arguments with 2 arguments.">> ($4<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $13 = dup $12 by 1
  $14 = panicking because $12 ($4<%88<Examples:fibonacci:recursive:0:0:3>> is at fault)
  $15 = drop $12
  $16 = drop $9
  $17 = drop $5
  $18 = $14
body_169 (responsible $2) =
  # Original HIR IDs: Examples:fibonacci:recursive:0:0:3:calleeIsFunction:then
  # Captured IDs: $0, $1
  $3 = %93<builtinGetArgumentCount>
  $4 = dup $0 by 1
  $5 = %88<Examples:fibonacci:recursive:0:0:3>
  $6 = call $3<%93<builtinGetArgumentCount>> with $0 ($5<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $7 = %92<builtinEquals>
  $8 = dup $6 by 1
  $9 = %128<2>
  $10 = call $7<%92<builtinEquals>> with $6 $9<%128<2>> ($5<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $11 = dup $0 by 1
  $12 = dup $1 by 1
  $13 = { body_167 capturing $0, $1 }
  $14 = dup $6 by 1
  $15 = { body_168 capturing $6 }
  $16 = %94<builtinIfElse>
  $17 = dup $10 by 1
  $18 = dup $13 by 1
  $19 = dup $15 by 1
  $20 = call $16<%94<builtinIfElse>> with $10 $13 $15 ($5<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $21 = drop $15
  $22 = drop $13
  $23 = drop $10
  $24 = drop $6
  $25 = $20
body_170 (responsible $3) =
  # Original HIR IDs: Examples:fibonacci:recursive:0:0:3:calleeIsTag:else
  # Captured IDs: $0, $1, $2
  $4 = %92<builtinEquals>
  $5 = dup $2 by 1
  $6 = %113<Function>
  $7 = %88<Examples:fibonacci:recursive:0:0:3>
  $8 = call $4<%92<builtinEquals>> with $2 $6<%113<Function>> ($7<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $9 = dup $0 by 1
  $10 = dup $1 by 1
  $11 = { body_169 capturing $0, $1 }
  $12 = %94<builtinIfElse>
  $13 = dup $8 by 1
  $14 = dup $11 by 1
  $15 = %191<{ body_128 }>
  $16 = call $12<%94<builtinIfElse>> with $8 $11 $15<%191<{ body_128 }>> ($7<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $17 = drop $11
  $18 = drop $8
  $19 = $16
body_171 $1 (+ responsible $2) =
  # Original HIR IDs: Examples:fibonacci:recursive:0:0
  # Captured IDs: $0
  $3 = %109<builtinTypeOf>
  $4 = dup $0 by 1
  $5 = %88<Examples:fibonacci:recursive:0:0:3>
  $6 = call $3<%109<builtinTypeOf>> with $0 ($5<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $7 = %92<builtinEquals>
  $8 = dup $6 by 1
  $9 = %123<Tag>
  $10 = call $7<%92<builtinEquals>> with $6 $9<%123<Tag>> ($5<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $11 = dup $0 by 1
  $12 = { body_166 capturing $0 }
  $13 = dup $0 by 1
  $14 = dup $1 by 1
  $15 = dup $6 by 1
  $16 = { body_170 capturing $0, $1, $6 }
  $17 = %94<builtinIfElse>
  $18 = dup $10 by 1
  $19 = dup $12 by 1
  $20 = dup $16 by 1
  $21 = call $17<%94<builtinIfElse>> with $10 $12 $16 ($5<%88<Examples:fibonacci:recursive:0:0:3>> is responsible)
  $22 = drop $16
  $23 = drop $12
  $24 = drop $10
  $25 = drop $6
  $26 = drop $1
  $27 = $21
body_172 $0 $1 (+ responsible $2) =
  # Original HIR IDs: Examples:fibonacci:recursive:0
  # Captured IDs: none
  $3 = dup $0 by 1
  $4 = { body_171 capturing $0 }
  $5 = %89<Examples:fibonacci:recursive:0:5>
  $6 = %202<{ body_165 }>
  $7 = dup $4 by 1
  $8 = dup $1 by 1
  $9 = trace: tail call of $6<%202<{ body_165 }>> with $4 $1 ($5<%89<Examples:fibonacci:recursive:0:5>> is responsible, code is at $5<%89<Examples:fibonacci:recursive:0:5>>)
  $10 = dup $4 by 1
  $11 = dup $1 by 1
  $12 = call $6<%202<{ body_165 }>> with $4 $1 ($5<%89<Examples:fibonacci:recursive:0:5>> is responsible)
  $13 = drop $4
  $14 = drop $1
  $15 = drop $0
  $16 = $12
body_173 $0 (+ responsible $1) =
  # Original HIR IDs: Examples:fibonacci:fibonacci
  # Captured IDs: none
  $2 = %86<Examples:fibonacci:fibonacci:3>
  $3 = %195<{ body_144 }>
  $4 = dup $0 by 1
  $5 = %202<{ body_165 }>
  $6 = trace: start of call of $3<%195<{ body_144 }>> with $0 $5<%202<{ body_165 }>> ($2<%86<Examples:fibonacci:fibonacci:3>> is responsible, code is at $2<%86<Examples:fibonacci:fibonacci:3>>)
  $7 = %90<Examples:fibonacci:recursive:5>
  $8 = %203<{ body_172 }>
  $9 = dup $0 by 1
  $10 = trace: start of call of $8<%203<{ body_172 }>> with $8<%203<{ body_172 }>> $0 ($7<%90<Examples:fibonacci:recursive:5>> is responsible, code is at $7<%90<Examples:fibonacci:recursive:5>>)
  $11 = dup $0 by 1
  $12 = call $8<%203<{ body_172 }>> with $8<%203<{ body_172 }>> $0 ($7<%90<Examples:fibonacci:recursive:5>> is responsible)
  $13 = trace: end of call
  $14 = trace: end of call
  $15 = dup $12 by 1
  $16 = $12
  $17 = drop $12
  $18 = drop $0
  $19 = $16
body_174 $0 (+ responsible $1) =
  # Original HIR IDs: Examples:fibonacci:23:6:14
  # Captured IDs: none
  $2 = %73<Examples:fibonacci:23:6:14:2>
  $3 = %204<{ body_173 }>
  $4 = dup $0 by 1
  $5 = trace: start of call of $3<%204<{ body_173 }>> with $0 ($2<%73<Examples:fibonacci:23:6:14:2>> is responsible, code is at $2<%73<Examples:fibonacci:23:6:14:2>>)
  $6 = %86<Examples:fibonacci:fibonacci:3>
  $7 = %195<{ body_144 }>
  $8 = dup $0 by 1
  $9 = %202<{ body_165 }>
  $10 = trace: start of call of $7<%195<{ body_144 }>> with $0 $9<%202<{ body_165 }>> ($6<%86<Examples:fibonacci:fibonacci:3>> is responsible, code is at $6<%86<Examples:fibonacci:fibonacci:3>>)
  $11 = %90<Examples:fibonacci:recursive:5>
  $12 = %203<{ body_172 }>
  $13 = dup $0 by 1
  $14 = trace: start of call of $12<%203<{ body_172 }>> with $12<%203<{ body_172 }>> $0 ($11<%90<Examples:fibonacci:recursive:5>> is responsible, code is at $11<%90<Examples:fibonacci:recursive:5>>)
  $15 = dup $0 by 1
  $16 = call $12<%203<{ body_172 }>> with $12<%203<{ body_172 }>> $0 ($11<%90<Examples:fibonacci:recursive:5>> is responsible)
  $17 = trace: end of call
  $18 = trace: end of call
  $19 = trace: end of call
  $20 = %108<builtinToDebugText>
  $21 = dup $16 by 1
  $22 = %31<Builtins::toDebugText:5>
  $23 = call $20<%108<builtinToDebugText>> with $16 ($22<%31<Builtins::toDebugText:5>> is responsible)
  $24 = drop $16
  $25 = drop $0
  $26 = $23
body_175 (responsible $0) =
  # Original HIR IDs: Examples:fibonacci:23:6:case-0:didNotMatch
  # Captured IDs: none
  $1 = %135<"Usage: `cargo run -- run fibonacci.candy -- <number>`">
body_176 (responsible $0) =
  # Original HIR IDs: Examples:fibonacci:23:13:doesTagHaveValue:then
  # Captured IDs: none
  $1 = %137<"You called a tag that already has a value.">
  $2 = %70<Examples:fibonacci:23:13>
  $3 = panicking because $1<%137<"You called a tag that already has a value.">> ($2<%70<Examples:fibonacci:23:13>> is at fault)
body_177 (responsible $0) =
  # Original HIR IDs: Examples:fibonacci:23:13:calleeIsFunction:else
  # Captured IDs: none
  $1 = %138<"You can only call tags or functions.">
  $2 = %70<Examples:fibonacci:23:13>
  $3 = panicking because $1<%138<"You can only call tags or functions.">> ($2<%70<Examples:fibonacci:23:13>> is at fault)
body_178 (responsible $1) =
  # Original HIR IDs: Examples:fibonacci:23:6:equals:then
  # Captured IDs: $0
  $2 = %99<builtinListGet>
  $3 = dup $0 by 1
  $4 = %126<0>
  $5 = %72<Examples:fibonacci:23:6>
  $6 = call $2<%99<builtinListGet>> with $0 $4<%126<0>> ($5<%72<Examples:fibonacci:23:6>> is responsible)
  $7 = dup $6 by 1
  $8 = ($6,)
  $9 = dup $8 by 1
  $10 = Match $8
  $11 = drop $8
  $12 = drop $6
  $13 = $10
body_179 (responsible $1) =
  # Original HIR IDs: Examples:fibonacci:23:6:equals:then
  # Captured IDs: $0
  $2 = %100<builtinListLength>
  $3 = dup $0 by 1
  $4 = %72<Examples:fibonacci:23:6>
  $5 = call $2<%100<builtinListLength>> with $0 ($4<%72<Examples:fibonacci:23:6>> is responsible)
  $6 = %92<builtinEquals>
  $7 = %127<1>
  $8 = dup $5 by 1
  $9 = call $6<%92<builtinEquals>> with $7<%127<1>> $5 ($4<%72<Examples:fibonacci:23:6>> is responsible)
  $10 = dup $0 by 1
  $11 = { body_178 capturing $0 }
  $12 = %94<builtinIfElse>
  $13 = dup $9 by 1
  $14 = dup $11 by 1
  $15 = %163<{ body_8 }>
  $16 = call $12<%94<builtinIfElse>> with $9 $11 $15<%163<{ body_8 }>> ($4<%72<Examples:fibonacci:23:6>> is responsible)
  $17 = drop $11
  $18 = drop $9
  $19 = drop $5
  $20 = $16
body_180 (responsible $1) =
  # Original HIR IDs: Examples:fibonacci:23:6:case-0:matched
  # Captured IDs: $0
  $2 = %103<builtinTagGetValue>
  $3 = dup $0 by 1
  $4 = %77<Examples:fibonacci:23:6:n>
  $5 = call $2<%103<builtinTagGetValue>> with $0 ($4<%77<Examples:fibonacci:23:6:n>> is responsible)
  $6 = %99<builtinListGet>
  $7 = dup $5 by 1
  $8 = %126<0>
  $9 = call $6<%99<builtinListGet>> with $5 $8<%126<0>> ($4<%77<Examples:fibonacci:23:6:n>> is responsible)
  $10 = %76<Examples:fibonacci:23:6:7>
  $11 = %169<{ body_16 }>
  $12 = dup $9 by 1
  $13 = trace: start of call of $11<%169<{ body_16 }>> with $9 ($10<%76<Examples:fibonacci:23:6:7>> is responsible, code is at $10<%76<Examples:fibonacci:23:6:7>>)
  $14 = %109<builtinTypeOf>
  $15 = dup $9 by 1
  $16 = %32<Builtins::typeIs:19>
  $17 = call $14<%109<builtinTypeOf>> with $9 ($16<%32<Builtins::typeIs:19>> is responsible)
  $18 = %92<builtinEquals>
  $19 = dup $17 by 1
  $20 = %124<Text>
  $21 = %33<Builtins::typeIs:25>
  $22 = call $18<%92<builtinEquals>> with $17 $20<%124<Text>> ($21<%33<Builtins::typeIs:25>> is responsible)
  $23 = %19<Builtins::intParse:5>
  $24 = %159<{ body_6 }>
  $25 = dup $22 by 1
  $26 = %154<"`text | typeIs Text` was not satisfied">
  $27 = trace: start of call of $24<%159<{ body_6 }>> with $22 $26<%154<"`text | typeIs Text` was not satisfied">> $10<%76<Examples:fibonacci:23:6:7>> ($23<%19<Builtins::intParse:5>> is responsible, code is at $23<%19<Builtins::intParse:5>>)
  $28 = dup $22 by 1
  $29 = call $24<%159<{ body_6 }>> with $22 $26<%154<"`text | typeIs Text` was not satisfied">> $10<%76<Examples:fibonacci:23:6:7>> ($23<%19<Builtins::intParse:5>> is responsible)
  $30 = trace: end of call
  $31 = %97<builtinIntParse>
  $32 = dup $9 by 1
  $33 = %18<Builtins::intParse:11>
  $34 = call $31<%97<builtinIntParse>> with $9 ($33<%18<Builtins::intParse:11>> is responsible)
  $35 = trace: end of call
  $36 = %74<Examples:fibonacci:23:6:15>
  $37 = %188<{ body_125 }>
  $38 = dup $34 by 1
  $39 = %205<{ body_174 }>
  $40 = trace: start of call of $37<%188<{ body_125 }>> with $34 $39<%205<{ body_174 }>> ($36<%74<Examples:fibonacci:23:6:15>> is responsible, code is at $36<%74<Examples:fibonacci:23:6:15>>)
  $41 = dup $34 by 1
  $42 = call $37<%188<{ body_125 }>> with $34 $39<%205<{ body_174 }>> ($36<%74<Examples:fibonacci:23:6:15>> is responsible)
  $43 = trace: end of call
  $44 = %75<Examples:fibonacci:23:6:22>
  $45 = %181<{ body_76 }>
  $46 = dup $42 by 1
  $47 = trace: tail call of $45<%181<{ body_76 }>> with $42 ($44<%75<Examples:fibonacci:23:6:22>> is responsible, code is at $44<%75<Examples:fibonacci:23:6:22>>)
  $48 = dup $42 by 1
  $49 = call $45<%181<{ body_76 }>> with $42 ($44<%75<Examples:fibonacci:23:6:22>> is responsible)
  $50 = drop $42
  $51 = drop $34
  $52 = drop $29
  $53 = drop $22
  $54 = drop $17
  $55 = drop $9
  $56 = drop $5
  $57 = $49
body_181 (responsible $2) =
  # Original HIR IDs: Examples:fibonacci:23:13:doesTagHaveValue:else
  # Captured IDs: $0, $1
  $3 = %105<builtinTagWithValue>
  $4 = dup $1 by 1
  $5 = dup $0 by 1
  $6 = %70<Examples:fibonacci:23:13>
  $7 = call $3<%105<builtinTagWithValue>> with $1 $0 ($6<%70<Examples:fibonacci:23:13>> is responsible)
body_182 (responsible $2) =
  # Original HIR IDs: Examples:fibonacci:23:13:calleeIsTag:then
  # Captured IDs: $0, $1
  $3 = %104<builtinTagHasValue>
  $4 = dup $1 by 1
  $5 = %70<Examples:fibonacci:23:13>
  $6 = call $3<%104<builtinTagHasValue>> with $1 ($5<%70<Examples:fibonacci:23:13>> is responsible)
  $7 = dup $0 by 1
  $8 = dup $1 by 1
  $9 = { body_181 capturing $0, $1 }
  $10 = %94<builtinIfElse>
  $11 = dup $6 by 1
  $12 = %207<{ body_176 }>
  $13 = dup $9 by 1
  $14 = call $10<%94<builtinIfElse>> with $6 $12<%207<{ body_176 }>> $9 ($5<%70<Examples:fibonacci:23:13>> is responsible)
  $15 = drop $9
  $16 = drop $6
  $17 = $14
body_183 (responsible $2) =
  # Original HIR IDs: Examples:fibonacci:23:13:hasCorrectNumberOfArguments:then
  # Captured IDs: $0, $1
  $3 = %70<Examples:fibonacci:23:13>
  $4 = dup $1 by 1
  $5 = dup $0 by 1
  $6 = trace: tail call of $1 with $0 ($3<%70<Examples:fibonacci:23:13>> is responsible, code is at $3<%70<Examples:fibonacci:23:13>>)
  $7 = dup $1 by 1
  $8 = dup $0 by 1
  $9 = call $1 with $0 ($3<%70<Examples:fibonacci:23:13>> is responsible)
body_184 (responsible $1) =
  # Original HIR IDs: Examples:fibonacci:23:13:hasCorrectNumberOfArguments:else
  # Captured IDs: $0
  $2 = %108<builtinToDebugText>
  $3 = dup $0 by 1
  $4 = %70<Examples:fibonacci:23:13>
  $5 = call $2<%108<builtinToDebugText>> with $0 ($4<%70<Examples:fibonacci:23:13>> is responsible)
  $6 = %107<builtinTextConcatenate>
  $7 = %136<"You called a function that expects ">
  $8 = dup $5 by 1
  $9 = call $6<%107<builtinTextConcatenate>> with $7<%136<"You called a function that expects ">> $5 ($4<%70<Examples:fibonacci:23:13>> is responsible)
  $10 = dup $9 by 1
  $11 = %129<" arguments with 1 arguments.">
  $12 = call $6<%107<builtinTextConcatenate>> with $9 $11<%129<" arguments with 1 arguments.">> ($4<%70<Examples:fibonacci:23:13>> is responsible)
  $13 = dup $12 by 1
  $14 = panicking because $12 ($4<%70<Examples:fibonacci:23:13>> is at fault)
  $15 = drop $12
  $16 = drop $9
  $17 = drop $5
  $18 = $14
body_185 (responsible $2) =
  # Original HIR IDs: Examples:fibonacci:23:13:calleeIsFunction:then
  # Captured IDs: $0, $1
  $3 = %93<builtinGetArgumentCount>
  $4 = dup $1 by 1
  $5 = %70<Examples:fibonacci:23:13>
  $6 = call $3<%93<builtinGetArgumentCount>> with $1 ($5<%70<Examples:fibonacci:23:13>> is responsible)
  $7 = %92<builtinEquals>
  $8 = dup $6 by 1
  $9 = %127<1>
  $10 = call $7<%92<builtinEquals>> with $6 $9<%127<1>> ($5<%70<Examples:fibonacci:23:13>> is responsible)
  $11 = dup $0 by 1
  $12 = dup $1 by 1
  $13 = { body_183 capturing $0, $1 }
  $14 = dup $6 by 1
  $15 = { body_184 capturing $6 }
  $16 = %94<builtinIfElse>
  $17 = dup $10 by 1
  $18 = dup $13 by 1
  $19 = dup $15 by 1
  $20 = call $16<%94<builtinIfElse>> with $10 $13 $15 ($5<%70<Examples:fibonacci:23:13>> is responsible)
  $21 = drop $15
  $22 = drop $13
  $23 = drop $10
  $24 = drop $6
  $25 = $20
body_186 (responsible $3) =
  # Original HIR IDs: Examples:fibonacci:23:13:calleeIsTag:else
  # Captured IDs: $0, $1, $2
  $4 = %92<builtinEquals>
  $5 = dup $2 by 1
  $6 = %113<Function>
  $7 = %70<Examples:fibonacci:23:13>
  $8 = call $4<%92<builtinEquals>> with $2 $6<%113<Function>> ($7<%70<Examples:fibonacci:23:13>> is responsible)
  $9 = dup $0 by 1
  $10 = dup $1 by 1
  $11 = { body_185 capturing $0, $1 }
  $12 = %94<builtinIfElse>
  $13 = dup $8 by 1
  $14 = dup $11 by 1
  $15 = %208<{ body_177 }>
  $16 = call $12<%94<builtinIfElse>> with $8 $11 $15<%208<{ body_177 }>> ($7<%70<Examples:fibonacci:23:13>> is responsible)
  $17 = drop $11
  $18 = drop $8
  $19 = $16
body_187 $0 (+ responsible $1) =
  # Original HIR IDs: Examples:fibonacci:23
  # Captured IDs: none
  $2 = %71<Examples:fibonacci:23:5>
  $3 = %171<{ body_18 }>
  $4 = dup $0 by 1
  $5 = %110<Arguments>
  $6 = trace: start of call of $3<%171<{ body_18 }>> with $0 $5<%110<Arguments>> ($2<%71<Examples:fibonacci:23:5>> is responsible, code is at $2<%71<Examples:fibonacci:23:5>>)
  $7 = %109<builtinTypeOf>
  $8 = dup $0 by 1
  $9 = %32<Builtins::typeIs:19>
  $10 = call $7<%109<builtinTypeOf>> with $0 ($9<%32<Builtins::typeIs:19>> is responsible)
  $11 = %92<builtinEquals>
  $12 = dup $10 by 1
  $13 = %122<Struct>
  $14 = %33<Builtins::typeIs:25>
  $15 = call $11<%92<builtinEquals>> with $10 $13<%122<Struct>> ($14<%33<Builtins::typeIs:25>> is responsible)
  $16 = %26<Builtins::structGet:5>
  $17 = %159<{ body_6 }>
  $18 = dup $15 by 1
  $19 = %149<"`struct | typeIs Struct` was not satisfied">
  $20 = trace: start of call of $17<%159<{ body_6 }>> with $15 $19<%149<"`struct | typeIs Struct` was not satisfied">> $2<%71<Examples:fibonacci:23:5>> ($16<%26<Builtins::structGet:5>> is responsible, code is at $16<%26<Builtins::structGet:5>>)
  $21 = dup $15 by 1
  $22 = call $17<%159<{ body_6 }>> with $15 $19<%149<"`struct | typeIs Struct` was not satisfied">> $2<%71<Examples:fibonacci:23:5>> ($16<%26<Builtins::structGet:5>> is responsible)
  $23 = trace: end of call
  $24 = %102<builtinStructHasKey>
  $25 = dup $0 by 1
  $26 = %23<Builtins::structGet:12>
  $27 = call $24<%102<builtinStructHasKey>> with $0 $5<%110<Arguments>> ($26<%23<Builtins::structGet:12>> is responsible)
  $28 = %24<Builtins::structGet:14>
  $29 = dup $27 by 1
  $30 = %150<"`struct | ✨.structHasKey key` was not satisfied">
  $31 = trace: start of call of $17<%159<{ body_6 }>> with $27 $30<%150<"`struct | ✨.structHasKey key` was not satisfied">> $2<%71<Examples:fibonacci:23:5>> ($28<%24<Builtins::structGet:14>> is responsible, code is at $28<%24<Builtins::structGet:14>>)
  $32 = dup $27 by 1
  $33 = call $17<%159<{ body_6 }>> with $27 $30<%150<"`struct | ✨.structHasKey key` was not satisfied">> $2<%71<Examples:fibonacci:23:5>> ($28<%24<Builtins::structGet:14>> is responsible)
  $34 = trace: end of call
  $35 = %101<builtinStructGet>
  $36 = dup $0 by 1
  $37 = %25<Builtins::structGet:21>
  $38 = call $35<%101<builtinStructGet>> with $0 $5<%110<Arguments>> ($37<%25<Builtins::structGet:21>> is responsible)
  $39 = trace: end of call
  $40 = dup $38 by 1
  $41 = %72<Examples:fibonacci:23:6>
  $42 = call $7<%109<builtinTypeOf>> with $38 ($41<%72<Examples:fibonacci:23:6>> is responsible)
  $43 = %116<List>
  $44 = dup $42 by 1
  $45 = call $11<%92<builtinEquals>> with $43<%116<List>> $42 ($41<%72<Examples:fibonacci:23:6>> is responsible)
  $46 = dup $38 by 1
  $47 = { body_179 capturing $38 }
  $48 = %94<builtinIfElse>
  $49 = dup $45 by 1
  $50 = dup $47 by 1
  $51 = %163<{ body_8 }>
  $52 = call $48<%94<builtinIfElse>> with $45 $47 $51<%163<{ body_8 }>> ($41<%72<Examples:fibonacci:23:6>> is responsible)
  $53 = %106<builtinTagWithoutValue>
  $54 = dup $52 by 1
  $55 = call $53<%106<builtinTagWithoutValue>> with $52 ($41<%72<Examples:fibonacci:23:6>> is responsible)
  $56 = dup $55 by 1
  $57 = %117<Match>
  $58 = call $11<%92<builtinEquals>> with $55 $57<%117<Match>> ($41<%72<Examples:fibonacci:23:6>> is responsible)
  $59 = dup $52 by 1
  $60 = { body_180 capturing $52 }
  $61 = dup $58 by 1
  $62 = dup $60 by 1
  $63 = %206<{ body_175 }>
  $64 = call $48<%94<builtinIfElse>> with $58 $60 $63<%206<{ body_175 }>> ($41<%72<Examples:fibonacci:23:6>> is responsible)
  $65 = %69<Examples:fibonacci:23:12>
  $66 = dup $0 by 1
  $67 = %121<Stdout>
  $68 = trace: start of call of $3<%171<{ body_18 }>> with $0 $67<%121<Stdout>> ($65<%69<Examples:fibonacci:23:12>> is responsible, code is at $65<%69<Examples:fibonacci:23:12>>)
  $69 = dup $15 by 1
  $70 = trace: start of call of $17<%159<{ body_6 }>> with $15 $19<%149<"`struct | typeIs Struct` was not satisfied">> $65<%69<Examples:fibonacci:23:12>> ($16<%26<Builtins::structGet:5>> is responsible, code is at $16<%26<Builtins::structGet:5>>)
  $71 = dup $15 by 1
  $72 = call $17<%159<{ body_6 }>> with $15 $19<%149<"`struct | typeIs Struct` was not satisfied">> $65<%69<Examples:fibonacci:23:12>> ($16<%26<Builtins::structGet:5>> is responsible)
  $73 = trace: end of call
  $74 = dup $0 by 1
  $75 = call $24<%102<builtinStructHasKey>> with $0 $67<%121<Stdout>> ($26<%23<Builtins::structGet:12>> is responsible)
  $76 = dup $75 by 1
  $77 = trace: start of call of $17<%159<{ body_6 }>> with $75 $30<%150<"`struct | ✨.structHasKey key` was not satisfied">> $65<%69<Examples:fibonacci:23:12>> ($28<%24<Builtins::structGet:14>> is responsible, code is at $28<%24<Builtins::structGet:14>>)
  $78 = dup $75 by 1
  $79 = call $17<%159<{ body_6 }>> with $75 $30<%150<"`struct | ✨.structHasKey key` was not satisfied">> $65<%69<Examples:fibonacci:23:12>> ($28<%24<Builtins::structGet:14>> is responsible)
  $80 = trace: end of call
  $81 = dup $0 by 1
  $82 = call $35<%101<builtinStructGet>> with $0 $67<%121<Stdout>> ($37<%25<Builtins::structGet:21>> is responsible)
  $83 = trace: end of call
  $84 = dup $82 by 1
  $85 = %70<Examples:fibonacci:23:13>
  $86 = call $7<%109<builtinTypeOf>> with $82 ($85<%70<Examples:fibonacci:23:13>> is responsible)
  $87 = dup $86 by 1
  $88 = %123<Tag>
  $89 = call $11<%92<builtinEquals>> with $86 $88<%123<Tag>> ($85<%70<Examples:fibonacci:23:13>> is responsible)
  $90 = dup $64 by 1
  $91 = dup $82 by 1
  $92 = { body_182 capturing $64, $82 }
  $93 = dup $64 by 1
  $94 = dup $82 by 1
  $95 = dup $86 by 1
  $96 = { body_186 capturing $64, $82, $86 }
  $97 = dup $89 by 1
  $98 = dup $92 by 1
  $99 = dup $96 by 1
  $100 = call $48<%94<builtinIfElse>> with $89 $92 $96 ($85<%70<Examples:fibonacci:23:13>> is responsible)
  $101 = drop $96
  $102 = drop $92
  $103 = drop $89
  $104 = drop $86
  $105 = drop $82
  $106 = drop $79
  $107 = drop $75
  $108 = drop $72
  $109 = drop $64
  $110 = drop $60
  $111 = drop $58
  $112 = drop $55
  $113 = drop $52
  $114 = drop $47
  $115 = drop $45
  $116 = drop $42
  $117 = drop $38
  $118 = drop $33
  $119 = drop $27
  $120 = drop $22
  $121 = drop $15
  $122 = drop $10
  $123 = drop $0
  $124 = $100
body_188 (responsible $0) =
  # Original HIR IDs: Examples:fibonacci:
  # Captured IDs: none
  $1 = %209<{ body_187 }>
