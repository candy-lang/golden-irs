# AST for module Examples:fibonacci
assignment: identifier $6@"builtins" = 
  call identifier $0@"use" with these arguments:
    text
      textPart $2@"Builtins"
assignment: $44@"recursive" = function (fuzzable) { identifier $45@"initialArg" identifier $47@"body" ->
  assignment: identifier $34@"recurse" = 
    function (non-fuzzable) { identifier $9@"recurse" identifier $11@"arg" ->
      assignment: identifier $23@"rec" = 
        function (non-fuzzable) { identifier $13@"arg" ->
          call identifier $15@"recurse" with these arguments:
            identifier $17@"recurse"
            identifier $19@"arg"
        }
      call identifier $26@"body" with these arguments:
        identifier $28@"rec"
        identifier $30@"arg"
    }
  call identifier $37@"recurse" with these arguments:
    identifier $39@"recurse"
    identifier $41@"initialArg"
}
assignment: $65@"compareTo" = function (fuzzable) { identifier $66@"valueA" identifier $68@"valueB" ->
  assignment: identifier $60@"result" = 
    call struct access identifier $52@"builtins".$54@"IntCompareTo" with these arguments:
      identifier $50@"valueA"
      identifier $56@"valueB"
  identifier $63@"result"
}
assignment: $85@"isLessThan" = function (fuzzable) { identifier $86@"valueA" identifier $88@"valueB" ->
  call struct access identifier $71@"builtins".$73@"Equals" with these arguments:
    call identifier $75@"compareTo" with these arguments:
      identifier $77@"valueA"
      identifier $79@"valueB"
    symbol $82@"Less"
}
assignment: $147@"fibonacci" = function (fuzzable) { identifier $148@"n" ->
  call identifier $91@"recursive" with these arguments:
    identifier $93@"n"
    function (non-fuzzable) { identifier $95@"recurse" identifier $97@"n" ->
      call struct access identifier $99@"builtins".$101@"IfElse" with these arguments:
        call identifier $105@"isLessThan" with these arguments:
          identifier $103@"n"
          int 2
        function (non-fuzzable) {
          identifier $110@"n"
        }
        function (non-fuzzable) {
          call struct access identifier $125@"builtins".$127@"IntAdd" with these arguments:
            call identifier $113@"recurse" with these arguments:
              call struct access identifier $117@"builtins".$119@"IntSubtract" with these arguments:
                identifier $115@"n"
                int 1
            call identifier $129@"recurse" with these arguments:
              call struct access identifier $133@"builtins".$135@"IntSubtract" with these arguments:
                identifier $131@"n"
                int 2
        }
    }
}
assignment: $155@"main" := function (fuzzable) { identifier $156@"environment" ->
  call identifier $151@"fibonacci" with these arguments:
    int 15
}
