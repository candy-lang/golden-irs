# RCST for module Examples:fibonacci
Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("builtins") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("use") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Text { opening: Cst { data: (), kind: OpeningText { opening_single_quotes: [], opening_double_quote: Cst { data: (), kind: DoubleQuote } } }, parts: [Cst { data: (), kind: TextPart("Builtins") }], closing: Cst { data: (), kind: ClosingText { closing_double_quote: Cst { data: (), kind: DoubleQuote }, closing_single_quotes: [] } } } }] } }] } }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Comment { octothorpe: Cst { data: (), kind: Octothorpe }, comment: " [ifElse, int, recursive] = use \"Core\"" } }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("recursive") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("initialArg") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: Identifier("body") }] } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }] } }, body: [Cst { data: (), kind: Comment { octothorpe: Cst { data: (), kind: Octothorpe }, comment: " needs" } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Comment { octothorpe: Cst { data: (), kind: Octothorpe }, comment: "   function.is2 body" } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Comment { octothorpe: Cst { data: (), kind: Octothorpe }, comment: "   \"The `body` should take the recursive function and the argument.\"" } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("recurse") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: Function { opening_curly_brace: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: OpeningCurlyBrace }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, parameters_and_arrow: Some(([Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("recurse") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("arg") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }], Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Arrow }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("    ") }] } })), body: [Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("rec") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: Function { opening_curly_brace: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: OpeningCurlyBrace }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, parameters_and_arrow: Some(([Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("arg") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }], Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Arrow }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } })), body: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("recurse") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("recurse") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: Identifier("arg") }] } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }], closing_curly_brace: Cst { data: (), kind: ClosingCurlyBrace } } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("    ") }, Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("body") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("rec") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: Identifier("arg") }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }], closing_curly_brace: Cst { data: (), kind: ClosingCurlyBrace } } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("recurse") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("recurse") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: Identifier("initialArg") }] } }] } }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("compareTo") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("valueA") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: Identifier("valueB") }] } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }] } }, body: [Cst { data: (), kind: Comment { octothorpe: Cst { data: (), kind: Octothorpe }, comment: " needs (is valueA)" } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Comment { octothorpe: Cst { data: (), kind: Octothorpe }, comment: " needs (is valueB)" } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("result") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("valueA") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("builtins") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("intCompareTo") } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Identifier("valueB") }] } } } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Comment { octothorpe: Cst { data: (), kind: Octothorpe }, comment: " check (equals result Equal | bool.implies (equals valueA valueB))" } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Comment { octothorpe: Cst { data: (), kind: Octothorpe }, comment: " check ((equals result Equal) | bool.implies (equals valueA valueB))" } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Identifier("result") }] } }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("isLessThan") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("valueA") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: Identifier("valueB") }] } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }] } }, body: [Cst { data: (), kind: Comment { octothorpe: Cst { data: (), kind: Octothorpe }, comment: " needs (is valueA)" } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Comment { octothorpe: Cst { data: (), kind: Octothorpe }, comment: " needs (is valueB)" } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("builtins") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("equals") } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Parenthesized { opening_parenthesis: Cst { data: (), kind: OpeningParenthesis }, inner: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("compareTo") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("valueA") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: Identifier("valueB") }] } }, closing_parenthesis: Cst { data: (), kind: ClosingParenthesis } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: Symbol("Less") }] } }] } }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("fibonacci") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Identifier("n") }] } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }] } }, body: [Cst { data: (), kind: Comment { octothorpe: Cst { data: (), kind: Octothorpe }, comment: " needs (int.is n)" } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("recursive") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("n") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: Function { opening_curly_brace: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: OpeningCurlyBrace }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, parameters_and_arrow: Some(([Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("recurse") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("n") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }], Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Arrow }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("    ") }] } })), body: [Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("builtins") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("ifElse") } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Parenthesized { opening_parenthesis: Cst { data: (), kind: OpeningParenthesis }, inner: Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("n") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("isLessThan") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Int { value: 2, string: "2" } }] } } } }, closing_parenthesis: Cst { data: (), kind: ClosingParenthesis } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Function { opening_curly_brace: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: OpeningCurlyBrace }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, parameters_and_arrow: None, body: [Cst { data: (), kind: Identifier("n") }, Cst { data: (), kind: Whitespace(" ") }], closing_curly_brace: Cst { data: (), kind: ClosingCurlyBrace } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: Function { opening_curly_brace: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: OpeningCurlyBrace }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("      ") }] } }, parameters_and_arrow: None, body: [Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("recurse") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Parenthesized { opening_parenthesis: Cst { data: (), kind: OpeningParenthesis }, inner: Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("n") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("builtins") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("intSubtract") } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Int { value: 1, string: "1" } }] } } } }, closing_parenthesis: Cst { data: (), kind: ClosingParenthesis } } }] } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("builtins") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("intAdd") } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Parenthesized { opening_parenthesis: Cst { data: (), kind: OpeningParenthesis }, inner: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("recurse") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Parenthesized { opening_parenthesis: Cst { data: (), kind: OpeningParenthesis }, inner: Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("n") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("builtins") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("intSubtract") } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Int { value: 2, string: "2" } }] } } } }, closing_parenthesis: Cst { data: (), kind: ClosingParenthesis } } }] } }, closing_parenthesis: Cst { data: (), kind: ClosingParenthesis } } }] } } } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("    ") }], closing_curly_brace: Cst { data: (), kind: ClosingCurlyBrace } } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }], closing_curly_brace: Cst { data: (), kind: ClosingCurlyBrace } } }] } }] } }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("main") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Identifier("environment") }] } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: ColonEqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("fibonacci") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Int { value: 16, string: "16" } }] } }] } }
Cst { data: (), kind: Whitespace(" ") }
Cst { data: (), kind: Comment { octothorpe: Cst { data: (), kind: Octothorpe }, comment: " 610" } }
Cst { data: (), kind: Newline("\n") }
