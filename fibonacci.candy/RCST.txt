# RCST for module Examples:fibonacci
Cst { data: (), kind: Error { unparsable_input: "builtins = use \"Builtins\"\n# [ifElse, int, recursive] = use \"Core\"\n\nrecursive initialArg body =\n  # needs\n  #   function.is2 body\n  #   \"The `body` should take the recursive function and the argument.\"\n  recurse = { recurse arg ->\n    rec = { arg -> recurse recurse arg }\n    body rec arg\n  }\n  recurse recurse initialArg\n\ncompareTo valueA valueB =\n  # needs (is valueA)\n  # needs (is valueB)\n  result = valueA | builtins.intCompareTo valueB\n  # check (equals result Equal | bool.implies (equals valueA valueB))\n  # check ((equals result Equal) | bool.implies (equals valueA valueB))\n  result\nisLessThan valueA valueB =\n  # needs (is valueA)\n  # needs (is valueB)\n  builtins.equals (compareTo valueA valueB) Less\n\nfibonacci n =\n  # needs (int.is n)\n  recursive n { recurse n ->\n    builtins.ifElse (n | isLessThan 2) { n } {\n      recurse (n | builtins.intSubtract 1) | builtins.intAdd (recurse (n | builtins.intSubtract 2))\n    }\n  }\n\nmain environment := fibonacci 15 # 610", error: UnparsedRest } }
Cst { data: (), kind: Newline("\n") }
